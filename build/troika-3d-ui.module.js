import { Texture, LinearFilter, Color, InstancedBufferGeometry, Sphere, Box3, BackSide, DoubleSide, InstancedBufferAttribute, PlaneBufferGeometry, BufferGeometry, Float32BufferAttribute, ShaderChunk, UniformsUtils, MeshDepthMaterial, RGBADepthPacking, MeshDistanceMaterial, Matrix4, Vector2, Vector4, Matrix3, MeshBasicMaterial, Vector3, Mesh, FrontSide, Raycaster, Quaternion, BoxGeometry, CircleGeometry, PlaneGeometry, SphereGeometry, Object3D, PerspectiveCamera, OrthographicCamera, WebGLRenderer, LinearSRGBColorSpace, NoToneMapping, MeshLambertMaterial, MeshMatcapMaterial, MeshNormalMaterial, MeshPhongMaterial, MeshPhysicalMaterial, MeshStandardMaterial, MeshToonMaterial, Frustum, Ray, Group, Scene, ShaderLib, FogExp2, Fog, HemisphereLightHelper, HemisphereLight, AmbientLight, DirectionalLightHelper, DirectionalLight, SpotLightHelper, SpotLight, PointLightHelper, PointLight, RectAreaLight, BoxBufferGeometry, Plane, CylinderGeometry, TextureLoader } from 'three';

/**
 * Lightweight thenable implementation that is entirely self-contained within a single
 * function with no external dependencies so it can be easily shipped across to a WorkerModule.
 *
 * This implementation conforms fully to the Promises/A+ spec so it can safely interoperate
 * with other thenable implementations. https://github.com/promises-aplus/promises-spec
 *
 * *However*, it is _not_ a full implementation of ES2015 Promises, e.g. it does not
 * have the same constructor signature and does not expose a `catch` method or the static
 * `resolve`/`reject`/`all`/`race` initializer methods. If you need to hand a Thenable
 * instance off to consuming code that may expect a true Promise, you'll want to wrap it
 * in a native-or-polyfilled Promise first.
 *
 * (Why yet another Promises/A+ implementation? Great question. We needed a polyfill-like
 * thing that was (a) wrapped in a single function for easy serialization across to a Worker,
 * and (b) was as small as possible -- at ~900B minified (~500B gzipped) this is the smallest
 * implementation I've found. And also, exercises like this are challenging and fun.)
 */
function BespokeThenable() {
  let state = 0; // 0=pending, 1=fulfilled, -1=rejected
  let queue = [];
  let value;
  let scheduled = 0;
  let completeCalled = 0;

  function then(onResolve, onReject) {
    const nextThenable = BespokeThenable();

    function handleNext() {
      const cb = state > 0 ? onResolve : onReject;
      if (isFn(cb)) {
        try {
          const result = cb(value);
          if (result === nextThenable) {
            recursiveError();
          }
          const resultThen = getThenableThen(result);
          if (resultThen) {
            resultThen.call(result, nextThenable.resolve, nextThenable.reject);
          } else {
            nextThenable.resolve(result);
          }
        } catch (err) {
          nextThenable.reject(err);
        }
      } else {
        nextThenable[state > 0 ? 'resolve' : 'reject'](value);
      }
    }

    queue.push(handleNext);
    if (state) {
      scheduleQueueFlush();
    }
    return nextThenable
  }

  const resolve = oneTime(val => {
    if (!completeCalled) {
      complete(1, val);
    }
  });

  const reject = oneTime(reason => {
    if (!completeCalled) {
      complete(-1, reason);
    }
  });

  function complete(st, val) {
    completeCalled++;
    let ignoreThrow = 0;
    try {
      if (val === thenableObj) {
        recursiveError();
      }
      const valThen = st > 0 && getThenableThen(val);
      if (valThen) {
        valThen.call(val, oneTime(v => {
          ignoreThrow++;
          complete(1, v);
        }), oneTime(v => {
          ignoreThrow++;
          complete(-1, v);
        }));
      } else {
        state = st;
        value = val;
        scheduleQueueFlush();
      }
    } catch(e) {
      if (!state && !ignoreThrow) {
        complete(-1, e);
      }
    }
  }

  function scheduleQueueFlush() {
    if (!scheduled) {
      setTimeout(flushQueue, 0); //TODO setImmediate or postMessage approach if available?
      scheduled = 1;
    }
  }

  function flushQueue() {
    const q = queue;
    scheduled = 0;
    queue = [];
    q.forEach(callIt);
  }

  function callIt(fn) {
    fn();
  }

  function getThenableThen(val) {
    const valThen = val && (isFn(val) || typeof val === 'object') && val.then;
    return isFn(valThen) && valThen
  }

  function oneTime(fn) {
    let called = 0;
    return function(...args) {
      if (!called++) {
        fn.apply(this, args);
      }
    }
  }

  function recursiveError() {
    throw new TypeError('Chaining cycle detected')
  }

  const isFn = v => typeof v === 'function';

  const thenableObj = {
    then,
    resolve,
    reject
  };
  return thenableObj
}


/**
 * Thenable implementation that uses a native Promise under the covers. This implementation
 * is preferred if Promise is available, for better performance and dev tools integration.
 * @constructor
 */
function NativePromiseThenable() {
  let resolve, reject;
  const promise = new Promise((res, rej) => {
    resolve = res;
    reject = rej;
  });
  return {
    then: promise.then.bind(promise),
    resolve,
    reject
  }
}

/**
 * Promise.all() impl:
 */
BespokeThenable.all = NativePromiseThenable.all = function(items) {
  let resultCount = 0;
  let results = [];
  let out = DefaultThenable();
  if (items.length === 0) {
    out.resolve([]);
  } else {
    items.forEach((item, i) => {
      let itemThenable = DefaultThenable();
      itemThenable.resolve(item);
      itemThenable.then(res => {
        resultCount++;
        results[i] = res;
        if (resultCount === items.length) {
          out.resolve(results);
        }
      }, out.reject);
    });
  }
  return out
};


/**
 * Choose the best Thenable implementation and export it as the default.
 */
const DefaultThenable = typeof Promise === 'function' ? NativePromiseThenable : BespokeThenable;

/**
 * Main content for the worker that handles the loading and execution of
 * modules within it.
 */
function workerBootstrap() {
  const modules = Object.create(null);

  // Handle messages for registering a module
  function registerModule({id, name, dependencies=[], init=function(){}, getTransferables=null}, callback) {
    // Only register once
    if (modules[id]) return

    try {
      // If any dependencies are modules, ensure they're registered and grab their value
      dependencies = dependencies.map(dep => {
        if (dep && dep.isWorkerModule) {
          registerModule(dep, depResult => {
            if (depResult instanceof Error) throw depResult
          });
          dep = modules[dep.id].value;
        }
        return dep
      });

      // Rehydrate functions
      init = rehydrate(`<${name}>.init`, init);
      if (getTransferables) {
        getTransferables = rehydrate(`<${name}>.getTransferables`, getTransferables);
      }

      // Initialize the module and store its value
      let value = null;
      if (typeof init === 'function') {
        value = init(...dependencies);
      } else {
      }
      modules[id] = {
        id,
        value,
        getTransferables
      };
      callback(value);
    } catch(err) {
      if (!(err && err.noLog)) ;
      callback(err);
    }
  }

  // Handle messages for calling a registered module's result function
  function callModule({id, args}, callback) {
    if (!modules[id] || typeof modules[id].value !== 'function') {
      callback(new Error(`Worker module ${id}: not found or its 'init' did not return a function`));
    }
    try {
      const result = modules[id].value(...args);
      if (result && typeof result.then === 'function') {
        result.then(handleResult, rej => callback(rej instanceof Error ? rej : new Error('' + rej)));
      } else {
        handleResult(result);
      }
    } catch(err) {
      callback(err);
    }
    function handleResult(result) {
      try {
        let tx = modules[id].getTransferables && modules[id].getTransferables(result);
        if (!tx || !Array.isArray(tx) || !tx.length) {
          tx = undefined; //postMessage is very picky about not passing null or empty transferables
        }
        callback(result, tx);
      } catch(err) {
        callback(err);
      }
    }
  }

  function rehydrate(name, str) {
    let result = void 0;
    self.troikaDefine = r => result = r;
    let url = URL.createObjectURL(
      new Blob(
        [`/** ${name.replace(/\*/g, '')} **/\n\ntroikaDefine(\n${str}\n)`],
        {type: 'application/javascript'}
      )
    );
    try {
      importScripts(url);
    } catch(err) {
    }
    URL.revokeObjectURL(url);
    delete self.troikaDefine;
    return result
  }

  // Handler for all messages within the worker
  self.addEventListener('message', e => {
    const {messageId, action, data} = e.data;
    try {
      // Module registration
      if (action === 'registerModule') {
        registerModule(data, result => {
          if (result instanceof Error) {
            postMessage({
              messageId,
              success: false,
              error: result.message
            });
          } else {
            postMessage({
              messageId,
              success: true,
              result: {isCallable: typeof result === 'function'}
            });
          }
        });
      }
      // Invocation
      if (action === 'callModule') {
        callModule(data, (result, transferables) => {
          if (result instanceof Error) {
            postMessage({
              messageId,
              success: false,
              error: result.message
            });
          } else {
            postMessage({
              messageId,
              success: true,
              result
            }, transferables || undefined);
          }
        });
      }
    } catch(err) {
      postMessage({
        messageId,
        success: false,
        error: err.stack
      });
    }
  });
}

/**
 * Fallback for `defineWorkerModule` that behaves identically but runs in the main
 * thread, for when the execution environment doesn't support web workers or they
 * are disallowed due to e.g. CSP security restrictions.
 */
function defineMainThreadModule(options) {
  let moduleFunc = function(...args) {
    return moduleFunc._getInitResult().then(initResult => {
      if (typeof initResult === 'function') {
        return initResult(...args)
      } else {
        throw new Error('Worker module function was called but `init` did not return a callable function')
      }
    })
  };
  moduleFunc._getInitResult = function() {
    // We can ignore getTransferables in main thread. TODO workerId?
    let {dependencies, init} = options;

    // Resolve dependencies
    dependencies = Array.isArray(dependencies) ? dependencies.map(dep =>
      dep && dep._getInitResult ? dep._getInitResult() : dep
    ) : [];

    // Invoke init with the resolved dependencies
    let initThenable = DefaultThenable.all(dependencies).then(deps => {
      return init.apply(null, deps)
    });

    // Cache the resolved promise for subsequent calls
    moduleFunc._getInitResult = () => initThenable;

    return initThenable
  };
  return moduleFunc
}

let supportsWorkers = () => {
  let supported = false;

  // Only attempt worker initialization in browsers; elsewhere it would just be
  // noise e.g. loading into a Node environment for SSR.
  if (typeof window !== 'undefined' && typeof window.document !== 'undefined') {
    try {
      // TODO additional checks for things like importScripts within the worker?
      //  Would need to be an async check.
      let worker = new Worker(
        URL.createObjectURL(new Blob([''], { type: 'application/javascript' }))
      );
      worker.terminate();
      supported = true;
    } catch (err) {
    }
  }

  // Cached result
  supportsWorkers = () => supported;
  return supported
};

let _workerModuleId = 0;
let _messageId = 0;
let _allowInitAsString = false;
const workers = Object.create(null);
const registeredModules = Object.create(null); //workerId -> Set<unregisterFn>
const openRequests = Object.create(null);


/**
 * Define a module of code that will be executed with a web worker. This provides a simple
 * interface for moving chunks of logic off the main thread, and managing their dependencies
 * among one another.
 *
 * @param {object} options
 * @param {function} options.init
 * @param {array} [options.dependencies]
 * @param {function} [options.getTransferables]
 * @param {string} [options.name]
 * @param {string} [options.workerId]
 * @return {function(...[*]): {then}}
 */
function defineWorkerModule(options) {
  if ((!options || typeof options.init !== 'function') && !_allowInitAsString) {
    throw new Error('requires `options.init` function')
  }
  let {dependencies, init, getTransferables, workerId} = options;

  if (!supportsWorkers()) {
    return defineMainThreadModule(options)
  }

  if (workerId == null) {
    workerId = '#default';
  }
  const id = `workerModule${++_workerModuleId}`;
  const name = options.name || id;
  let registrationThenable = null;

  dependencies = dependencies && dependencies.map(dep => {
    // Wrap raw functions as worker modules with no dependencies
    if (typeof dep === 'function' && !dep.workerModuleData) {
      _allowInitAsString = true;
      dep = defineWorkerModule({
        workerId,
        name: `<${name}> function dependency: ${dep.name}`,
        init: `function(){return (\n${stringifyFunction(dep)}\n)}`
      });
      _allowInitAsString = false;
    }
    // Grab postable data for worker modules
    if (dep && dep.workerModuleData) {
      dep = dep.workerModuleData;
    }
    return dep
  });

  function moduleFunc(...args) {
    // Register this module if needed
    if (!registrationThenable) {
      registrationThenable = callWorker(workerId,'registerModule', moduleFunc.workerModuleData);
      const unregister = () => {
        registrationThenable = null;
        registeredModules[workerId].delete(unregister);
      }
      ;(registeredModules[workerId] || (registeredModules[workerId] = new Set())).add(unregister);
    }

    // Invoke the module, returning a thenable
    return registrationThenable.then(({isCallable}) => {
      if (isCallable) {
        return callWorker(workerId,'callModule', {id, args})
      } else {
        throw new Error('Worker module function was called but `init` did not return a callable function')
      }
    })
  }
  moduleFunc.workerModuleData = {
    isWorkerModule: true,
    id,
    name,
    dependencies,
    init: stringifyFunction(init),
    getTransferables: getTransferables && stringifyFunction(getTransferables)
  };
  return moduleFunc
}

/**
 * Terminate an active Worker by a workerId that was passed to defineWorkerModule.
 * This only terminates the Worker itself; the worker module will remain available
 * and if you call it again its Worker will be respawned.
 * @param {string} workerId
 */
function terminateWorker(workerId) {
  // Unregister all modules that were registered in that worker
  if (registeredModules[workerId]) {
    registeredModules[workerId].forEach(unregister => {
      unregister();
    });
  }
  // Terminate the Worker object
  if (workers[workerId]) {
    workers[workerId].terminate();
    delete workers[workerId];
  }
}

/**
 * Stringifies a function into a form that can be deserialized in the worker
 * @param fn
 */
function stringifyFunction(fn) {
  let str = fn.toString();
  // If it was defined in object method/property format, it needs to be modified
  if (!/^function/.test(str) && /^\w+\s*\(/.test(str)) {
    str = 'function ' + str;
  }
  return str
}


function getWorker(workerId) {
  let worker = workers[workerId];
  if (!worker) {
    // Bootstrap the worker's content
    const bootstrap = stringifyFunction(workerBootstrap);

    // Create the worker from the bootstrap function content
    worker = workers[workerId] = new Worker(
      URL.createObjectURL(
        new Blob(
          [`/** Worker Module Bootstrap: ${workerId.replace(/\*/g, '')} **/\n\n;(${bootstrap})()`],
          {type: 'application/javascript'}
        )
      )
    );

    // Single handler for response messages from the worker
    worker.onmessage = e => {
      const response = e.data;
      const msgId = response.messageId;
      const callback = openRequests[msgId];
      if (!callback) {
        throw new Error('WorkerModule response with empty or unknown messageId')
      }
      delete openRequests[msgId];
      callback(response);
    };
  }
  return worker
}

// Issue a call to the worker with a callback to handle the response
function callWorker(workerId, action, data) {
  const thenable = DefaultThenable();
  const messageId = ++_messageId;
  openRequests[messageId] = response => {
    if (response.success) {
      thenable.resolve(response.result);
    } else {
      thenable.reject(new Error(`Error in worker ${action} call: ${response.error}`));
    }
  };
  getWorker(workerId).postMessage({
    messageId,
    action,
    data
  });
  return thenable
}

/**
 * Just the {@link Thenable} function wrapped as a worker module. If another worker
 * module needs Thenable as a dependency, it's better to pass this module rather than
 * the raw function in its `dependencies` array so it only gets registered once.
 */
var ThenableWorkerModule = /*#__PURE__*/defineWorkerModule({
  name: 'Thenable',
  dependencies: [DefaultThenable],
  init: function(Thenable) {
    return Thenable
  }
});

/**
 * Factory function that creates a self-contained environment for processing text typesetting requests.
 *
 * It is important that this function has no closure dependencies, so that it can be easily injected
 * into the source for a Worker without requiring a build step or complex dependency loading. All its
 * dependencies must be passed in at initialization.
 *
 * @param {function} fontParser - a function that accepts an ArrayBuffer of the font data and returns
 * a standardized structure giving access to the font and its glyphs:
 *   {
 *     unitsPerEm: number,
 *     ascender: number,
 *     descender: number,
 *     forEachGlyph(string, fontSize, letterSpacing, callback) {
 *       //invokes callback for each glyph to render, passing it an object:
 *       callback({
 *         index: number,
 *         advanceWidth: number,
 *         xMin: number,
 *         yMin: number,
 *         xMax: number,
 *         yMax: number,
 *         pathCommandCount: number,
 *         forEachPathCommand(callback) {
 *           //invokes callback for each path command, with args:
 *           callback(
 *             type: 'M|L|C|Q|Z',
 *             ...args //0 to 6 args depending on the type
 *           )
 *         }
 *       })
 *     }
 *   }
 * @param {object} bidi - the bidi.js implementation object
 * @param {Object} config
 * @return {Object}
 */
function createTypesetter(fontParser, bidi, config) {

  const {
    defaultFontURL
  } = config;

  /**
   * Holds parsed font objects by url
   */
  const fonts = Object.create(null);

  const INF = Infinity;

  // Set of Unicode Default_Ignorable_Code_Point characters, these will not produce visible glyphs
  const DEFAULT_IGNORABLE_CHARS = /[\u00AD\u034F\u061C\u115F-\u1160\u17B4-\u17B5\u180B-\u180E\u200B-\u200F\u202A-\u202E\u2060-\u206F\u3164\uFE00-\uFE0F\uFEFF\uFFA0\uFFF0-\uFFF8]/;

  // Incomplete set of characters that allow line breaking after them
  // In the future we may consider a full Unicode line breaking algorithm impl: https://www.unicode.org/reports/tr14
  const BREAK_AFTER_CHARS = /[\s\-\u007C\u00AD\u2010\u2012-\u2014\u2027\u2056\u2E17\u2E40]/;

  /**
   * Load a given font url
   */
  function doLoadFont(url, callback) {
    function tryLoad() {
      const onError = err => {
        if (url !== defaultFontURL) {
          url = defaultFontURL;
          tryLoad();
        }
      };
      try {
        const request = new XMLHttpRequest();
        request.open('get', url, true);
        request.responseType = 'arraybuffer';
        request.onload = function () {
          if (request.status >= 400) {
            onError(new Error(request.statusText));
          }
          else if (request.status > 0) {
            try {
              const fontObj = fontParser(request.response);
              callback(fontObj);
            } catch (e) {
              onError(e);
            }
          }
        };
        request.onerror = onError;
        request.send();
      } catch(err) {
        onError();
      }
    }
    tryLoad();
  }


  /**
   * Load a given font url if needed, invoking a callback when it's loaded. If already
   * loaded, the callback will be called synchronously.
   */
  function loadFont(fontUrl, callback) {
    if (!fontUrl) fontUrl = defaultFontURL;
    let font = fonts[fontUrl];
    if (font) {
      // if currently loading font, add to callbacks, otherwise execute immediately
      if (font.pending) {
        font.pending.push(callback);
      } else {
        callback(font);
      }
    } else {
      fonts[fontUrl] = {pending: [callback]};
      doLoadFont(fontUrl, fontObj => {
        let callbacks = fonts[fontUrl].pending;
        fonts[fontUrl] = fontObj;
        callbacks.forEach(cb => cb(fontObj));
      });
    }
  }


  /**
   * Main entry point.
   * Process a text string with given font and formatting parameters, and return all info
   * necessary to render all its glyphs.
   */
  function typeset(
    {
      text='',
      font=defaultFontURL,
      sdfGlyphSize=64,
      fontSize=1,
      letterSpacing=0,
      lineHeight='normal',
      maxWidth=INF,
      direction,
      textAlign='left',
      textIndent=0,
      whiteSpace='normal',
      overflowWrap='normal',
      anchorX = 0,
      anchorY = 0,
      includeCaretPositions=false,
      chunkedBoundsSize=8192,
      colorRanges=null
    },
    callback,
    metricsOnly=false
  ) {
    const mainStart = now();
    const timings = {fontLoad: 0, typesetting: 0};

    // Ensure newlines are normalized
    if (text.indexOf('\r') > -1) {
      text = text.replace(/\r\n/g, '\n').replace(/\r/g, '\n');
    }

    // Ensure we've got numbers not strings
    fontSize = +fontSize;
    letterSpacing = +letterSpacing;
    maxWidth = +maxWidth;
    lineHeight = lineHeight || 'normal';
    textIndent = +textIndent;

    loadFont(font, fontObj => {
      const hasMaxWidth = isFinite(maxWidth);
      let glyphIds = null;
      let glyphPositions = null;
      let glyphData = null;
      let glyphColors = null;
      let caretPositions = null;
      let visibleBounds = null;
      let chunkedBounds = null;
      let maxLineWidth = 0;
      let renderableGlyphCount = 0;
      let canWrap = whiteSpace !== 'nowrap';
      const {ascender, descender, unitsPerEm} = fontObj;
      timings.fontLoad = now() - mainStart;
      const typesetStart = now();

      // Find conversion between native font units and fontSize units; this will already be done
      // for the gx/gy values below but everything else we'll need to convert
      const fontSizeMult = fontSize / unitsPerEm;

      // Determine appropriate value for 'normal' line height based on the font's actual metrics
      // TODO this does not guarantee individual glyphs won't exceed the line height, e.g. Roboto; should we use yMin/Max instead?
      if (lineHeight === 'normal') {
        lineHeight = (ascender - descender) / unitsPerEm;
      }

      // Determine line height and leading adjustments
      lineHeight = lineHeight * fontSize;
      const halfLeading = (lineHeight - (ascender - descender) * fontSizeMult) / 2;
      const topBaseline = -(ascender * fontSizeMult + halfLeading);
      const caretHeight = Math.min(lineHeight, (ascender - descender) * fontSizeMult);
      const caretBottomOffset = (ascender + descender) / 2 * fontSizeMult - caretHeight / 2;

      // Distribute glyphs into lines based on wrapping
      let lineXOffset = textIndent;
      let currentLine = new TextLine();
      const lines = [currentLine];

      fontObj.forEachGlyph(text, fontSize, letterSpacing, (glyphObj, glyphX, charIndex) => {
        const char = text.charAt(charIndex);
        const glyphWidth = glyphObj.advanceWidth * fontSizeMult;
        const curLineCount = currentLine.count;
        let nextLine;

        // Calc isWhitespace and isEmpty once per glyphObj
        if (!('isEmpty' in glyphObj)) {
          glyphObj.isWhitespace = !!char && /\s/.test(char);
          glyphObj.canBreakAfter = !!char && BREAK_AFTER_CHARS.test(char);
          glyphObj.isEmpty = glyphObj.xMin === glyphObj.xMax || glyphObj.yMin === glyphObj.yMax || DEFAULT_IGNORABLE_CHARS.test(char);
        }
        if (!glyphObj.isWhitespace && !glyphObj.isEmpty) {
          renderableGlyphCount++;
        }

        // If a non-whitespace character overflows the max width, we need to soft-wrap
        if (canWrap && hasMaxWidth && !glyphObj.isWhitespace && glyphX + glyphWidth + lineXOffset > maxWidth && curLineCount) {
          // If it's the first char after a whitespace, start a new line
          if (currentLine.glyphAt(curLineCount - 1).glyphObj.canBreakAfter) {
            nextLine = new TextLine();
            lineXOffset = -glyphX;
          } else {
            // Back up looking for a whitespace character to wrap at
            for (let i = curLineCount; i--;) {
              // If we got the start of the line there's no soft break point; make hard break if overflowWrap='break-word'
              if (i === 0 && overflowWrap === 'break-word') {
                nextLine = new TextLine();
                lineXOffset = -glyphX;
                break
              }
              // Found a soft break point; move all chars since it to a new line
              else if (currentLine.glyphAt(i).glyphObj.canBreakAfter) {
                nextLine = currentLine.splitAt(i + 1);
                const adjustX = nextLine.glyphAt(0).x;
                lineXOffset -= adjustX;
                for (let j = nextLine.count; j--;) {
                  nextLine.glyphAt(j).x -= adjustX;
                }
                break
              }
            }
          }
          if (nextLine) {
            currentLine.isSoftWrapped = true;
            currentLine = nextLine;
            lines.push(currentLine);
            maxLineWidth = maxWidth; //after soft wrapping use maxWidth as calculated width
          }
        }

        let fly = currentLine.glyphAt(currentLine.count);
        fly.glyphObj = glyphObj;
        fly.x = glyphX + lineXOffset;
        fly.width = glyphWidth;
        fly.charIndex = charIndex;

        // Handle hard line breaks
        if (char === '\n') {
          currentLine = new TextLine();
          lines.push(currentLine);
          lineXOffset = -(glyphX + glyphWidth + (letterSpacing * fontSize)) + textIndent;
        }
      });

      // Calculate width of each line (excluding trailing whitespace) and maximum block width
      lines.forEach(line => {
        for (let i = line.count; i--;) {
          let {glyphObj, x, width} = line.glyphAt(i);
          if (!glyphObj.isWhitespace) {
            line.width = x + width;
            if (line.width > maxLineWidth) {
              maxLineWidth = line.width;
            }
            return
          }
        }
      });

      // Find overall position adjustments for anchoring
      let anchorXOffset = 0;
      let anchorYOffset = 0;
      if (anchorX) {
        if (typeof anchorX === 'number') {
          anchorXOffset = -anchorX;
        }
        else if (typeof anchorX === 'string') {
          anchorXOffset = -maxLineWidth * (
            anchorX === 'left' ? 0 :
            anchorX === 'center' ? 0.5 :
            anchorX === 'right' ? 1 :
            parsePercent(anchorX)
          );
        }
      }
      if (anchorY) {
        if (typeof anchorY === 'number') {
          anchorYOffset = -anchorY;
        }
        else if (typeof anchorY === 'string') {
          let height = lines.length * lineHeight;
          anchorYOffset = anchorY === 'top' ? 0 :
            anchorY === 'top-baseline' ? -topBaseline :
            anchorY === 'middle' ? height / 2 :
            anchorY === 'bottom' ? height :
            anchorY === 'bottom-baseline' ? height - halfLeading + descender * fontSizeMult :
            parsePercent(anchorY) * height;
        }
      }

      if (!metricsOnly) {
        // Resolve bidi levels
        const bidiLevelsResult = bidi.getEmbeddingLevels(text, direction);

        // Process each line, applying alignment offsets, adding each glyph to the atlas, and
        // collecting all renderable glyphs into a single collection.
        glyphIds = new Uint16Array(renderableGlyphCount);
        glyphPositions = new Float32Array(renderableGlyphCount * 2);
        glyphData = {};
        visibleBounds = [INF, INF, -INF, -INF];
        chunkedBounds = [];
        let lineYOffset = topBaseline;
        if (includeCaretPositions) {
          caretPositions = new Float32Array(text.length * 3);
        }
        if (colorRanges) {
          glyphColors = new Uint8Array(renderableGlyphCount * 3);
        }
        let renderableGlyphIndex = 0;
        let prevCharIndex = -1;
        let colorCharIndex = -1;
        let chunk;
        let currentColor;
        lines.forEach((line, lineIndex) => {
          let {count:lineGlyphCount, width:lineWidth} = line;

          // Ignore empty lines
          if (lineGlyphCount > 0) {
            // Count trailing whitespaces, we want to ignore these for certain things
            let trailingWhitespaceCount = 0;
            for (let i = lineGlyphCount; i-- && line.glyphAt(i).glyphObj.isWhitespace;) {
              trailingWhitespaceCount++;
            }

            // Apply horizontal alignment adjustments
            let lineXOffset = 0;
            let justifyAdjust = 0;
            if (textAlign === 'center') {
              lineXOffset = (maxLineWidth - lineWidth) / 2;
            } else if (textAlign === 'right') {
              lineXOffset = maxLineWidth - lineWidth;
            } else if (textAlign === 'justify' && line.isSoftWrapped) {
              // count non-trailing whitespace characters, and we'll adjust the offsets per character in the next loop
              let whitespaceCount = 0;
              for (let i = lineGlyphCount - trailingWhitespaceCount; i--;) {
                if (line.glyphAt(i).glyphObj.isWhitespace) {
                  whitespaceCount++;
                }
              }
              justifyAdjust = (maxLineWidth - lineWidth) / whitespaceCount;
            }
            if (justifyAdjust || lineXOffset) {
              let justifyOffset = 0;
              for (let i = 0; i < lineGlyphCount; i++) {
                let glyphInfo = line.glyphAt(i);
                const glyphObj = glyphInfo.glyphObj;
                glyphInfo.x += lineXOffset + justifyOffset;
                // Expand non-trailing whitespaces for justify alignment
                if (justifyAdjust !== 0 && glyphObj.isWhitespace && i < lineGlyphCount - trailingWhitespaceCount) {
                  justifyOffset += justifyAdjust;
                  glyphInfo.width += justifyAdjust;
                }
              }
            }

            // Perform bidi range flipping
            const flips = bidi.getReorderSegments(
              text, bidiLevelsResult, line.glyphAt(0).charIndex, line.glyphAt(line.count - 1).charIndex
            );
            for (let fi = 0; fi < flips.length; fi++) {
              const [start, end] = flips[fi];
              // Map start/end string indices to indices in the line
              let left = Infinity, right = -Infinity;
              for (let i = 0; i < lineGlyphCount; i++) {
                if (line.glyphAt(i).charIndex >= start) { // gte to handle removed characters
                  let startInLine = i, endInLine = i;
                  for (; endInLine < lineGlyphCount; endInLine++) {
                    let info = line.glyphAt(endInLine);
                    if (info.charIndex > end) {
                      break
                    }
                    if (endInLine < lineGlyphCount - trailingWhitespaceCount) { //don't include trailing ws in flip width
                      left = Math.min(left, info.x);
                      right = Math.max(right, info.x + info.width);
                    }
                  }
                  for (let j = startInLine; j < endInLine; j++) {
                    const glyphInfo = line.glyphAt(j);
                    glyphInfo.x = right - (glyphInfo.x + glyphInfo.width - left);
                  }
                  break
                }
              }
            }

            // Assemble final data arrays
            let glyphObj;
            const setGlyphObj = g => glyphObj = g;
            for (let i = 0; i < lineGlyphCount; i++) {
              let glyphInfo = line.glyphAt(i);
              glyphObj = glyphInfo.glyphObj;
              const glyphId = glyphObj.index;

              // Replace mirrored characters in rtl
              const rtl = bidiLevelsResult.levels[glyphInfo.charIndex] & 1; //odd level means rtl
              if (rtl) {
                const mirrored = bidi.getMirroredCharacter(text[glyphInfo.charIndex]);
                if (mirrored) {
                  fontObj.forEachGlyph(mirrored, 0, 0, setGlyphObj);
                }
              }

              // Add caret positions
              if (includeCaretPositions) {
                const {charIndex} = glyphInfo;
                const caretLeft = glyphInfo.x + anchorXOffset;
                const caretRight = glyphInfo.x + glyphInfo.width + anchorXOffset;
                caretPositions[charIndex * 3] = rtl ? caretRight : caretLeft; //start edge x
                caretPositions[charIndex * 3 + 1] = rtl ? caretLeft : caretRight; //end edge x
                caretPositions[charIndex * 3 + 2] = lineYOffset + caretBottomOffset + anchorYOffset; //common bottom y

                // If we skipped any chars from the previous glyph (due to ligature subs), fill in caret
                // positions for those missing char indices; currently this uses a best-guess by dividing
                // the ligature's width evenly. In the future we may try to use the font's LigatureCaretList
                // table to get better interior caret positions.
                const ligCount = charIndex - prevCharIndex;
                if (ligCount > 1) {
                  fillLigatureCaretPositions(caretPositions, prevCharIndex, ligCount);
                }
                prevCharIndex = charIndex;
              }

              // Track current color range
              if (colorRanges) {
                const {charIndex} = glyphInfo;
                while(charIndex > colorCharIndex) {
                  colorCharIndex++;
                  if (colorRanges.hasOwnProperty(colorCharIndex)) {
                    currentColor = colorRanges[colorCharIndex];
                  }
                }
              }

              // Get atlas data for renderable glyphs
              if (!glyphObj.isWhitespace && !glyphObj.isEmpty) {
                const idx = renderableGlyphIndex++;

                // Add this glyph's path data
                if (!glyphData[glyphId]) {
                  glyphData[glyphId] = {
                    path: glyphObj.path,
                    pathBounds: [glyphObj.xMin, glyphObj.yMin, glyphObj.xMax, glyphObj.yMax]
                  };
                }

                // Determine final glyph position and add to glyphPositions array
                const glyphX = glyphInfo.x + anchorXOffset;
                const glyphY = lineYOffset + anchorYOffset;
                glyphPositions[idx * 2] = glyphX;
                glyphPositions[idx * 2 + 1] = glyphY;

                // Track total visible bounds
                const visX0 = glyphX + glyphObj.xMin * fontSizeMult;
                const visY0 = glyphY + glyphObj.yMin * fontSizeMult;
                const visX1 = glyphX + glyphObj.xMax * fontSizeMult;
                const visY1 = glyphY + glyphObj.yMax * fontSizeMult;
                if (visX0 < visibleBounds[0]) visibleBounds[0] = visX0;
                if (visY0 < visibleBounds[1]) visibleBounds[1] = visY0;
                if (visX1 > visibleBounds[2]) visibleBounds[2] = visX1;
                if (visY1 > visibleBounds[3]) visibleBounds[3] = visY1;

                // Track bounding rects for each chunk of N glyphs
                if (idx % chunkedBoundsSize === 0) {
                  chunk = {start: idx, end: idx, rect: [INF, INF, -INF, -INF]};
                  chunkedBounds.push(chunk);
                }
                chunk.end++;
                const chunkRect = chunk.rect;
                if (visX0 < chunkRect[0]) chunkRect[0] = visX0;
                if (visY0 < chunkRect[1]) chunkRect[1] = visY0;
                if (visX1 > chunkRect[2]) chunkRect[2] = visX1;
                if (visY1 > chunkRect[3]) chunkRect[3] = visY1;

                // Add to glyph ids array
                glyphIds[idx] = glyphId;

                // Add colors
                if (colorRanges) {
                  const start = idx * 3;
                  glyphColors[start] = currentColor >> 16 & 255;
                  glyphColors[start + 1] = currentColor >> 8 & 255;
                  glyphColors[start + 2] = currentColor & 255;
                }
              }
            }
          }

          // Increment y offset for next line
          lineYOffset -= lineHeight;
        });

        // Fill in remaining caret positions in case the final character was a ligature
        if (caretPositions) {
          const ligCount = text.length - prevCharIndex;
          if (ligCount > 1) {
            fillLigatureCaretPositions(caretPositions, prevCharIndex, ligCount);
          }
        }
      }

      // Timing stats
      timings.typesetting = now() - typesetStart;

      callback({
        glyphIds, //font indices for each glyph
        glyphPositions, //x,y of each glyph's origin in layout
        glyphData, //dict holding data about each glyph appearing in the text
        caretPositions, //startX,endX,bottomY caret positions for each char
        caretHeight, //height of cursor from bottom to top
        glyphColors, //color for each glyph, if color ranges supplied
        chunkedBounds, //total rects per (n=chunkedBoundsSize) consecutive glyphs
        fontSize, //calculated em height
        unitsPerEm, //font units per em
        ascender: ascender * fontSizeMult, //font ascender
        descender: descender * fontSizeMult, //font descender
        lineHeight, //computed line height
        topBaseline, //y coordinate of the top line's baseline
        blockBounds: [ //bounds for the whole block of text, including vertical padding for lineHeight
          anchorXOffset,
          anchorYOffset - lines.length * lineHeight,
          anchorXOffset + maxLineWidth,
          anchorYOffset
        ],
        visibleBounds, //total bounds of visible text paths, may be larger or smaller than totalBounds
        timings
      });
    });
  }


  /**
   * For a given text string and font parameters, determine the resulting block dimensions
   * after wrapping for the given maxWidth.
   * @param args
   * @param callback
   */
  function measure(args, callback) {
    typeset(args, (result) => {
      const [x0, y0, x1, y1] = result.blockBounds;
      callback({
        width: x1 - x0,
        height: y1 - y0
      });
    }, {metricsOnly: true});
  }

  function parsePercent(str) {
    let match = str.match(/^([\d.]+)%$/);
    let pct = match ? parseFloat(match[1]) : NaN;
    return isNaN(pct) ? 0 : pct / 100
  }

  function fillLigatureCaretPositions(caretPositions, ligStartIndex, ligCount) {
    const ligStartX = caretPositions[ligStartIndex * 3];
    const ligEndX = caretPositions[ligStartIndex * 3 + 1];
    const ligY = caretPositions[ligStartIndex * 3 + 2];
    const guessedAdvanceX = (ligEndX - ligStartX) / ligCount;
    for (let i = 0; i < ligCount; i++) {
      const startIndex = (ligStartIndex + i) * 3;
      caretPositions[startIndex] = ligStartX + guessedAdvanceX * i;
      caretPositions[startIndex + 1] = ligStartX + guessedAdvanceX * (i + 1);
      caretPositions[startIndex + 2] = ligY;
    }
  }

  function now() {
    return (self.performance || Date).now()
  }

  // Array-backed structure for a single line's glyphs data
  function TextLine() {
    this.data = [];
  }
  const textLineProps = ['glyphObj', 'x', 'width', 'charIndex'];
  TextLine.prototype = {
    width: 0,
    isSoftWrapped: false,
    get count() {
      return Math.ceil(this.data.length / textLineProps.length)
    },
    glyphAt(i) {
      let fly = TextLine.flyweight;
      fly.data = this.data;
      fly.index = i;
      return fly
    },
    splitAt(i) {
      let newLine = new TextLine();
      newLine.data = this.data.splice(i * textLineProps.length);
      return newLine
    }
  };
  TextLine.flyweight = textLineProps.reduce((obj, prop, i, all) => {
    Object.defineProperty(obj, prop, {
      get() {
        return this.data[this.index * textLineProps.length + i]
      },
      set(val) {
        this.data[this.index * textLineProps.length + i] = val;
      }
    });
    return obj
  }, {data: null, index: 0});


  return {
    typeset,
    measure,
    loadFont
  }
}

function SDFGenerator() {
var exports = (function (exports) {

  /**
   * Find the point on a quadratic bezier curve at t where t is in the range [0, 1]
   */
  function pointOnQuadraticBezier (x0, y0, x1, y1, x2, y2, t, pointOut) {
    var t2 = 1 - t;
    pointOut.x = t2 * t2 * x0 + 2 * t2 * t * x1 + t * t * x2;
    pointOut.y = t2 * t2 * y0 + 2 * t2 * t * y1 + t * t * y2;
  }

  /**
   * Find the point on a cubic bezier curve at t where t is in the range [0, 1]
   */
  function pointOnCubicBezier (x0, y0, x1, y1, x2, y2, x3, y3, t, pointOut) {
    var t2 = 1 - t;
    pointOut.x = t2 * t2 * t2 * x0 + 3 * t2 * t2 * t * x1 + 3 * t2 * t * t * x2 + t * t * t * x3;
    pointOut.y = t2 * t2 * t2 * y0 + 3 * t2 * t2 * t * y1 + 3 * t2 * t * t * y2 + t * t * t * y3;
  }

  /**
   * Parse a path string into its constituent line/curve commands, invoking a callback for each.
   * @param {string} pathString - An SVG-like path string to parse; should only contain commands: M/L/Q/C/Z
   * @param {function(
   *   command: 'L'|'Q'|'C',
   *   startX: number,
   *   startY: number,
   *   endX: number,
   *   endY: number,
   *   ctrl1X?: number,
   *   ctrl1Y?: number,
   *   ctrl2X?: number,
   *   ctrl2Y?: number
   * )} commandCallback - A callback function that will be called once for each parsed path command, passing the
   *                      command identifier (only L/Q/C commands) and its numeric arguments.
   */
  function forEachPathCommand(pathString, commandCallback) {
    var segmentRE = /([MLQCZ])([^MLQCZ]*)/g;
    var match, firstX, firstY, prevX, prevY;
    while ((match = segmentRE.exec(pathString))) {
      var args = match[2]
        .replace(/^\s*|\s*$/g, '')
        .split(/[,\s]+/)
        .map(function (v) { return parseFloat(v); });
      switch (match[1]) {
        case 'M':
          prevX = firstX = args[0];
          prevY = firstY = args[1];
          break
        case 'L':
          if (args[0] !== prevX || args[1] !== prevY) { // yup, some fonts have zero-length line commands
            commandCallback('L', prevX, prevY, (prevX = args[0]), (prevY = args[1]));
          }
          break
        case 'Q': {
          commandCallback('Q', prevX, prevY, (prevX = args[2]), (prevY = args[3]), args[0], args[1]);
          break
        }
        case 'C': {
          commandCallback('C', prevX, prevY, (prevX = args[4]), (prevY = args[5]), args[0], args[1], args[2], args[3]);
          break
        }
        case 'Z':
          if (prevX !== firstX || prevY !== firstY) {
            commandCallback('L', prevX, prevY, firstX, firstY);
          }
          break
      }
    }
  }

  /**
   * Convert a path string to a series of straight line segments
   * @param {string} pathString - An SVG-like path string to parse; should only contain commands: M/L/Q/C/Z
   * @param {function(x1:number, y1:number, x2:number, y2:number)} segmentCallback - A callback
   *        function that will be called once for every line segment
   * @param {number} [curvePoints] - How many straight line segments to use when approximating a
   *        bezier curve in the path. Defaults to 16.
   */
  function pathToLineSegments (pathString, segmentCallback, curvePoints) {
    if ( curvePoints === void 0 ) curvePoints = 16;

    var tempPoint = { x: 0, y: 0 };
    forEachPathCommand(pathString, function (command, startX, startY, endX, endY, ctrl1X, ctrl1Y, ctrl2X, ctrl2Y) {
      switch (command) {
        case 'L':
          segmentCallback(startX, startY, endX, endY);
          break
        case 'Q': {
          var prevCurveX = startX;
          var prevCurveY = startY;
          for (var i = 1; i < curvePoints; i++) {
            pointOnQuadraticBezier(
              startX, startY,
              ctrl1X, ctrl1Y,
              endX, endY,
              i / (curvePoints - 1),
              tempPoint
            );
            segmentCallback(prevCurveX, prevCurveY, tempPoint.x, tempPoint.y);
            prevCurveX = tempPoint.x;
            prevCurveY = tempPoint.y;
          }
          break
        }
        case 'C': {
          var prevCurveX$1 = startX;
          var prevCurveY$1 = startY;
          for (var i$1 = 1; i$1 < curvePoints; i$1++) {
            pointOnCubicBezier(
              startX, startY,
              ctrl1X, ctrl1Y,
              ctrl2X, ctrl2Y,
              endX, endY,
              i$1 / (curvePoints - 1),
              tempPoint
            );
            segmentCallback(prevCurveX$1, prevCurveY$1, tempPoint.x, tempPoint.y);
            prevCurveX$1 = tempPoint.x;
            prevCurveY$1 = tempPoint.y;
          }
          break
        }
      }
    });
  }

  var viewportQuadVertex = "precision highp float;attribute vec2 aUV;varying vec2 vUV;void main(){vUV=aUV;gl_Position=vec4(mix(vec2(-1.0),vec2(1.0),aUV),0.0,1.0);}";

  var copyTexFragment = "precision highp float;uniform sampler2D tex;varying vec2 vUV;void main(){gl_FragColor=texture2D(tex,vUV);}";

  var cache = new WeakMap();

  var glContextParams = {
    premultipliedAlpha: false,
    preserveDrawingBuffer: true,
    antialias: false,
    depth: false,
  };

  /**
   * This is a little helper library for WebGL. It assists with state management for a GL context.
   * It's pretty tightly wrapped to the needs of this package, not very general-purpose.
   *
   * @param { WebGLRenderingContext | HTMLCanvasElement | OffscreenCanvas } glOrCanvas - the GL context to wrap
   * @param { ({gl, getExtension, withProgram, withTexture, withTextureFramebuffer, handleContextLoss}) => void } callback
   */
  function withWebGLContext (glOrCanvas, callback) {
    var gl = glOrCanvas.getContext ? glOrCanvas.getContext('webgl', glContextParams) : glOrCanvas;
    var wrapper = cache.get(gl);
    if (!wrapper) {
      var isWebGL2 = typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext;
      var extensions = {};
      var programs = {};
      var textures = {};
      var textureUnit = -1;
      var framebufferStack = [];

      gl.canvas.addEventListener('webglcontextlost', function (e) {
        handleContextLoss();
        e.preventDefault();
      }, false);

      function getExtension (name) {
        var ext = extensions[name];
        if (!ext) {
          ext = extensions[name] = gl.getExtension(name);
          if (!ext) {
            throw new Error((name + " not supported"))
          }
        }
        return ext
      }

      function compileShader (src, type) {
        var shader = gl.createShader(type);
        gl.shaderSource(shader, src);
        gl.compileShader(shader);
        // const status = gl.getShaderParameter(shader, gl.COMPILE_STATUS)
        // if (!status && !gl.isContextLost()) {
        //   throw new Error(gl.getShaderInfoLog(shader).trim())
        // }
        return shader
      }

      function withProgram (name, vert, frag, func) {
        if (!programs[name]) {
          var attributes = {};
          var uniforms = {};
          var program = gl.createProgram();
          gl.attachShader(program, compileShader(vert, gl.VERTEX_SHADER));
          gl.attachShader(program, compileShader(frag, gl.FRAGMENT_SHADER));
          gl.linkProgram(program);

          programs[name] = {
            program: program,
            transaction: function transaction (func) {
              gl.useProgram(program);
              func({
                setUniform: function setUniform (type, name) {
                  var values = [], len = arguments.length - 2;
                  while ( len-- > 0 ) values[ len ] = arguments[ len + 2 ];

                  var uniformLoc = uniforms[name] || (uniforms[name] = gl.getUniformLocation(program, name));
                  gl[("uniform" + type)].apply(gl, [ uniformLoc ].concat( values ));
                },

                setAttribute: function setAttribute (name, size, usage, instancingDivisor, data) {
                  var attr = attributes[name];
                  if (!attr) {
                    attr = attributes[name] = {
                      buf: gl.createBuffer(), // TODO should we destroy our buffers?
                      loc: gl.getAttribLocation(program, name),
                      data: null
                    };
                  }
                  gl.bindBuffer(gl.ARRAY_BUFFER, attr.buf);
                  gl.vertexAttribPointer(attr.loc, size, gl.FLOAT, false, 0, 0);
                  gl.enableVertexAttribArray(attr.loc);
                  if (isWebGL2) {
                    gl.vertexAttribDivisor(attr.loc, instancingDivisor);
                  } else {
                    getExtension('ANGLE_instanced_arrays').vertexAttribDivisorANGLE(attr.loc, instancingDivisor);
                  }
                  if (data !== attr.data) {
                    gl.bufferData(gl.ARRAY_BUFFER, data, usage);
                    attr.data = data;
                  }
                }
              });
            }
          };
        }

        programs[name].transaction(func);
      }

      function withTexture (name, func) {
        textureUnit++;
        try {
          gl.activeTexture(gl.TEXTURE0 + textureUnit);
          var texture = textures[name];
          if (!texture) {
            texture = textures[name] = gl.createTexture();
            gl.bindTexture(gl.TEXTURE_2D, texture);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
          }
          gl.bindTexture(gl.TEXTURE_2D, texture);
          func(texture, textureUnit);
        } finally {
          textureUnit--;
        }
      }

      function withTextureFramebuffer (texture, textureUnit, func) {
        var framebuffer = gl.createFramebuffer();
        framebufferStack.push(framebuffer);
        gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);
        gl.activeTexture(gl.TEXTURE0 + textureUnit);
        gl.bindTexture(gl.TEXTURE_2D, texture);
        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);
        try {
          func(framebuffer);
        } finally {
          gl.deleteFramebuffer(framebuffer);
          gl.bindFramebuffer(gl.FRAMEBUFFER, framebufferStack[--framebufferStack.length - 1] || null);
        }
      }

      function handleContextLoss () {
        extensions = {};
        programs = {};
        textures = {};
        textureUnit = -1;
        framebufferStack.length = 0;
      }

      cache.set(gl, wrapper = {
        gl: gl,
        isWebGL2: isWebGL2,
        getExtension: getExtension,
        withProgram: withProgram,
        withTexture: withTexture,
        withTextureFramebuffer: withTextureFramebuffer,
        handleContextLoss: handleContextLoss,
      });
    }
    callback(wrapper);
  }


  function renderImageData(glOrCanvas, imageData, x, y, width, height, channels, framebuffer) {
    if ( channels === void 0 ) channels = 15;
    if ( framebuffer === void 0 ) framebuffer = null;

    withWebGLContext(glOrCanvas, function (ref) {
      var gl = ref.gl;
      var withProgram = ref.withProgram;
      var withTexture = ref.withTexture;

      withTexture('copy', function (tex, texUnit) {
        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, imageData);
        withProgram('copy', viewportQuadVertex, copyTexFragment, function (ref) {
          var setUniform = ref.setUniform;
          var setAttribute = ref.setAttribute;

          setAttribute('aUV', 2, gl.STATIC_DRAW, 0, new Float32Array([0, 0, 2, 0, 0, 2]));
          setUniform('1i', 'image', texUnit);
          gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer || null);
          gl.disable(gl.BLEND);
          gl.colorMask(channels & 8, channels & 4, channels & 2, channels & 1);
          gl.viewport(x, y, width, height);
          gl.scissor(x, y, width, height);
          gl.drawArrays(gl.TRIANGLES, 0, 3);
        });
      });
    });
  }

  /**
   * Resizing a canvas clears its contents; this utility copies the previous contents over.
   * @param canvas
   * @param newWidth
   * @param newHeight
   */
  function resizeWebGLCanvasWithoutClearing(canvas, newWidth, newHeight) {
    var width = canvas.width;
    var height = canvas.height;
    withWebGLContext(canvas, function (ref) {
      var gl = ref.gl;

      var data = new Uint8Array(width * height * 4);
      gl.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, data);
      canvas.width = newWidth;
      canvas.height = newHeight;
      renderImageData(gl, data, 0, 0, width, height);
    });
  }

  var webglUtils = /*#__PURE__*/Object.freeze({
    __proto__: null,
    withWebGLContext: withWebGLContext,
    renderImageData: renderImageData,
    resizeWebGLCanvasWithoutClearing: resizeWebGLCanvasWithoutClearing
  });

  function generate$2 (sdfWidth, sdfHeight, path, viewBox, maxDistance, sdfExponent) {
    if ( sdfExponent === void 0 ) sdfExponent = 1;

    var textureData = new Uint8Array(sdfWidth * sdfHeight);

    var viewBoxWidth = viewBox[2] - viewBox[0];
    var viewBoxHeight = viewBox[3] - viewBox[1];

    // Decompose all paths into straight line segments and add them to an index
    var segments = [];
    pathToLineSegments(path, function (x1, y1, x2, y2) {
      segments.push({
        x1: x1, y1: y1, x2: x2, y2: y2,
        minX: Math.min(x1, x2),
        minY: Math.min(y1, y2),
        maxX: Math.max(x1, x2),
        maxY: Math.max(y1, y2)
      });
    });

    // Sort segments by maxX, this will let us short-circuit some loops below
    segments.sort(function (a, b) { return a.maxX - b.maxX; });

    // For each target SDF texel, find the distance from its center to its nearest line segment,
    // map that distance to an alpha value, and write that alpha to the texel
    for (var sdfX = 0; sdfX < sdfWidth; sdfX++) {
      for (var sdfY = 0; sdfY < sdfHeight; sdfY++) {
        var signedDist = findNearestSignedDistance(
          viewBox[0] + viewBoxWidth * (sdfX + 0.5) / sdfWidth,
          viewBox[1] + viewBoxHeight * (sdfY + 0.5) / sdfHeight
        );

        // Use an exponential scale to ensure the texels very near the glyph path have adequate
        // precision, while allowing the distance field to cover the entire texture, given that
        // there are only 8 bits available. Formula visualized: https://www.desmos.com/calculator/uiaq5aqiam
        var alpha = Math.pow((1 - Math.abs(signedDist) / maxDistance), sdfExponent) / 2;
        if (signedDist < 0) {
          alpha = 1 - alpha;
        }

        alpha = Math.max(0, Math.min(255, Math.round(alpha * 255))); //clamp
        textureData[sdfY * sdfWidth + sdfX] = alpha;
      }
    }

    return textureData

    /**
     * For a given x/y, search the index for the closest line segment and return
     * its signed distance. Negative = inside, positive = outside, zero = on edge
     * @param x
     * @param y
     * @returns {number}
     */
    function findNearestSignedDistance (x, y) {
      var closestDistSq = Infinity;
      var closestDist = Infinity;

      for (var i = segments.length; i--;) {
        var seg = segments[i];
        if (seg.maxX + closestDist <= x) { break } //sorting by maxX means no more can be closer, so we can short-circuit
        if (x + closestDist > seg.minX && y - closestDist < seg.maxY && y + closestDist > seg.minY) {
          var distSq = absSquareDistanceToLineSegment(x, y, seg.x1, seg.y1, seg.x2, seg.y2);
          if (distSq < closestDistSq) {
            closestDistSq = distSq;
            closestDist = Math.sqrt(closestDistSq);
          }
        }
      }

      // Flip to negative distance if inside the poly
      if (isPointInPoly(x, y)) {
        closestDist = -closestDist;
      }
      return closestDist
    }

    /**
     * Determine whether the given point lies inside or outside the glyph. Uses a simple
     * winding-number ray casting algorithm using a ray pointing east from the point.
     */
    function isPointInPoly (x, y) {
      var winding = 0;
      for (var i = segments.length; i--;) {
        var seg = segments[i];
        if (seg.maxX <= x) { break } //sorting by maxX means no more can cross, so we can short-circuit
        var intersects = ((seg.y1 > y) !== (seg.y2 > y)) && (x < (seg.x2 - seg.x1) * (y - seg.y1) / (seg.y2 - seg.y1) + seg.x1);
        if (intersects) {
          winding += seg.y1 < seg.y2 ? 1 : -1;
        }
      }
      return winding !== 0
    }
  }

  function generateIntoCanvas$2(sdfWidth, sdfHeight, path, viewBox, maxDistance, sdfExponent, canvas, x, y, channel) {
    if ( sdfExponent === void 0 ) sdfExponent = 1;
    if ( x === void 0 ) x = 0;
    if ( y === void 0 ) y = 0;
    if ( channel === void 0 ) channel = 0;

    generateIntoFramebuffer$1(sdfWidth, sdfHeight, path, viewBox, maxDistance, sdfExponent, canvas, null, x, y, channel);
  }

  function generateIntoFramebuffer$1 (sdfWidth, sdfHeight, path, viewBox, maxDistance, sdfExponent, glOrCanvas, framebuffer, x, y, channel) {
    if ( sdfExponent === void 0 ) sdfExponent = 1;
    if ( x === void 0 ) x = 0;
    if ( y === void 0 ) y = 0;
    if ( channel === void 0 ) channel = 0;

    var data = generate$2(sdfWidth, sdfHeight, path, viewBox, maxDistance, sdfExponent);
    // Expand single-channel data to rbga
    var rgbaData = new Uint8Array(data.length * 4);
    for (var i = 0; i < data.length; i++) {
      rgbaData[i * 4 + channel] = data[i];
    }
    renderImageData(glOrCanvas, rgbaData, x, y, sdfWidth, sdfHeight, 1 << (3 - channel), framebuffer);
  }

  /**
   * Find the absolute distance from a point to a line segment at closest approach
   */
  function absSquareDistanceToLineSegment (x, y, lineX0, lineY0, lineX1, lineY1) {
    var ldx = lineX1 - lineX0;
    var ldy = lineY1 - lineY0;
    var lengthSq = ldx * ldx + ldy * ldy;
    var t = lengthSq ? Math.max(0, Math.min(1, ((x - lineX0) * ldx + (y - lineY0) * ldy) / lengthSq)) : 0;
    var dx = x - (lineX0 + t * ldx);
    var dy = y - (lineY0 + t * ldy);
    return dx * dx + dy * dy
  }

  var javascript = /*#__PURE__*/Object.freeze({
    __proto__: null,
    generate: generate$2,
    generateIntoCanvas: generateIntoCanvas$2,
    generateIntoFramebuffer: generateIntoFramebuffer$1
  });

  var mainVertex = "precision highp float;uniform vec4 uGlyphBounds;attribute vec2 aUV;attribute vec4 aLineSegment;varying vec4 vLineSegment;varying vec2 vGlyphXY;void main(){vLineSegment=aLineSegment;vGlyphXY=mix(uGlyphBounds.xy,uGlyphBounds.zw,aUV);gl_Position=vec4(mix(vec2(-1.0),vec2(1.0),aUV),0.0,1.0);}";

  var mainFragment = "precision highp float;uniform vec4 uGlyphBounds;uniform float uMaxDistance;uniform float uExponent;varying vec4 vLineSegment;varying vec2 vGlyphXY;float absDistToSegment(vec2 point,vec2 lineA,vec2 lineB){vec2 lineDir=lineB-lineA;float lenSq=dot(lineDir,lineDir);float t=lenSq==0.0 ? 0.0 : clamp(dot(point-lineA,lineDir)/lenSq,0.0,1.0);vec2 linePt=lineA+t*lineDir;return distance(point,linePt);}void main(){vec4 seg=vLineSegment;vec2 p=vGlyphXY;float dist=absDistToSegment(p,seg.xy,seg.zw);float val=pow(1.0-clamp(dist/uMaxDistance,0.0,1.0),uExponent)*0.5;bool crossing=(seg.y>p.y!=seg.w>p.y)&&(p.x<(seg.z-seg.x)*(p.y-seg.y)/(seg.w-seg.y)+seg.x);bool crossingUp=crossing&&vLineSegment.y<vLineSegment.w;gl_FragColor=vec4(crossingUp ? 1.0/255.0 : 0.0,crossing&&!crossingUp ? 1.0/255.0 : 0.0,0.0,val);}";

  var postFragment = "precision highp float;uniform sampler2D tex;varying vec2 vUV;void main(){vec4 color=texture2D(tex,vUV);bool inside=color.r!=color.g;float val=inside ? 1.0-color.a : color.a;gl_FragColor=vec4(val);}";

  // Single triangle covering viewport
  var viewportUVs = new Float32Array([0, 0, 2, 0, 0, 2]);

  var implicitContext = null;
  var isTestingSupport = false;
  var NULL_OBJECT = {};
  var supportByCanvas = new WeakMap(); // canvas -> bool

  function validateSupport (glOrCanvas) {
    if (!isTestingSupport && !isSupported(glOrCanvas)) {
      throw new Error('WebGL generation not supported')
    }
  }

  function generate$1 (sdfWidth, sdfHeight, path, viewBox, maxDistance, sdfExponent, glOrCanvas) {
    if ( sdfExponent === void 0 ) sdfExponent = 1;
    if ( glOrCanvas === void 0 ) glOrCanvas = null;

    if (!glOrCanvas) {
      glOrCanvas = implicitContext;
      if (!glOrCanvas) {
        var canvas = typeof OffscreenCanvas === 'function'
          ? new OffscreenCanvas(1, 1)
          : typeof document !== 'undefined'
            ? document.createElement('canvas')
            : null;
        if (!canvas) {
          throw new Error('OffscreenCanvas or DOM canvas not supported')
        }
        glOrCanvas = implicitContext = canvas.getContext('webgl', { depth: false });
      }
    }

    validateSupport(glOrCanvas);

    var rgbaData = new Uint8Array(sdfWidth * sdfHeight * 4); //not Uint8ClampedArray, cuz Safari

    // Render into a background texture framebuffer
    withWebGLContext(glOrCanvas, function (ref) {
      var gl = ref.gl;
      var withTexture = ref.withTexture;
      var withTextureFramebuffer = ref.withTextureFramebuffer;

      withTexture('readable', function (texture, textureUnit) {
        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, sdfWidth, sdfHeight, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);

        withTextureFramebuffer(texture, textureUnit, function (framebuffer) {
          generateIntoFramebuffer(
            sdfWidth,
            sdfHeight,
            path,
            viewBox,
            maxDistance,
            sdfExponent,
            gl,
            framebuffer,
            0,
            0,
            0 // red channel
          );
          gl.readPixels(0, 0, sdfWidth, sdfHeight, gl.RGBA, gl.UNSIGNED_BYTE, rgbaData);
        });
      });
    });

    // Throw away all but the red channel
    var data = new Uint8Array(sdfWidth * sdfHeight);
    for (var i = 0, j = 0; i < rgbaData.length; i += 4) {
      data[j++] = rgbaData[i];
    }

    return data
  }

  function generateIntoCanvas$1(sdfWidth, sdfHeight, path, viewBox, maxDistance, sdfExponent, canvas, x, y, channel) {
    if ( sdfExponent === void 0 ) sdfExponent = 1;
    if ( x === void 0 ) x = 0;
    if ( y === void 0 ) y = 0;
    if ( channel === void 0 ) channel = 0;

    generateIntoFramebuffer(sdfWidth, sdfHeight, path, viewBox, maxDistance, sdfExponent, canvas, null, x, y, channel);
  }

  function generateIntoFramebuffer (sdfWidth, sdfHeight, path, viewBox, maxDistance, sdfExponent, glOrCanvas, framebuffer, x, y, channel) {
    if ( sdfExponent === void 0 ) sdfExponent = 1;
    if ( x === void 0 ) x = 0;
    if ( y === void 0 ) y = 0;
    if ( channel === void 0 ) channel = 0;

    // Verify support
    validateSupport(glOrCanvas);

    // Compute path segments
    var lineSegmentCoords = [];
    pathToLineSegments(path, function (x1, y1, x2, y2) {
      lineSegmentCoords.push(x1, y1, x2, y2);
    });
    lineSegmentCoords = new Float32Array(lineSegmentCoords);

    withWebGLContext(glOrCanvas, function (ref) {
      var gl = ref.gl;
      var isWebGL2 = ref.isWebGL2;
      var getExtension = ref.getExtension;
      var withProgram = ref.withProgram;
      var withTexture = ref.withTexture;
      var withTextureFramebuffer = ref.withTextureFramebuffer;
      var handleContextLoss = ref.handleContextLoss;

      withTexture('rawDistances', function (intermediateTexture, intermediateTextureUnit) {
        if (sdfWidth !== intermediateTexture._lastWidth || sdfHeight !== intermediateTexture._lastHeight) {
          gl.texImage2D(
            gl.TEXTURE_2D, 0, gl.RGBA,
            intermediateTexture._lastWidth = sdfWidth,
            intermediateTexture._lastHeight = sdfHeight,
            0, gl.RGBA, gl.UNSIGNED_BYTE, null
          );
        }

        // Unsigned distance pass
        withProgram('main', mainVertex, mainFragment, function (ref) {
          var setAttribute = ref.setAttribute;
          var setUniform = ref.setUniform;

          // Init extensions
          var instancingExtension = !isWebGL2 && getExtension('ANGLE_instanced_arrays');
          var blendMinMaxExtension = !isWebGL2 && getExtension('EXT_blend_minmax');

          // Init/update attributes
          setAttribute('aUV', 2, gl.STATIC_DRAW, 0, viewportUVs);
          setAttribute('aLineSegment', 4, gl.DYNAMIC_DRAW, 1, lineSegmentCoords);

          // Init/update uniforms
          setUniform.apply(void 0, [ '4f', 'uGlyphBounds' ].concat( viewBox ));
          setUniform('1f', 'uMaxDistance', maxDistance);
          setUniform('1f', 'uExponent', sdfExponent);

          // Render initial unsigned distance / winding number info to a texture
          withTextureFramebuffer(intermediateTexture, intermediateTextureUnit, function (framebuffer) {
            gl.enable(gl.BLEND);
            gl.colorMask(true, true, true, true);
            gl.viewport(0, 0, sdfWidth, sdfHeight);
            gl.scissor(0, 0, sdfWidth, sdfHeight);
            gl.blendFunc(gl.ONE, gl.ONE);
            // Red+Green channels are incremented (FUNC_ADD) for segment-ray crossings to give a "winding number".
            // Alpha holds the closest (MAX) unsigned distance.
            gl.blendEquationSeparate(gl.FUNC_ADD, isWebGL2 ? gl.MAX : blendMinMaxExtension.MAX_EXT);
            gl.clear(gl.COLOR_BUFFER_BIT);
            if (isWebGL2) {
              gl.drawArraysInstanced(gl.TRIANGLES, 0, 3, lineSegmentCoords.length / 4);
            } else {
              instancingExtension.drawArraysInstancedANGLE(gl.TRIANGLES, 0, 3, lineSegmentCoords.length / 4);
            }
            // Debug
            // const debug = new Uint8Array(sdfWidth * sdfHeight * 4)
            // gl.readPixels(0, 0, sdfWidth, sdfHeight, gl.RGBA, gl.UNSIGNED_BYTE, debug)
            // console.log('intermediate texture data: ', debug)
          });
        });

        // Use the data stored in the texture to apply inside/outside and write to the output framebuffer rect+channel.
        withProgram('post', viewportQuadVertex, postFragment, function (program) {
          program.setAttribute('aUV', 2, gl.STATIC_DRAW, 0, viewportUVs);
          program.setUniform('1i', 'tex', intermediateTextureUnit);
          gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);
          gl.disable(gl.BLEND);
          gl.colorMask(channel === 0, channel === 1, channel === 2, channel === 3);
          gl.viewport(x, y, sdfWidth, sdfHeight);
          gl.scissor(x, y, sdfWidth, sdfHeight);
          gl.drawArrays(gl.TRIANGLES, 0, 3);
        });
      });

      // Handle context loss occurring during any of the above calls
      if (gl.isContextLost()) {
        handleContextLoss();
        throw new Error('webgl context lost')
      }
    });
  }

  function isSupported (glOrCanvas) {
    var key = (!glOrCanvas || glOrCanvas === implicitContext) ? NULL_OBJECT : (glOrCanvas.canvas || glOrCanvas);
    var supported = supportByCanvas.get(key);
    if (supported === undefined) {
      isTestingSupport = true;
      var failReason = null;
      try {
        // Since we can't detect all failure modes up front, let's just do a trial run of a
        // simple path and compare what we get back to the correct expected result. This will
        // also serve to prime the shader compilation.
        var expectedResult = [
          97, 106, 97, 61,
          99, 137, 118, 80,
          80, 118, 137, 99,
          61, 97, 106, 97
        ];
        var testResult = generate$1(
          4,
          4,
          'M8,8L16,8L24,24L16,24Z',
          [0, 0, 32, 32],
          24,
          1,
          glOrCanvas
        );
        supported = testResult && expectedResult.length === testResult.length &&
          testResult.every(function (val, i) { return val === expectedResult[i]; });
        if (!supported) {
          failReason = 'bad trial run results';
          console.info(expectedResult, testResult);
        }
      } catch (err) {
        // TODO if it threw due to webgl context loss, should we maybe leave isSupported as null and try again later?
        supported = false;
        failReason = err.message;
      }
      if (failReason) {
        console.warn('WebGL SDF generation not supported:', failReason);
      }
      isTestingSupport = false;
      supportByCanvas.set(key, supported);
    }
    return supported
  }

  var webgl = /*#__PURE__*/Object.freeze({
    __proto__: null,
    generate: generate$1,
    generateIntoCanvas: generateIntoCanvas$1,
    generateIntoFramebuffer: generateIntoFramebuffer,
    isSupported: isSupported
  });

  /**
   * Generate an SDF texture image for a 2D path.
   *
   * @param {number} sdfWidth - width of the SDF output image in pixels.
   * @param {number} sdfHeight - height of the SDF output image in pixels.
   * @param {string} path - an SVG-like path string describing the glyph; should only contain commands: M/L/Q/C/Z.
   * @param {number[]} viewBox - [minX, minY, maxX, maxY] in font units aligning with the texture's edges.
   * @param {number} maxDistance - the maximum distance from the glyph path in font units that will be encoded; defaults
   *        to half the maximum viewBox dimension.
   * @param {number} [sdfExponent] - specifies an exponent for encoding the SDF's distance values; higher exponents
   *        will give greater precision nearer the glyph's path.
   * @return {Uint8Array}
   */
  function generate(
    sdfWidth,
    sdfHeight,
    path,
    viewBox,
    maxDistance,
    sdfExponent
  ) {
    if ( maxDistance === void 0 ) maxDistance = Math.max(viewBox[2] - viewBox[0], viewBox[3] - viewBox[1]) / 2;
    if ( sdfExponent === void 0 ) sdfExponent = 1;

    try {
      return generate$1.apply(webgl, arguments)
    } catch(e) {
      console.info('WebGL SDF generation failed, falling back to JS', e);
      return generate$2.apply(javascript, arguments)
    }
  }

  /**
   * Generate an SDF texture image for a 2D path, inserting the result into a WebGL `canvas` at a given x/y position
   * and color channel. This is generally much faster than calling `generate` because it does not require reading pixels
   * back from the GPU->CPU -- the `canvas` can be used directly as a WebGL texture image, so it all stays on the GPU.
   *
   * @param {number} sdfWidth - width of the SDF output image in pixels.
   * @param {number} sdfHeight - height of the SDF output image in pixels.
   * @param {string} path - an SVG-like path string describing the glyph; should only contain commands: M/L/Q/C/Z.
   * @param {number[]} viewBox - [minX, minY, maxX, maxY] in font units aligning with the texture's edges.
   * @param {number} maxDistance - the maximum distance from the glyph path in font units that will be encoded; defaults
   *        to half the maximum viewBox dimension.
   * @param {number} [sdfExponent] - specifies an exponent for encoding the SDF's distance values; higher exponents
   *        will give greater precision nearer the glyph's path.
   * @param {HTMLCanvasElement|OffscreenCanvas} canvas - a WebGL-enabled canvas into which the SDF will be rendered.
   *        Only the relevant rect/channel will be modified, the rest will be preserved. To avoid unpredictable results
   *        due to shared GL context state, this canvas should be dedicated to use by this library alone.
   * @param {number} x - the x position at which to render the SDF.
   * @param {number} y - the y position at which to render the SDF.
   * @param {number} channel - the color channel index (0-4) into which the SDF will be rendered.
   * @return {Uint8Array}
   */
  function generateIntoCanvas(
    sdfWidth,
    sdfHeight,
    path,
    viewBox,
    maxDistance,
    sdfExponent,
    canvas,
    x,
    y,
    channel
  ) {
    if ( maxDistance === void 0 ) maxDistance = Math.max(viewBox[2] - viewBox[0], viewBox[3] - viewBox[1]) / 2;
    if ( sdfExponent === void 0 ) sdfExponent = 1;
    if ( x === void 0 ) x = 0;
    if ( y === void 0 ) y = 0;
    if ( channel === void 0 ) channel = 0;

    try {
      return generateIntoCanvas$1.apply(webgl, arguments)
    } catch(e) {
      console.info('WebGL SDF generation failed, falling back to JS', e);
      return generateIntoCanvas$2.apply(javascript, arguments)
    }
  }

  exports.forEachPathCommand = forEachPathCommand;
  exports.generate = generate;
  exports.generateIntoCanvas = generateIntoCanvas;
  exports.javascript = javascript;
  exports.pathToLineSegments = pathToLineSegments;
  exports.webgl = webgl;
  exports.webglUtils = webglUtils;

  Object.defineProperty(exports, '__esModule', { value: true });

  return exports;

}({}));
return exports
}

const now$1 = () => (self.performance || Date).now();

const mainThreadGenerator = SDFGenerator();

/**
 * Generate an SDF texture image for a single glyph path, placing the result into a webgl canvas at a
 * given location and channel. Utilizes the webgl-sdf-generator external package for GPU-accelerated SDF
 * generation when supported.
 */
function generateSDF(width, height, path, viewBox, distance, exponent, canvas, x, y, channel, useWebGL = true) {
  // Allow opt-out
  if (!useWebGL) {
    return generateSDF_JS_Worker(width, height, path, viewBox, distance, exponent, canvas, x, y, channel)
  }

  // Attempt GPU-accelerated generation first
  return generateSDF_GL(width, height, path, viewBox, distance, exponent, canvas, x, y, channel).then(
    null,
    err => {
      return generateSDF_JS_Worker(width, height, path, viewBox, distance, exponent, canvas, x, y, channel)
    }
  )
}

/**
 * WebGL-based implementation executed on the main thread. Requests are executed in time-bounded
 * macrotask chunks to allow render frames to execute in between.
 */
const generateSDF_GL = /*#__PURE__*/function() {
  const queue = [];
  const chunkTimeBudget = 5; //ms
  let timer = 0;
  function nextChunk() {
    const start = now$1();
    while (queue.length && now$1() - start < chunkTimeBudget) {
      queue.shift()();
    }
    timer = queue.length ? setTimeout(nextChunk, 0) : 0;
  }
  return (...args) => {
    const thenable = DefaultThenable();
    queue.push(() => {
      const start = now$1();
      try {
        mainThreadGenerator.webgl.generateIntoCanvas(...args);
        thenable.resolve({timing: now$1() - start});
      } catch(err) {
        thenable.reject(err);
      }
    });
    if (!timer) {
      timer = setTimeout(nextChunk, 0);
    }
    return thenable
  }
}();

/**
 * Fallback JS-based implementation, fanned out to a number of worker threads for parallelism
 */
const generateSDF_JS_Worker = /*#__PURE__*/function() {
  const threadCount = 4; //how many workers to spawn
  const idleTimeout = 2000; //workers will be terminated after being idle this many milliseconds
  const threads = {};
  let callNum = 0;
  return function(width, height, path, viewBox, distance, exponent, canvas, x, y, channel) {
    const workerId = 'TroikaTextSDFGenerator_JS_' + ((callNum++) % threadCount);
    let thread = threads[workerId];
    if (!thread) {
      thread = threads[workerId] = {
        workerModule: defineWorkerModule({
          name: workerId,
          workerId,
          dependencies: [
            SDFGenerator,
            now$1
          ],
          init(_createSDFGenerator, now) {
            const generate = _createSDFGenerator().javascript.generate;
            return function (...args) {
              const start = now();
              const textureData = generate(...args);
              return {
                textureData,
                timing: now() - start
              }
            }
          },
          getTransferables(result) {
            return [result.textureData.buffer]
          }
        }),
        requests: 0,
        idleTimer: null
      };
    }

    thread.requests++;
    clearTimeout(thread.idleTimer);
    return thread.workerModule(width, height, path, viewBox, distance, exponent)
      .then(({textureData, timing}) => {
        // copy result data into the canvas
        const start = now$1();
        // expand single-channel data into rgba
        const imageData = new Uint8Array(textureData.length * 4);
        for (let i = 0; i < textureData.length; i++) {
          imageData[i * 4 + channel] = textureData[i];
        }
        mainThreadGenerator.webglUtils.renderImageData(canvas, imageData, x, y, width, height, 1 << (3 - channel));
        timing += now$1() - start;

        // clean up workers after a while
        if (--thread.requests === 0) {
          thread.idleTimer = setTimeout(() => { terminateWorker(workerId); }, idleTimeout);
        }
        return {timing}
      })
  }
}();

function warmUpSDFCanvas(canvas) {
  if (!canvas._warm) {
    mainThreadGenerator.webgl.isSupported(canvas);
    canvas._warm = true;
  }
}

const resizeWebGLCanvasWithoutClearing = mainThreadGenerator.webglUtils.resizeWebGLCanvasWithoutClearing;

function bidiFactory() {
var bidi = (function (exports) {

  // Bidi character types data, auto generated
  var DATA = {
    "R": "13k,1a,2,3,3,2+1j,ch+16,a+1,5+2,2+n,5,a,4,6+16,4+3,h+1b,4mo,179q,2+9,2+11,2i9+7y,2+68,4,3+4,5+13,4+3,2+4k,3+29,8+cf,1t+7z,w+17,3+3m,1t+3z,16o1+5r,8+30,8+mc,29+1r,29+4v,75+73",
    "EN": "1c+9,3d+1,6,187+9,513,4+5,7+9,sf+j,175h+9,qw+q,161f+1d,4xt+a,25i+9",
    "ES": "17,2,6dp+1,f+1,av,16vr,mx+1,4o,2",
    "ET": "z+2,3h+3,b+1,ym,3e+1,2o,p4+1,8,6u,7c,g6,1wc,1n9+4,30+1b,2n,6d,qhx+1,h0m,a+1,49+2,63+1,4+1,6bb+3,12jj",
    "AN": "16o+5,2j+9,2+1,35,ed,1ff2+9,87+u",
    "CS": "18,2+1,b,2u,12k,55v,l,17v0,2,3,53,2+1,b",
    "B": "a,3,f+2,2v,690",
    "S": "9,2,k",
    "WS": "c,k,4f4,1vk+a,u,1j,335",
    "ON": "x+1,4+4,h+5,r+5,r+3,z,5+3,2+1,2+1,5,2+2,3+4,o,w,ci+1,8+d,3+d,6+8,2+g,39+1,9,6+1,2,33,b8,3+1,3c+1,7+1,5r,b,7h+3,sa+5,2,3i+6,jg+3,ur+9,2v,ij+1,9g+9,7+a,8m,4+1,49+x,14u,2+2,c+2,e+2,e+2,e+1,i+n,e+e,2+p,u+2,e+2,36+1,2+3,2+1,b,2+2,6+5,2,2,2,h+1,5+4,6+3,3+f,16+2,5+3l,3+81,1y+p,2+40,q+a,m+13,2r+ch,2+9e,75+hf,3+v,2+2w,6e+5,f+6,75+2a,1a+p,2+2g,d+5x,r+b,6+3,4+o,g,6+1,6+2,2k+1,4,2j,5h+z,1m+1,1e+f,t+2,1f+e,d+3,4o+3,2s+1,w,535+1r,h3l+1i,93+2,2s,b+1,3l+x,2v,4g+3,21+3,kz+1,g5v+1,5a,j+9,n+v,2,3,2+8,2+1,3+2,2,3,46+1,4+4,h+5,r+5,r+a,3h+2,4+6,b+4,78,1r+24,4+c,4,1hb,ey+6,103+j,16j+c,1ux+7,5+g,fsh,jdq+1t,4,57+2e,p1,1m,1m,1m,1m,4kt+1,7j+17,5+2r,d+e,3+e,2+e,2+10,m+4,w,1n+5,1q,4z+5,4b+rb,9+c,4+c,4+37,d+2g,8+b,l+b,5+1j,9+9,7+13,9+t,3+1,27+3c,2+29,2+3q,d+d,3+4,4+2,6+6,a+o,8+6,a+2,e+6,16+42,2+1i",
    "BN": "0+8,6+d,2s+5,2+p,e,4m9,1kt+2,2b+5,5+5,17q9+v,7k,6p+8,6+1,119d+3,440+7,96s+1,1ekf+1,1ekf+1,1ekf+1,1ekf+1,1ekf+1,1ekf+1,1ekf+1,1ekf+1,1ekf+1,1ekf+1,1ekf+1,1ekf+75,6p+2rz,1ben+1,1ekf+1,1ekf+1",
    "NSM": "lc+33,7o+6,7c+18,2,2+1,2+1,2,21+a,1d+k,h,2u+6,3+5,3+1,2+3,10,v+q,2k+a,1n+8,a,p+3,2+8,2+2,2+4,18+2,3c+e,2+v,1k,2,5+7,5,4+6,b+1,u,1n,5+3,9,l+1,r,3+1,1m,5+1,5+1,3+2,4,v+1,4,c+1,1m,5+4,2+1,5,l+1,n+5,2,1n,3,2+3,9,8+1,c+1,v,1q,d,1f,4,1m+2,6+2,2+3,8+1,c+1,u,1n,g+1,l+1,t+1,1m+1,5+3,9,l+1,u,21,8+2,2,2j,3+6,d+7,2r,3+8,c+5,23+1,s,2,2,1k+d,2+4,2+1,6+a,2+z,a,2v+3,2+5,2+1,3+1,q+1,5+2,h+3,e,3+1,7,g,jk+2,qb+2,u+2,u+1,v+1,1t+1,2+6,9,3+a,a,1a+2,3c+1,z,3b+2,5+1,a,7+2,64+1,3,1n,2+6,2,2,3+7,7+9,3,1d+g,1s+3,1d,2+4,2,6,15+8,d+1,x+3,3+1,2+2,1l,2+1,4,2+2,1n+7,3+1,49+2,2+c,2+6,5,7,4+1,5j+1l,2+4,k1+w,2db+2,3y,2p+v,ff+3,30+1,n9x+3,2+9,x+1,29+1,7l,4,5,q+1,6,48+1,r+h,e,13+7,q+a,1b+2,1d,3+3,3+1,14,1w+5,3+1,3+1,d,9,1c,1g,2+2,3+1,6+1,2,17+1,9,6n,3,5,fn5,ki+f,h+f,r2,6b,46+4,1af+2,2+1,6+3,15+2,5,4m+1,fy+3,as+1,4a+a,4x,1j+e,1l+2,1e+3,3+1,1y+2,11+4,2+7,1r,d+1,1h+8,b+3,3,2o+2,3,2+1,7,4h,4+7,m+1,1m+1,4,12+6,4+4,5g+7,3+2,2,o,2d+5,2,5+1,2+1,6n+3,7+1,2+1,s+1,2e+7,3,2+1,2z,2,3+5,2,2u+2,3+3,2+4,78+8,2+1,75+1,2,5,41+3,3+1,5,x+5,3+1,15+5,3+3,9,a+5,3+2,1b+c,2+1,bb+6,2+5,2d+l,3+6,2+1,2+1,3f+5,4,2+1,2+6,2,21+1,4,2,9o+1,f0c+4,1o+6,t5,1s+3,2a,f5l+1,43t+2,i+7,3+6,v+3,45+2,1j0+1i,5+1d,9,f,n+4,2+e,11t+6,2+g,3+6,2+1,2+4,7a+6,c6+3,15t+6,32+6,gzhy+6n",
    "AL": "16w,3,2,e+1b,z+2,2+2s,g+1,8+1,b+m,2+t,s+2i,c+e,4h+f,1d+1e,1bwe+dp,3+3z,x+c,2+1,35+3y,2rm+z,5+7,b+5,dt+l,c+u,17nl+27,1t+27,4x+6n,3+d",
    "LRO": "6ct",
    "RLO": "6cu",
    "LRE": "6cq",
    "RLE": "6cr",
    "PDF": "6cs",
    "LRI": "6ee",
    "RLI": "6ef",
    "FSI": "6eg",
    "PDI": "6eh"
  };

  var TYPES = {};
  var TYPES_TO_NAMES = {};
  TYPES.L = 1; //L is the default
  TYPES_TO_NAMES[1] = 'L';
  Object.keys(DATA).forEach(function (type, i) {
    TYPES[type] = 1 << (i + 1);
    TYPES_TO_NAMES[TYPES[type]] = type;
  });
  Object.freeze(TYPES);

  var ISOLATE_INIT_TYPES = TYPES.LRI | TYPES.RLI | TYPES.FSI;
  var STRONG_TYPES = TYPES.L | TYPES.R | TYPES.AL;
  var NEUTRAL_ISOLATE_TYPES = TYPES.B | TYPES.S | TYPES.WS | TYPES.ON | TYPES.FSI | TYPES.LRI | TYPES.RLI | TYPES.PDI;
  var BN_LIKE_TYPES = TYPES.BN | TYPES.RLE | TYPES.LRE | TYPES.RLO | TYPES.LRO | TYPES.PDF;
  var TRAILING_TYPES = TYPES.S | TYPES.WS | TYPES.B | ISOLATE_INIT_TYPES | TYPES.PDI | BN_LIKE_TYPES;

  var map = null;

  function parseData () {
    if (!map) {
      //const start = performance.now()
      map = new Map();
      var loop = function ( type ) {
        if (DATA.hasOwnProperty(type)) {
          var lastCode = 0;
          DATA[type].split(',').forEach(function (range) {
            var ref = range.split('+');
            var skip = ref[0];
            var step = ref[1];
            skip = parseInt(skip, 36);
            step = step ? parseInt(step, 36) : 0;
            map.set(lastCode += skip, TYPES[type]);
            for (var i = 0; i < step; i++) {
              map.set(++lastCode, TYPES[type]);
            }
          });
        }
      };

      for (var type in DATA) loop( type );
      //console.log(`char types parsed in ${performance.now() - start}ms`)
    }
  }

  /**
   * @param {string} char
   * @return {number}
   */
  function getBidiCharType (char) {
    parseData();
    return map.get(char.codePointAt(0)) || TYPES.L
  }

  function getBidiCharTypeName(char) {
    return TYPES_TO_NAMES[getBidiCharType(char)]
  }

  // Bidi bracket pairs data, auto generated
  var data$1 = {
    "pairs": "14>1,1e>2,u>2,2wt>1,1>1,1ge>1,1wp>1,1j>1,f>1,hm>1,1>1,u>1,u6>1,1>1,+5,28>1,w>1,1>1,+3,b8>1,1>1,+3,1>3,-1>-1,3>1,1>1,+2,1s>1,1>1,x>1,th>1,1>1,+2,db>1,1>1,+3,3>1,1>1,+2,14qm>1,1>1,+1,4q>1,1e>2,u>2,2>1,+1",
    "canonical": "6f1>-6dx,6dy>-6dx,6ec>-6ed,6ee>-6ed,6ww>2jj,-2ji>2jj,14r4>-1e7l,1e7m>-1e7l,1e7m>-1e5c,1e5d>-1e5b,1e5c>-14qx,14qy>-14qx,14vn>-1ecg,1ech>-1ecg,1edu>-1ecg,1eci>-1ecg,1eda>-1ecg,1eci>-1ecg,1eci>-168q,168r>-168q,168s>-14ye,14yf>-14ye"
  };

  /**
   * Parses an string that holds encoded codepoint mappings, e.g. for bracket pairs or
   * mirroring characters, as encoded by scripts/generateBidiData.js. Returns an object
   * holding the `map`, and optionally a `reverseMap` if `includeReverse:true`.
   * @param {string} encodedString
   * @param {boolean} includeReverse - true if you want reverseMap in the output
   * @return {{map: Map<number, number>, reverseMap?: Map<number, number>}}
   */
  function parseCharacterMap (encodedString, includeReverse) {
    var radix = 36;
    var lastCode = 0;
    var map = new Map();
    var reverseMap = includeReverse && new Map();
    var prevPair;
    encodedString.split(',').forEach(function visit(entry) {
      if (entry.indexOf('+') !== -1) {
        for (var i = +entry; i--;) {
          visit(prevPair);
        }
      } else {
        prevPair = entry;
        var ref = entry.split('>');
        var a = ref[0];
        var b = ref[1];
        a = String.fromCodePoint(lastCode += parseInt(a, radix));
        b = String.fromCodePoint(lastCode += parseInt(b, radix));
        map.set(a, b);
        includeReverse && reverseMap.set(b, a);
      }
    });
    return { map: map, reverseMap: reverseMap }
  }

  var openToClose, closeToOpen, canonical;

  function parse$1 () {
    if (!openToClose) {
      //const start = performance.now()
      var ref = parseCharacterMap(data$1.pairs, true);
      var map = ref.map;
      var reverseMap = ref.reverseMap;
      openToClose = map;
      closeToOpen = reverseMap;
      canonical = parseCharacterMap(data$1.canonical, false).map;
      //console.log(`brackets parsed in ${performance.now() - start}ms`)
    }
  }

  function openingToClosingBracket (char) {
    parse$1();
    return openToClose.get(char) || null
  }

  function closingToOpeningBracket (char) {
    parse$1();
    return closeToOpen.get(char) || null
  }

  function getCanonicalBracket (char) {
    parse$1();
    return canonical.get(char) || null
  }

  // Local type aliases
  var TYPE_L = TYPES.L;
  var TYPE_R = TYPES.R;
  var TYPE_EN = TYPES.EN;
  var TYPE_ES = TYPES.ES;
  var TYPE_ET = TYPES.ET;
  var TYPE_AN = TYPES.AN;
  var TYPE_CS = TYPES.CS;
  var TYPE_B = TYPES.B;
  var TYPE_S = TYPES.S;
  var TYPE_ON = TYPES.ON;
  var TYPE_BN = TYPES.BN;
  var TYPE_NSM = TYPES.NSM;
  var TYPE_AL = TYPES.AL;
  var TYPE_LRO = TYPES.LRO;
  var TYPE_RLO = TYPES.RLO;
  var TYPE_LRE = TYPES.LRE;
  var TYPE_RLE = TYPES.RLE;
  var TYPE_PDF = TYPES.PDF;
  var TYPE_LRI = TYPES.LRI;
  var TYPE_RLI = TYPES.RLI;
  var TYPE_FSI = TYPES.FSI;
  var TYPE_PDI = TYPES.PDI;

  /**
   * @typedef {object} GetEmbeddingLevelsResult
   * @property {{start, end, level}[]} paragraphs
   * @property {Uint8Array} levels
   */

  /**
   * This function applies the Bidirectional Algorithm to a string, returning the resolved embedding levels
   * in a single Uint8Array plus a list of objects holding each paragraph's start and end indices and resolved
   * base embedding level.
   *
   * @param {string} string - The input string
   * @param {"ltr"|"rtl"|"auto"} [baseDirection] - Use "ltr" or "rtl" to force a base paragraph direction,
   *        otherwise a direction will be chosen automatically from each paragraph's contents.
   * @return {GetEmbeddingLevelsResult}
   */
  function getEmbeddingLevels (string, baseDirection) {
    var MAX_DEPTH = 125;

    // Start by mapping all characters to their unicode type, as a bitmask integer
    var charTypes = new Uint32Array(string.length);
    for (var i = 0; i < string.length; i++) {
      charTypes[i] = getBidiCharType(string[i]);
    }

    var charTypeCounts = new Map(); //will be cleared at start of each paragraph
    function changeCharType(i, type) {
      var oldType = charTypes[i];
      charTypes[i] = type;
      charTypeCounts.set(oldType, charTypeCounts.get(oldType) - 1);
      if (oldType & NEUTRAL_ISOLATE_TYPES) {
        charTypeCounts.set(NEUTRAL_ISOLATE_TYPES, charTypeCounts.get(NEUTRAL_ISOLATE_TYPES) - 1);
      }
      charTypeCounts.set(type, (charTypeCounts.get(type) || 0) + 1);
      if (type & NEUTRAL_ISOLATE_TYPES) {
        charTypeCounts.set(NEUTRAL_ISOLATE_TYPES, (charTypeCounts.get(NEUTRAL_ISOLATE_TYPES) || 0) + 1);
      }
    }

    var embedLevels = new Uint8Array(string.length);
    var isolationPairs = new Map(); //init->pdi and pdi->init

    // === 3.3.1 The Paragraph Level ===
    // 3.3.1 P1: Split the text into paragraphs
    var paragraphs = []; // [{start, end, level}, ...]
    var paragraph = null;
    for (var i$1 = 0; i$1 < string.length; i$1++) {
      if (!paragraph) {
        paragraphs.push(paragraph = {
          start: i$1,
          end: string.length - 1,
          // 3.3.1 P2-P3: Determine the paragraph level
          level: baseDirection === 'rtl' ? 1 : baseDirection === 'ltr' ? 0 : determineAutoEmbedLevel(i$1, false)
        });
      }
      if (charTypes[i$1] & TYPE_B) {
        paragraph.end = i$1;
        paragraph = null;
      }
    }

    var FORMATTING_TYPES = TYPE_RLE | TYPE_LRE | TYPE_RLO | TYPE_LRO | ISOLATE_INIT_TYPES | TYPE_PDI | TYPE_PDF | TYPE_B;
    var nextEven = function (n) { return n + ((n & 1) ? 1 : 2); };
    var nextOdd = function (n) { return n + ((n & 1) ? 2 : 1); };

    // Everything from here on will operate per paragraph.
    for (var paraIdx = 0; paraIdx < paragraphs.length; paraIdx++) {
      paragraph = paragraphs[paraIdx];
      var statusStack = [{
        _level: paragraph.level,
        _override: 0, //0=neutral, 1=L, 2=R
        _isolate: 0 //bool
      }];
      var stackTop = (void 0);
      var overflowIsolateCount = 0;
      var overflowEmbeddingCount = 0;
      var validIsolateCount = 0;
      charTypeCounts.clear();

      // === 3.3.2 Explicit Levels and Directions ===
      for (var i$2 = paragraph.start; i$2 <= paragraph.end; i$2++) {
        var charType = charTypes[i$2];
        stackTop = statusStack[statusStack.length - 1];

        // Set initial counts
        charTypeCounts.set(charType, (charTypeCounts.get(charType) || 0) + 1);
        if (charType & NEUTRAL_ISOLATE_TYPES) {
          charTypeCounts.set(NEUTRAL_ISOLATE_TYPES, (charTypeCounts.get(NEUTRAL_ISOLATE_TYPES) || 0) + 1);
        }

        // Explicit Embeddings: 3.3.2 X2 - X3
        if (charType & FORMATTING_TYPES) { //prefilter all formatters
          if (charType & (TYPE_RLE | TYPE_LRE)) {
            embedLevels[i$2] = stackTop._level; // 5.2
            var level = (charType === TYPE_RLE ? nextOdd : nextEven)(stackTop._level);
            if (level <= MAX_DEPTH && !overflowIsolateCount && !overflowEmbeddingCount) {
              statusStack.push({
                _level: level,
                _override: 0,
                _isolate: 0
              });
            } else if (!overflowIsolateCount) {
              overflowEmbeddingCount++;
            }
          }

          // Explicit Overrides: 3.3.2 X4 - X5
          else if (charType & (TYPE_RLO | TYPE_LRO)) {
            embedLevels[i$2] = stackTop._level; // 5.2
            var level$1 = (charType === TYPE_RLO ? nextOdd : nextEven)(stackTop._level);
            if (level$1 <= MAX_DEPTH && !overflowIsolateCount && !overflowEmbeddingCount) {
              statusStack.push({
                _level: level$1,
                _override: (charType & TYPE_RLO) ? TYPE_R : TYPE_L,
                _isolate: 0
              });
            } else if (!overflowIsolateCount) {
              overflowEmbeddingCount++;
            }
          }

          // Isolates: 3.3.2 X5a - X5c
          else if (charType & ISOLATE_INIT_TYPES) {
            // X5c - FSI becomes either RLI or LRI
            if (charType & TYPE_FSI) {
              charType = determineAutoEmbedLevel(i$2 + 1, true) === 1 ? TYPE_RLI : TYPE_LRI;
            }

            embedLevels[i$2] = stackTop._level;
            if (stackTop._override) {
              changeCharType(i$2, stackTop._override);
            }
            var level$2 = (charType === TYPE_RLI ? nextOdd : nextEven)(stackTop._level);
            if (level$2 <= MAX_DEPTH && overflowIsolateCount === 0 && overflowEmbeddingCount === 0) {
              validIsolateCount++;
              statusStack.push({
                _level: level$2,
                _override: 0,
                _isolate: 1,
                _isolInitIndex: i$2
              });
            } else {
              overflowIsolateCount++;
            }
          }

          // Terminating Isolates: 3.3.2 X6a
          else if (charType & TYPE_PDI) {
            if (overflowIsolateCount > 0) {
              overflowIsolateCount--;
            } else if (validIsolateCount > 0) {
              overflowEmbeddingCount = 0;
              while (!statusStack[statusStack.length - 1]._isolate) {
                statusStack.pop();
              }
              // Add to isolation pairs bidirectional mapping:
              var isolInitIndex = statusStack[statusStack.length - 1]._isolInitIndex;
              if (isolInitIndex != null) {
                isolationPairs.set(isolInitIndex, i$2);
                isolationPairs.set(i$2, isolInitIndex);
              }
              statusStack.pop();
              validIsolateCount--;
            }
            stackTop = statusStack[statusStack.length - 1];
            embedLevels[i$2] = stackTop._level;
            if (stackTop._override) {
              changeCharType(i$2, stackTop._override);
            }
          }


          // Terminating Embeddings and Overrides: 3.3.2 X7
          else if (charType & TYPE_PDF) {
            if (overflowIsolateCount === 0) {
              if (overflowEmbeddingCount > 0) {
                overflowEmbeddingCount--;
              } else if (!stackTop._isolate && statusStack.length > 1) {
                statusStack.pop();
                stackTop = statusStack[statusStack.length - 1];
              }
            }
            embedLevels[i$2] = stackTop._level; // 5.2
          }

          // End of Paragraph: 3.3.2 X8
          else if (charType & TYPE_B) {
            embedLevels[i$2] = paragraph.level;
          }
        }

        // Non-formatting characters: 3.3.2 X6
        else {
          embedLevels[i$2] = stackTop._level;
          // NOTE: This exclusion of BN seems to go against what section 5.2 says, but is required for test passage
          if (stackTop._override && charType !== TYPE_BN) {
            changeCharType(i$2, stackTop._override);
          }
        }
      }

      // === 3.3.3 Preparations for Implicit Processing ===

      // Remove all RLE, LRE, RLO, LRO, PDF, and BN characters: 3.3.3 X9
      // Note: Due to section 5.2, we won't remove them, but we'll use the BN_LIKE_TYPES bitset to
      // easily ignore them all from here on out.

      // 3.3.3 X10
      // Compute the set of isolating run sequences as specified by BD13
      var levelRuns = [];
      var currentRun = null;
      for (var i$3 = paragraph.start; i$3 <= paragraph.end; i$3++) {
        var charType$1 = charTypes[i$3];
        if (!(charType$1 & BN_LIKE_TYPES)) {
          var lvl = embedLevels[i$3];
          var isIsolInit = charType$1 & ISOLATE_INIT_TYPES;
          var isPDI = charType$1 === TYPE_PDI;
          if (currentRun && lvl === currentRun._level) {
            currentRun._end = i$3;
            currentRun._endsWithIsolInit = isIsolInit;
          } else {
            levelRuns.push(currentRun = {
              _start: i$3,
              _end: i$3,
              _level: lvl,
              _startsWithPDI: isPDI,
              _endsWithIsolInit: isIsolInit
            });
          }
        }
      }
      var isolatingRunSeqs = []; // [{seqIndices: [], sosType: L|R, eosType: L|R}]
      for (var runIdx = 0; runIdx < levelRuns.length; runIdx++) {
        var run = levelRuns[runIdx];
        if (!run._startsWithPDI || (run._startsWithPDI && !isolationPairs.has(run._start))) {
          var seqRuns = [currentRun = run];
          for (var pdiIndex = (void 0); currentRun && currentRun._endsWithIsolInit && (pdiIndex = isolationPairs.get(currentRun._end)) != null;) {
            for (var i$4 = runIdx + 1; i$4 < levelRuns.length; i$4++) {
              if (levelRuns[i$4]._start === pdiIndex) {
                seqRuns.push(currentRun = levelRuns[i$4]);
                break
              }
            }
          }
          // build flat list of indices across all runs:
          var seqIndices = [];
          for (var i$5 = 0; i$5 < seqRuns.length; i$5++) {
            var run$1 = seqRuns[i$5];
            for (var j = run$1._start; j <= run$1._end; j++) {
              seqIndices.push(j);
            }
          }
          // determine the sos/eos types:
          var firstLevel = embedLevels[seqIndices[0]];
          var prevLevel = paragraph.level;
          for (var i$6 = seqIndices[0] - 1; i$6 >= 0; i$6--) {
            if (!(charTypes[i$6] & BN_LIKE_TYPES)) { //5.2
              prevLevel = embedLevels[i$6];
              break
            }
          }
          var lastIndex = seqIndices[seqIndices.length - 1];
          var lastLevel = embedLevels[lastIndex];
          var nextLevel = paragraph.level;
          if (!(charTypes[lastIndex] & ISOLATE_INIT_TYPES)) {
            for (var i$7 = lastIndex + 1; i$7 <= paragraph.end; i$7++) {
              if (!(charTypes[i$7] & BN_LIKE_TYPES)) { //5.2
                nextLevel = embedLevels[i$7];
                break
              }
            }
          }
          isolatingRunSeqs.push({
            _seqIndices: seqIndices,
            _sosType: Math.max(prevLevel, firstLevel) % 2 ? TYPE_R : TYPE_L,
            _eosType: Math.max(nextLevel, lastLevel) % 2 ? TYPE_R : TYPE_L
          });
        }
      }

      // The next steps are done per isolating run sequence
      for (var seqIdx = 0; seqIdx < isolatingRunSeqs.length; seqIdx++) {
        var ref = isolatingRunSeqs[seqIdx];
        var seqIndices$1 = ref._seqIndices;
        var sosType = ref._sosType;
        var eosType = ref._eosType;

        // === 3.3.4 Resolving Weak Types ===

        // W1 + 5.2. Search backward from each NSM to the first character in the isolating run sequence whose
        // bidirectional type is not BN, and set the NSM to ON if it is an isolate initiator or PDI, and to its
        // type otherwise. If the NSM is the first non-BN character, change the NSM to the type of sos.
        if (charTypeCounts.get(TYPE_NSM)) {
          for (var si = 0; si < seqIndices$1.length; si++) {
            var i$8 = seqIndices$1[si];
            if (charTypes[i$8] & TYPE_NSM) {
              var prevType = sosType;
              for (var sj = si - 1; sj >= 0; sj--) {
                if (!(charTypes[seqIndices$1[sj]] & BN_LIKE_TYPES)) { //5.2 scan back to first non-BN
                  prevType = charTypes[seqIndices$1[sj]];
                  break
                }
              }
              changeCharType(i$8, (prevType & (ISOLATE_INIT_TYPES | TYPE_PDI)) ? TYPE_ON : prevType);
            }
          }
        }

        // W2. Search backward from each instance of a European number until the first strong type (R, L, AL, or sos)
        // is found. If an AL is found, change the type of the European number to Arabic number.
        if (charTypeCounts.get(TYPE_EN)) {
          for (var si$1 = 0; si$1 < seqIndices$1.length; si$1++) {
            var i$9 = seqIndices$1[si$1];
            if (charTypes[i$9] & TYPE_EN) {
              for (var sj$1 = si$1 - 1; sj$1 >= -1; sj$1--) {
                var prevCharType = sj$1 === -1 ? sosType : charTypes[seqIndices$1[sj$1]];
                if (prevCharType & STRONG_TYPES) {
                  if (prevCharType === TYPE_AL) {
                    changeCharType(i$9, TYPE_AN);
                  }
                  break
                }
              }
            }
          }
        }

        // W3. Change all ALs to R
        if (charTypeCounts.get(TYPE_AL)) {
          for (var si$2 = 0; si$2 < seqIndices$1.length; si$2++) {
            var i$10 = seqIndices$1[si$2];
            if (charTypes[i$10] & TYPE_AL) {
              changeCharType(i$10, TYPE_R);
            }
          }
        }

        // W4. A single European separator between two European numbers changes to a European number. A single common
        // separator between two numbers of the same type changes to that type.
        if (charTypeCounts.get(TYPE_ES) || charTypeCounts.get(TYPE_CS)) {
          for (var si$3 = 1; si$3 < seqIndices$1.length - 1; si$3++) {
            var i$11 = seqIndices$1[si$3];
            if (charTypes[i$11] & (TYPE_ES | TYPE_CS)) {
              var prevType$1 = 0, nextType = 0;
              for (var sj$2 = si$3 - 1; sj$2 >= 0; sj$2--) {
                prevType$1 = charTypes[seqIndices$1[sj$2]];
                if (!(prevType$1 & BN_LIKE_TYPES)) { //5.2
                  break
                }
              }
              for (var sj$3 = si$3 + 1; sj$3 < seqIndices$1.length; sj$3++) {
                nextType = charTypes[seqIndices$1[sj$3]];
                if (!(nextType & BN_LIKE_TYPES)) { //5.2
                  break
                }
              }
              if (prevType$1 === nextType && (charTypes[i$11] === TYPE_ES ? prevType$1 === TYPE_EN : (prevType$1 & (TYPE_EN | TYPE_AN)))) {
                changeCharType(i$11, prevType$1);
              }
            }
          }
        }

        // W5. A sequence of European terminators adjacent to European numbers changes to all European numbers.
        if (charTypeCounts.get(TYPE_EN)) {
          for (var si$4 = 0; si$4 < seqIndices$1.length; si$4++) {
            var i$12 = seqIndices$1[si$4];
            if (charTypes[i$12] & TYPE_EN) {
              for (var sj$4 = si$4 - 1; sj$4 >= 0 && (charTypes[seqIndices$1[sj$4]] & (TYPE_ET | BN_LIKE_TYPES)); sj$4--) {
                changeCharType(seqIndices$1[sj$4], TYPE_EN);
              }
              for (var sj$5 = si$4 + 1; sj$5 < seqIndices$1.length && (charTypes[seqIndices$1[sj$5]] & (TYPE_ET | BN_LIKE_TYPES)); sj$5++) {
                changeCharType(seqIndices$1[sj$5], TYPE_EN);
              }
            }
          }
        }

        // W6. Otherwise, separators and terminators change to Other Neutral.
        if (charTypeCounts.get(TYPE_ET) || charTypeCounts.get(TYPE_ES) || charTypeCounts.get(TYPE_CS)) {
          for (var si$5 = 0; si$5 < seqIndices$1.length; si$5++) {
            var i$13 = seqIndices$1[si$5];
            if (charTypes[i$13] & (TYPE_ET | TYPE_ES | TYPE_CS)) {
              changeCharType(i$13, TYPE_ON);
              // 5.2 transform adjacent BNs too:
              for (var sj$6 = si$5 - 1; sj$6 >= 0 && (charTypes[seqIndices$1[sj$6]] & BN_LIKE_TYPES); sj$6--) {
                changeCharType(seqIndices$1[sj$6], TYPE_ON);
              }
              for (var sj$7 = si$5 + 1; sj$7 < seqIndices$1.length && (charTypes[seqIndices$1[sj$7]] & BN_LIKE_TYPES); sj$7++) {
                changeCharType(seqIndices$1[sj$7], TYPE_ON);
              }
            }
          }
        }

        // W7. Search backward from each instance of a European number until the first strong type (R, L, or sos)
        // is found. If an L is found, then change the type of the European number to L.
        // NOTE: implemented in single forward pass for efficiency
        if (charTypeCounts.get(TYPE_EN)) {
          for (var si$6 = 0, prevStrongType = sosType; si$6 < seqIndices$1.length; si$6++) {
            var i$14 = seqIndices$1[si$6];
            var type = charTypes[i$14];
            if (type & TYPE_EN) {
              if (prevStrongType === TYPE_L) {
                changeCharType(i$14, TYPE_L);
              }
            } else if (type & STRONG_TYPES) {
              prevStrongType = type;
            }
          }
        }

        // === 3.3.5 Resolving Neutral and Isolate Formatting Types ===

        if (charTypeCounts.get(NEUTRAL_ISOLATE_TYPES)) {
          // N0. Process bracket pairs in an isolating run sequence sequentially in the logical order of the text
          // positions of the opening paired brackets using the logic given below. Within this scope, bidirectional
          // types EN and AN are treated as R.
          var R_TYPES_FOR_N_STEPS = (TYPE_R | TYPE_EN | TYPE_AN);
          var STRONG_TYPES_FOR_N_STEPS = R_TYPES_FOR_N_STEPS | TYPE_L;

          // * Identify the bracket pairs in the current isolating run sequence according to BD16.
          var bracketPairs = [];
          {
            var openerStack = [];
            for (var si$7 = 0; si$7 < seqIndices$1.length; si$7++) {
              // NOTE: for any potential bracket character we also test that it still carries a NI
              // type, as that may have been changed earlier. This doesn't seem to be explicitly
              // called out in the spec, but is required for passage of certain tests.
              if (charTypes[seqIndices$1[si$7]] & NEUTRAL_ISOLATE_TYPES) {
                var char = string[seqIndices$1[si$7]];
                var oppositeBracket = (void 0);
                // Opening bracket
                if (openingToClosingBracket(char) !== null) {
                  if (openerStack.length < 63) {
                    openerStack.push({ char: char, seqIndex: si$7 });
                  } else {
                    break
                  }
                }
                // Closing bracket
                else if ((oppositeBracket = closingToOpeningBracket(char)) !== null) {
                  for (var stackIdx = openerStack.length - 1; stackIdx >= 0; stackIdx--) {
                    var stackChar = openerStack[stackIdx].char;
                    if (stackChar === oppositeBracket ||
                      stackChar === closingToOpeningBracket(getCanonicalBracket(char)) ||
                      openingToClosingBracket(getCanonicalBracket(stackChar)) === char
                    ) {
                      bracketPairs.push([openerStack[stackIdx].seqIndex, si$7]);
                      openerStack.length = stackIdx; //pop the matching bracket and all following
                      break
                    }
                  }
                }
              }
            }
            bracketPairs.sort(function (a, b) { return a[0] - b[0]; });
          }
          // * For each bracket-pair element in the list of pairs of text positions
          for (var pairIdx = 0; pairIdx < bracketPairs.length; pairIdx++) {
            var ref$1 = bracketPairs[pairIdx];
            var openSeqIdx = ref$1[0];
            var closeSeqIdx = ref$1[1];
            // a. Inspect the bidirectional types of the characters enclosed within the bracket pair.
            // b. If any strong type (either L or R) matching the embedding direction is found, set the type for both
            // brackets in the pair to match the embedding direction.
            var foundStrongType = false;
            var useStrongType = 0;
            for (var si$8 = openSeqIdx + 1; si$8 < closeSeqIdx; si$8++) {
              var i$15 = seqIndices$1[si$8];
              if (charTypes[i$15] & STRONG_TYPES_FOR_N_STEPS) {
                foundStrongType = true;
                var lr = (charTypes[i$15] & R_TYPES_FOR_N_STEPS) ? TYPE_R : TYPE_L;
                if (lr === getEmbedDirection(i$15)) {
                  useStrongType = lr;
                  break
                }
              }
            }
            // c. Otherwise, if there is a strong type it must be opposite the embedding direction. Therefore, test
            // for an established context with a preceding strong type by checking backwards before the opening paired
            // bracket until the first strong type (L, R, or sos) is found.
            //    1. If the preceding strong type is also opposite the embedding direction, context is established, so
            //    set the type for both brackets in the pair to that direction.
            //    2. Otherwise set the type for both brackets in the pair to the embedding direction.
            if (foundStrongType && !useStrongType) {
              useStrongType = sosType;
              for (var si$9 = openSeqIdx - 1; si$9 >= 0; si$9--) {
                var i$16 = seqIndices$1[si$9];
                if (charTypes[i$16] & STRONG_TYPES_FOR_N_STEPS) {
                  var lr$1 = (charTypes[i$16] & R_TYPES_FOR_N_STEPS) ? TYPE_R : TYPE_L;
                  if (lr$1 !== getEmbedDirection(i$16)) {
                    useStrongType = lr$1;
                  } else {
                    useStrongType = getEmbedDirection(i$16);
                  }
                  break
                }
              }
            }
            if (useStrongType) {
              charTypes[seqIndices$1[openSeqIdx]] = charTypes[seqIndices$1[closeSeqIdx]] = useStrongType;
              // * Any number of characters that had original bidirectional character type NSM prior to the application
              // of W1 that immediately follow a paired bracket which changed to L or R under N0 should change to match
              // the type of their preceding bracket.
              if (useStrongType !== getEmbedDirection(seqIndices$1[openSeqIdx])) {
                for (var si$10 = openSeqIdx + 1; si$10 < seqIndices$1.length; si$10++) {
                  if (!(charTypes[seqIndices$1[si$10]] & BN_LIKE_TYPES)) {
                    if (getBidiCharType(string[seqIndices$1[si$10]]) & TYPE_NSM) {
                      charTypes[seqIndices$1[si$10]] = useStrongType;
                    }
                    break
                  }
                }
              }
              if (useStrongType !== getEmbedDirection(seqIndices$1[closeSeqIdx])) {
                for (var si$11 = closeSeqIdx + 1; si$11 < seqIndices$1.length; si$11++) {
                  if (!(charTypes[seqIndices$1[si$11]] & BN_LIKE_TYPES)) {
                    if (getBidiCharType(string[seqIndices$1[si$11]]) & TYPE_NSM) {
                      charTypes[seqIndices$1[si$11]] = useStrongType;
                    }
                    break
                  }
                }
              }
            }
          }

          // N1. A sequence of NIs takes the direction of the surrounding strong text if the text on both sides has the
          // same direction.
          // N2. Any remaining NIs take the embedding direction.
          for (var si$12 = 0; si$12 < seqIndices$1.length; si$12++) {
            if (charTypes[seqIndices$1[si$12]] & NEUTRAL_ISOLATE_TYPES) {
              var niRunStart = si$12, niRunEnd = si$12;
              var prevType$2 = sosType; //si === 0 ? sosType : (charTypes[seqIndices[si - 1]] & R_TYPES_FOR_N_STEPS) ? TYPE_R : TYPE_L
              for (var si2 = si$12 - 1; si2 >= 0; si2--) {
                if (charTypes[seqIndices$1[si2]] & BN_LIKE_TYPES) {
                  niRunStart = si2; //5.2 treat BNs adjacent to NIs as NIs
                } else {
                  prevType$2 = (charTypes[seqIndices$1[si2]] & R_TYPES_FOR_N_STEPS) ? TYPE_R : TYPE_L;
                  break
                }
              }
              var nextType$1 = eosType;
              for (var si2$1 = si$12 + 1; si2$1 < seqIndices$1.length; si2$1++) {
                if (charTypes[seqIndices$1[si2$1]] & (NEUTRAL_ISOLATE_TYPES | BN_LIKE_TYPES)) {
                  niRunEnd = si2$1;
                } else {
                  nextType$1 = (charTypes[seqIndices$1[si2$1]] & R_TYPES_FOR_N_STEPS) ? TYPE_R : TYPE_L;
                  break
                }
              }
              for (var sj$8 = niRunStart; sj$8 <= niRunEnd; sj$8++) {
                charTypes[seqIndices$1[sj$8]] = prevType$2 === nextType$1 ? prevType$2 : getEmbedDirection(seqIndices$1[sj$8]);
              }
              si$12 = niRunEnd;
            }
          }
        }
      }

      // === 3.3.6 Resolving Implicit Levels ===

      for (var i$17 = paragraph.start; i$17 <= paragraph.end; i$17++) {
        var level$3 = embedLevels[i$17];
        var type$1 = charTypes[i$17];
        // I2. For all characters with an odd (right-to-left) embedding level, those of type L, EN or AN go up one level.
        if (level$3 & 1) {
          if (type$1 & (TYPE_L | TYPE_EN | TYPE_AN)) {
            embedLevels[i$17]++;
          }
        }
          // I1. For all characters with an even (left-to-right) embedding level, those of type R go up one level
        // and those of type AN or EN go up two levels.
        else {
          if (type$1 & TYPE_R) {
            embedLevels[i$17]++;
          } else if (type$1 & (TYPE_AN | TYPE_EN)) {
            embedLevels[i$17] += 2;
          }
        }

        // 5.2: Resolve any LRE, RLE, LRO, RLO, PDF, or BN to the level of the preceding character if there is one,
        // and otherwise to the base level.
        if (type$1 & BN_LIKE_TYPES) {
          embedLevels[i$17] = i$17 === 0 ? paragraph.level : embedLevels[i$17 - 1];
        }

        // 3.4 L1.1-4: Reset the embedding level of segment/paragraph separators, and any sequence of whitespace or
        // isolate formatting characters preceding them or the end of the paragraph, to the paragraph level.
        // NOTE: this will also need to be applied to each individual line ending after line wrapping occurs.
        if (i$17 === paragraph.end || getBidiCharType(string[i$17]) & (TYPE_S | TYPE_B)) {
          for (var j$1 = i$17; j$1 >= 0 && (getBidiCharType(string[j$1]) & TRAILING_TYPES); j$1--) {
            embedLevels[j$1] = paragraph.level;
          }
        }
      }
    }

    // DONE! The resolved levels can then be used, after line wrapping, to flip runs of characters
    // according to section 3.4 Reordering Resolved Levels
    return {
      levels: embedLevels,
      paragraphs: paragraphs
    }

    function determineAutoEmbedLevel (start, isFSI) {
      // 3.3.1 P2 - P3
      for (var i = start; i < string.length; i++) {
        var charType = charTypes[i];
        if (charType & (TYPE_R | TYPE_AL)) {
          return 1
        }
        if ((charType & (TYPE_B | TYPE_L)) || (isFSI && charType === TYPE_PDI)) {
          return 0
        }
        if (charType & ISOLATE_INIT_TYPES) {
          var pdi = indexOfMatchingPDI(i);
          i = pdi === -1 ? string.length : pdi;
        }
      }
      return 0
    }

    function indexOfMatchingPDI (isolateStart) {
      // 3.1.2 BD9
      var isolationLevel = 1;
      for (var i = isolateStart + 1; i < string.length; i++) {
        var charType = charTypes[i];
        if (charType & TYPE_B) {
          break
        }
        if (charType & TYPE_PDI) {
          if (--isolationLevel === 0) {
            return i
          }
        } else if (charType & ISOLATE_INIT_TYPES) {
          isolationLevel++;
        }
      }
      return -1
    }

    function getEmbedDirection (i) {
      return (embedLevels[i] & 1) ? TYPE_R : TYPE_L
    }

  }

  // Bidi mirrored chars data, auto generated
  var data = "14>1,j>2,t>2,u>2,1a>g,2v3>1,1>1,1ge>1,1wd>1,b>1,1j>1,f>1,ai>3,-2>3,+1,8>1k0,-1jq>1y7,-1y6>1hf,-1he>1h6,-1h5>1ha,-1h8>1qi,-1pu>1,6>3u,-3s>7,6>1,1>1,f>1,1>1,+2,3>1,1>1,+13,4>1,1>1,6>1eo,-1ee>1,3>1mg,-1me>1mk,-1mj>1mi,-1mg>1mi,-1md>1,1>1,+2,1>10k,-103>1,1>1,4>1,5>1,1>1,+10,3>1,1>8,-7>8,+1,-6>7,+1,a>1,1>1,u>1,u6>1,1>1,+5,26>1,1>1,2>1,2>2,8>1,7>1,4>1,1>1,+5,b8>1,1>1,+3,1>3,-2>1,2>1,1>1,+2,c>1,3>1,1>1,+2,h>1,3>1,a>1,1>1,2>1,3>1,1>1,d>1,f>1,3>1,1a>1,1>1,6>1,7>1,13>1,k>1,1>1,+19,4>1,1>1,+2,2>1,1>1,+18,m>1,a>1,1>1,lk>1,1>1,4>1,2>1,f>1,3>1,1>1,+3,db>1,1>1,+3,3>1,1>1,+2,14qm>1,1>1,+1,6>1,4j>1,j>2,t>2,u>2,2>1,+1";

  var mirrorMap;

  function parse () {
    if (!mirrorMap) {
      //const start = performance.now()
      var ref = parseCharacterMap(data, true);
      var map = ref.map;
      var reverseMap = ref.reverseMap;
      // Combine both maps into one
      reverseMap.forEach(function (value, key) {
        map.set(key, value);
      });
      mirrorMap = map;
      //console.log(`mirrored chars parsed in ${performance.now() - start}ms`)
    }
  }

  function getMirroredCharacter (char) {
    parse();
    return mirrorMap.get(char) || null
  }

  /**
   * Given a string and its resolved embedding levels, build a map of indices to replacement chars
   * for any characters in right-to-left segments that have defined mirrored characters.
   * @param string
   * @param embeddingLevels
   * @param [start]
   * @param [end]
   * @return {Map<number, string>}
   */
  function getMirroredCharactersMap(string, embeddingLevels, start, end) {
    var strLen = string.length;
    start = Math.max(0, start == null ? 0 : +start);
    end = Math.min(strLen - 1, end == null ? strLen - 1 : +end);

    var map = new Map();
    for (var i = start; i <= end; i++) {
      if (embeddingLevels[i] & 1) { //only odd (rtl) levels
        var mirror = getMirroredCharacter(string[i]);
        if (mirror !== null) {
          map.set(i, mirror);
        }
      }
    }
    return map
  }

  /**
   * Given a start and end denoting a single line within a string, and a set of precalculated
   * bidi embedding levels, produce a list of segments whose ordering should be flipped, in sequence.
   * @param {string} string - the full input string
   * @param {GetEmbeddingLevelsResult} embeddingLevelsResult - the result object from getEmbeddingLevels
   * @param {number} [start] - first character in a subset of the full string
   * @param {number} [end] - last character in a subset of the full string
   * @return {number[][]} - the list of start/end segments that should be flipped, in order.
   */
  function getReorderSegments(string, embeddingLevelsResult, start, end) {
    var strLen = string.length;
    start = Math.max(0, start == null ? 0 : +start);
    end = Math.min(strLen - 1, end == null ? strLen - 1 : +end);

    var segments = [];
    embeddingLevelsResult.paragraphs.forEach(function (paragraph) {
      var lineStart = Math.max(start, paragraph.start);
      var lineEnd = Math.min(end, paragraph.end);
      if (lineStart < lineEnd) {
        // Local slice for mutation
        var lineLevels = embeddingLevelsResult.levels.slice(lineStart, lineEnd + 1);

        // 3.4 L1.4: Reset any sequence of whitespace characters and/or isolate formatting characters at the
        // end of the line to the paragraph level.
        for (var i = lineEnd; i >= lineStart && (getBidiCharType(string[i]) & TRAILING_TYPES); i--) {
          lineLevels[i] = paragraph.level;
        }

        // L2. From the highest level found in the text to the lowest odd level on each line, including intermediate levels
        // not actually present in the text, reverse any contiguous sequence of characters that are at that level or higher.
        var maxLevel = paragraph.level;
        var minOddLevel = Infinity;
        for (var i$1 = 0; i$1 < lineLevels.length; i$1++) {
          var level = lineLevels[i$1];
          if (level > maxLevel) { maxLevel = level; }
          if (level < minOddLevel) { minOddLevel = level | 1; }
        }
        for (var lvl = maxLevel; lvl >= minOddLevel; lvl--) {
          for (var i$2 = 0; i$2 < lineLevels.length; i$2++) {
            if (lineLevels[i$2] >= lvl) {
              var segStart = i$2;
              while (i$2 + 1 < lineLevels.length && lineLevels[i$2 + 1] >= lvl) {
                i$2++;
              }
              if (i$2 > segStart) {
                segments.push([segStart + start, i$2 + start]);
              }
            }
          }
        }
      }
    });
    return segments
  }

  /**
   * @param {string} string
   * @param {GetEmbeddingLevelsResult} embedLevelsResult
   * @param {number} [start]
   * @param {number} [end]
   * @return {string} the new string with bidi segments reordered
   */
  function getReorderedString(string, embedLevelsResult, start, end) {
    var indices = getReorderedIndices(string, embedLevelsResult, start, end);
    var chars = [].concat( string );
    indices.forEach(function (charIndex, i) {
      chars[i] = (
        (embedLevelsResult.levels[charIndex] & 1) ? getMirroredCharacter(string[charIndex]) : null
      ) || string[charIndex];
    });
    return chars.join('')
  }

  /**
   * @param {string} string
   * @param {GetEmbeddingLevelsResult} embedLevelsResult
   * @param {number} [start]
   * @param {number} [end]
   * @return {number[]} an array with character indices in their new bidi order
   */
  function getReorderedIndices(string, embedLevelsResult, start, end) {
    var segments = getReorderSegments(string, embedLevelsResult, start, end);
    // Fill an array with indices
    var indices = [];
    for (var i = 0; i < string.length; i++) {
      indices[i] = i;
    }
    // Reverse each segment in order
    segments.forEach(function (ref) {
      var start = ref[0];
      var end = ref[1];

      var slice = indices.slice(start, end + 1);
      for (var i = slice.length; i--;) {
        indices[end - i] = slice[i];
      }
    });
    return indices
  }

  exports.closingToOpeningBracket = closingToOpeningBracket;
  exports.getBidiCharType = getBidiCharType;
  exports.getBidiCharTypeName = getBidiCharTypeName;
  exports.getCanonicalBracket = getCanonicalBracket;
  exports.getEmbeddingLevels = getEmbeddingLevels;
  exports.getMirroredCharacter = getMirroredCharacter;
  exports.getMirroredCharactersMap = getMirroredCharactersMap;
  exports.getReorderSegments = getReorderSegments;
  exports.getReorderedIndices = getReorderedIndices;
  exports.getReorderedString = getReorderedString;
  exports.openingToClosingBracket = openingToClosingBracket;

  Object.defineProperty(exports, '__esModule', { value: true });

  return exports;

}({}));
return bidi}

/*!
Custom build of Typr.ts (https://github.com/fredli74/Typr.ts) for use in Troika text rendering.
Original MIT license applies: https://github.com/fredli74/Typr.ts/blob/master/LICENSE
*/
function typrFactory(){return "undefined"==typeof window&&(self.window=self),function(r){var e={parse:function(r){var t=e._bin,a=new Uint8Array(r);if("ttcf"==t.readASCII(a,0,4)){var n=4;t.readUshort(a,n),n+=2,t.readUshort(a,n),n+=2;var o=t.readUint(a,n);n+=4;for(var s=[],i=0;i<o;i++){var h=t.readUint(a,n);n+=4,s.push(e._readFont(a,h));}return s}return [e._readFont(a,0)]},_readFont:function(r,t){var a=e._bin,n=t;a.readFixed(r,t),t+=4;var o=a.readUshort(r,t);t+=2,a.readUshort(r,t),t+=2,a.readUshort(r,t),t+=2,a.readUshort(r,t),t+=2;for(var s=["cmap","head","hhea","maxp","hmtx","name","OS/2","post","loca","glyf","kern","CFF ","GPOS","GSUB","SVG "],i={_data:r,_offset:n},h={},f=0;f<o;f++){var d=a.readASCII(r,t,4);t+=4,a.readUint(r,t),t+=4;var l=a.readUint(r,t);t+=4;var u=a.readUint(r,t);t+=4,h[d]={offset:l,length:u};}for(f=0;f<s.length;f++){var v=s[f];h[v]&&(i[v.trim()]=e[v.trim()].parse(r,h[v].offset,h[v].length,i));}return i},_tabOffset:function(r,t,a){for(var n=e._bin,o=n.readUshort(r,a+4),s=a+12,i=0;i<o;i++){var h=n.readASCII(r,s,4);s+=4,n.readUint(r,s),s+=4;var f=n.readUint(r,s);if(s+=4,n.readUint(r,s),s+=4,h==t)return f}return 0}};e._bin={readFixed:function(r,e){return (r[e]<<8|r[e+1])+(r[e+2]<<8|r[e+3])/65540},readF2dot14:function(r,t){return e._bin.readShort(r,t)/16384},readInt:function(r,t){return e._bin._view(r).getInt32(t)},readInt8:function(r,t){return e._bin._view(r).getInt8(t)},readShort:function(r,t){return e._bin._view(r).getInt16(t)},readUshort:function(r,t){return e._bin._view(r).getUint16(t)},readUshorts:function(r,t,a){for(var n=[],o=0;o<a;o++)n.push(e._bin.readUshort(r,t+2*o));return n},readUint:function(r,t){return e._bin._view(r).getUint32(t)},readUint64:function(r,t){return 4294967296*e._bin.readUint(r,t)+e._bin.readUint(r,t+4)},readASCII:function(r,e,t){for(var a="",n=0;n<t;n++)a+=String.fromCharCode(r[e+n]);return a},readUnicode:function(r,e,t){for(var a="",n=0;n<t;n++){var o=r[e++]<<8|r[e++];a+=String.fromCharCode(o);}return a},_tdec:"undefined"!=typeof window&&window.TextDecoder?new window.TextDecoder:null,readUTF8:function(r,t,a){var n=e._bin._tdec;return n&&0==t&&a==r.length?n.decode(r):e._bin.readASCII(r,t,a)},readBytes:function(r,e,t){for(var a=[],n=0;n<t;n++)a.push(r[e+n]);return a},readASCIIArray:function(r,e,t){for(var a=[],n=0;n<t;n++)a.push(String.fromCharCode(r[e+n]));return a},_view:function(r){return r._dataView||(r._dataView=r.buffer?new DataView(r.buffer,r.byteOffset,r.byteLength):new DataView(new Uint8Array(r).buffer))}},e._lctf={},e._lctf.parse=function(r,t,a,n,o){var s=e._bin,i={},h=t;s.readFixed(r,t),t+=4;var f=s.readUshort(r,t);t+=2;var d=s.readUshort(r,t);t+=2;var l=s.readUshort(r,t);return t+=2,i.scriptList=e._lctf.readScriptList(r,h+f),i.featureList=e._lctf.readFeatureList(r,h+d),i.lookupList=e._lctf.readLookupList(r,h+l,o),i},e._lctf.readLookupList=function(r,t,a){var n=e._bin,o=t,s=[],i=n.readUshort(r,t);t+=2;for(var h=0;h<i;h++){var f=n.readUshort(r,t);t+=2;var d=e._lctf.readLookupTable(r,o+f,a);s.push(d);}return s},e._lctf.readLookupTable=function(r,t,a){var n=e._bin,o=t,s={tabs:[]};s.ltype=n.readUshort(r,t),t+=2,s.flag=n.readUshort(r,t),t+=2;var i=n.readUshort(r,t);t+=2;for(var h=s.ltype,f=0;f<i;f++){var d=n.readUshort(r,t);t+=2;var l=a(r,h,o+d,s);s.tabs.push(l);}return s},e._lctf.numOfOnes=function(r){for(var e=0,t=0;t<32;t++)0!=(r>>>t&1)&&e++;return e},e._lctf.readClassDef=function(r,t){var a=e._bin,n=[],o=a.readUshort(r,t);if(t+=2,1==o){var s=a.readUshort(r,t);t+=2;var i=a.readUshort(r,t);t+=2;for(var h=0;h<i;h++)n.push(s+h),n.push(s+h),n.push(a.readUshort(r,t)),t+=2;}if(2==o){var f=a.readUshort(r,t);t+=2;for(h=0;h<f;h++)n.push(a.readUshort(r,t)),t+=2,n.push(a.readUshort(r,t)),t+=2,n.push(a.readUshort(r,t)),t+=2;}return n},e._lctf.getInterval=function(r,e){for(var t=0;t<r.length;t+=3){var a=r[t],n=r[t+1];if(r[t+2],a<=e&&e<=n)return t}return -1},e._lctf.readCoverage=function(r,t){var a=e._bin,n={};n.fmt=a.readUshort(r,t),t+=2;var o=a.readUshort(r,t);return t+=2,1==n.fmt&&(n.tab=a.readUshorts(r,t,o)),2==n.fmt&&(n.tab=a.readUshorts(r,t,3*o)),n},e._lctf.coverageIndex=function(r,t){var a=r.tab;if(1==r.fmt)return a.indexOf(t);if(2==r.fmt){var n=e._lctf.getInterval(a,t);if(-1!=n)return a[n+2]+(t-a[n])}return -1},e._lctf.readFeatureList=function(r,t){var a=e._bin,n=t,o=[],s=a.readUshort(r,t);t+=2;for(var i=0;i<s;i++){var h=a.readASCII(r,t,4);t+=4;var f=a.readUshort(r,t);t+=2;var d=e._lctf.readFeatureTable(r,n+f);d.tag=h.trim(),o.push(d);}return o},e._lctf.readFeatureTable=function(r,t){var a=e._bin,n=t,o={},s=a.readUshort(r,t);t+=2,s>0&&(o.featureParams=n+s);var i=a.readUshort(r,t);t+=2,o.tab=[];for(var h=0;h<i;h++)o.tab.push(a.readUshort(r,t+2*h));return o},e._lctf.readScriptList=function(r,t){var a=e._bin,n=t,o={},s=a.readUshort(r,t);t+=2;for(var i=0;i<s;i++){var h=a.readASCII(r,t,4);t+=4;var f=a.readUshort(r,t);t+=2,o[h.trim()]=e._lctf.readScriptTable(r,n+f);}return o},e._lctf.readScriptTable=function(r,t){var a=e._bin,n=t,o={},s=a.readUshort(r,t);t+=2,o.default=e._lctf.readLangSysTable(r,n+s);var i=a.readUshort(r,t);t+=2;for(var h=0;h<i;h++){var f=a.readASCII(r,t,4);t+=4;var d=a.readUshort(r,t);t+=2,o[f.trim()]=e._lctf.readLangSysTable(r,n+d);}return o},e._lctf.readLangSysTable=function(r,t){var a=e._bin,n={};a.readUshort(r,t),t+=2,n.reqFeature=a.readUshort(r,t),t+=2;var o=a.readUshort(r,t);return t+=2,n.features=a.readUshorts(r,t,o),n},e.CFF={},e.CFF.parse=function(r,t,a){var n=e._bin;(r=new Uint8Array(r.buffer,t,a))[t=0],r[++t],r[++t],r[++t],t++;var o=[];t=e.CFF.readIndex(r,t,o);for(var s=[],i=0;i<o.length-1;i++)s.push(n.readASCII(r,t+o[i],o[i+1]-o[i]));t+=o[o.length-1];var h=[];t=e.CFF.readIndex(r,t,h);var f=[];for(i=0;i<h.length-1;i++)f.push(e.CFF.readDict(r,t+h[i],t+h[i+1]));t+=h[h.length-1];var d=f[0],l=[];t=e.CFF.readIndex(r,t,l);var u=[];for(i=0;i<l.length-1;i++)u.push(n.readASCII(r,t+l[i],l[i+1]-l[i]));if(t+=l[l.length-1],e.CFF.readSubrs(r,t,d),d.CharStrings){t=d.CharStrings;l=[];t=e.CFF.readIndex(r,t,l);var v=[];for(i=0;i<l.length-1;i++)v.push(n.readBytes(r,t+l[i],l[i+1]-l[i]));d.CharStrings=v;}if(d.ROS){t=d.FDArray;var c=[];t=e.CFF.readIndex(r,t,c),d.FDArray=[];for(i=0;i<c.length-1;i++){var p=e.CFF.readDict(r,t+c[i],t+c[i+1]);e.CFF._readFDict(r,p,u),d.FDArray.push(p);}t+=c[c.length-1],t=d.FDSelect,d.FDSelect=[];var U=r[t];if(t++,3!=U)throw U;var g=n.readUshort(r,t);t+=2;for(i=0;i<g+1;i++)d.FDSelect.push(n.readUshort(r,t),r[t+2]),t+=3;}return d.Encoding&&(d.Encoding=e.CFF.readEncoding(r,d.Encoding,d.CharStrings.length)),d.charset&&(d.charset=e.CFF.readCharset(r,d.charset,d.CharStrings.length)),e.CFF._readFDict(r,d,u),d},e.CFF._readFDict=function(r,t,a){var n;for(var o in t.Private&&(n=t.Private[1],t.Private=e.CFF.readDict(r,n,n+t.Private[0]),t.Private.Subrs&&e.CFF.readSubrs(r,n+t.Private.Subrs,t.Private)),t)-1!=["FamilyName","FontName","FullName","Notice","version","Copyright"].indexOf(o)&&(t[o]=a[t[o]-426+35]);},e.CFF.readSubrs=function(r,t,a){var n=e._bin,o=[];t=e.CFF.readIndex(r,t,o);var s,i=o.length;s=i<1240?107:i<33900?1131:32768,a.Bias=s,a.Subrs=[];for(var h=0;h<o.length-1;h++)a.Subrs.push(n.readBytes(r,t+o[h],o[h+1]-o[h]));},e.CFF.tableSE=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,0,111,112,113,114,0,115,116,117,118,119,120,121,122,0,123,0,124,125,126,127,128,129,130,131,0,132,133,0,134,135,136,137,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,138,0,139,0,0,0,0,140,141,142,143,0,0,0,0,0,144,0,0,0,145,0,0,146,147,148,149,0,0,0,0],e.CFF.glyphByUnicode=function(r,e){for(var t=0;t<r.charset.length;t++)if(r.charset[t]==e)return t;return -1},e.CFF.glyphBySE=function(r,t){return t<0||t>255?-1:e.CFF.glyphByUnicode(r,e.CFF.tableSE[t])},e.CFF.readEncoding=function(r,t,a){e._bin;var n=[".notdef"],o=r[t];if(t++,0!=o)throw "error: unknown encoding format: "+o;var s=r[t];t++;for(var i=0;i<s;i++)n.push(r[t+i]);return n},e.CFF.readCharset=function(r,t,a){var n=e._bin,o=[".notdef"],s=r[t];if(t++,0==s)for(var i=0;i<a;i++){var h=n.readUshort(r,t);t+=2,o.push(h);}else {if(1!=s&&2!=s)throw "error: format: "+s;for(;o.length<a;){h=n.readUshort(r,t);t+=2;var f=0;1==s?(f=r[t],t++):(f=n.readUshort(r,t),t+=2);for(i=0;i<=f;i++)o.push(h),h++;}}return o},e.CFF.readIndex=function(r,t,a){var n=e._bin,o=n.readUshort(r,t)+1,s=r[t+=2];if(t++,1==s)for(var i=0;i<o;i++)a.push(r[t+i]);else if(2==s)for(i=0;i<o;i++)a.push(n.readUshort(r,t+2*i));else if(3==s)for(i=0;i<o;i++)a.push(16777215&n.readUint(r,t+3*i-1));else if(1!=o)throw "unsupported offset size: "+s+", count: "+o;return (t+=o*s)-1},e.CFF.getCharString=function(r,t,a){var n=e._bin,o=r[t],s=r[t+1];r[t+2],r[t+3],r[t+4];var i=1,h=null,f=null;o<=20&&(h=o,i=1),12==o&&(h=100*o+s,i=2),21<=o&&o<=27&&(h=o,i=1),28==o&&(f=n.readShort(r,t+1),i=3),29<=o&&o<=31&&(h=o,i=1),32<=o&&o<=246&&(f=o-139,i=1),247<=o&&o<=250&&(f=256*(o-247)+s+108,i=2),251<=o&&o<=254&&(f=256*-(o-251)-s-108,i=2),255==o&&(f=n.readInt(r,t+1)/65535,i=5),a.val=null!=f?f:"o"+h,a.size=i;},e.CFF.readCharString=function(r,t,a){for(var n=t+a,o=e._bin,s=[];t<n;){var i=r[t],h=r[t+1];r[t+2],r[t+3],r[t+4];var f=1,d=null,l=null;i<=20&&(d=i,f=1),12==i&&(d=100*i+h,f=2),19!=i&&20!=i||(d=i,f=2),21<=i&&i<=27&&(d=i,f=1),28==i&&(l=o.readShort(r,t+1),f=3),29<=i&&i<=31&&(d=i,f=1),32<=i&&i<=246&&(l=i-139,f=1),247<=i&&i<=250&&(l=256*(i-247)+h+108,f=2),251<=i&&i<=254&&(l=256*-(i-251)-h-108,f=2),255==i&&(l=o.readInt(r,t+1)/65535,f=5),s.push(null!=l?l:"o"+d),t+=f;}return s},e.CFF.readDict=function(r,t,a){for(var n=e._bin,o={},s=[];t<a;){var i=r[t],h=r[t+1];r[t+2],r[t+3],r[t+4];var f=1,d=null,l=null;if(28==i&&(l=n.readShort(r,t+1),f=3),29==i&&(l=n.readInt(r,t+1),f=5),32<=i&&i<=246&&(l=i-139,f=1),247<=i&&i<=250&&(l=256*(i-247)+h+108,f=2),251<=i&&i<=254&&(l=256*-(i-251)-h-108,f=2),255==i)throw l=n.readInt(r,t+1)/65535,f=5,"unknown number";if(30==i){var u=[];for(f=1;;){var v=r[t+f];f++;var c=v>>4,p=15&v;if(15!=c&&u.push(c),15!=p&&u.push(p),15==p)break}for(var U="",g=[0,1,2,3,4,5,6,7,8,9,".","e","e-","reserved","-","endOfNumber"],S=0;S<u.length;S++)U+=g[u[S]];l=parseFloat(U);}if(i<=21)if(d=["version","Notice","FullName","FamilyName","Weight","FontBBox","BlueValues","OtherBlues","FamilyBlues","FamilyOtherBlues","StdHW","StdVW","escape","UniqueID","XUID","charset","Encoding","CharStrings","Private","Subrs","defaultWidthX","nominalWidthX"][i],f=1,12==i)d=["Copyright","isFixedPitch","ItalicAngle","UnderlinePosition","UnderlineThickness","PaintType","CharstringType","FontMatrix","StrokeWidth","BlueScale","BlueShift","BlueFuzz","StemSnapH","StemSnapV","ForceBold",0,0,"LanguageGroup","ExpansionFactor","initialRandomSeed","SyntheticBase","PostScript","BaseFontName","BaseFontBlend",0,0,0,0,0,0,"ROS","CIDFontVersion","CIDFontRevision","CIDFontType","CIDCount","UIDBase","FDArray","FDSelect","FontName"][h],f=2;null!=d?(o[d]=1==s.length?s[0]:s,s=[]):s.push(l),t+=f;}return o},e.cmap={},e.cmap.parse=function(r,t,a){r=new Uint8Array(r.buffer,t,a),t=0;var n=e._bin,o={};n.readUshort(r,t),t+=2;var s=n.readUshort(r,t);t+=2;var i=[];o.tables=[];for(var h=0;h<s;h++){var f=n.readUshort(r,t);t+=2;var d=n.readUshort(r,t);t+=2;var l=n.readUint(r,t);t+=4;var u="p"+f+"e"+d,v=i.indexOf(l);if(-1==v){var c;v=o.tables.length,i.push(l);var p=n.readUshort(r,l);0==p?c=e.cmap.parse0(r,l):4==p?c=e.cmap.parse4(r,l):6==p?c=e.cmap.parse6(r,l):12==p?c=e.cmap.parse12(r,l):(void 0),o.tables.push(c);}if(null!=o[u])throw "multiple tables for one platform+encoding";o[u]=v;}return o},e.cmap.parse0=function(r,t){var a=e._bin,n={};n.format=a.readUshort(r,t),t+=2;var o=a.readUshort(r,t);t+=2,a.readUshort(r,t),t+=2,n.map=[];for(var s=0;s<o-6;s++)n.map.push(r[t+s]);return n},e.cmap.parse4=function(r,t){var a=e._bin,n=t,o={};o.format=a.readUshort(r,t),t+=2;var s=a.readUshort(r,t);t+=2,a.readUshort(r,t),t+=2;var i=a.readUshort(r,t);t+=2;var h=i/2;o.searchRange=a.readUshort(r,t),t+=2,o.entrySelector=a.readUshort(r,t),t+=2,o.rangeShift=a.readUshort(r,t),t+=2,o.endCount=a.readUshorts(r,t,h),t+=2*h,t+=2,o.startCount=a.readUshorts(r,t,h),t+=2*h,o.idDelta=[];for(var f=0;f<h;f++)o.idDelta.push(a.readShort(r,t)),t+=2;for(o.idRangeOffset=a.readUshorts(r,t,h),t+=2*h,o.glyphIdArray=[];t<n+s;)o.glyphIdArray.push(a.readUshort(r,t)),t+=2;return o},e.cmap.parse6=function(r,t){var a=e._bin,n={};n.format=a.readUshort(r,t),t+=2,a.readUshort(r,t),t+=2,a.readUshort(r,t),t+=2,n.firstCode=a.readUshort(r,t),t+=2;var o=a.readUshort(r,t);t+=2,n.glyphIdArray=[];for(var s=0;s<o;s++)n.glyphIdArray.push(a.readUshort(r,t)),t+=2;return n},e.cmap.parse12=function(r,t){var a=e._bin,n={};n.format=a.readUshort(r,t),t+=2,t+=2,a.readUint(r,t),t+=4,a.readUint(r,t),t+=4;var o=a.readUint(r,t);t+=4,n.groups=[];for(var s=0;s<o;s++){var i=t+12*s,h=a.readUint(r,i+0),f=a.readUint(r,i+4),d=a.readUint(r,i+8);n.groups.push([h,f,d]);}return n},e.glyf={},e.glyf.parse=function(r,e,t,a){for(var n=[],o=0;o<a.maxp.numGlyphs;o++)n.push(null);return n},e.glyf._parseGlyf=function(r,t){var a=e._bin,n=r._data,o=e._tabOffset(n,"glyf",r._offset)+r.loca[t];if(r.loca[t]==r.loca[t+1])return null;var s={};if(s.noc=a.readShort(n,o),o+=2,s.xMin=a.readShort(n,o),o+=2,s.yMin=a.readShort(n,o),o+=2,s.xMax=a.readShort(n,o),o+=2,s.yMax=a.readShort(n,o),o+=2,s.xMin>=s.xMax||s.yMin>=s.yMax)return null;if(s.noc>0){s.endPts=[];for(var i=0;i<s.noc;i++)s.endPts.push(a.readUshort(n,o)),o+=2;var h=a.readUshort(n,o);if(o+=2,n.length-o<h)return null;s.instructions=a.readBytes(n,o,h),o+=h;var f=s.endPts[s.noc-1]+1;s.flags=[];for(i=0;i<f;i++){var d=n[o];if(o++,s.flags.push(d),0!=(8&d)){var l=n[o];o++;for(var u=0;u<l;u++)s.flags.push(d),i++;}}s.xs=[];for(i=0;i<f;i++){var v=0!=(2&s.flags[i]),c=0!=(16&s.flags[i]);v?(s.xs.push(c?n[o]:-n[o]),o++):c?s.xs.push(0):(s.xs.push(a.readShort(n,o)),o+=2);}s.ys=[];for(i=0;i<f;i++){v=0!=(4&s.flags[i]),c=0!=(32&s.flags[i]);v?(s.ys.push(c?n[o]:-n[o]),o++):c?s.ys.push(0):(s.ys.push(a.readShort(n,o)),o+=2);}var p=0,U=0;for(i=0;i<f;i++)p+=s.xs[i],U+=s.ys[i],s.xs[i]=p,s.ys[i]=U;}else {var g;s.parts=[];do{g=a.readUshort(n,o),o+=2;var S={m:{a:1,b:0,c:0,d:1,tx:0,ty:0},p1:-1,p2:-1};if(s.parts.push(S),S.glyphIndex=a.readUshort(n,o),o+=2,1&g){var m=a.readShort(n,o);o+=2;var b=a.readShort(n,o);o+=2;}else {m=a.readInt8(n,o);o++;b=a.readInt8(n,o);o++;}2&g?(S.m.tx=m,S.m.ty=b):(S.p1=m,S.p2=b),8&g?(S.m.a=S.m.d=a.readF2dot14(n,o),o+=2):64&g?(S.m.a=a.readF2dot14(n,o),o+=2,S.m.d=a.readF2dot14(n,o),o+=2):128&g&&(S.m.a=a.readF2dot14(n,o),o+=2,S.m.b=a.readF2dot14(n,o),o+=2,S.m.c=a.readF2dot14(n,o),o+=2,S.m.d=a.readF2dot14(n,o),o+=2);}while(32&g);if(256&g){var y=a.readUshort(n,o);o+=2,s.instr=[];for(i=0;i<y;i++)s.instr.push(n[o]),o++;}}return s},e.GPOS={},e.GPOS.parse=function(r,t,a,n){return e._lctf.parse(r,t,a,n,e.GPOS.subt)},e.GPOS.subt=function(r,t,a,n){var o=e._bin,s=a,i={};if(i.fmt=o.readUshort(r,a),a+=2,1==t||2==t||3==t||7==t||8==t&&i.fmt<=2){var h=o.readUshort(r,a);a+=2,i.coverage=e._lctf.readCoverage(r,h+s);}if(1==t&&1==i.fmt){var f=o.readUshort(r,a);a+=2;var d=e._lctf.numOfOnes(f);0!=f&&(i.pos=e.GPOS.readValueRecord(r,a,f));}else if(2==t&&i.fmt>=1&&i.fmt<=2){f=o.readUshort(r,a);a+=2;var l=o.readUshort(r,a);a+=2;d=e._lctf.numOfOnes(f);var u=e._lctf.numOfOnes(l);if(1==i.fmt){i.pairsets=[];var v=o.readUshort(r,a);a+=2;for(var c=0;c<v;c++){var p=s+o.readUshort(r,a);a+=2;var U=o.readUshort(r,p);p+=2;for(var g=[],S=0;S<U;S++){var m=o.readUshort(r,p);p+=2,0!=f&&(x=e.GPOS.readValueRecord(r,p,f),p+=2*d),0!=l&&(P=e.GPOS.readValueRecord(r,p,l),p+=2*u),g.push({gid2:m,val1:x,val2:P});}i.pairsets.push(g);}}if(2==i.fmt){var b=o.readUshort(r,a);a+=2;var y=o.readUshort(r,a);a+=2;var F=o.readUshort(r,a);a+=2;var _=o.readUshort(r,a);a+=2,i.classDef1=e._lctf.readClassDef(r,s+b),i.classDef2=e._lctf.readClassDef(r,s+y),i.matrix=[];for(c=0;c<F;c++){var C=[];for(S=0;S<_;S++){var x=null,P=null;0!=f&&(x=e.GPOS.readValueRecord(r,a,f),a+=2*d),0!=l&&(P=e.GPOS.readValueRecord(r,a,l),a+=2*u),C.push({val1:x,val2:P});}i.matrix.push(C);}}}else {if(9==t&&1==i.fmt){var I=o.readUshort(r,a);a+=2;var w=o.readUint(r,a);if(a+=4,9==n.ltype)n.ltype=I;else if(n.ltype!=I)throw "invalid extension substitution";return e.GPOS.subt(r,n.ltype,s+w)}}return i},e.GPOS.readValueRecord=function(r,t,a){var n=e._bin,o=[];return o.push(1&a?n.readShort(r,t):0),t+=1&a?2:0,o.push(2&a?n.readShort(r,t):0),t+=2&a?2:0,o.push(4&a?n.readShort(r,t):0),t+=4&a?2:0,o.push(8&a?n.readShort(r,t):0),t+=8&a?2:0,o},e.GSUB={},e.GSUB.parse=function(r,t,a,n){return e._lctf.parse(r,t,a,n,e.GSUB.subt)},e.GSUB.subt=function(r,t,a,n){var o=e._bin,s=a,i={};if(i.fmt=o.readUshort(r,a),a+=2,1!=t&&4!=t&&5!=t&&6!=t)return null;if(1==t||4==t||5==t&&i.fmt<=2||6==t&&i.fmt<=2){var h=o.readUshort(r,a);a+=2,i.coverage=e._lctf.readCoverage(r,s+h);}if(1==t&&i.fmt>=1&&i.fmt<=2){if(1==i.fmt)i.delta=o.readShort(r,a),a+=2;else if(2==i.fmt){var f=o.readUshort(r,a);a+=2,i.newg=o.readUshorts(r,a,f),a+=2*i.newg.length;}}else if(4==t){i.vals=[];f=o.readUshort(r,a);a+=2;for(var d=0;d<f;d++){var l=o.readUshort(r,a);a+=2,i.vals.push(e.GSUB.readLigatureSet(r,s+l));}}else if(5==t&&2==i.fmt){if(2==i.fmt){var u=o.readUshort(r,a);a+=2,i.cDef=e._lctf.readClassDef(r,s+u),i.scset=[];var v=o.readUshort(r,a);a+=2;for(d=0;d<v;d++){var c=o.readUshort(r,a);a+=2,i.scset.push(0==c?null:e.GSUB.readSubClassSet(r,s+c));}}}else if(6==t&&3==i.fmt){if(3==i.fmt){for(d=0;d<3;d++){f=o.readUshort(r,a);a+=2;for(var p=[],U=0;U<f;U++)p.push(e._lctf.readCoverage(r,s+o.readUshort(r,a+2*U)));a+=2*f,0==d&&(i.backCvg=p),1==d&&(i.inptCvg=p),2==d&&(i.ahedCvg=p);}f=o.readUshort(r,a);a+=2,i.lookupRec=e.GSUB.readSubstLookupRecords(r,a,f);}}else {if(7==t&&1==i.fmt){var g=o.readUshort(r,a);a+=2;var S=o.readUint(r,a);if(a+=4,9==n.ltype)n.ltype=g;else if(n.ltype!=g)throw "invalid extension substitution";return e.GSUB.subt(r,n.ltype,s+S)}}return i},e.GSUB.readSubClassSet=function(r,t){var a=e._bin.readUshort,n=t,o=[],s=a(r,t);t+=2;for(var i=0;i<s;i++){var h=a(r,t);t+=2,o.push(e.GSUB.readSubClassRule(r,n+h));}return o},e.GSUB.readSubClassRule=function(r,t){var a=e._bin.readUshort,n={},o=a(r,t),s=a(r,t+=2);t+=2,n.input=[];for(var i=0;i<o-1;i++)n.input.push(a(r,t)),t+=2;return n.substLookupRecords=e.GSUB.readSubstLookupRecords(r,t,s),n},e.GSUB.readSubstLookupRecords=function(r,t,a){for(var n=e._bin.readUshort,o=[],s=0;s<a;s++)o.push(n(r,t),n(r,t+2)),t+=4;return o},e.GSUB.readChainSubClassSet=function(r,t){var a=e._bin,n=t,o=[],s=a.readUshort(r,t);t+=2;for(var i=0;i<s;i++){var h=a.readUshort(r,t);t+=2,o.push(e.GSUB.readChainSubClassRule(r,n+h));}return o},e.GSUB.readChainSubClassRule=function(r,t){for(var a=e._bin,n={},o=["backtrack","input","lookahead"],s=0;s<o.length;s++){var i=a.readUshort(r,t);t+=2,1==s&&i--,n[o[s]]=a.readUshorts(r,t,i),t+=2*n[o[s]].length;}i=a.readUshort(r,t);return t+=2,n.subst=a.readUshorts(r,t,2*i),t+=2*n.subst.length,n},e.GSUB.readLigatureSet=function(r,t){var a=e._bin,n=t,o=[],s=a.readUshort(r,t);t+=2;for(var i=0;i<s;i++){var h=a.readUshort(r,t);t+=2,o.push(e.GSUB.readLigature(r,n+h));}return o},e.GSUB.readLigature=function(r,t){var a=e._bin,n={chain:[]};n.nglyph=a.readUshort(r,t),t+=2;var o=a.readUshort(r,t);t+=2;for(var s=0;s<o-1;s++)n.chain.push(a.readUshort(r,t)),t+=2;return n},e.head={},e.head.parse=function(r,t,a){var n=e._bin,o={};return n.readFixed(r,t),t+=4,o.fontRevision=n.readFixed(r,t),t+=4,n.readUint(r,t),t+=4,n.readUint(r,t),t+=4,o.flags=n.readUshort(r,t),t+=2,o.unitsPerEm=n.readUshort(r,t),t+=2,o.created=n.readUint64(r,t),t+=8,o.modified=n.readUint64(r,t),t+=8,o.xMin=n.readShort(r,t),t+=2,o.yMin=n.readShort(r,t),t+=2,o.xMax=n.readShort(r,t),t+=2,o.yMax=n.readShort(r,t),t+=2,o.macStyle=n.readUshort(r,t),t+=2,o.lowestRecPPEM=n.readUshort(r,t),t+=2,o.fontDirectionHint=n.readShort(r,t),t+=2,o.indexToLocFormat=n.readShort(r,t),t+=2,o.glyphDataFormat=n.readShort(r,t),t+=2,o},e.hhea={},e.hhea.parse=function(r,t,a){var n=e._bin,o={};return n.readFixed(r,t),t+=4,o.ascender=n.readShort(r,t),t+=2,o.descender=n.readShort(r,t),t+=2,o.lineGap=n.readShort(r,t),t+=2,o.advanceWidthMax=n.readUshort(r,t),t+=2,o.minLeftSideBearing=n.readShort(r,t),t+=2,o.minRightSideBearing=n.readShort(r,t),t+=2,o.xMaxExtent=n.readShort(r,t),t+=2,o.caretSlopeRise=n.readShort(r,t),t+=2,o.caretSlopeRun=n.readShort(r,t),t+=2,o.caretOffset=n.readShort(r,t),t+=2,t+=8,o.metricDataFormat=n.readShort(r,t),t+=2,o.numberOfHMetrics=n.readUshort(r,t),t+=2,o},e.hmtx={},e.hmtx.parse=function(r,t,a,n){for(var o=e._bin,s={aWidth:[],lsBearing:[]},i=0,h=0,f=0;f<n.maxp.numGlyphs;f++)f<n.hhea.numberOfHMetrics&&(i=o.readUshort(r,t),t+=2,h=o.readShort(r,t),t+=2),s.aWidth.push(i),s.lsBearing.push(h);return s},e.kern={},e.kern.parse=function(r,t,a,n){var o=e._bin,s=o.readUshort(r,t);if(t+=2,1==s)return e.kern.parseV1(r,t-2,a,n);var i=o.readUshort(r,t);t+=2;for(var h={glyph1:[],rval:[]},f=0;f<i;f++){t+=2;a=o.readUshort(r,t);t+=2;var d=o.readUshort(r,t);t+=2;var l=d>>>8;if(0!=(l&=15))throw "unknown kern table format: "+l;t=e.kern.readFormat0(r,t,h);}return h},e.kern.parseV1=function(r,t,a,n){var o=e._bin;o.readFixed(r,t),t+=4;var s=o.readUint(r,t);t+=4;for(var i={glyph1:[],rval:[]},h=0;h<s;h++){o.readUint(r,t),t+=4;var f=o.readUshort(r,t);t+=2,o.readUshort(r,t),t+=2;var d=f>>>8;if(0!=(d&=15))throw "unknown kern table format: "+d;t=e.kern.readFormat0(r,t,i);}return i},e.kern.readFormat0=function(r,t,a){var n=e._bin,o=-1,s=n.readUshort(r,t);t+=2,n.readUshort(r,t),t+=2,n.readUshort(r,t),t+=2,n.readUshort(r,t),t+=2;for(var i=0;i<s;i++){var h=n.readUshort(r,t);t+=2;var f=n.readUshort(r,t);t+=2;var d=n.readShort(r,t);t+=2,h!=o&&(a.glyph1.push(h),a.rval.push({glyph2:[],vals:[]}));var l=a.rval[a.rval.length-1];l.glyph2.push(f),l.vals.push(d),o=h;}return t},e.loca={},e.loca.parse=function(r,t,a,n){var o=e._bin,s=[],i=n.head.indexToLocFormat,h=n.maxp.numGlyphs+1;if(0==i)for(var f=0;f<h;f++)s.push(o.readUshort(r,t+(f<<1))<<1);if(1==i)for(f=0;f<h;f++)s.push(o.readUint(r,t+(f<<2)));return s},e.maxp={},e.maxp.parse=function(r,t,a){var n=e._bin,o={},s=n.readUint(r,t);return t+=4,o.numGlyphs=n.readUshort(r,t),t+=2,65536==s&&(o.maxPoints=n.readUshort(r,t),t+=2,o.maxContours=n.readUshort(r,t),t+=2,o.maxCompositePoints=n.readUshort(r,t),t+=2,o.maxCompositeContours=n.readUshort(r,t),t+=2,o.maxZones=n.readUshort(r,t),t+=2,o.maxTwilightPoints=n.readUshort(r,t),t+=2,o.maxStorage=n.readUshort(r,t),t+=2,o.maxFunctionDefs=n.readUshort(r,t),t+=2,o.maxInstructionDefs=n.readUshort(r,t),t+=2,o.maxStackElements=n.readUshort(r,t),t+=2,o.maxSizeOfInstructions=n.readUshort(r,t),t+=2,o.maxComponentElements=n.readUshort(r,t),t+=2,o.maxComponentDepth=n.readUshort(r,t),t+=2),o},e.name={},e.name.parse=function(r,t,a){var n=e._bin,o={};n.readUshort(r,t),t+=2;var s=n.readUshort(r,t);t+=2,n.readUshort(r,t);for(var i,h=["copyright","fontFamily","fontSubfamily","ID","fullName","version","postScriptName","trademark","manufacturer","designer","description","urlVendor","urlDesigner","licence","licenceURL","---","typoFamilyName","typoSubfamilyName","compatibleFull","sampleText","postScriptCID","wwsFamilyName","wwsSubfamilyName","lightPalette","darkPalette"],f=t+=2,d=0;d<s;d++){var l=n.readUshort(r,t);t+=2;var u=n.readUshort(r,t);t+=2;var v=n.readUshort(r,t);t+=2;var c=n.readUshort(r,t);t+=2;var p=n.readUshort(r,t);t+=2;var U=n.readUshort(r,t);t+=2;var g,S=h[c],m=f+12*s+U;if(0==l)g=n.readUnicode(r,m,p/2);else if(3==l&&0==u)g=n.readUnicode(r,m,p/2);else if(0==u)g=n.readASCII(r,m,p);else if(1==u)g=n.readUnicode(r,m,p/2);else if(3==u)g=n.readUnicode(r,m,p/2);else {if(1!=l)throw "unknown encoding "+u+", platformID: "+l;g=n.readASCII(r,m,p);}var b="p"+l+","+v.toString(16);null==o[b]&&(o[b]={}),o[b][void 0!==S?S:c]=g,o[b]._lang=v;}for(var y in o)if(null!=o[y].postScriptName&&1033==o[y]._lang)return o[y];for(var y in o)if(null!=o[y].postScriptName&&0==o[y]._lang)return o[y];for(var y in o)if(null!=o[y].postScriptName&&3084==o[y]._lang)return o[y];for(var y in o)if(null!=o[y].postScriptName)return o[y];for(var y in o){i=y;break}return o[i]},e["OS/2"]={},e["OS/2"].parse=function(r,t,a){var n=e._bin.readUshort(r,t);t+=2;var o={};if(0==n)e["OS/2"].version0(r,t,o);else if(1==n)e["OS/2"].version1(r,t,o);else if(2==n||3==n||4==n)e["OS/2"].version2(r,t,o);else {if(5!=n)throw "unknown OS/2 table version: "+n;e["OS/2"].version5(r,t,o);}return o},e["OS/2"].version0=function(r,t,a){var n=e._bin;return a.xAvgCharWidth=n.readShort(r,t),t+=2,a.usWeightClass=n.readUshort(r,t),t+=2,a.usWidthClass=n.readUshort(r,t),t+=2,a.fsType=n.readUshort(r,t),t+=2,a.ySubscriptXSize=n.readShort(r,t),t+=2,a.ySubscriptYSize=n.readShort(r,t),t+=2,a.ySubscriptXOffset=n.readShort(r,t),t+=2,a.ySubscriptYOffset=n.readShort(r,t),t+=2,a.ySuperscriptXSize=n.readShort(r,t),t+=2,a.ySuperscriptYSize=n.readShort(r,t),t+=2,a.ySuperscriptXOffset=n.readShort(r,t),t+=2,a.ySuperscriptYOffset=n.readShort(r,t),t+=2,a.yStrikeoutSize=n.readShort(r,t),t+=2,a.yStrikeoutPosition=n.readShort(r,t),t+=2,a.sFamilyClass=n.readShort(r,t),t+=2,a.panose=n.readBytes(r,t,10),t+=10,a.ulUnicodeRange1=n.readUint(r,t),t+=4,a.ulUnicodeRange2=n.readUint(r,t),t+=4,a.ulUnicodeRange3=n.readUint(r,t),t+=4,a.ulUnicodeRange4=n.readUint(r,t),t+=4,a.achVendID=[n.readInt8(r,t),n.readInt8(r,t+1),n.readInt8(r,t+2),n.readInt8(r,t+3)],t+=4,a.fsSelection=n.readUshort(r,t),t+=2,a.usFirstCharIndex=n.readUshort(r,t),t+=2,a.usLastCharIndex=n.readUshort(r,t),t+=2,a.sTypoAscender=n.readShort(r,t),t+=2,a.sTypoDescender=n.readShort(r,t),t+=2,a.sTypoLineGap=n.readShort(r,t),t+=2,a.usWinAscent=n.readUshort(r,t),t+=2,a.usWinDescent=n.readUshort(r,t),t+=2},e["OS/2"].version1=function(r,t,a){var n=e._bin;return t=e["OS/2"].version0(r,t,a),a.ulCodePageRange1=n.readUint(r,t),t+=4,a.ulCodePageRange2=n.readUint(r,t),t+=4},e["OS/2"].version2=function(r,t,a){var n=e._bin;return t=e["OS/2"].version1(r,t,a),a.sxHeight=n.readShort(r,t),t+=2,a.sCapHeight=n.readShort(r,t),t+=2,a.usDefault=n.readUshort(r,t),t+=2,a.usBreak=n.readUshort(r,t),t+=2,a.usMaxContext=n.readUshort(r,t),t+=2},e["OS/2"].version5=function(r,t,a){var n=e._bin;return t=e["OS/2"].version2(r,t,a),a.usLowerOpticalPointSize=n.readUshort(r,t),t+=2,a.usUpperOpticalPointSize=n.readUshort(r,t),t+=2},e.post={},e.post.parse=function(r,t,a){var n=e._bin,o={};return o.version=n.readFixed(r,t),t+=4,o.italicAngle=n.readFixed(r,t),t+=4,o.underlinePosition=n.readShort(r,t),t+=2,o.underlineThickness=n.readShort(r,t),t+=2,o},null==e&&(e={}),null==e.U&&(e.U={}),e.U.codeToGlyph=function(r,e){var t=r.cmap,a=-1;if(null!=t.p0e4?a=t.p0e4:null!=t.p3e1?a=t.p3e1:null!=t.p1e0?a=t.p1e0:null!=t.p0e3&&(a=t.p0e3),-1==a)throw "no familiar platform and encoding!";var n=t.tables[a];if(0==n.format)return e>=n.map.length?0:n.map[e];if(4==n.format){for(var o=-1,s=0;s<n.endCount.length;s++)if(e<=n.endCount[s]){o=s;break}if(-1==o)return 0;if(n.startCount[o]>e)return 0;return 65535&(0!=n.idRangeOffset[o]?n.glyphIdArray[e-n.startCount[o]+(n.idRangeOffset[o]>>1)-(n.idRangeOffset.length-o)]:e+n.idDelta[o])}if(12==n.format){if(e>n.groups[n.groups.length-1][1])return 0;for(s=0;s<n.groups.length;s++){var i=n.groups[s];if(i[0]<=e&&e<=i[1])return i[2]+(e-i[0])}return 0}throw "unknown cmap table format "+n.format},e.U.glyphToPath=function(r,t){var a={cmds:[],crds:[]};if(r.SVG&&r.SVG.entries[t]){var n=r.SVG.entries[t];return null==n?a:("string"==typeof n&&(n=e.SVG.toPath(n),r.SVG.entries[t]=n),n)}if(r.CFF){var o={x:0,y:0,stack:[],nStems:0,haveWidth:!1,width:r.CFF.Private?r.CFF.Private.defaultWidthX:0,open:!1},s=r.CFF,i=r.CFF.Private;if(s.ROS){for(var h=0;s.FDSelect[h+2]<=t;)h+=2;i=s.FDArray[s.FDSelect[h+1]].Private;}e.U._drawCFF(r.CFF.CharStrings[t],o,s,i,a);}else r.glyf&&e.U._drawGlyf(t,r,a);return a},e.U._drawGlyf=function(r,t,a){var n=t.glyf[r];null==n&&(n=t.glyf[r]=e.glyf._parseGlyf(t,r)),null!=n&&(n.noc>-1?e.U._simpleGlyph(n,a):e.U._compoGlyph(n,t,a));},e.U._simpleGlyph=function(r,t){for(var a=0;a<r.noc;a++){for(var n=0==a?0:r.endPts[a-1]+1,o=r.endPts[a],s=n;s<=o;s++){var i=s==n?o:s-1,h=s==o?n:s+1,f=1&r.flags[s],d=1&r.flags[i],l=1&r.flags[h],u=r.xs[s],v=r.ys[s];if(s==n)if(f){if(!d){e.U.P.moveTo(t,u,v);continue}e.U.P.moveTo(t,r.xs[i],r.ys[i]);}else d?e.U.P.moveTo(t,r.xs[i],r.ys[i]):e.U.P.moveTo(t,(r.xs[i]+u)/2,(r.ys[i]+v)/2);f?d&&e.U.P.lineTo(t,u,v):l?e.U.P.qcurveTo(t,u,v,r.xs[h],r.ys[h]):e.U.P.qcurveTo(t,u,v,(u+r.xs[h])/2,(v+r.ys[h])/2);}e.U.P.closePath(t);}},e.U._compoGlyph=function(r,t,a){for(var n=0;n<r.parts.length;n++){var o={cmds:[],crds:[]},s=r.parts[n];e.U._drawGlyf(s.glyphIndex,t,o);for(var i=s.m,h=0;h<o.crds.length;h+=2){var f=o.crds[h],d=o.crds[h+1];a.crds.push(f*i.a+d*i.b+i.tx),a.crds.push(f*i.c+d*i.d+i.ty);}for(h=0;h<o.cmds.length;h++)a.cmds.push(o.cmds[h]);}},e.U._getGlyphClass=function(r,t){var a=e._lctf.getInterval(t,r);return -1==a?0:t[a+2]},e.U.getPairAdjustment=function(r,t,a){var n=0,o=!1;if(r.GPOS)for(var s=r.GPOS,i=s.lookupList,h=s.featureList,f=[],d=0;d<h.length;d++){var l=h[d];if("kern"==l.tag){o=!0;for(var u=0;u<l.tab.length;u++)if(!f[l.tab[u]]){f[l.tab[u]]=!0;for(var v=i[l.tab[u]],c=0;c<v.tabs.length;c++)if(null!=v.tabs[c]){var p,U=v.tabs[c];if(!U.coverage||-1!=(p=e._lctf.coverageIndex(U.coverage,t)))if(1==v.ltype);else if(2==v.ltype){var g;if(1==U.fmt){var S=U.pairsets[p];for(d=0;d<S.length;d++)S[d].gid2==a&&(g=S[d]);}else if(2==U.fmt){var m=e.U._getGlyphClass(t,U.classDef1),b=e.U._getGlyphClass(a,U.classDef2);g=U.matrix[m][b];}g&&g.val1&&g.val1[2]&&(n+=g.val1[2]),g&&g.val2&&g.val2[0]&&(n+=g.val2[0]);}}}}}if(r.kern&&!o){var y=r.kern.glyph1.indexOf(t);if(-1!=y){var F=r.kern.rval[y].glyph2.indexOf(a);-1!=F&&(n+=r.kern.rval[y].vals[F]);}}return n},e.U._applySubs=function(r,t,a,n){for(var o=r.length-t-1,s=0;s<a.tabs.length;s++)if(null!=a.tabs[s]){var i,h=a.tabs[s];if(!h.coverage||-1!=(i=e._lctf.coverageIndex(h.coverage,r[t])))if(1==a.ltype)r[t],1==h.fmt?r[t]=r[t]+h.delta:r[t]=h.newg[i];else if(4==a.ltype)for(var f=h.vals[i],d=0;d<f.length;d++){var l=f[d],u=l.chain.length;if(!(u>o)){for(var v=!0,c=0,p=0;p<u;p++){for(;-1==r[t+c+(1+p)];)c++;l.chain[p]!=r[t+c+(1+p)]&&(v=!1);}if(v){r[t]=l.nglyph;for(p=0;p<u+c;p++)r[t+p+1]=-1;break}}}else if(5==a.ltype&&2==h.fmt)for(var U=e._lctf.getInterval(h.cDef,r[t]),g=h.cDef[U+2],S=h.scset[g],m=0;m<S.length;m++){var b=S[m],y=b.input;if(!(y.length>o)){for(v=!0,p=0;p<y.length;p++){var F=e._lctf.getInterval(h.cDef,r[t+1+p]);if(-1==U&&h.cDef[F+2]!=y[p]){v=!1;break}}if(v){var _=b.substLookupRecords;for(d=0;d<_.length;d+=2)_[d],_[d+1];}}}else if(6==a.ltype&&3==h.fmt){if(!e.U._glsCovered(r,h.backCvg,t-h.backCvg.length))continue;if(!e.U._glsCovered(r,h.inptCvg,t))continue;if(!e.U._glsCovered(r,h.ahedCvg,t+h.inptCvg.length))continue;var C=h.lookupRec;for(m=0;m<C.length;m+=2){U=C[m];var x=n[C[m+1]];e.U._applySubs(r,t+U,x,n);}}}},e.U._glsCovered=function(r,t,a){for(var n=0;n<t.length;n++){if(-1==e._lctf.coverageIndex(t[n],r[a+n]))return !1}return !0},e.U.glyphsToPath=function(r,t,a){for(var n={cmds:[],crds:[]},o=0,s=0;s<t.length;s++){var i=t[s];if(-1!=i){for(var h=s<t.length-1&&-1!=t[s+1]?t[s+1]:0,f=e.U.glyphToPath(r,i),d=0;d<f.crds.length;d+=2)n.crds.push(f.crds[d]+o),n.crds.push(f.crds[d+1]);a&&n.cmds.push(a);for(d=0;d<f.cmds.length;d++)n.cmds.push(f.cmds[d]);a&&n.cmds.push("X"),o+=r.hmtx.aWidth[i],s<t.length-1&&(o+=e.U.getPairAdjustment(r,i,h));}}return n},e.U.P={},e.U.P.moveTo=function(r,e,t){r.cmds.push("M"),r.crds.push(e,t);},e.U.P.lineTo=function(r,e,t){r.cmds.push("L"),r.crds.push(e,t);},e.U.P.curveTo=function(r,e,t,a,n,o,s){r.cmds.push("C"),r.crds.push(e,t,a,n,o,s);},e.U.P.qcurveTo=function(r,e,t,a,n){r.cmds.push("Q"),r.crds.push(e,t,a,n);},e.U.P.closePath=function(r){r.cmds.push("Z");},e.U._drawCFF=function(r,t,a,n,o){for(var s=t.stack,i=t.nStems,h=t.haveWidth,f=t.width,d=t.open,l=0,u=t.x,v=t.y,c=0,p=0,U=0,g=0,S=0,m=0,b=0,y=0,F=0,_=0,C={val:0,size:0};l<r.length;){e.CFF.getCharString(r,l,C);var x=C.val;if(l+=C.size,"o1"==x||"o18"==x)s.length%2!=0&&!h&&(f=s.shift()+n.nominalWidthX),i+=s.length>>1,s.length=0,h=!0;else if("o3"==x||"o23"==x){s.length%2!=0&&!h&&(f=s.shift()+n.nominalWidthX),i+=s.length>>1,s.length=0,h=!0;}else if("o4"==x)s.length>1&&!h&&(f=s.shift()+n.nominalWidthX,h=!0),d&&e.U.P.closePath(o),v+=s.pop(),e.U.P.moveTo(o,u,v),d=!0;else if("o5"==x)for(;s.length>0;)u+=s.shift(),v+=s.shift(),e.U.P.lineTo(o,u,v);else if("o6"==x||"o7"==x)for(var P=s.length,I="o6"==x,w=0;w<P;w++){var O=s.shift();I?u+=O:v+=O,I=!I,e.U.P.lineTo(o,u,v);}else if("o8"==x||"o24"==x){P=s.length;for(var T=0;T+6<=P;)c=u+s.shift(),p=v+s.shift(),U=c+s.shift(),g=p+s.shift(),u=U+s.shift(),v=g+s.shift(),e.U.P.curveTo(o,c,p,U,g,u,v),T+=6;"o24"==x&&(u+=s.shift(),v+=s.shift(),e.U.P.lineTo(o,u,v));}else {if("o11"==x)break;if("o1234"==x||"o1235"==x||"o1236"==x||"o1237"==x)"o1234"==x&&(p=v,U=(c=u+s.shift())+s.shift(),_=g=p+s.shift(),m=g,y=v,u=(b=(S=(F=U+s.shift())+s.shift())+s.shift())+s.shift(),e.U.P.curveTo(o,c,p,U,g,F,_),e.U.P.curveTo(o,S,m,b,y,u,v)),"o1235"==x&&(c=u+s.shift(),p=v+s.shift(),U=c+s.shift(),g=p+s.shift(),F=U+s.shift(),_=g+s.shift(),S=F+s.shift(),m=_+s.shift(),b=S+s.shift(),y=m+s.shift(),u=b+s.shift(),v=y+s.shift(),s.shift(),e.U.P.curveTo(o,c,p,U,g,F,_),e.U.P.curveTo(o,S,m,b,y,u,v)),"o1236"==x&&(c=u+s.shift(),p=v+s.shift(),U=c+s.shift(),_=g=p+s.shift(),m=g,b=(S=(F=U+s.shift())+s.shift())+s.shift(),y=m+s.shift(),u=b+s.shift(),e.U.P.curveTo(o,c,p,U,g,F,_),e.U.P.curveTo(o,S,m,b,y,u,v)),"o1237"==x&&(c=u+s.shift(),p=v+s.shift(),U=c+s.shift(),g=p+s.shift(),F=U+s.shift(),_=g+s.shift(),S=F+s.shift(),m=_+s.shift(),b=S+s.shift(),y=m+s.shift(),Math.abs(b-u)>Math.abs(y-v)?u=b+s.shift():v=y+s.shift(),e.U.P.curveTo(o,c,p,U,g,F,_),e.U.P.curveTo(o,S,m,b,y,u,v));else if("o14"==x){if(s.length>0&&!h&&(f=s.shift()+a.nominalWidthX,h=!0),4==s.length){var k=s.shift(),G=s.shift(),D=s.shift(),B=s.shift(),L=e.CFF.glyphBySE(a,D),R=e.CFF.glyphBySE(a,B);e.U._drawCFF(a.CharStrings[L],t,a,n,o),t.x=k,t.y=G,e.U._drawCFF(a.CharStrings[R],t,a,n,o);}d&&(e.U.P.closePath(o),d=!1);}else if("o19"==x||"o20"==x){s.length%2!=0&&!h&&(f=s.shift()+n.nominalWidthX),i+=s.length>>1,s.length=0,h=!0,l+=i+7>>3;}else if("o21"==x)s.length>2&&!h&&(f=s.shift()+n.nominalWidthX,h=!0),v+=s.pop(),u+=s.pop(),d&&e.U.P.closePath(o),e.U.P.moveTo(o,u,v),d=!0;else if("o22"==x)s.length>1&&!h&&(f=s.shift()+n.nominalWidthX,h=!0),u+=s.pop(),d&&e.U.P.closePath(o),e.U.P.moveTo(o,u,v),d=!0;else if("o25"==x){for(;s.length>6;)u+=s.shift(),v+=s.shift(),e.U.P.lineTo(o,u,v);c=u+s.shift(),p=v+s.shift(),U=c+s.shift(),g=p+s.shift(),u=U+s.shift(),v=g+s.shift(),e.U.P.curveTo(o,c,p,U,g,u,v);}else if("o26"==x)for(s.length%2&&(u+=s.shift());s.length>0;)c=u,p=v+s.shift(),u=U=c+s.shift(),v=(g=p+s.shift())+s.shift(),e.U.P.curveTo(o,c,p,U,g,u,v);else if("o27"==x)for(s.length%2&&(v+=s.shift());s.length>0;)p=v,U=(c=u+s.shift())+s.shift(),g=p+s.shift(),u=U+s.shift(),v=g,e.U.P.curveTo(o,c,p,U,g,u,v);else if("o10"==x||"o29"==x){var A="o10"==x?n:a;if(0==s.length);else {var W=s.pop(),M=A.Subrs[W+A.Bias];t.x=u,t.y=v,t.nStems=i,t.haveWidth=h,t.width=f,t.open=d,e.U._drawCFF(M,t,a,n,o),u=t.x,v=t.y,i=t.nStems,h=t.haveWidth,f=t.width,d=t.open;}}else if("o30"==x||"o31"==x){var V=s.length,N=(T=0,"o31"==x);for(T+=V-(P=-3&V);T<P;)N?(p=v,U=(c=u+s.shift())+s.shift(),v=(g=p+s.shift())+s.shift(),P-T==5?(u=U+s.shift(),T++):u=U,N=!1):(c=u,p=v+s.shift(),U=c+s.shift(),g=p+s.shift(),u=U+s.shift(),P-T==5?(v=g+s.shift(),T++):v=g,N=!0),e.U.P.curveTo(o,c,p,U,g,u,v),T+=4;}else {if("o"==(x+"").charAt(0))throw x;s.push(x);}}}t.x=u,t.y=v,t.nStems=i,t.haveWidth=h,t.width=f,t.open=d;};var t=e,a={Typr:t};return r.Typr=t,r.default=a,Object.defineProperty(r,"__esModule",{value:!0}),r}({}).Typr}

/*!
Custom bundle of woff2otf (https://github.com/arty-name/woff2otf) with fflate
(https://github.com/101arrowz/fflate) for use in Troika text rendering. 
Original licenses apply: 
- fflate: https://github.com/101arrowz/fflate/blob/master/LICENSE (MIT)
- woff2otf.js: https://github.com/arty-name/woff2otf/blob/master/woff2otf.js (Apache2)
*/
function woff2otfFactory(){return function(r){var e=Uint8Array,n=Uint16Array,t=Uint32Array,a=new e([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,0,0,0]),i=new e([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,0,0]),o=new e([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),f=function(r,e){for(var a=new n(31),i=0;i<31;++i)a[i]=e+=1<<r[i-1];var o=new t(a[30]);for(i=1;i<30;++i)for(var f=a[i];f<a[i+1];++f)o[f]=f-a[i]<<5|i;return [a,o]},u=f(a,2),v=u[0],s=u[1];v[28]=258,s[258]=28;for(var l=f(i,0)[0],c=new n(32768),g=0;g<32768;++g){var h=(43690&g)>>>1|(21845&g)<<1;h=(61680&(h=(52428&h)>>>2|(13107&h)<<2))>>>4|(3855&h)<<4,c[g]=((65280&h)>>>8|(255&h)<<8)>>>1;}var w=function(r,e,t){for(var a=r.length,i=0,o=new n(e);i<a;++i)++o[r[i]-1];var f,u=new n(e);for(i=0;i<e;++i)u[i]=u[i-1]+o[i-1]<<1;if(t){f=new n(1<<e);var v=15-e;for(i=0;i<a;++i)if(r[i])for(var s=i<<4|r[i],l=e-r[i],g=u[r[i]-1]++<<l,h=g|(1<<l)-1;g<=h;++g)f[c[g]>>>v]=s;}else for(f=new n(a),i=0;i<a;++i)r[i]&&(f[i]=c[u[r[i]-1]++]>>>15-r[i]);return f},d=new e(288);for(g=0;g<144;++g)d[g]=8;for(g=144;g<256;++g)d[g]=9;for(g=256;g<280;++g)d[g]=7;for(g=280;g<288;++g)d[g]=8;var m=new e(32);for(g=0;g<32;++g)m[g]=5;var b=w(d,9,1),p=w(m,5,1),y=function(r){for(var e=r[0],n=1;n<r.length;++n)r[n]>e&&(e=r[n]);return e},L=function(r,e,n){var t=e/8|0;return (r[t]|r[t+1]<<8)>>(7&e)&n},U=function(r,e){var n=e/8|0;return (r[n]|r[n+1]<<8|r[n+2]<<16)>>(7&e)},k=["unexpected EOF","invalid block type","invalid length/literal","invalid distance","stream finished","no stream handler",,"no callback","invalid UTF-8 data","extra field too long","date not in range 1980-2099","filename too long","stream finishing","invalid zip data"],T=function(r,e,n){var t=new Error(e||k[r]);if(t.code=r,Error.captureStackTrace&&Error.captureStackTrace(t,T),!n)throw t;return t},O=function(r,f,u){var s=r.length;if(!s||u&&!u.l&&s<5)return f||new e(0);var c=!f||u,g=!u||u.i;u||(u={}),f||(f=new e(3*s));var h,d=function(r){var n=f.length;if(r>n){var t=new e(Math.max(2*n,r));t.set(f),f=t;}},m=u.f||0,k=u.p||0,O=u.b||0,A=u.l,x=u.d,E=u.m,D=u.n,M=8*s;do{if(!A){u.f=m=L(r,k,1);var S=L(r,k+1,3);if(k+=3,!S){var V=r[(I=((h=k)/8|0)+(7&h&&1)+4)-4]|r[I-3]<<8,_=I+V;if(_>s){g&&T(0);break}c&&d(O+V),f.set(r.subarray(I,_),O),u.b=O+=V,u.p=k=8*_;continue}if(1==S)A=b,x=p,E=9,D=5;else if(2==S){var j=L(r,k,31)+257,z=L(r,k+10,15)+4,C=j+L(r,k+5,31)+1;k+=14;for(var F=new e(C),P=new e(19),q=0;q<z;++q)P[o[q]]=L(r,k+3*q,7);k+=3*z;var B=y(P),G=(1<<B)-1,H=w(P,B,1);for(q=0;q<C;){var I,J=H[L(r,k,G)];if(k+=15&J,(I=J>>>4)<16)F[q++]=I;else {var K=0,N=0;for(16==I?(N=3+L(r,k,3),k+=2,K=F[q-1]):17==I?(N=3+L(r,k,7),k+=3):18==I&&(N=11+L(r,k,127),k+=7);N--;)F[q++]=K;}}var Q=F.subarray(0,j),R=F.subarray(j);E=y(Q),D=y(R),A=w(Q,E,1),x=w(R,D,1);}else T(1);if(k>M){g&&T(0);break}}c&&d(O+131072);for(var W=(1<<E)-1,X=(1<<D)-1,Y=k;;Y=k){var Z=(K=A[U(r,k)&W])>>>4;if((k+=15&K)>M){g&&T(0);break}if(K||T(2),Z<256)f[O++]=Z;else {if(256==Z){Y=k,A=null;break}var $=Z-254;if(Z>264){var rr=a[q=Z-257];$=L(r,k,(1<<rr)-1)+v[q],k+=rr;}var er=x[U(r,k)&X],nr=er>>>4;er||T(3),k+=15&er;R=l[nr];if(nr>3){rr=i[nr];R+=U(r,k)&(1<<rr)-1,k+=rr;}if(k>M){g&&T(0);break}c&&d(O+131072);for(var tr=O+$;O<tr;O+=4)f[O]=f[O-R],f[O+1]=f[O+1-R],f[O+2]=f[O+2-R],f[O+3]=f[O+3-R];O=tr;}}u.l=A,u.p=Y,u.b=O,A&&(m=1,u.m=E,u.d=x,u.n=D);}while(!m);return O==f.length?f:function(r,a,i){(null==a||a<0)&&(a=0),(null==i||i>r.length)&&(i=r.length);var o=new(r instanceof n?n:r instanceof t?t:e)(i-a);return o.set(r.subarray(a,i)),o}(f,0,O)},A=new e(0);var x="undefined"!=typeof TextDecoder&&new TextDecoder;try{x.decode(A,{stream:!0}),1;}catch(r){}return r.convert_streams=function(r){var e=new DataView(r),n=0;function t(){var r=e.getUint16(n);return n+=2,r}function a(){var r=e.getUint32(n);return n+=4,r}function i(r){m.setUint16(b,r),b+=2;}function o(r){m.setUint32(b,r),b+=4;}for(var f={signature:a(),flavor:a(),length:a(),numTables:t(),reserved:t(),totalSfntSize:a(),majorVersion:t(),minorVersion:t(),metaOffset:a(),metaLength:a(),metaOrigLength:a(),privOffset:a(),privLength:a()},u=0;Math.pow(2,u)<=f.numTables;)u++;u--;for(var v=16*Math.pow(2,u),s=16*f.numTables-v,l=12,c=[],g=0;g<f.numTables;g++)c.push({tag:a(),offset:a(),compLength:a(),origLength:a(),origChecksum:a()}),l+=16;var h,w=new Uint8Array(12+16*c.length+c.reduce((function(r,e){return r+e.origLength+4}),0)),d=w.buffer,m=new DataView(d),b=0;return o(f.flavor),i(f.numTables),i(v),i(u),i(s),c.forEach((function(r){o(r.tag),o(r.origChecksum),o(l),o(r.origLength),r.outOffset=l,(l+=r.origLength)%4!=0&&(l+=4-l%4);})),c.forEach((function(e){var n,t=r.slice(e.offset,e.offset+e.compLength);if(e.compLength!=e.origLength){var a=new Uint8Array(e.origLength);n=new Uint8Array(t,2),O(n,a);}else a=new Uint8Array(t);w.set(a,e.outOffset);var i=0;(l=e.outOffset+e.origLength)%4!=0&&(i=4-l%4),w.set(new Uint8Array(i).buffer,e.outOffset+e.origLength),h=l+i;})),d.slice(0,h)},Object.defineProperty(r,"__esModule",{value:!0}),r}({}).convert_streams}

/**
 * A factory wrapper parsing a font file using Typr.
 * Also adds support for WOFF files (not WOFF2).
 */

function parserFactory(Typr, woff2otf) {
  const cmdArgLengths = {
    M: 2,
    L: 2,
    Q: 4,
    C: 6,
    Z: 0
  };

  // {joinType: "skip+step,..."}
  const joiningTypeRawData = {"C":"18g,ca,368,1kz","D":"17k,6,2,2+4,5+c,2+6,2+1,10+1,9+f,j+11,2+1,a,2,2+1,15+2,3,j+2,6+3,2+8,2,2,2+1,w+a,4+e,3+3,2,3+2,3+5,23+w,2f+4,3,2+9,2,b,2+3,3,1k+9,6+1,3+1,2+2,2+d,30g,p+y,1,1+1g,f+x,2,sd2+1d,jf3+4,f+3,2+4,2+2,b+3,42,2,4+2,2+1,2,3,t+1,9f+w,2,el+2,2+g,d+2,2l,2+1,5,3+1,2+1,2,3,6,16wm+1v","R":"17m+3,2,2,6+3,m,15+2,2+2,h+h,13,3+8,2,2,3+1,2,p+1,x,5+4,5,a,2,2,3,u,c+2,g+1,5,2+1,4+1,5j,6+1,2,b,2+2,f,2+1,1s+2,2,3+1,7,1ez0,2,2+1,4+4,b,4,3,b,42,2+2,4,3,2+1,2,o+3,ae,ep,x,2o+2,3+1,3,5+1,6","L":"x9u,jff,a,fd,jv","T":"4t,gj+33,7o+4,1+1,7c+18,2,2+1,2+1,2,21+a,2,1b+k,h,2u+6,3+5,3+1,2+3,y,2,v+q,2k+a,1n+8,a,p+3,2+8,2+2,2+4,18+2,3c+e,2+v,1k,2,5+7,5,4+6,b+1,u,1n,5+3,9,l+1,r,3+1,1m,5+1,5+1,3+2,4,v+1,4,c+1,1m,5+4,2+1,5,l+1,n+5,2,1n,3,2+3,9,8+1,c+1,v,1q,d,1f,4,1m+2,6+2,2+3,8+1,c+1,u,1n,3,7,6+1,l+1,t+1,1m+1,5+3,9,l+1,u,21,8+2,2,2j,3+6,d+7,2r,3+8,c+5,23+1,s,2,2,1k+d,2+4,2+1,6+a,2+z,a,2v+3,2+5,2+1,3+1,q+1,5+2,h+3,e,3+1,7,g,jk+2,qb+2,u+2,u+1,v+1,1t+1,2+6,9,3+a,a,1a+2,3c+1,z,3b+2,5+1,a,7+2,64+1,3,1n,2+6,2,2,3+7,7+9,3,1d+d,1,1+1,1s+3,1d,2+4,2,6,15+8,d+1,x+3,3+1,2+2,1l,2+1,4,2+2,1n+7,3+1,49+2,2+c,2+6,5,7,4+1,5j+1l,2+4,ek,3+1,r+4,1e+4,6+5,2p+c,1+3,1,1+2,1+b,2db+2,3y,2p+v,ff+3,30+1,n9x,1+2,2+9,x+1,29+1,7l,4,5,q+1,6,48+1,r+h,e,13+7,q+a,1b+2,1d,3+3,3+1,14,1w+5,3+1,3+1,d,9,1c,1g,2+2,3+1,6+1,2,17+1,9,6n,3,5,fn5,ki+f,h+f,5s,6y+2,ea,6b,46+4,1af+2,2+1,6+3,15+2,5,4m+1,fy+3,as+1,4a+a,4x,1j+e,1l+2,1e+3,3+1,1y+2,11+4,2+7,1r,d+1,1h+8,b+3,3,2o+2,3,2+1,7,4h,4+7,m+1,1m+1,4,12+6,4+4,5g+7,3+2,2,o,2d+5,2,5+1,2+1,6n+3,7+1,2+1,s+1,2e+7,3,2+1,2z,2,3+5,2,2u+2,3+3,2+4,78+8,2+1,75+1,2,5,41+3,3+1,5,x+9,15+5,3+3,9,a+5,3+2,1b+c,2+1,bb+6,2+5,2,2b+l,3+6,2+1,2+1,3f+5,4,2+1,2+6,2,21+1,4,2,9o+1,470+8,at4+4,1o+6,t5,1s+3,2a,f5l+1,2+3,43o+2,a+7,1+7,3+6,v+3,45+2,1j0+1i,5+1d,9,f,n+4,2+e,11t+6,2+g,3+6,2+1,2+4,7a+6,c6+3,15t+6,32+6,1,gzau,v+2n,3l+6n"};

  const JT_LEFT = 1, //indicates that a character joins with the subsequent character, but does not join with the preceding character.
    JT_RIGHT = 2, //indicates that a character joins with the preceding character, but does not join with the subsequent character.
    JT_DUAL = 4, //indicates that a character joins with the preceding character and joins with the subsequent character.
    JT_TRANSPARENT = 8, //indicates that the character does not join with adjacent characters and that the character must be skipped over when the shaping engine is evaluating the joining positions in a sequence of characters. When a JT_TRANSPARENT character is encountered in a sequence, the JOINING_TYPE of the preceding character passes through. Diacritical marks are frequently assigned this value.
    JT_JOIN_CAUSING = 16, //indicates that the character forces the use of joining forms with the preceding and subsequent characters. Kashidas and the Zero Width Joiner (U+200D) are both JOIN_CAUSING characters.
    JT_NON_JOINING = 32; //indicates that a character does not join with the preceding or with the subsequent character.,

  let joiningTypeMap;
  function getCharJoiningType(ch) {
    if (!joiningTypeMap) {
      const m = {
        R: JT_RIGHT,
        L: JT_LEFT,
        D: JT_DUAL,
        C: JT_JOIN_CAUSING,
        U: JT_NON_JOINING,
        T: JT_TRANSPARENT
      };
      joiningTypeMap = new Map();
      for (let type in joiningTypeRawData) {
        let lastCode = 0;
        joiningTypeRawData[type].split(',').forEach(range => {
          let [skip, step] = range.split('+');
          skip = parseInt(skip,36);
          step = step ? parseInt(step, 36) : 0;
          joiningTypeMap.set(lastCode += skip, m[type]);
          for (let i = step; i--;) {
            joiningTypeMap.set(++lastCode, m[type]);
          }
        });
      }
    }
    return joiningTypeMap.get(ch) || JT_NON_JOINING
  }

  const ISOL = 1, INIT = 2, FINA = 3, MEDI = 4;
  const formsToFeatures = [null, 'isol', 'init', 'fina', 'medi'];

  function detectJoiningForms(str) {
    // This implements the algorithm described here:
    // https://github.com/n8willis/opentype-shaping-documents/blob/master/opentype-shaping-arabic-general.md
    const joiningForms = new Uint8Array(str.length);
    let prevJoiningType = JT_NON_JOINING;
    let prevForm = ISOL;
    let prevIndex = -1;
    for (let i = 0; i < str.length; i++) {
      const code = str.codePointAt(i);
      let joiningType = getCharJoiningType(code) | 0;
      let form = ISOL;
      if (joiningType & JT_TRANSPARENT) {
        continue
      }
      if (prevJoiningType & (JT_LEFT | JT_DUAL | JT_JOIN_CAUSING)) {
        if (joiningType & (JT_RIGHT | JT_DUAL | JT_JOIN_CAUSING)) {
          form = FINA;
          // isol->init, fina->medi
          if (prevForm === ISOL || prevForm === FINA) {
            joiningForms[prevIndex]++;
          }
        }
        else if (joiningType & (JT_LEFT | JT_NON_JOINING)) {
          // medi->fina, init->isol
          if (prevForm === INIT || prevForm === MEDI) {
            joiningForms[prevIndex]--;
          }
        }
      }
      else if (prevJoiningType & (JT_RIGHT | JT_NON_JOINING)) {
        // medi->fina, init->isol
        if (prevForm === INIT || prevForm === MEDI) {
          joiningForms[prevIndex]--;
        }
      }
      prevForm = joiningForms[i] = form;
      prevJoiningType = joiningType;
      prevIndex = i;
      if (code > 0xffff) i++;
    }
    // console.log(str.split('').map(ch => ch.codePointAt(0).toString(16)))
    // console.log(str.split('').map(ch => getCharJoiningType(ch.codePointAt(0))))
    // console.log(Array.from(joiningForms).map(f => formsToFeatures[f] || 'none'))
    return joiningForms
  }

  function stringToGlyphs (font, str) {
    const glyphIds = [];
    for (let i = 0; i < str.length; i++) {
      const cc = str.codePointAt(i);
      if (cc > 0xffff) i++;
      glyphIds.push(Typr.U.codeToGlyph(font, cc));
    }

    const gsub = font['GSUB'];
    if (gsub) {
      const {lookupList, featureList} = gsub;
      let joiningForms;
      const supportedFeatures = /^(rlig|liga|mset|isol|init|fina|medi|half|pres|blws)$/;
      const usedLookups = [];
      featureList.forEach(feature => {
        if (supportedFeatures.test(feature.tag)) {
          for (let ti = 0; ti < feature.tab.length; ti++) {
            if (usedLookups[feature.tab[ti]]) continue
            usedLookups[feature.tab[ti]] = true;
            const tab = lookupList[feature.tab[ti]];
            const isJoiningFeature = /^(isol|init|fina|medi)$/.test(feature.tag);
            if (isJoiningFeature && !joiningForms) { //lazy
              joiningForms = detectJoiningForms(str);
            }
            for (let ci = 0; ci < glyphIds.length; ci++) {
              if (!joiningForms || !isJoiningFeature || formsToFeatures[joiningForms[ci]] === feature.tag) {
                Typr.U._applySubs(glyphIds, ci, tab, lookupList);
              }
            }
          }
        }
      });
    }

    return glyphIds
  }


  function wrapFontObj(typrFont) {
    const glyphMap = Object.create(null);

    const fontObj = {
      unitsPerEm: typrFont.head.unitsPerEm,
      ascender: typrFont.hhea.ascender,
      descender: typrFont.hhea.descender,
      forEachGlyph(text, fontSize, letterSpacing, callback) {
        let glyphX = 0;
        const fontScale = 1 / fontObj.unitsPerEm * fontSize;

        const glyphIndices = stringToGlyphs(typrFont, text);
        let charIndex = 0;
        let prevGlyphIndex = -1;
        glyphIndices.forEach((glyphIndex, i) => {
          // Typr returns a glyph index per string codepoint, with -1s in place of those that
          // were omitted due to ligature substitution. So we can track original index in the
          // string via simple increment, and skip everything else when seeing a -1.
          if (glyphIndex !== -1) {
            let glyphObj = glyphMap[glyphIndex];
            if (!glyphObj) {
              const {cmds, crds} = Typr.U.glyphToPath(typrFont, glyphIndex);

              // Build path string
              let path = '';
              let crdsIdx = 0;
              for (let i = 0, len = cmds.length; i < len; i++) {
                const numArgs = cmdArgLengths[cmds[i]];
                path += cmds[i];
                for (let j = 1; j <= numArgs; j++) {
                  path += (j > 1 ? ',' : '') + crds[crdsIdx++];
                }
              }

              // Find extents - Glyf gives this in metadata but not CFF, and Typr doesn't
              // normalize the two, so it's simplest just to iterate ourselves.
              let xMin, yMin, xMax, yMax;
              if (crds.length) {
                xMin = yMin = Infinity;
                xMax = yMax = -Infinity;
                for (let i = 0, len = crds.length; i < len; i += 2) {
                  let x = crds[i];
                  let y = crds[i + 1];
                  if (x < xMin) xMin = x;
                  if (y < yMin) yMin = y;
                  if (x > xMax) xMax = x;
                  if (y > yMax) yMax = y;
                }
              } else {
                xMin = xMax = yMin = yMax = 0;
              }

              glyphObj = glyphMap[glyphIndex] = {
                index: glyphIndex,
                advanceWidth: typrFont.hmtx.aWidth[glyphIndex],
                xMin,
                yMin,
                xMax,
                yMax,
                path,
                pathCommandCount: cmds.length,
                // forEachPathCommand(callback) {
                //   let argsIndex = 0
                //   const argsArray = []
                //   for (let i = 0, len = cmds.length; i < len; i++) {
                //     const numArgs = cmdArgLengths[cmds[i]]
                //     argsArray.length = 1 + numArgs
                //     argsArray[0] = cmds[i]
                //     for (let j = 1; j <= numArgs; j++) {
                //       argsArray[j] = crds[argsIndex++]
                //     }
                //     callback.apply(null, argsArray)
                //   }
                // }
              };
            }

            // Kerning
            if (prevGlyphIndex !== -1) {
              glyphX += Typr.U.getPairAdjustment(typrFont, prevGlyphIndex, glyphIndex) * fontScale;
            }

            callback.call(null, glyphObj, glyphX, charIndex);

            if (glyphObj.advanceWidth) {
              glyphX += glyphObj.advanceWidth * fontScale;
            }
            if (letterSpacing) {
              glyphX += letterSpacing * fontSize;
            }

            prevGlyphIndex = glyphIndex;
          }
          charIndex += (text.codePointAt(charIndex) > 0xffff ? 2 : 1);
        });
        return glyphX
      }
    };

    return fontObj
  }

  return function parse(buffer) {
    // Look to see if we have a WOFF file and convert it if so:
    const peek = new Uint8Array(buffer, 0, 4);
    const tag = Typr._bin.readASCII(peek, 0, 4);
    if (tag === 'wOFF') {
      buffer = woff2otf(buffer);
    } else if (tag === 'wOF2') {
      throw new Error('woff2 fonts not supported')
    }
    return wrapFontObj(Typr.parse(buffer)[0])
  }
}


const workerModule = /*#__PURE__*/defineWorkerModule({
  name: 'Typr Font Parser',
  dependencies: [typrFactory, woff2otfFactory, parserFactory],
  init(typrFactory, woff2otfFactory, parserFactory) {
    const Typr = typrFactory();
    const woff2otf = woff2otfFactory();
    return parserFactory(Typr, woff2otf)
  }
});

const CONFIG = {
  defaultFontURL: 'https://fonts.gstatic.com/s/roboto/v18/KFOmCnqEu92Fr1Mu4mxM.woff', //Roboto Regular
  sdfGlyphSize: 64,
  sdfMargin: 1 / 16,
  sdfExponent: 9,
  textureWidth: 2048
};
const tempColor = /*#__PURE__*/new Color();

function now() {
  return (self.performance || Date).now()
}

/**
 * Repository for all font SDF atlas textures and their glyph mappings. There is a separate atlas for
 * each sdfGlyphSize. Each atlas has a single Texture that holds all glyphs for all fonts.
 *
 *   {
 *     [sdfGlyphSize]: {
 *       glyphCount: number,
 *       sdfGlyphSize: number,
 *       sdfTexture: Texture,
 *       sdfCanvas: HTMLCanvasElement,
 *       contextLost: boolean,
 *       glyphsByFont: Map<fontURL, Map<glyphID, {path, atlasIndex, sdfViewBox}>>
 *     }
 *   }
 */
const atlases = Object.create(null);

/**
 * @typedef {object} TroikaTextRenderInfo - Format of the result from `getTextRenderInfo`.
 * @property {object} parameters - The normalized input arguments to the render call.
 * @property {Texture} sdfTexture - The SDF atlas texture.
 * @property {number} sdfGlyphSize - The size of each glyph's SDF; see `configureTextBuilder`.
 * @property {number} sdfExponent - The exponent used in encoding the SDF's values; see `configureTextBuilder`.
 * @property {Float32Array} glyphBounds - List of [minX, minY, maxX, maxY] quad bounds for each glyph.
 * @property {Float32Array} glyphAtlasIndices - List holding each glyph's index in the SDF atlas.
 * @property {Uint8Array} [glyphColors] - List holding each glyph's [r, g, b] color, if `colorRanges` was supplied.
 * @property {Float32Array} [caretPositions] - A list of caret positions for all characters in the string; each is
 *           three elements: the starting X, the ending X, and the bottom Y for the caret.
 * @property {number} [caretHeight] - An appropriate height for all selection carets.
 * @property {number} ascender - The font's ascender metric.
 * @property {number} descender - The font's descender metric.
 * @property {number} lineHeight - The final computed lineHeight measurement.
 * @property {number} topBaseline - The y position of the top line's baseline.
 * @property {Array<number>} blockBounds - The total [minX, minY, maxX, maxY] rect of the whole text block;
 *           this can include extra vertical space beyond the visible glyphs due to lineHeight, and is
 *           equivalent to the dimensions of a block-level text element in CSS.
 * @property {Array<number>} visibleBounds - The total [minX, minY, maxX, maxY] rect of the whole text block;
 *           unlike `blockBounds` this is tightly wrapped to the visible glyph paths.
 * @property {Array<number>} totalBounds - DEPRECATED; use blockBounds instead.
 * @property {Array<number>} totalBlockSize - DEPRECATED; use blockBounds instead
 * @property {Array<object>} chunkedBounds - List of bounding rects for each consecutive set of N glyphs,
 *           in the format `{start:N, end:N, rect:[minX, minY, maxX, maxY]}`.
 * @property {object} timings - Timing info for various parts of the rendering logic including SDF
 *           generation, typesetting, etc.
 * @frozen
 */

/**
 * @callback getTextRenderInfo~callback
 * @param {TroikaTextRenderInfo} textRenderInfo
 */

/**
 * Main entry point for requesting the data needed to render a text string with given font parameters.
 * This is an asynchronous call, performing most of the logic in a web worker thread.
 * @param {object} args
 * @param {getTextRenderInfo~callback} callback
 */
function getTextRenderInfo(args, callback) {
  args = assign$9({}, args);
  const totalStart = now();

  // Apply default font here to avoid a 'null' atlas, and convert relative
  // URLs to absolute so they can be resolved in the worker
  args.font = toAbsoluteURL(args.font || CONFIG.defaultFontURL);

  // Normalize text to a string
  args.text = '' + args.text;

  args.sdfGlyphSize = args.sdfGlyphSize || CONFIG.sdfGlyphSize;

  // Normalize colors
  if (args.colorRanges != null) {
    let colors = {};
    for (let key in args.colorRanges) {
      if (args.colorRanges.hasOwnProperty(key)) {
        let val = args.colorRanges[key];
        if (typeof val !== 'number') {
          val = tempColor.set(val).getHex();
        }
        colors[key] = val;
      }
    }
    args.colorRanges = colors;
  }

  Object.freeze(args);

  // Init the atlas if needed
  const {textureWidth, sdfExponent} = CONFIG;
  const {sdfGlyphSize} = args;
  const glyphsPerRow = (textureWidth / sdfGlyphSize * 4);
  let atlas = atlases[sdfGlyphSize];
  if (!atlas) {
    const canvas = document.createElement('canvas');
    canvas.width = textureWidth;
    canvas.height = sdfGlyphSize * 256 / glyphsPerRow; // start tall enough to fit 256 glyphs
    atlas = atlases[sdfGlyphSize] = {
      glyphCount: 0,
      sdfGlyphSize,
      sdfCanvas: canvas,
      sdfTexture: new Texture(
        canvas,
        undefined,
        undefined,
        undefined,
        LinearFilter,
        LinearFilter
      ),
      contextLost: false,
      glyphsByFont: new Map()
    };
    atlas.sdfTexture.generateMipmaps = false;
    initContextLossHandling(atlas);
  }

  const {sdfTexture, sdfCanvas} = atlas;
  let fontGlyphs = atlas.glyphsByFont.get(args.font);
  if (!fontGlyphs) {
    atlas.glyphsByFont.set(args.font, fontGlyphs = new Map());
  }

  // Issue request to the typesetting engine in the worker
  typesetInWorker(args).then(result => {
    const {glyphIds, glyphPositions, fontSize, unitsPerEm, timings} = result;
    const neededSDFs = [];
    const glyphBounds = new Float32Array(glyphIds.length * 4);
    const fontSizeMult = fontSize / unitsPerEm;
    let boundsIdx = 0;
    let positionsIdx = 0;
    const quadsStart = now();
    glyphIds.forEach((glyphId, i) => {
      let glyphInfo = fontGlyphs.get(glyphId);

      // If this is a glyphId not seen before, add it to the atlas
      if (!glyphInfo) {
        const {path, pathBounds} = result.glyphData[glyphId];

        // Margin around path edges in SDF, based on a percentage of the glyph's max dimension.
        // Note we add an extra 0.5 px over the configured value because the outer 0.5 doesn't contain
        // useful interpolated values and will be ignored anyway.
        const fontUnitsMargin = Math.max(pathBounds[2] - pathBounds[0], pathBounds[3] - pathBounds[1])
          / sdfGlyphSize * (CONFIG.sdfMargin * sdfGlyphSize + 0.5);

        const atlasIndex = atlas.glyphCount++;
        const sdfViewBox = [
          pathBounds[0] - fontUnitsMargin,
          pathBounds[1] - fontUnitsMargin,
          pathBounds[2] + fontUnitsMargin,
          pathBounds[3] + fontUnitsMargin,
        ];
        fontGlyphs.set(glyphId, (glyphInfo = { path, atlasIndex, sdfViewBox }));

        // Collect those that need SDF generation
        neededSDFs.push(glyphInfo);
      }

      // Calculate bounds for renderable quads
      // TODO can we get this back off the main thread?
      const {sdfViewBox} = glyphInfo;
      const posX = glyphPositions[positionsIdx++];
      const posY = glyphPositions[positionsIdx++];
      glyphBounds[boundsIdx++] = posX + sdfViewBox[0] * fontSizeMult;
      glyphBounds[boundsIdx++] = posY + sdfViewBox[1] * fontSizeMult;
      glyphBounds[boundsIdx++] = posX + sdfViewBox[2] * fontSizeMult;
      glyphBounds[boundsIdx++] = posY + sdfViewBox[3] * fontSizeMult;

      // Convert glyphId to SDF index for the shader
      glyphIds[i] = glyphInfo.atlasIndex;
    });
    timings.quads = (timings.quads || 0) + (now() - quadsStart);

    const sdfStart = now();
    timings.sdf = {};

    // Grow the texture height by power of 2 if needed
    const currentHeight = sdfCanvas.height;
    const neededRows = Math.ceil(atlas.glyphCount / glyphsPerRow);
    const neededHeight = Math.pow(2, Math.ceil(Math.log2(neededRows * sdfGlyphSize)));
    if (neededHeight > currentHeight) {
      // Since resizing the canvas clears its render buffer, it needs special handling to copy the old contents over
      resizeWebGLCanvasWithoutClearing(sdfCanvas, textureWidth, neededHeight);
      // As of Three r136 textures cannot be resized once they're allocated on the GPU, we must dispose to reallocate it
      sdfTexture.dispose();
    }

    DefaultThenable.all(neededSDFs.map(glyphInfo =>
      generateGlyphSDF(glyphInfo, atlas, args.gpuAccelerateSDF).then(({timing}) => {
        timings.sdf[glyphInfo.atlasIndex] = timing;
      })
    )).then(() => {
      if (neededSDFs.length && !atlas.contextLost) {
        safariPre15Workaround(atlas);
        sdfTexture.needsUpdate = true;
      }
      timings.sdfTotal = now() - sdfStart;
      timings.total = now() - totalStart;
      // console.log(`SDF - ${timings.sdfTotal}, Total - ${timings.total - timings.fontLoad}`)

      // Invoke callback with the text layout arrays and updated texture
      callback(Object.freeze({
        parameters: args,
        sdfTexture,
        sdfGlyphSize,
        sdfExponent,
        glyphBounds,
        glyphAtlasIndices: glyphIds,
        glyphColors: result.glyphColors,
        caretPositions: result.caretPositions,
        caretHeight: result.caretHeight,
        chunkedBounds: result.chunkedBounds,
        ascender: result.ascender,
        descender: result.descender,
        lineHeight: result.lineHeight,
        topBaseline: result.topBaseline,
        blockBounds: result.blockBounds,
        visibleBounds: result.visibleBounds,
        timings: result.timings,
        get totalBounds() {
          return result.blockBounds
        },
        get totalBlockSize() {
          const [x0, y0, x1, y1] = result.blockBounds;
          return [x1 - x0, y1 - y0]
        }
      }));
    });
  });

  // While the typesetting request is being handled, go ahead and make sure the atlas canvas context is
  // "warmed up"; the first request will be the longest due to shader program compilation so this gets
  // a head start on that process before SDFs actually start getting processed.
  DefaultThenable.all([]).then(() => {
    if (!atlas.contextLost) {
      warmUpSDFCanvas(sdfCanvas);
    }
  });
}

function generateGlyphSDF({path, atlasIndex, sdfViewBox}, {sdfGlyphSize, sdfCanvas, contextLost}, useGPU) {
  if (contextLost) {
    // If the context is lost there's nothing we can do, just quit silently and let it
    // get regenerated when the context is restored
    return Promise.resolve({timing: -1})
  }
  const {textureWidth, sdfExponent} = CONFIG;
  const maxDist = Math.max(sdfViewBox[2] - sdfViewBox[0], sdfViewBox[3] - sdfViewBox[1]);
  const squareIndex = Math.floor(atlasIndex / 4);
  const x = squareIndex % (textureWidth / sdfGlyphSize) * sdfGlyphSize;
  const y = Math.floor(squareIndex / (textureWidth / sdfGlyphSize)) * sdfGlyphSize;
  const channel = atlasIndex % 4;
  return generateSDF(sdfGlyphSize, sdfGlyphSize, path, sdfViewBox, maxDist, sdfExponent, sdfCanvas, x, y, channel, useGPU)
}

function initContextLossHandling(atlas) {
  const canvas = atlas.sdfCanvas;

  /*
  // Begin context loss simulation
  if (!window.WebGLDebugUtils) {
    let script = document.getElementById('WebGLDebugUtilsScript')
    if (!script) {
      script = document.createElement('script')
      script.id = 'WebGLDebugUtils'
      document.head.appendChild(script)
      script.src = 'https://cdn.jsdelivr.net/gh/KhronosGroup/WebGLDeveloperTools@b42e702/src/debug/webgl-debug.js'
    }
    script.addEventListener('load', () => {
      initContextLossHandling(atlas)
    })
    return
  }
  window.WebGLDebugUtils.makeLostContextSimulatingCanvas(canvas)
  canvas.loseContextInNCalls(500)
  canvas.addEventListener('webglcontextrestored', (event) => {
    canvas.loseContextInNCalls(5000)
  })
  // End context loss simulation
  */

  canvas.addEventListener('webglcontextlost', (event) => {
    event.preventDefault();
    atlas.contextLost = true;
  });
  canvas.addEventListener('webglcontextrestored', (event) => {
    atlas.contextLost = false;
    // Regenerate all glyphs into the restored canvas:
    const promises = [];
    atlas.glyphsByFont.forEach(glyphMap => {
      glyphMap.forEach(glyph => {
        promises.push(generateGlyphSDF(glyph, atlas, true));
      });
    });
    DefaultThenable.all(promises).then(() => {
      safariPre15Workaround(atlas);
      atlas.sdfTexture.needsUpdate = true;
    });
  });
}


// Local assign impl so we don't have to import troika-core
function assign$9(toObj, fromObj) {
  for (let key in fromObj) {
    if (fromObj.hasOwnProperty(key)) {
      toObj[key] = fromObj[key];
    }
  }
  return toObj
}

// Utility for making URLs absolute
let linkEl;
function toAbsoluteURL(path) {
  if (!linkEl) {
    linkEl = typeof document === 'undefined' ? {} : document.createElement('a');
  }
  linkEl.href = path;
  return linkEl.href
}

/**
 * Safari < v15 seems unable to use the SDF webgl canvas as a texture. This applies a workaround
 * where it reads the pixels out of that canvas and uploads them as a data texture instead, at
 * a slight performance cost.
 */
function safariPre15Workaround(atlas) {
  // Use createImageBitmap support as a proxy for Safari<15, all other mainstream browsers
  // have supported it for a long while so any false positives should be minimal.
  if (typeof createImageBitmap !== 'function') {
    const {sdfCanvas, sdfTexture} = atlas;
    const {width, height} = sdfCanvas;
    const gl = atlas.sdfCanvas.getContext('webgl');
    let pixels = sdfTexture.image.data;
    if (!pixels || pixels.length !== width * height * 4) {
      pixels = new Uint8Array(width * height * 4);
      sdfTexture.image = {width, height, data: pixels};
      sdfTexture.flipY = false;
      sdfTexture.isDataTexture = true;
    }
    gl.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, pixels);
  }
}


const typesetterWorkerModule = /*#__PURE__*/defineWorkerModule({
  name: 'Typesetter',
  dependencies: [
    CONFIG,
    workerModule,
    createTypesetter,
    bidiFactory
  ],
  init(config, fontParser, createTypesetter, bidiFactory) {
    const {defaultFontURL} = config;
    return createTypesetter(fontParser, bidiFactory(), { defaultFontURL })
  }
});

const typesetInWorker = /*#__PURE__*/defineWorkerModule({
  name: 'Typesetter',
  dependencies: [
    typesetterWorkerModule,
    ThenableWorkerModule
  ],
  init(typesetter, Thenable) {
    return function(args) {
      const thenable = new Thenable();
      typesetter.typeset(args, thenable.resolve);
      return thenable
    }
  },
  getTransferables(result) {
    // Mark array buffers as transferable to avoid cloning during postMessage
    const transferables = [
      result.glyphPositions.buffer,
      result.glyphIds.buffer
    ];
    if (result.caretPositions) {
      transferables.push(result.caretPositions.buffer);
    }
    if (result.glyphColors) {
      transferables.push(result.glyphColors.buffer);
    }
    return transferables
  }
});

const GlyphsGeometry = /*#__PURE__*/(() => {

  const templateGeometries = {};
  function getTemplateGeometry(detail) {
    let geom = templateGeometries[detail];
    if (!geom) {
      // Geometry is two planes back-to-back, which will always be rendered FrontSide only but
      // appear as DoubleSide by default. FrontSide/BackSide are emulated using drawRange.
      // We do it this way to avoid the performance hit of two draw calls for DoubleSide materials
      // introduced by Three.js in r130 - see https://github.com/mrdoob/three.js/pull/21967
      const front = new PlaneBufferGeometry(1, 1, detail, detail);
      const back = front.clone();
      const frontAttrs = front.attributes;
      const backAttrs = back.attributes;
      const combined = new BufferGeometry();
      const vertCount = frontAttrs.uv.count;
      for (let i = 0; i < vertCount; i++) {
        backAttrs.position.array[i * 3] *= -1; // flip position x
        backAttrs.normal.array[i * 3 + 2] *= -1; // flip normal z
      }
['position', 'normal', 'uv'].forEach(name => {
        combined.setAttribute(name, new Float32BufferAttribute(
          [...frontAttrs[name].array, ...backAttrs[name].array],
          frontAttrs[name].itemSize)
        );
      });
      combined.setIndex([...front.index.array, ...back.index.array.map(n => n + vertCount)]);
      combined.translate(0.5, 0.5, 0);
      geom = templateGeometries[detail] = combined;
    }
    return geom
  }

  const glyphBoundsAttrName = 'aTroikaGlyphBounds';
  const glyphIndexAttrName = 'aTroikaGlyphIndex';
  const glyphColorAttrName = 'aTroikaGlyphColor';

  /**
  @class GlyphsGeometry

  A specialized Geometry for rendering a set of text glyphs. Uses InstancedBufferGeometry to
  render the glyphs using GPU instancing of a single quad, rather than constructing a whole
  geometry with vertices, for much smaller attribute arraybuffers according to this math:

    Where N = number of glyphs...

    Instanced:
    - position: 4 * 3
    - index: 2 * 3
    - normal: 4 * 3
    - uv: 4 * 2
    - glyph x/y bounds: N * 4
    - glyph indices: N * 1
    = 5N + 38

    Non-instanced:
    - position: N * 4 * 3
    - index: N * 2 * 3
    - normal: N * 4 * 3
    - uv: N * 4 * 2
    - glyph indices: N * 1
    = 39N

  A downside of this is the rare-but-possible lack of the instanced arrays extension,
  which we could potentially work around with a fallback non-instanced implementation.

  */
  class GlyphsGeometry extends InstancedBufferGeometry {
    constructor() {
      super();

      this.detail = 1;
      this.curveRadius = 0;

      // Define groups for rendering text outline as a separate pass; these will only
      // be used when the `material` getter returns an array, i.e. outlineWidth > 0.
      this.groups = [
        {start: 0, count: Infinity, materialIndex: 0},
        {start: 0, count: Infinity, materialIndex: 1}
      ];

      // Preallocate empty bounding objects
      this.boundingSphere = new Sphere();
      this.boundingBox = new Box3();
    }

    computeBoundingSphere () {
      // No-op; we'll sync the boundingSphere proactively when needed.
    }

    computeBoundingBox() {
      // No-op; we'll sync the boundingBox proactively when needed.
    }

    // Since our base geometry contains triangles for both front and back sides, we can emulate
    // the "side" by restricting the draw range.
    setSide(side) {
      const verts = this.getIndex().count;
      this.setDrawRange(side === BackSide ? verts / 2 : 0, side === DoubleSide ? verts : verts / 2);
    }

    set detail(detail) {
      if (detail !== this._detail) {
        this._detail = detail;
        if (typeof detail !== 'number' || detail < 1) {
          detail = 1;
        }
        let tpl = getTemplateGeometry(detail)
        ;['position', 'normal', 'uv'].forEach(attr => {
          this.attributes[attr] = tpl.attributes[attr].clone();
        });
        this.setIndex(tpl.getIndex().clone());
      }
    }
    get detail() {
      return this._detail
    }

    set curveRadius(r) {
      if (r !== this._curveRadius) {
        this._curveRadius = r;
        this._updateBounds();
      }
    }
    get curveRadius() {
      return this._curveRadius
    }

    /**
     * Update the geometry for a new set of glyphs.
     * @param {Float32Array} glyphBounds - An array holding the planar bounds for all glyphs
     *        to be rendered, 4 entries for each glyph: x1,x2,y1,y1
     * @param {Float32Array} glyphAtlasIndices - An array holding the index of each glyph within
     *        the SDF atlas texture.
     * @param {Array} blockBounds - An array holding the [minX, minY, maxX, maxY] across all glyphs
     * @param {Array} [chunkedBounds] - An array of objects describing bounds for each chunk of N
     *        consecutive glyphs: `{start:N, end:N, rect:[minX, minY, maxX, maxY]}`. This can be
     *        used with `applyClipRect` to choose an optimized `instanceCount`.
     * @param {Uint8Array} [glyphColors] - An array holding r,g,b values for each glyph.
     */
    updateGlyphs(glyphBounds, glyphAtlasIndices, blockBounds, chunkedBounds, glyphColors) {
      // Update the instance attributes
      updateBufferAttr(this, glyphBoundsAttrName, glyphBounds, 4);
      updateBufferAttr(this, glyphIndexAttrName, glyphAtlasIndices, 1);
      updateBufferAttr(this, glyphColorAttrName, glyphColors, 3);
      this._blockBounds = blockBounds;
      this._chunkedBounds = chunkedBounds;
      setInstanceCount(this, glyphAtlasIndices.length);
      this._updateBounds();
    }

    _updateBounds() {
      const bounds = this._blockBounds;
      if (bounds) {
        const { curveRadius, boundingBox: bbox } = this;
        if (curveRadius) {
          const { PI, floor, min, max, sin, cos } = Math;
          const halfPi = PI / 2;
          const twoPi = PI * 2;
          const absR = Math.abs(curveRadius);
          const leftAngle = bounds[0] / absR;
          const rightAngle = bounds[2] / absR;
          const minX = floor((leftAngle + halfPi) / twoPi) !== floor((rightAngle + halfPi) / twoPi)
            ? -absR : min(sin(leftAngle) * absR, sin(rightAngle) * absR);
          const maxX = floor((leftAngle - halfPi) / twoPi) !== floor((rightAngle - halfPi) / twoPi)
            ? absR : max(sin(leftAngle) * absR, sin(rightAngle) * absR);
          const maxZ = floor((leftAngle + PI) / twoPi) !== floor((rightAngle + PI) / twoPi)
            ? absR * 2 : max(absR - cos(leftAngle) * absR, absR - cos(rightAngle) * absR);
          bbox.min.set(minX, bounds[1], curveRadius < 0 ? -maxZ : 0);
          bbox.max.set(maxX, bounds[3], curveRadius < 0 ? 0 : maxZ);
        } else {
          bbox.min.set(bounds[0], bounds[1], 0);
          bbox.max.set(bounds[2], bounds[3], 0);
        }
        bbox.getBoundingSphere(this.boundingSphere);
      }
    }

    /**
     * Given a clipping rect, and the chunkedBounds from the last updateGlyphs call, choose the lowest
     * `instanceCount` that will show all glyphs within the clipped view. This is an optimization
     * for long blocks of text that are clipped, to skip vertex shader evaluation for glyphs that would
     * be clipped anyway.
     *
     * Note that since `drawElementsInstanced[ANGLE]` only accepts an instance count and not a starting
     * offset, this optimization becomes less effective as the clipRect moves closer to the end of the
     * text block. We could fix that by switching from instancing to a full geometry with a drawRange,
     * but at the expense of much larger attribute buffers (see classdoc above.)
     *
     * @param {Vector4} clipRect
     */
    applyClipRect(clipRect) {
      let count = this.getAttribute(glyphIndexAttrName).count;
      let chunks = this._chunkedBounds;
      if (chunks) {
        for (let i = chunks.length; i--;) {
          count = chunks[i].end;
          let rect = chunks[i].rect;
          // note: both rects are l-b-r-t
          if (rect[1] < clipRect.w && rect[3] > clipRect.y && rect[0] < clipRect.z && rect[2] > clipRect.x) {
            break
          }
        }
      }
      setInstanceCount(this, count);
    }
  }

  // Compat for pre r109:
  if (!GlyphsGeometry.prototype.setAttribute) {
    GlyphsGeometry.prototype.setAttribute = function(name, attribute) {
      this.attributes[ name ] = attribute;
      return this
    };
  }


  function updateBufferAttr(geom, attrName, newArray, itemSize) {
    const attr = geom.getAttribute(attrName);
    if (newArray) {
      // If length isn't changing, just update the attribute's array data
      if (attr && attr.array.length === newArray.length) {
        attr.array.set(newArray);
        attr.needsUpdate = true;
      } else {
        geom.setAttribute(attrName, new InstancedBufferAttribute(newArray, itemSize));
        // If the new attribute has a different size, we also have to (as of r117) manually clear the
        // internal cached max instance count. See https://github.com/mrdoob/three.js/issues/19706
        // It's unclear if this is a threejs bug or a truly unsupported scenario; discussion in
        // that ticket is ambiguous as to whether replacing a BufferAttribute with one of a
        // different size is supported, but https://github.com/mrdoob/three.js/pull/17418 strongly
        // implies it should be supported. It's possible we need to
        delete geom._maxInstanceCount; //for r117+, could be fragile
        geom.dispose(); //for r118+, more robust feeling, but more heavy-handed than I'd like
      }
    } else if (attr) {
      geom.deleteAttribute(attrName);
    }
  }

  // Handle maxInstancedCount -> instanceCount rename that happened in three r117
  function setInstanceCount(geom, count) {
    geom[geom.hasOwnProperty('instanceCount') ? 'instanceCount' : 'maxInstancedCount'] = count;
  }

  return GlyphsGeometry
})();

/**
 * Regular expression for matching the `void main() {` opener line in GLSL.
 * @type {RegExp}
 */
const voidMainRegExp$1 = /\bvoid\s+main\s*\(\s*\)\s*{/g;

/**
 * Recursively expands all `#include <xyz>` statements within string of shader code.
 * Copied from three's WebGLProgram#parseIncludes for external use.
 *
 * @param {string} source - The GLSL source code to evaluate
 * @return {string} The GLSL code with all includes expanded
 */
function expandShaderIncludes$1( source ) {
  const pattern = /^[ \t]*#include +<([\w\d./]+)>/gm;
  function replace(match, include) {
    let chunk = ShaderChunk[include];
    return chunk ? expandShaderIncludes$1(chunk) : match
  }
  return source.replace( pattern, replace )
}

/*
 * This is a direct copy of MathUtils.generateUUID from Three.js, to preserve compatibility with three
 * versions before 0.113.0 as it was changed from Math to MathUtils in that version.
 * https://github.com/mrdoob/three.js/blob/dd8b5aa3b270c17096b90945cd2d6d1b13aaec53/src/math/MathUtils.js#L16
 */

const _lut$1 = [];

for (let i = 0; i < 256; i++) {
  _lut$1[i] = (i < 16 ? '0' : '') + (i).toString(16);
}

function generateUUID$1() {

  // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136

  const d0 = Math.random() * 0xffffffff | 0;
  const d1 = Math.random() * 0xffffffff | 0;
  const d2 = Math.random() * 0xffffffff | 0;
  const d3 = Math.random() * 0xffffffff | 0;
  const uuid = _lut$1[d0 & 0xff] + _lut$1[d0 >> 8 & 0xff] + _lut$1[d0 >> 16 & 0xff] + _lut$1[d0 >> 24 & 0xff] + '-' +
    _lut$1[d1 & 0xff] + _lut$1[d1 >> 8 & 0xff] + '-' + _lut$1[d1 >> 16 & 0x0f | 0x40] + _lut$1[d1 >> 24 & 0xff] + '-' +
    _lut$1[d2 & 0x3f | 0x80] + _lut$1[d2 >> 8 & 0xff] + '-' + _lut$1[d2 >> 16 & 0xff] + _lut$1[d2 >> 24 & 0xff] +
    _lut$1[d3 & 0xff] + _lut$1[d3 >> 8 & 0xff] + _lut$1[d3 >> 16 & 0xff] + _lut$1[d3 >> 24 & 0xff];

  // .toUpperCase() here flattens concatenated strings to save heap memory space.
  return uuid.toUpperCase()

}

// Local assign polyfill to avoid importing troika-core
const assign$8 = Object.assign || function(/*target, ...sources*/) {
  let target = arguments[0];
  for (let i = 1, len = arguments.length; i < len; i++) {
    let source = arguments[i];
    if (source) {
      for (let prop in source) {
        if (source.hasOwnProperty(prop)) {
          target[prop] = source[prop];
        }
      }
    }
  }
  return target
};


const epoch$1 = Date.now();
const CONSTRUCTOR_CACHE$1 = new WeakMap();
const SHADER_UPGRADE_CACHE$1 = new Map();

// Material ids must be integers, but we can't access the increment from Three's `Material` module,
// so let's choose a sufficiently large starting value that should theoretically never collide.
let materialInstanceId$1 = 1e10;

/**
 * A utility for creating a custom shader material derived from another material's
 * shaders. This allows you to inject custom shader logic and transforms into the
 * builtin ThreeJS materials without having to recreate them from scratch.
 *
 * @param {THREE.Material} baseMaterial - the original material to derive from
 *
 * @param {Object} options - How the base material should be modified.
 * @param {Object} options.defines - Custom `defines` for the material
 * @param {Object} options.extensions - Custom `extensions` for the material, e.g. `{derivatives: true}`
 * @param {Object} options.uniforms - Custom `uniforms` for use in the modified shader. These can
 *        be accessed and manipulated via the resulting material's `uniforms` property, just like
 *        in a ShaderMaterial. You do not need to repeat the base material's own uniforms here.
 * @param {String} options.timeUniform - If specified, a uniform of this name will be injected into
 *        both shaders, and it will automatically be updated on each render frame with a number of
 *        elapsed milliseconds. The "zero" epoch time is not significant so don't rely on this as a
 *        true calendar time.
 * @param {String} options.vertexDefs - Custom GLSL code to inject into the vertex shader's top-level
 *        definitions, above the `void main()` function.
 * @param {String} options.vertexMainIntro - Custom GLSL code to inject at the top of the vertex
 *        shader's `void main` function.
 * @param {String} options.vertexMainOutro - Custom GLSL code to inject at the end of the vertex
 *        shader's `void main` function.
 * @param {String} options.vertexTransform - Custom GLSL code to manipulate the `position`, `normal`,
 *        and/or `uv` vertex attributes. This code will be wrapped within a standalone function with
 *        those attributes exposed by their normal names as read/write values.
 * @param {String} options.fragmentDefs - Custom GLSL code to inject into the fragment shader's top-level
 *        definitions, above the `void main()` function.
 * @param {String} options.fragmentMainIntro - Custom GLSL code to inject at the top of the fragment
 *        shader's `void main` function.
 * @param {String} options.fragmentMainOutro - Custom GLSL code to inject at the end of the fragment
 *        shader's `void main` function. You can manipulate `gl_FragColor` here but keep in mind it goes
 *        after any of ThreeJS's color postprocessing shader chunks (tonemapping, fog, etc.), so if you
 *        want those to apply to your changes use `fragmentColorTransform` instead.
 * @param {String} options.fragmentColorTransform - Custom GLSL code to manipulate the `gl_FragColor`
 *        output value. Will be injected near the end of the `void main` function, but before any
 *        of ThreeJS's color postprocessing shader chunks (tonemapping, fog, etc.), and before the
 *        `fragmentMainOutro`.
 * @param {function<{vertexShader,fragmentShader}>:{vertexShader,fragmentShader}} options.customRewriter - A function
 *        for performing custom rewrites of the full shader code. Useful if you need to do something
 *        special that's not covered by the other builtin options. This function will be executed before
 *        any other transforms are applied.
 * @param {boolean} options.chained - Set to `true` to prototype-chain the derived material to the base
 *        material, rather than the default behavior of copying it. This allows the derived material to
 *        automatically pick up changes made to the base material and its properties. This can be useful
 *        where the derived material is hidden from the user as an implementation detail, allowing them
 *        to work with the original material like normal. But it can result in unexpected behavior if not
 *        handled carefully.
 *
 * @return {THREE.Material}
 *
 * The returned material will also have two new methods, `getDepthMaterial()` and `getDistanceMaterial()`,
 * which can be called to get a variant of the derived material for use in shadow casting. If the
 * target mesh is expected to cast shadows, then you can assign these to the mesh's `customDepthMaterial`
 * (for directional and spot lights) and/or `customDistanceMaterial` (for point lights) properties to
 * allow the cast shadow to honor your derived shader's vertex transforms and discarded fragments. These
 * will also set a custom `#define IS_DEPTH_MATERIAL` or `#define IS_DISTANCE_MATERIAL` that you can look
 * for in your derived shaders with `#ifdef` to customize their behavior for the depth or distance
 * scenarios, e.g. skipping antialiasing or expensive shader logic.
 */
function createDerivedMaterial$1(baseMaterial, options) {
  // Generate a key that is unique to the content of these `options`. We'll use this
  // throughout for caching and for generating the upgraded shader code. This increases
  // the likelihood that the resulting shaders will line up across multiple calls so
  // their GL programs can be shared and cached.
  const optionsKey = getKeyForOptions$1(options);

  // First check to see if we've already derived from this baseMaterial using this
  // unique set of options, and if so reuse the constructor to avoid some allocations.
  let ctorsByDerivation = CONSTRUCTOR_CACHE$1.get(baseMaterial);
  if (!ctorsByDerivation) {
    CONSTRUCTOR_CACHE$1.set(baseMaterial, (ctorsByDerivation = Object.create(null)));
  }
  if (ctorsByDerivation[optionsKey]) {
    return new ctorsByDerivation[optionsKey]()
  }

  const privateBeforeCompileProp = `_onBeforeCompile${optionsKey}`;

  // Private onBeforeCompile handler that injects the modified shaders and uniforms when
  // the renderer switches to this material's program
  const onBeforeCompile = function (shaderInfo) {
    baseMaterial.onBeforeCompile.call(this, shaderInfo);

    // Upgrade the shaders, caching the result by incoming source code
    const cacheKey = this.customProgramCacheKey() + '|' + shaderInfo.vertexShader + '|' + shaderInfo.fragmentShader;
    let upgradedShaders = SHADER_UPGRADE_CACHE$1[cacheKey];
    if (!upgradedShaders) {
      const upgraded = upgradeShaders$2(shaderInfo, options, optionsKey);
      upgradedShaders = SHADER_UPGRADE_CACHE$1[cacheKey] = upgraded;
    }

    // Inject upgraded shaders and uniforms into the program
    shaderInfo.vertexShader = upgradedShaders.vertexShader;
    shaderInfo.fragmentShader = upgradedShaders.fragmentShader;
    assign$8(shaderInfo.uniforms, this.uniforms);

    // Inject auto-updating time uniform if requested
    if (options.timeUniform) {
      shaderInfo.uniforms[options.timeUniform] = {
        get value() {return Date.now() - epoch$1}
      };
    }

    // Users can still add their own handlers on top of ours
    if (this[privateBeforeCompileProp]) {
      this[privateBeforeCompileProp](shaderInfo);
    }
  };

  const DerivedMaterial = function DerivedMaterial() {
    return derive(options.chained ? baseMaterial : baseMaterial.clone())
  };

  const derive = function(base) {
    // Prototype chain to the base material
    const derived = Object.create(base, descriptor);

    // Store the baseMaterial for reference; this is always the original even when cloning
    Object.defineProperty(derived, 'baseMaterial', { value: baseMaterial });

    // Needs its own ids
    Object.defineProperty(derived, 'id', { value: materialInstanceId$1++ });
    derived.uuid = generateUUID$1();

    // Merge uniforms, defines, and extensions
    derived.uniforms = assign$8({}, base.uniforms, options.uniforms);
    derived.defines = assign$8({}, base.defines, options.defines);
    derived.defines[`TROIKA_DERIVED_MATERIAL_${optionsKey}`] = ''; //force a program change from the base material
    derived.extensions = assign$8({}, base.extensions, options.extensions);

    // Don't inherit EventDispatcher listeners
    derived._listeners = undefined;

    return derived
  };

  const descriptor = {
    constructor: {value: DerivedMaterial},
    isDerivedMaterial: {value: true},

    customProgramCacheKey: {
      writable: true,
      configurable: true,
      value: function () {
        return baseMaterial.customProgramCacheKey() + '|' + optionsKey
      }
    },

    onBeforeCompile: {
      get() {
        return onBeforeCompile
      },
      set(fn) {
        this[privateBeforeCompileProp] = fn;
      }
    },

    copy: {
      writable: true,
      configurable: true,
      value: function (source) {
        baseMaterial.copy.call(this, source);
        if (!baseMaterial.isShaderMaterial && !baseMaterial.isDerivedMaterial) {
          assign$8(this.extensions, source.extensions);
          assign$8(this.defines, source.defines);
          assign$8(this.uniforms, UniformsUtils.clone(source.uniforms));
        }
        return this
      }
    },

    clone: {
      writable: true,
      configurable: true,
      value: function () {
        const newBase = new baseMaterial.constructor();
        return derive(newBase).copy(this)
      }
    },

    /**
     * Utility to get a MeshDepthMaterial that will honor this derived material's vertex
     * transformations and discarded fragments.
     */
    getDepthMaterial: {
      writable: true,
      configurable: true,
      value: function() {
        let depthMaterial = this._depthMaterial;
        if (!depthMaterial) {
          depthMaterial = this._depthMaterial = createDerivedMaterial$1(
            baseMaterial.isDerivedMaterial
              ? baseMaterial.getDepthMaterial()
              : new MeshDepthMaterial({ depthPacking: RGBADepthPacking }),
            options
          );
          depthMaterial.defines.IS_DEPTH_MATERIAL = '';
          depthMaterial.uniforms = this.uniforms; //automatically recieve same uniform values
        }
        return depthMaterial
      }
    },

    /**
     * Utility to get a MeshDistanceMaterial that will honor this derived material's vertex
     * transformations and discarded fragments.
     */
    getDistanceMaterial: {
      writable: true,
      configurable: true,
      value: function() {
        let distanceMaterial = this._distanceMaterial;
        if (!distanceMaterial) {
          distanceMaterial = this._distanceMaterial = createDerivedMaterial$1(
            baseMaterial.isDerivedMaterial
              ? baseMaterial.getDistanceMaterial()
              : new MeshDistanceMaterial(),
            options
          );
          distanceMaterial.defines.IS_DISTANCE_MATERIAL = '';
          distanceMaterial.uniforms = this.uniforms; //automatically recieve same uniform values
        }
        return distanceMaterial
      }
    },

    dispose: {
      writable: true,
      configurable: true,
      value() {
        const {_depthMaterial, _distanceMaterial} = this;
        if (_depthMaterial) _depthMaterial.dispose();
        if (_distanceMaterial) _distanceMaterial.dispose();
        baseMaterial.dispose.call(this);
      }
    }
  };

  ctorsByDerivation[optionsKey] = DerivedMaterial;
  return new DerivedMaterial()
}


function upgradeShaders$2({vertexShader, fragmentShader}, options, key) {
  let {
    vertexDefs,
    vertexMainIntro,
    vertexMainOutro,
    vertexTransform,
    fragmentDefs,
    fragmentMainIntro,
    fragmentMainOutro,
    fragmentColorTransform,
    customRewriter,
    timeUniform
  } = options;

  vertexDefs = vertexDefs || '';
  vertexMainIntro = vertexMainIntro || '';
  vertexMainOutro = vertexMainOutro || '';
  fragmentDefs = fragmentDefs || '';
  fragmentMainIntro = fragmentMainIntro || '';
  fragmentMainOutro = fragmentMainOutro || '';

  // Expand includes if needed
  if (vertexTransform || customRewriter) {
    vertexShader = expandShaderIncludes$1(vertexShader);
  }
  if (fragmentColorTransform || customRewriter) {
    // We need to be able to find postprocessing chunks after include expansion in order to
    // put them after the fragmentColorTransform, so mark them with comments first. Even if
    // this particular derivation doesn't have a fragmentColorTransform, other derivations may,
    // so we still mark them.
    fragmentShader = fragmentShader.replace(
      /^[ \t]*#include <((?:tonemapping|encodings|fog|premultiplied_alpha|dithering)_fragment)>/gm,
      '\n//!BEGIN_POST_CHUNK $1\n$&\n//!END_POST_CHUNK\n'
    );
    fragmentShader = expandShaderIncludes$1(fragmentShader);
  }

  // Apply custom rewriter function
  if (customRewriter) {
    let res = customRewriter({vertexShader, fragmentShader});
    vertexShader = res.vertexShader;
    fragmentShader = res.fragmentShader;
  }

  // The fragmentColorTransform needs to go before any postprocessing chunks, so extract
  // those and re-insert them into the outro in the correct place:
  if (fragmentColorTransform) {
    let postChunks = [];
    fragmentShader = fragmentShader.replace(
      /^\/\/!BEGIN_POST_CHUNK[^]+?^\/\/!END_POST_CHUNK/gm, // [^]+? = non-greedy match of any chars including newlines
      match => {
        postChunks.push(match);
        return ''
      }
    );
    fragmentMainOutro = `${fragmentColorTransform}\n${postChunks.join('\n')}\n${fragmentMainOutro}`;
  }

  // Inject auto-updating time uniform if requested
  if (timeUniform) {
    const code = `\nuniform float ${timeUniform};\n`;
    vertexDefs = code + vertexDefs;
    fragmentDefs = code + fragmentDefs;
  }

  // Inject a function for the vertexTransform and rename all usages of position/normal/uv
  if (vertexTransform) {
    // Hoist these defs to the very top so they work in other function defs
    vertexShader = `vec3 troika_position_${key};
vec3 troika_normal_${key};
vec2 troika_uv_${key};
${vertexShader}
`;
    vertexDefs = `${vertexDefs}
void troikaVertexTransform${key}(inout vec3 position, inout vec3 normal, inout vec2 uv) {
  ${vertexTransform}
}
`;
    vertexMainIntro = `
troika_position_${key} = vec3(position);
troika_normal_${key} = vec3(normal);
troika_uv_${key} = vec2(uv);
troikaVertexTransform${key}(troika_position_${key}, troika_normal_${key}, troika_uv_${key});
${vertexMainIntro}
`;
    vertexShader = vertexShader.replace(/\b(position|normal|uv)\b/g, (match, match1, index, fullStr) => {
      return /\battribute\s+vec[23]\s+$/.test(fullStr.substr(0, index)) ? match1 : `troika_${match1}_${key}`
    });
  }

  // Inject defs and intro/outro snippets
  vertexShader = injectIntoShaderCode$1(vertexShader, key, vertexDefs, vertexMainIntro, vertexMainOutro);
  fragmentShader = injectIntoShaderCode$1(fragmentShader, key, fragmentDefs, fragmentMainIntro, fragmentMainOutro);

  return {
    vertexShader,
    fragmentShader
  }
}

function injectIntoShaderCode$1(shaderCode, id, defs, intro, outro) {
  if (intro || outro || defs) {
    shaderCode = shaderCode.replace(voidMainRegExp$1, `
${defs}
void troikaOrigMain${id}() {`
    );
    shaderCode += `
void main() {
  ${intro}
  troikaOrigMain${id}();
  ${outro}
}`;
  }
  return shaderCode
}


function optionsJsonReplacer$1(key, value) {
  return key === 'uniforms' ? undefined : typeof value === 'function' ? value.toString() : value
}

let _idCtr$1 = 0;
const optionsHashesToIds$1 = new Map();
function getKeyForOptions$1(options) {
  const optionsHash = JSON.stringify(options, optionsJsonReplacer$1);
  let id = optionsHashesToIds$1.get(optionsHash);
  if (id == null) {
    optionsHashesToIds$1.set(optionsHash, (id = ++_idCtr$1));
  }
  return id
}

/**
 * Helper for smoothing out the `m.getInverse(x)` --> `m.copy(x).invert()` conversion
 * that happened in ThreeJS r123.
 * @param {Matrix4} srcMatrix
 * @param {Matrix4} [tgtMatrix]
 */
function invertMatrix4$1(srcMatrix, tgtMatrix = new Matrix4()) {
  if (typeof tgtMatrix.invert === 'function') {
    tgtMatrix.copy(srcMatrix).invert();
  } else {
    tgtMatrix.getInverse(srcMatrix);
  }
  return tgtMatrix
}

// language=GLSL
const VERTEX_DEFS$1 = `
uniform vec2 uTroikaSDFTextureSize;
uniform float uTroikaSDFGlyphSize;
uniform vec4 uTroikaTotalBounds;
uniform vec4 uTroikaClipRect;
uniform mat3 uTroikaOrient;
uniform bool uTroikaUseGlyphColors;
uniform float uTroikaDistanceOffset;
uniform float uTroikaBlurRadius;
uniform vec2 uTroikaPositionOffset;
uniform float uTroikaCurveRadius;
attribute vec4 aTroikaGlyphBounds;
attribute float aTroikaGlyphIndex;
attribute vec3 aTroikaGlyphColor;
varying vec2 vTroikaGlyphUV;
varying vec4 vTroikaTextureUVBounds;
varying float vTroikaTextureChannel;
varying vec3 vTroikaGlyphColor;
varying vec2 vTroikaGlyphDimensions;
`;

// language=GLSL prefix="void main() {" suffix="}"
const VERTEX_TRANSFORM$1 = `
vec4 bounds = aTroikaGlyphBounds;
bounds.xz += uTroikaPositionOffset.x;
bounds.yw -= uTroikaPositionOffset.y;

vec4 outlineBounds = vec4(
  bounds.xy - uTroikaDistanceOffset - uTroikaBlurRadius,
  bounds.zw + uTroikaDistanceOffset + uTroikaBlurRadius
);
vec4 clippedBounds = vec4(
  clamp(outlineBounds.xy, uTroikaClipRect.xy, uTroikaClipRect.zw),
  clamp(outlineBounds.zw, uTroikaClipRect.xy, uTroikaClipRect.zw)
);

vec2 clippedXY = (mix(clippedBounds.xy, clippedBounds.zw, position.xy) - bounds.xy) / (bounds.zw - bounds.xy);

position.xy = mix(bounds.xy, bounds.zw, clippedXY);

uv = (position.xy - uTroikaTotalBounds.xy) / (uTroikaTotalBounds.zw - uTroikaTotalBounds.xy);

float rad = uTroikaCurveRadius;
if (rad != 0.0) {
  float angle = position.x / rad;
  position.xz = vec2(sin(angle) * rad, rad - cos(angle) * rad);
  normal.xz = vec2(sin(angle), cos(angle));
}
  
position = uTroikaOrient * position;
normal = uTroikaOrient * normal;

vTroikaGlyphUV = clippedXY.xy;
vTroikaGlyphDimensions = vec2(bounds[2] - bounds[0], bounds[3] - bounds[1]);

${''/* NOTE: it seems important to calculate the glyph's bounding texture UVs here in the
  vertex shader, rather than in the fragment shader, as the latter gives strange artifacts
  on some glyphs (those in the leftmost texture column) on some systems. The exact reason
  isn't understood but doing this here, then mix()-ing in the fragment shader, seems to work. */}
float txCols = uTroikaSDFTextureSize.x / uTroikaSDFGlyphSize;
vec2 txUvPerSquare = uTroikaSDFGlyphSize / uTroikaSDFTextureSize;
vec2 txStartUV = txUvPerSquare * vec2(
  mod(floor(aTroikaGlyphIndex / 4.0), txCols),
  floor(floor(aTroikaGlyphIndex / 4.0) / txCols)
);
vTroikaTextureUVBounds = vec4(txStartUV, vec2(txStartUV) + txUvPerSquare);
vTroikaTextureChannel = mod(aTroikaGlyphIndex, 4.0);
`;

// language=GLSL
const FRAGMENT_DEFS$1 = `
uniform sampler2D uTroikaSDFTexture;
uniform vec2 uTroikaSDFTextureSize;
uniform float uTroikaSDFGlyphSize;
uniform float uTroikaSDFExponent;
uniform float uTroikaDistanceOffset;
uniform float uTroikaFillOpacity;
uniform float uTroikaOutlineOpacity;
uniform float uTroikaBlurRadius;
uniform vec3 uTroikaStrokeColor;
uniform float uTroikaStrokeWidth;
uniform float uTroikaStrokeOpacity;
uniform bool uTroikaSDFDebug;
varying vec2 vTroikaGlyphUV;
varying vec4 vTroikaTextureUVBounds;
varying float vTroikaTextureChannel;
varying vec2 vTroikaGlyphDimensions;

float troikaSdfValueToSignedDistance(float alpha) {
  // Inverse of exponential encoding in webgl-sdf-generator
  ${''/* TODO - there's some slight inaccuracy here when dealing with interpolated alpha values; those
    are linearly interpolated where the encoding is exponential. Look into improving this by rounding
    to nearest 2 whole texels, decoding those exponential values, and linearly interpolating the result.
  */}
  float maxDimension = max(vTroikaGlyphDimensions.x, vTroikaGlyphDimensions.y);
  float absDist = (1.0 - pow(2.0 * (alpha > 0.5 ? 1.0 - alpha : alpha), 1.0 / uTroikaSDFExponent)) * maxDimension;
  float signedDist = absDist * (alpha > 0.5 ? -1.0 : 1.0);
  return signedDist;
}

float troikaGlyphUvToSdfValue(vec2 glyphUV) {
  vec2 textureUV = mix(vTroikaTextureUVBounds.xy, vTroikaTextureUVBounds.zw, glyphUV);
  vec4 rgba = texture2D(uTroikaSDFTexture, textureUV);
  float ch = floor(vTroikaTextureChannel + 0.5); //NOTE: can't use round() in WebGL1
  return ch == 0.0 ? rgba.r : ch == 1.0 ? rgba.g : ch == 2.0 ? rgba.b : rgba.a;
}

float troikaGlyphUvToDistance(vec2 uv) {
  return troikaSdfValueToSignedDistance(troikaGlyphUvToSdfValue(uv));
}

float troikaGetAADist() {
  ${''/*
    When the standard derivatives extension is available, we choose an antialiasing alpha threshold based
    on the potential change in the SDF's alpha from this fragment to its neighbor. This strategy maximizes 
    readability and edge crispness at all sizes and screen resolutions.
  */}
  #if defined(GL_OES_standard_derivatives) || __VERSION__ >= 300
  return length(fwidth(vTroikaGlyphUV * vTroikaGlyphDimensions)) * 0.5;
  #else
  return vTroikaGlyphDimensions.x / 64.0;
  #endif
}

float troikaGetFragDistValue() {
  vec2 clampedGlyphUV = clamp(vTroikaGlyphUV, 0.5 / uTroikaSDFGlyphSize, 1.0 - 0.5 / uTroikaSDFGlyphSize);
  float distance = troikaGlyphUvToDistance(clampedGlyphUV);
 
  // Extrapolate distance when outside bounds:
  distance += clampedGlyphUV == vTroikaGlyphUV ? 0.0 : 
    length((vTroikaGlyphUV - clampedGlyphUV) * vTroikaGlyphDimensions);

  ${''/* 
  // TODO more refined extrapolated distance by adjusting for angle of gradient at edge...
  // This has potential but currently gives very jagged extensions, maybe due to precision issues?
  float uvStep = 1.0 / uTroikaSDFGlyphSize;
  vec2 neighbor1UV = clampedGlyphUV + (
    vTroikaGlyphUV.x != clampedGlyphUV.x ? vec2(0.0, uvStep * sign(0.5 - vTroikaGlyphUV.y)) :
    vTroikaGlyphUV.y != clampedGlyphUV.y ? vec2(uvStep * sign(0.5 - vTroikaGlyphUV.x), 0.0) :
    vec2(0.0)
  );
  vec2 neighbor2UV = clampedGlyphUV + (
    vTroikaGlyphUV.x != clampedGlyphUV.x ? vec2(0.0, uvStep * -sign(0.5 - vTroikaGlyphUV.y)) :
    vTroikaGlyphUV.y != clampedGlyphUV.y ? vec2(uvStep * -sign(0.5 - vTroikaGlyphUV.x), 0.0) :
    vec2(0.0)
  );
  float neighbor1Distance = troikaGlyphUvToDistance(neighbor1UV);
  float neighbor2Distance = troikaGlyphUvToDistance(neighbor2UV);
  float distToUnclamped = length((vTroikaGlyphUV - clampedGlyphUV) * vTroikaGlyphDimensions);
  float distToNeighbor = length((clampedGlyphUV - neighbor1UV) * vTroikaGlyphDimensions);
  float gradientAngle1 = min(asin(abs(neighbor1Distance - distance) / distToNeighbor), PI / 2.0);
  float gradientAngle2 = min(asin(abs(neighbor2Distance - distance) / distToNeighbor), PI / 2.0);
  distance += (cos(gradientAngle1) + cos(gradientAngle2)) / 2.0 * distToUnclamped;
  */}

  return distance;
}

float troikaGetEdgeAlpha(float distance, float distanceOffset, float aaDist) {
  #if defined(IS_DEPTH_MATERIAL) || defined(IS_DISTANCE_MATERIAL)
  float alpha = step(-distanceOffset, -distance);
  #else

  float alpha = smoothstep(
    distanceOffset + aaDist,
    distanceOffset - aaDist,
    distance
  );
  #endif

  return alpha;
}
`;

// language=GLSL prefix="void main() {" suffix="}"
const FRAGMENT_TRANSFORM = `
float aaDist = troikaGetAADist();
float fragDistance = troikaGetFragDistValue();
float edgeAlpha = uTroikaSDFDebug ?
  troikaGlyphUvToSdfValue(vTroikaGlyphUV) :
  troikaGetEdgeAlpha(fragDistance, uTroikaDistanceOffset, max(aaDist, uTroikaBlurRadius));

#if !defined(IS_DEPTH_MATERIAL) && !defined(IS_DISTANCE_MATERIAL)
vec4 fillRGBA = gl_FragColor;
fillRGBA.a *= uTroikaFillOpacity;
vec4 strokeRGBA = uTroikaStrokeWidth == 0.0 ? fillRGBA : vec4(uTroikaStrokeColor, uTroikaStrokeOpacity);
if (fillRGBA.a == 0.0) fillRGBA.rgb = strokeRGBA.rgb;
gl_FragColor = mix(fillRGBA, strokeRGBA, smoothstep(
  -uTroikaStrokeWidth - aaDist,
  -uTroikaStrokeWidth + aaDist,
  fragDistance
));
gl_FragColor.a *= edgeAlpha;
#endif

if (edgeAlpha == 0.0) {
  discard;
}
`;


/**
 * Create a material for rendering text, derived from a baseMaterial
 */
function createTextDerivedMaterial(baseMaterial) {
  const textMaterial = createDerivedMaterial$1(baseMaterial, {
    chained: true,
    extensions: {
      derivatives: true
    },
    uniforms: {
      uTroikaSDFTexture: {value: null},
      uTroikaSDFTextureSize: {value: new Vector2()},
      uTroikaSDFGlyphSize: {value: 0},
      uTroikaSDFExponent: {value: 0},
      uTroikaTotalBounds: {value: new Vector4(0,0,0,0)},
      uTroikaClipRect: {value: new Vector4(0,0,0,0)},
      uTroikaDistanceOffset: {value: 0},
      uTroikaOutlineOpacity: {value: 0},
      uTroikaFillOpacity: {value: 1},
      uTroikaPositionOffset: {value: new Vector2()},
      uTroikaCurveRadius: {value: 0},
      uTroikaBlurRadius: {value: 0},
      uTroikaStrokeWidth: {value: 0},
      uTroikaStrokeColor: {value: new Color()},
      uTroikaStrokeOpacity: {value: 1},
      uTroikaOrient: {value: new Matrix3()},
      uTroikaUseGlyphColors: {value: true},
      uTroikaSDFDebug: {value: false}
    },
    vertexDefs: VERTEX_DEFS$1,
    vertexTransform: VERTEX_TRANSFORM$1,
    fragmentDefs: FRAGMENT_DEFS$1,
    fragmentColorTransform: FRAGMENT_TRANSFORM,
    customRewriter({vertexShader, fragmentShader}) {
      let uDiffuseRE = /\buniform\s+vec3\s+diffuse\b/;
      if (uDiffuseRE.test(fragmentShader)) {
        // Replace all instances of `diffuse` with our varying
        fragmentShader = fragmentShader
          .replace(uDiffuseRE, 'varying vec3 vTroikaGlyphColor')
          .replace(/\bdiffuse\b/g, 'vTroikaGlyphColor');
        // Make sure the vertex shader declares the uniform so we can grab it as a fallback
        if (!uDiffuseRE.test(vertexShader)) {
          vertexShader = vertexShader.replace(
            voidMainRegExp$1,
            'uniform vec3 diffuse;\n$&\nvTroikaGlyphColor = uTroikaUseGlyphColors ? aTroikaGlyphColor / 255.0 : diffuse;\n'
          );
        }
      }
      return { vertexShader, fragmentShader }
    }
  });

  // Force transparency - TODO is this reasonable?
  textMaterial.transparent = true;

  Object.defineProperties(textMaterial, {
    isTroikaTextMaterial: {value: true},

    // WebGLShadowMap reverses the side of the shadow material by default, which fails
    // for planes, so here we force the `shadowSide` to always match the main side.
    shadowSide: {
      get() {
        return this.side
      },
      set() {
        //no-op
      }
    }
  });

  return textMaterial
}

const Text = /*#__PURE__*/(() => {

  const defaultMaterial = new MeshBasicMaterial({
    color: 0xffffff,
    side: DoubleSide,
    transparent: true
  });
  const defaultStrokeColor = 0x808080;

  const tempMat4 = new Matrix4();
  const tempVec3a = new Vector3();
  const tempVec3b = new Vector3();
  const tempArray = [];
  const origin = new Vector3();
  const defaultOrient = '+x+y';

  function first(o) {
    return Array.isArray(o) ? o[0] : o
  }

  let getFlatRaycastMesh = () => {
    const mesh = new Mesh(
      new PlaneBufferGeometry(1, 1),
      defaultMaterial
    );
    getFlatRaycastMesh = () => mesh;
    return mesh
  };
  let getCurvedRaycastMesh = () => {
    const mesh = new Mesh(
      new PlaneBufferGeometry(1, 1, 32, 1),
      defaultMaterial
    );
    getCurvedRaycastMesh = () => mesh;
    return mesh
  };

  const syncStartEvent = {type: 'syncstart'};
  const syncCompleteEvent = {type: 'synccomplete'};

  const SYNCABLE_PROPS = [
    'font',
    'fontSize',
    'letterSpacing',
    'lineHeight',
    'maxWidth',
    'overflowWrap',
    'text',
    'direction',
    'textAlign',
    'textIndent',
    'whiteSpace',
    'anchorX',
    'anchorY',
    'colorRanges',
    'sdfGlyphSize'
  ];

  const COPYABLE_PROPS = SYNCABLE_PROPS.concat(
    'material',
    'color',
    'depthOffset',
    'clipRect',
    'curveRadius',
    'orientation',
    'glyphGeometryDetail'
  );



  /**
   * @class Text
   *
   * A ThreeJS Mesh that renders a string of text on a plane in 3D space using signed distance
   * fields (SDF).
   */
  class Text extends Mesh {
    constructor() {
      const geometry = new GlyphsGeometry();
      super(geometry, null);

      // === Text layout properties: === //

      /**
       * @member {string} text
       * The string of text to be rendered.
       */
      this.text = '';

      /**
       * @deprecated Use `anchorX` and `anchorY` instead
       * @member {Array<number>} anchor
       * Defines where in the text block should correspond to the mesh's local position, as a set
       * of horizontal and vertical percentages from 0 to 1. A value of `[0, 0]` (the default)
       * anchors at the top-left, `[1, 1]` at the bottom-right, and `[0.5, 0.5]` centers the
       * block at the mesh's position.
       */
      //this.anchor = null

      /**
       * @member {number|string} anchorX
       * Defines the horizontal position in the text block that should line up with the local origin.
       * Can be specified as a numeric x position in local units, a string percentage of the total
       * text block width e.g. `'25%'`, or one of the following keyword strings: 'left', 'center',
       * or 'right'.
       */
      this.anchorX = 0;

      /**
       * @member {number|string} anchorX
       * Defines the vertical position in the text block that should line up with the local origin.
       * Can be specified as a numeric y position in local units (note: down is negative y), a string
       * percentage of the total text block height e.g. `'25%'`, or one of the following keyword strings:
       * 'top', 'top-baseline', 'middle', 'bottom-baseline', or 'bottom'.
       */
      this.anchorY = 0;

      /**
       * @member {number} curveRadius
       * Defines a cylindrical radius along which the text's plane will be curved. Positive numbers put
       * the cylinder's centerline (oriented vertically) that distance in front of the text, for a concave
       * curvature, while negative numbers put it behind the text for a convex curvature. The centerline
       * will be aligned with the text's local origin; you can use `anchorX` to offset it.
       *
       * Since each glyph is by default rendered with a simple quad, each glyph remains a flat plane
       * internally. You can use `glyphGeometryDetail` to add more vertices for curvature inside glyphs.
       */
      this.curveRadius = 0;

      /**
       * @member {string} direction
       * Sets the base direction for the text. The default value of "auto" will choose a direction based
       * on the text's content according to the bidi spec. A value of "ltr" or "rtl" will force the direction.
       */
      this.direction = 'auto';

      /**
       * @member {string} font
       * URL of a custom font to be used. Font files can be in .ttf, .otf, or .woff (not .woff2) formats.
       * Defaults to the Roboto font loaded from Google Fonts.
       */
      this.font = null; //will use default from TextBuilder

      /**
       * @member {number} fontSize
       * The size at which to render the font in local units; corresponds to the em-box height
       * of the chosen `font`.
       */
      this.fontSize = 0.1;

      /**
       * @member {number} letterSpacing
       * Sets a uniform adjustment to spacing between letters after kerning is applied. Positive
       * numbers increase spacing and negative numbers decrease it.
       */
      this.letterSpacing = 0;

      /**
       * @member {number|string} lineHeight
       * Sets the height of each line of text, as a multiple of the `fontSize`. Defaults to 'normal'
       * which chooses a reasonable height based on the chosen font's ascender/descender metrics.
       */
      this.lineHeight = 'normal';

      /**
       * @member {number} maxWidth
       * The maximum width of the text block, above which text may start wrapping according to the
       * `whiteSpace` and `overflowWrap` properties.
       */
      this.maxWidth = Infinity;

      /**
       * @member {string} overflowWrap
       * Defines how text wraps if the `whiteSpace` property is `normal`. Can be either `'normal'`
       * to break at whitespace characters, or `'break-word'` to allow breaking within words.
       * Defaults to `'normal'`.
       */
      this.overflowWrap = 'normal';

      /**
       * @member {string} textAlign
       * The horizontal alignment of each line of text within the overall text bounding box.
       */
      this.textAlign = 'left';

      /**
       * @member {number} textIndent
       * Indentation for the first character of a line; see CSS `text-indent`.
       */
      this.textIndent = 0;

      /**
       * @member {string} whiteSpace
       * Defines whether text should wrap when a line reaches the `maxWidth`. Can
       * be either `'normal'` (the default), to allow wrapping according to the `overflowWrap` property,
       * or `'nowrap'` to prevent wrapping. Note that `'normal'` here honors newline characters to
       * manually break lines, making it behave more like `'pre-wrap'` does in CSS.
       */
      this.whiteSpace = 'normal';


      // === Presentation properties: === //

      /**
       * @member {THREE.Material} material
       * Defines a _base_ material to be used when rendering the text. This material will be
       * automatically replaced with a material derived from it, that adds shader code to
       * decrease the alpha for each fragment (pixel) outside the text glyphs, with antialiasing.
       * By default it will derive from a simple white MeshBasicMaterial, but you can use any
       * of the other mesh materials to gain other features like lighting, texture maps, etc.
       *
       * Also see the `color` shortcut property.
       */
      this.material = null;

      /**
       * @member {string|number|THREE.Color} color
       * This is a shortcut for setting the `color` of the text's material. You can use this
       * if you don't want to specify a whole custom `material`. Also, if you do use a custom
       * `material`, this color will only be used for this particuar Text instance, even if
       * that same material instance is shared across multiple Text objects.
       */
      this.color = null;

      /**
       * @member {object|null} colorRanges
       * WARNING: This API is experimental and may change.
       * This allows more fine-grained control of colors for individual or ranges of characters,
       * taking precedence over the material's `color`. Its format is an Object whose keys each
       * define a starting character index for a range, and whose values are the color for each
       * range. The color value can be a numeric hex color value, a `THREE.Color` object, or
       * any of the strings accepted by `THREE.Color`.
       */
      this.colorRanges = null;

      /**
       * @member {number|string} outlineWidth
       * WARNING: This API is experimental and may change.
       * The width of an outline/halo to be drawn around each text glyph using the `outlineColor` and `outlineOpacity`.
       * Can be specified as either an absolute number in local units, or as a percentage string e.g.
       * `"12%"` which is treated as a percentage of the `fontSize`. Defaults to `0`, which means
       * no outline will be drawn unless an `outlineOffsetX/Y` or `outlineBlur` is set.
       */
      this.outlineWidth = 0;

      /**
       * @member {string|number|THREE.Color} outlineColor
       * WARNING: This API is experimental and may change.
       * The color of the text outline, if `outlineWidth`/`outlineBlur`/`outlineOffsetX/Y` are set.
       * Defaults to black.
       */
      this.outlineColor = 0x000000;

      /**
       * @member {number} outlineOpacity
       * WARNING: This API is experimental and may change.
       * The opacity of the outline, if `outlineWidth`/`outlineBlur`/`outlineOffsetX/Y` are set.
       * Defaults to `1`.
       */
      this.outlineOpacity = 1;

      /**
       * @member {number|string} outlineBlur
       * WARNING: This API is experimental and may change.
       * A blur radius applied to the outer edge of the text's outline. If the `outlineWidth` is
       * zero, the blur will be applied at the glyph edge, like CSS's `text-shadow` blur radius.
       * Can be specified as either an absolute number in local units, or as a percentage string e.g.
       * `"12%"` which is treated as a percentage of the `fontSize`. Defaults to `0`.
       */
      this.outlineBlur = 0;

      /**
       * @member {number|string} outlineOffsetX
       * WARNING: This API is experimental and may change.
       * A horizontal offset for the text outline.
       * Can be specified as either an absolute number in local units, or as a percentage string e.g. `"12%"`
       * which is treated as a percentage of the `fontSize`. Defaults to `0`.
       */
      this.outlineOffsetX = 0;

      /**
       * @member {number|string} outlineOffsetY
       * WARNING: This API is experimental and may change.
       * A vertical offset for the text outline.
       * Can be specified as either an absolute number in local units, or as a percentage string e.g. `"12%"`
       * which is treated as a percentage of the `fontSize`. Defaults to `0`.
       */
      this.outlineOffsetY = 0;

      /**
       * @member {number|string} strokeWidth
       * WARNING: This API is experimental and may change.
       * The width of an inner stroke drawn inside each text glyph using the `strokeColor` and `strokeOpacity`.
       * Can be specified as either an absolute number in local units, or as a percentage string e.g. `"12%"`
       * which is treated as a percentage of the `fontSize`. Defaults to `0`.
       */
      this.strokeWidth = 0;

      /**
       * @member {string|number|THREE.Color} strokeColor
       * WARNING: This API is experimental and may change.
       * The color of the text stroke, if `strokeWidth` is greater than zero. Defaults to gray.
       */
      this.strokeColor = defaultStrokeColor;

      /**
       * @member {number} strokeOpacity
       * WARNING: This API is experimental and may change.
       * The opacity of the stroke, if `strokeWidth` is greater than zero. Defaults to `1`.
       */
      this.strokeOpacity = 1;

      /**
       * @member {number} fillOpacity
       * WARNING: This API is experimental and may change.
       * The opacity of the glyph's fill from 0 to 1. This behaves like the material's `opacity` but allows
       * giving the fill a different opacity than the `strokeOpacity`. A fillOpacity of `0` makes the
       * interior of the glyph invisible, leaving just the `strokeWidth`. Defaults to `1`.
       */
      this.fillOpacity = 1;

      /**
       * @member {number} depthOffset
       * This is a shortcut for setting the material's `polygonOffset` and related properties,
       * which can be useful in preventing z-fighting when this text is laid on top of another
       * plane in the scene. Positive numbers are further from the camera, negatives closer.
       */
      this.depthOffset = 0;

      /**
       * @member {Array<number>} clipRect
       * If specified, defines a `[minX, minY, maxX, maxY]` of a rectangle outside of which all
       * pixels will be discarded. This can be used for example to clip overflowing text when
       * `whiteSpace='nowrap'`.
       */
      this.clipRect = null;

      /**
       * @member {string} orientation
       * Defines the axis plane on which the text should be laid out when the mesh has no extra
       * rotation transform. It is specified as a string with two axes: the horizontal axis with
       * positive pointing right, and the vertical axis with positive pointing up. By default this
       * is '+x+y', meaning the text sits on the xy plane with the text's top toward positive y
       * and facing positive z. A value of '+x-z' would place it on the xz plane with the text's
       * top toward negative z and facing positive y.
       */
      this.orientation = defaultOrient;

      /**
       * @member {number} glyphGeometryDetail
       * Controls number of vertical/horizontal segments that make up each glyph's rectangular
       * plane. Defaults to 1. This can be increased to provide more geometrical detail for custom
       * vertex shader effects, for example.
       */
      this.glyphGeometryDetail = 1;

      /**
       * @member {number|null} sdfGlyphSize
       * The size of each glyph's SDF (signed distance field) used for rendering. This must be a
       * power-of-two number. Defaults to 64 which is generally a good balance of size and quality
       * for most fonts. Larger sizes can improve the quality of glyph rendering by increasing
       * the sharpness of corners and preventing loss of very thin lines, at the expense of
       * increased memory footprint and longer SDF generation time.
       */
      this.sdfGlyphSize = null;

      /**
       * @member {boolean} gpuAccelerateSDF
       * When `true`, the SDF generation process will be GPU-accelerated with WebGL when possible,
       * making it much faster especially for complex glyphs, and falling back to a JavaScript version
       * executed in web workers when support isn't available. It should automatically detect support,
       * but it's still somewhat experimental, so you can set it to `false` to force it to use the JS
       * version if you encounter issues with it.
       */
      this.gpuAccelerateSDF = true;

      this.debugSDF = false;
    }

    /**
     * Updates the text rendering according to the current text-related configuration properties.
     * This is an async process, so you can pass in a callback function to be executed when it
     * finishes.
     * @param {function} [callback]
     */
    sync(callback) {
      if (this._needsSync) {
        this._needsSync = false;

        // If there's another sync still in progress, queue
        if (this._isSyncing) {
          (this._queuedSyncs || (this._queuedSyncs = [])).push(callback);
        } else {
          this._isSyncing = true;
          this.dispatchEvent(syncStartEvent);

          getTextRenderInfo({
            text: this.text,
            font: this.font,
            fontSize: this.fontSize || 0.1,
            letterSpacing: this.letterSpacing || 0,
            lineHeight: this.lineHeight || 'normal',
            maxWidth: this.maxWidth,
            direction: this.direction || 'auto',
            textAlign: this.textAlign,
            textIndent: this.textIndent,
            whiteSpace: this.whiteSpace,
            overflowWrap: this.overflowWrap,
            anchorX: this.anchorX,
            anchorY: this.anchorY,
            colorRanges: this.colorRanges,
            includeCaretPositions: true, //TODO parameterize
            sdfGlyphSize: this.sdfGlyphSize,
            gpuAccelerateSDF: this.gpuAccelerateSDF,
          }, textRenderInfo => {
            this._isSyncing = false;

            // Save result for later use in onBeforeRender
            this._textRenderInfo = textRenderInfo;

            // Update the geometry attributes
            this.geometry.updateGlyphs(
              textRenderInfo.glyphBounds,
              textRenderInfo.glyphAtlasIndices,
              textRenderInfo.blockBounds,
              textRenderInfo.chunkedBounds,
              textRenderInfo.glyphColors
            );

            // If we had extra sync requests queued up, kick it off
            const queued = this._queuedSyncs;
            if (queued) {
              this._queuedSyncs = null;
              this._needsSync = true;
              this.sync(() => {
                queued.forEach(fn => fn && fn());
              });
            }

            this.dispatchEvent(syncCompleteEvent);
            if (callback) {
              callback();
            }
          });
        }
      }
    }

    /**
     * Initiate a sync if needed - note it won't complete until next frame at the
     * earliest so if possible it's a good idea to call sync() manually as soon as
     * all the properties have been set.
     * @override
     */
    onBeforeRender(renderer, scene, camera, geometry, material, group) {
      this.sync();

      // This may not always be a text material, e.g. if there's a scene.overrideMaterial present
      if (material.isTroikaTextMaterial) {
        this._prepareForRender(material);
      }

      // We need to force the material to FrontSide to avoid the double-draw-call performance hit
      // introduced in Three.js r130: https://github.com/mrdoob/three.js/pull/21967 - The sidedness
      // is instead applied via drawRange in the GlyphsGeometry.
      material._hadOwnSide = material.hasOwnProperty('side');
      this.geometry.setSide(material._actualSide = material.side);
      material.side = FrontSide;
    }

    onAfterRender(renderer, scene, camera, geometry, material, group) {
      // Restore original material side
      if (material._hadOwnSide) {
        material.side = material._actualSide;
      } else {
        delete material.side; // back to inheriting from base material
      }
    }

    /**
     * Shortcut to dispose the geometry specific to this instance.
     * Note: we don't also dispose the derived material here because if anything else is
     * sharing the same base material it will result in a pause next frame as the program
     * is recompiled. Instead users can dispose the base material manually, like normal,
     * and we'll also dispose the derived material at that time.
     */
    dispose() {
      this.geometry.dispose();
    }

    /**
     * @property {TroikaTextRenderInfo|null} textRenderInfo
     * @readonly
     * The current processed rendering data for this TextMesh, returned by the TextBuilder after
     * a `sync()` call. This will be `null` initially, and may be stale for a short period until
     * the asynchrous `sync()` process completes.
     */
    get textRenderInfo() {
      return this._textRenderInfo || null
    }

    // Handler for automatically wrapping the base material with our upgrades. We do the wrapping
    // lazily on _read_ rather than write to avoid unnecessary wrapping on transient values.
    get material() {
      let derivedMaterial = this._derivedMaterial;
      const baseMaterial = this._baseMaterial || this._defaultMaterial || (this._defaultMaterial = defaultMaterial.clone());
      if (!derivedMaterial || derivedMaterial.baseMaterial !== baseMaterial) {
        derivedMaterial = this._derivedMaterial = createTextDerivedMaterial(baseMaterial);
        // dispose the derived material when its base material is disposed:
        baseMaterial.addEventListener('dispose', function onDispose() {
          baseMaterial.removeEventListener('dispose', onDispose);
          derivedMaterial.dispose();
        });
      }
      // If text outline is configured, render it as a preliminary draw using Three's multi-material
      // feature (see GlyphsGeometry which sets up `groups` for this purpose) Doing it with multi
      // materials ensures the layers are always rendered consecutively in a consistent order.
      // Each layer will trigger onBeforeRender with the appropriate material.
      if (this.outlineWidth || this.outlineBlur || this.outlineOffsetX || this.outlineOffsetY) {
        let outlineMaterial = derivedMaterial._outlineMtl;
        if (!outlineMaterial) {
          outlineMaterial = derivedMaterial._outlineMtl = Object.create(derivedMaterial, {
            id: {value: derivedMaterial.id + 0.1}
          });
          outlineMaterial.isTextOutlineMaterial = true;
          outlineMaterial.depthWrite = false;
          outlineMaterial.map = null; //???
          derivedMaterial.addEventListener('dispose', function onDispose() {
            derivedMaterial.removeEventListener('dispose', onDispose);
            outlineMaterial.dispose();
          });
        }
        return [
          outlineMaterial,
          derivedMaterial
        ]
      } else {
        return derivedMaterial
      }
    }
    set material(baseMaterial) {
      if (baseMaterial && baseMaterial.isTroikaTextMaterial) { //prevent double-derivation
        this._derivedMaterial = baseMaterial;
        this._baseMaterial = baseMaterial.baseMaterial;
      } else {
        this._baseMaterial = baseMaterial;
      }
    }

    get glyphGeometryDetail() {
      return this.geometry.detail
    }
    set glyphGeometryDetail(detail) {
      this.geometry.detail = detail;
    }

    get curveRadius() {
      return this.geometry.curveRadius
    }
    set curveRadius(r) {
      this.geometry.curveRadius = r;
    }

    // Create and update material for shadows upon request:
    get customDepthMaterial() {
      return first(this.material).getDepthMaterial()
    }
    get customDistanceMaterial() {
      return first(this.material).getDistanceMaterial()
    }

    _prepareForRender(material) {
      const isOutline = material.isTextOutlineMaterial;
      const uniforms = material.uniforms;
      const textInfo = this.textRenderInfo;
      if (textInfo) {
        const {sdfTexture, blockBounds} = textInfo;
        uniforms.uTroikaSDFTexture.value = sdfTexture;
        uniforms.uTroikaSDFTextureSize.value.set(sdfTexture.image.width, sdfTexture.image.height);
        uniforms.uTroikaSDFGlyphSize.value = textInfo.sdfGlyphSize;
        uniforms.uTroikaSDFExponent.value = textInfo.sdfExponent;
        uniforms.uTroikaTotalBounds.value.fromArray(blockBounds);
        uniforms.uTroikaUseGlyphColors.value = !isOutline && !!textInfo.glyphColors;

        let distanceOffset = 0;
        let blurRadius = 0;
        let strokeWidth = 0;
        let fillOpacity;
        let strokeOpacity;
        let strokeColor;
        let offsetX = 0;
        let offsetY = 0;

        if (isOutline) {
          let {outlineWidth, outlineOffsetX, outlineOffsetY, outlineBlur, outlineOpacity} = this;
          distanceOffset = this._parsePercent(outlineWidth) || 0;
          blurRadius = Math.max(0, this._parsePercent(outlineBlur) || 0);
          fillOpacity = outlineOpacity;
          offsetX = this._parsePercent(outlineOffsetX) || 0;
          offsetY = this._parsePercent(outlineOffsetY) || 0;
        } else {
          strokeWidth = Math.max(0, this._parsePercent(this.strokeWidth) || 0);
          if (strokeWidth) {
            strokeColor = this.strokeColor;
            uniforms.uTroikaStrokeColor.value.set(strokeColor == null ? defaultStrokeColor : strokeColor);
            strokeOpacity = this.strokeOpacity;
            if (strokeOpacity == null) strokeOpacity = 1;
          }
          fillOpacity = this.fillOpacity;
        }

        uniforms.uTroikaDistanceOffset.value = distanceOffset;
        uniforms.uTroikaPositionOffset.value.set(offsetX, offsetY);
        uniforms.uTroikaBlurRadius.value = blurRadius;
        uniforms.uTroikaStrokeWidth.value = strokeWidth;
        uniforms.uTroikaStrokeOpacity.value = strokeOpacity;
        uniforms.uTroikaFillOpacity.value = fillOpacity == null ? 1 : fillOpacity;
        uniforms.uTroikaCurveRadius.value = this.curveRadius || 0;

        let clipRect = this.clipRect;
        if (clipRect && Array.isArray(clipRect) && clipRect.length === 4) {
          uniforms.uTroikaClipRect.value.fromArray(clipRect);
        } else {
          // no clipping - choose a finite rect that shouldn't ever be reached by overflowing glyphs or outlines
          const pad = (this.fontSize || 0.1) * 100;
          uniforms.uTroikaClipRect.value.set(
            blockBounds[0] - pad,
            blockBounds[1] - pad,
            blockBounds[2] + pad,
            blockBounds[3] + pad
          );
        }
        this.geometry.applyClipRect(uniforms.uTroikaClipRect.value);
      }
      uniforms.uTroikaSDFDebug.value = !!this.debugSDF;
      material.polygonOffset = !!this.depthOffset;
      material.polygonOffsetFactor = material.polygonOffsetUnits = this.depthOffset || 0;

      // Shortcut for setting material color via `color` prop on the mesh; this is
      // applied only to the derived material to avoid mutating a shared base material.
      const color = isOutline ? (this.outlineColor || 0) : this.color;

      if (color == null) {
        delete material.color; //inherit from base
      } else {
        const colorObj = material.hasOwnProperty('color') ? material.color : (material.color = new Color());
        if (color !== colorObj._input || typeof color === 'object') {
          colorObj.set(colorObj._input = color);
        }
      }

      // base orientation
      let orient = this.orientation || defaultOrient;
      if (orient !== material._orientation) {
        let rotMat = uniforms.uTroikaOrient.value;
        orient = orient.replace(/[^-+xyz]/g, '');
        let match = orient !== defaultOrient && orient.match(/^([-+])([xyz])([-+])([xyz])$/);
        if (match) {
          let [, hSign, hAxis, vSign, vAxis] = match;
          tempVec3a.set(0, 0, 0)[hAxis] = hSign === '-' ? 1 : -1;
          tempVec3b.set(0, 0, 0)[vAxis] = vSign === '-' ? -1 : 1;
          tempMat4.lookAt(origin, tempVec3a.cross(tempVec3b), tempVec3b);
          rotMat.setFromMatrix4(tempMat4);
        } else {
          rotMat.identity();
        }
        material._orientation = orient;
      }
    }

    _parsePercent(value) {
      if (typeof value === 'string') {
        let match = value.match(/^(-?[\d.]+)%$/);
        let pct = match ? parseFloat(match[1]) : NaN;
        value = (isNaN(pct) ? 0 : pct / 100) * this.fontSize;
      }
      return value
    }

    /**
     * Translate a point in local space to an x/y in the text plane.
     */
    localPositionToTextCoords(position, target = new Vector2()) {
      target.copy(position); //simple non-curved case is 1:1
      const r = this.curveRadius;
      if (r) { //flatten the curve
        target.x = Math.atan2(position.x, Math.abs(r) - Math.abs(position.z)) * Math.abs(r);
      }
      return target
    }

    /**
     * Translate a point in world space to an x/y in the text plane.
     */
    worldPositionToTextCoords(position, target = new Vector2()) {
      tempVec3a.copy(position);
      return this.localPositionToTextCoords(this.worldToLocal(tempVec3a), target)
    }

    /**
     * @override Custom raycasting to test against the whole text block's max rectangular bounds
     * TODO is there any reason to make this more granular, like within individual line or glyph rects?
     */
    raycast(raycaster, intersects) {
      const {textRenderInfo, curveRadius} = this;
      if (textRenderInfo) {
        const bounds = textRenderInfo.blockBounds;
        const raycastMesh = curveRadius ? getCurvedRaycastMesh() : getFlatRaycastMesh();
        const geom = raycastMesh.geometry;
        const {position, uv} = geom.attributes;
        for (let i = 0; i < uv.count; i++) {
          let x = bounds[0] + (uv.getX(i) * (bounds[2] - bounds[0]));
          const y = bounds[1] + (uv.getY(i) * (bounds[3] - bounds[1]));
          let z = 0;
          if (curveRadius) {
            z = curveRadius - Math.cos(x / curveRadius) * curveRadius;
            x = Math.sin(x / curveRadius) * curveRadius;
          }
          position.setXYZ(i, x, y, z);
        }
        geom.boundingSphere = this.geometry.boundingSphere;
        geom.boundingBox = this.geometry.boundingBox;
        raycastMesh.matrixWorld = this.matrixWorld;
        raycastMesh.material.side = this.material.side;
        tempArray.length = 0;
        raycastMesh.raycast(raycaster, tempArray);
        for (let i = 0; i < tempArray.length; i++) {
          tempArray[i].object = this;
          intersects.push(tempArray[i]);
        }
      }
    }

    copy(source) {
      // Prevent copying the geometry reference so we don't end up sharing attributes between instances
      const geom = this.geometry;
      super.copy(source);
      this.geometry = geom;

      COPYABLE_PROPS.forEach(prop => {
        this[prop] = source[prop];
      });
      return this
    }

    clone() {
      return new this.constructor().copy(this)
    }
  }


  // Create setters for properties that affect text layout:
  SYNCABLE_PROPS.forEach(prop => {
    const privateKey = '_private_' + prop;
    Object.defineProperty(Text.prototype, prop, {
      get() {
        return this[privateKey]
      },
      set(value) {
        if (value !== this[privateKey]) {
          this[privateKey] = value;
          this._needsSync = true;
        }
      }
    });
  });
  Object.defineProperty(Text.prototype, 'anchor', {
    get() {
      return this._deprecated_anchor
    },
    set(val) {
      this._deprecated_anchor = val;
      if (Array.isArray(val)) {
        this.anchorX = `${(+val[0] || 0) * 100}%`;
        this.anchorY = `${(+val[1] || 0) * 100}%`;
      } else {
        this.anchorX = this.anchorY = 0;
      }
    }
  });

  return Text
})();

//=== Utility functions for dealing with carets and selection ranges ===//

/**
 * @typedef {object} TextCaret
 * @property {number} x - x position of the caret
 * @property {number} y - y position of the caret's bottom
 * @property {number} height - height of the caret
 * @property {number} charIndex - the index in the original input string of this caret's target
 *   character; the caret will be for the position _before_ that character.
 */

/**
 * Given a local x/y coordinate in the text block plane, find the nearest caret position.
 * @param {TroikaTextRenderInfo} textRenderInfo - a result object from TextBuilder#getTextRenderInfo
 * @param {number} x
 * @param {number} y
 * @return {TextCaret | null}
 */
function getCaretAtPoint(textRenderInfo, x, y) {
  let closestCaret = null;
  const {caretHeight} = textRenderInfo;
  const caretsByRow = groupCaretsByRow(textRenderInfo);

  // Find nearest row by y first
  let closestRowY = Infinity;
  caretsByRow.forEach((carets, rowY) => {
    if (Math.abs(y - (rowY + caretHeight / 2)) < Math.abs(y - (closestRowY + caretHeight / 2))) {
      closestRowY = rowY;
    }
  });

  // Then find closest caret by x within that row
  caretsByRow.get(closestRowY).forEach(caret => {
    if (!closestCaret || Math.abs(x - caret.x) < Math.abs(x - closestCaret.x)) {
      closestCaret = caret;
    }
  });
  return closestCaret
}


const _rectsCache = new WeakMap();

/**
 * Given start and end character indexes, return a list of rectangles covering all the
 * characters within that selection.
 * @param {TroikaTextRenderInfo} textRenderInfo
 * @param {number} start - index of the first char in the selection
 * @param {number} end - index of the first char after the selection
 * @return {Array<{left, top, right, bottom}> | null}
 */
function getSelectionRects(textRenderInfo, start, end) {
  let rects;
  if (textRenderInfo) {
    // Check cache - textRenderInfo is frozen so it's safe to cache based on it
    let prevResult = _rectsCache.get(textRenderInfo);
    if (prevResult && prevResult.start === start && prevResult.end === end) {
      return prevResult.rects
    }

    const {caretPositions, caretHeight} = textRenderInfo;

    // Normalize
    if (end < start) {
      const s = start;
      start = end;
      end = s;
    }
    start = Math.max(start, 0);
    end = Math.min(end, caretPositions.length + 1);

    // Build list of rects, expanding the current rect for all characters in a run and starting
    // a new rect whenever reaching a new line or a new bidi direction
    rects = [];
    let currentRect = null;
    for (let i = start; i < end; i++) {
      const x1 = caretPositions[i * 3];
      const x2 = caretPositions[i * 3 + 1];
      const left = Math.min(x1, x2);
      const right = Math.max(x1, x2);
      const bottom = caretPositions[i * 3 + 2];
      if (!currentRect || bottom !== currentRect.bottom || left > currentRect.right || right < currentRect.left) {
        currentRect = {
          left: Infinity,
          right: -Infinity,
          bottom: bottom,
          top: bottom + caretHeight
        };
        rects.push(currentRect);
      }
      currentRect.left = Math.min(left, currentRect.left);
      currentRect.right = Math.max(right, currentRect.right);
    }

    // Merge any overlapping rects, e.g. those formed by adjacent bidi runs
    rects.sort((a, b) => b.bottom - a.bottom || a.left - b.left);
    for (let i = rects.length - 1; i-- > 0;) {
      const rectA = rects[i];
      const rectB = rects[i + 1];
      if (rectA.bottom === rectB.bottom && rectA.left <= rectB.right && rectA.right >= rectB.left) {
        rectB.left = Math.min(rectB.left, rectA.left);
        rectB.right = Math.max(rectB.right, rectA.right);
        rects.splice(i, 1);
      }
    }

    _rectsCache.set(textRenderInfo, {start, end, rects});
  }
  return rects
}

const _caretsByRowCache = new WeakMap();

function groupCaretsByRow(textRenderInfo) {
  // textRenderInfo is frozen so it's safe to cache based on it
  let caretsByRow = _caretsByRowCache.get(textRenderInfo);
  if (!caretsByRow) {
    const {caretPositions, caretHeight} = textRenderInfo;
    caretsByRow = new Map();
    for (let i = 0; i < caretPositions.length; i += 3) {
      const rowY = caretPositions[i + 2];
      let rowCarets = caretsByRow.get(rowY);
      if (!rowCarets) {
        caretsByRow.set(rowY, rowCarets = []);
      }
      rowCarets.push({
        x: caretPositions[i],
        y: rowY,
        height: caretHeight,
        charIndex: i / 3
      });
      // Add one more caret after the final char
      if (i + 3 >= caretPositions.length) {
        rowCarets.push({
          x: caretPositions[i + 1],
          y: rowY,
          height: caretHeight,
          charIndex: i / 3 + 1
        });
      }
    }
  }
  _caretsByRowCache.set(textRenderInfo, caretsByRow);
  return caretsByRow
}

// Custom build of Yoga (https://yogalayout.com/) for use in troika-flex-layout.
// Original MIT license applies: https://github.com/facebook/yoga/blob/master/LICENSE

function yogaFactory() {
  
var Yoga = (function () {

  /**
   * Copyright (c) 2014-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * 
   * @format
   */

  var CONSTANTS = {
    ALIGN_COUNT: 8,
    ALIGN_AUTO: 0,
    ALIGN_FLEX_START: 1,
    ALIGN_CENTER: 2,
    ALIGN_FLEX_END: 3,
    ALIGN_STRETCH: 4,
    ALIGN_BASELINE: 5,
    ALIGN_SPACE_BETWEEN: 6,
    ALIGN_SPACE_AROUND: 7,

    DIMENSION_COUNT: 2,
    DIMENSION_WIDTH: 0,
    DIMENSION_HEIGHT: 1,

    DIRECTION_COUNT: 3,
    DIRECTION_INHERIT: 0,
    DIRECTION_LTR: 1,
    DIRECTION_RTL: 2,

    DISPLAY_COUNT: 2,
    DISPLAY_FLEX: 0,
    DISPLAY_NONE: 1,

    EDGE_COUNT: 9,
    EDGE_LEFT: 0,
    EDGE_TOP: 1,
    EDGE_RIGHT: 2,
    EDGE_BOTTOM: 3,
    EDGE_START: 4,
    EDGE_END: 5,
    EDGE_HORIZONTAL: 6,
    EDGE_VERTICAL: 7,
    EDGE_ALL: 8,

    EXPERIMENTAL_FEATURE_COUNT: 1,
    EXPERIMENTAL_FEATURE_WEB_FLEX_BASIS: 0,

    FLEX_DIRECTION_COUNT: 4,
    FLEX_DIRECTION_COLUMN: 0,
    FLEX_DIRECTION_COLUMN_REVERSE: 1,
    FLEX_DIRECTION_ROW: 2,
    FLEX_DIRECTION_ROW_REVERSE: 3,

    JUSTIFY_COUNT: 6,
    JUSTIFY_FLEX_START: 0,
    JUSTIFY_CENTER: 1,
    JUSTIFY_FLEX_END: 2,
    JUSTIFY_SPACE_BETWEEN: 3,
    JUSTIFY_SPACE_AROUND: 4,
    JUSTIFY_SPACE_EVENLY: 5,

    LOG_LEVEL_COUNT: 6,
    LOG_LEVEL_ERROR: 0,
    LOG_LEVEL_WARN: 1,
    LOG_LEVEL_INFO: 2,
    LOG_LEVEL_DEBUG: 3,
    LOG_LEVEL_VERBOSE: 4,
    LOG_LEVEL_FATAL: 5,

    MEASURE_MODE_COUNT: 3,
    MEASURE_MODE_UNDEFINED: 0,
    MEASURE_MODE_EXACTLY: 1,
    MEASURE_MODE_AT_MOST: 2,

    NODE_TYPE_COUNT: 2,
    NODE_TYPE_DEFAULT: 0,
    NODE_TYPE_TEXT: 1,

    OVERFLOW_COUNT: 3,
    OVERFLOW_VISIBLE: 0,
    OVERFLOW_HIDDEN: 1,
    OVERFLOW_SCROLL: 2,

    POSITION_TYPE_COUNT: 2,
    POSITION_TYPE_RELATIVE: 0,
    POSITION_TYPE_ABSOLUTE: 1,

    PRINT_OPTIONS_COUNT: 3,
    PRINT_OPTIONS_LAYOUT: 1,
    PRINT_OPTIONS_STYLE: 2,
    PRINT_OPTIONS_CHILDREN: 4,

    UNIT_COUNT: 4,
    UNIT_UNDEFINED: 0,
    UNIT_POINT: 1,
    UNIT_PERCENT: 2,
    UNIT_AUTO: 3,

    WRAP_COUNT: 3,
    WRAP_NO_WRAP: 0,
    WRAP_WRAP: 1,
    WRAP_WRAP_REVERSE: 2
  };

  var YGEnums = CONSTANTS;

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  /**
   * Copyright (c) 2014-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * 
   * @format
   */



  var Layout = function () {
    function Layout(left, right, top, bottom, width, height) {
      _classCallCheck(this, Layout);

      this.left = left;
      this.right = right;
      this.top = top;
      this.bottom = bottom;
      this.width = width;
      this.height = height;
    }

    _createClass(Layout, [{
      key: 'fromJS',
      value: function fromJS(expose) {
        expose(this.left, this.right, this.top, this.bottom, this.width, this.height);
      }
    }, {
      key: 'toString',
      value: function toString() {
        return '<Layout#' + this.left + ':' + this.right + ';' + this.top + ':' + this.bottom + ';' + this.width + ':' + this.height + '>';
      }
    }]);

    return Layout;
  }();

  var Size = function () {
    _createClass(Size, null, [{
      key: 'fromJS',
      value: function fromJS(_ref) {
        var width = _ref.width,
            height = _ref.height;

        return new Size(width, height);
      }
    }]);

    function Size(width, height) {
      _classCallCheck(this, Size);

      this.width = width;
      this.height = height;
    }

    _createClass(Size, [{
      key: 'fromJS',
      value: function fromJS(expose) {
        expose(this.width, this.height);
      }
    }, {
      key: 'toString',
      value: function toString() {
        return '<Size#' + this.width + 'x' + this.height + '>';
      }
    }]);

    return Size;
  }();

  var Value = function () {
    function Value(unit, value) {
      _classCallCheck(this, Value);

      this.unit = unit;
      this.value = value;
    }

    _createClass(Value, [{
      key: 'fromJS',
      value: function fromJS(expose) {
        expose(this.unit, this.value);
      }
    }, {
      key: 'toString',
      value: function toString() {
        switch (this.unit) {
          case YGEnums.UNIT_POINT:
            return String(this.value);
          case YGEnums.UNIT_PERCENT:
            return this.value + '%';
          case YGEnums.UNIT_AUTO:
            return 'auto';
          default:
            {
              return this.value + '?';
            }
        }
      }
    }, {
      key: 'valueOf',
      value: function valueOf() {
        return this.value;
      }
    }]);

    return Value;
  }();

  var entryCommon = function (bind, lib) {
    function patch(prototype, name, fn) {
      var original = prototype[name];

      prototype[name] = function () {
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return fn.call.apply(fn, [this, original].concat(args));
      };
    }

    var _arr = ['setPosition', 'setMargin', 'setFlexBasis', 'setWidth', 'setHeight', 'setMinWidth', 'setMinHeight', 'setMaxWidth', 'setMaxHeight', 'setPadding'];

    var _loop = function _loop() {
      var _methods;

      var fnName = _arr[_i];
      var methods = (_methods = {}, _defineProperty(_methods, YGEnums.UNIT_POINT, lib.Node.prototype[fnName]), _defineProperty(_methods, YGEnums.UNIT_PERCENT, lib.Node.prototype[fnName + 'Percent']), _defineProperty(_methods, YGEnums.UNIT_AUTO, lib.Node.prototype[fnName + 'Auto']), _methods);

      patch(lib.Node.prototype, fnName, function (original) {
        for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
          args[_key2 - 1] = arguments[_key2];
        }

        // We patch all these functions to add support for the following calls:
        // .setWidth(100) / .setWidth("100%") / .setWidth(.getWidth()) / .setWidth("auto")

        var value = args.pop();
        var unit = void 0,
            asNumber = void 0;

        if (value === 'auto') {
          unit = YGEnums.UNIT_AUTO;
          asNumber = undefined;
        } else if (value instanceof Value) {
          unit = value.unit;
          asNumber = value.valueOf();
        } else {
          unit = typeof value === 'string' && value.endsWith('%') ? YGEnums.UNIT_PERCENT : YGEnums.UNIT_POINT;
          asNumber = parseFloat(value);
          if (!Number.isNaN(value) && Number.isNaN(asNumber)) {
            throw new Error('Invalid value ' + value + ' for ' + fnName);
          }
        }

        if (!methods[unit]) throw new Error('Failed to execute "' + fnName + '": Unsupported unit \'' + value + '\'');

        if (asNumber !== undefined) {
          var _methods$unit;

          return (_methods$unit = methods[unit]).call.apply(_methods$unit, [this].concat(args, [asNumber]));
        } else {
          var _methods$unit2;

          return (_methods$unit2 = methods[unit]).call.apply(_methods$unit2, [this].concat(args));
        }
      });
    };

    for (var _i = 0; _i < _arr.length; _i++) {
      _loop();
    }

    patch(lib.Config.prototype, 'free', function () {
      // Since we handle the memory allocation ourselves (via lib.Config.create),
      // we also need to handle the deallocation
      lib.Config.destroy(this);
    });

    patch(lib.Node, 'create', function (_, config) {
      // We decide the constructor we want to call depending on the parameters
      return config ? lib.Node.createWithConfig(config) : lib.Node.createDefault();
    });

    patch(lib.Node.prototype, 'free', function () {
      // Since we handle the memory allocation ourselves (via lib.Node.create),
      // we also need to handle the deallocation
      lib.Node.destroy(this);
    });

    patch(lib.Node.prototype, 'freeRecursive', function () {
      for (var t = 0, T = this.getChildCount(); t < T; ++t) {
        this.getChild(0).freeRecursive();
      }
      this.free();
    });

    patch(lib.Node.prototype, 'setMeasureFunc', function (original, measureFunc) {
      // This patch is just a convenience patch, since it helps write more
      // idiomatic source code (such as .setMeasureFunc(null))
      // We also automatically convert the return value of the measureFunc
      // to a Size object, so that we can return anything that has .width and
      // .height properties
      if (measureFunc) {
        return original.call(this, function () {
          return Size.fromJS(measureFunc.apply(undefined, arguments));
        });
      } else {
        return this.unsetMeasureFunc();
      }
    });

    patch(lib.Node.prototype, 'calculateLayout', function (original) {
      var width = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : NaN;
      var height = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : NaN;
      var direction = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : YGEnums.DIRECTION_LTR;

      // Just a small patch to add support for the function default parameters
      return original.call(this, width, height, direction);
    });

    return _extends({
      Config: lib.Config,
      Node: lib.Node,
      Layout: bind('Layout', Layout),
      Size: bind('Size', Size),
      Value: bind('Value', Value),
      getInstanceCount: function getInstanceCount() {
        return lib.getInstanceCount.apply(lib, arguments);
      }
    }, YGEnums);
  };

  const $module={exports:{}};
              (new Function('module', `!function(n,e){"function"==typeof define&&define.amd?define([],(function(){return e})):"object"==typeof module&&module.exports?module.exports=e:(n.nbind=n.nbind||{}).init=e}(this,(function(Module,cb){var Module;"function"==typeof Module&&(cb=Module,Module={}),Module.onRuntimeInitialized=function(n,e){return function(){n&&n.apply(this,arguments);try{Module.ccall("nbind_init")}catch(n){return void e(n)}e(null,{bind:Module._nbind_value,reflect:Module.NBind.reflect,queryType:Module.NBind.queryType,toggleLightGC:Module.toggleLightGC,lib:Module})}}(Module.onRuntimeInitialized,cb),Module||(Module=(void 0!==Module?Module:null)||{});var moduleOverrides={};for(var key in Module)Module.hasOwnProperty(key)&&(moduleOverrides[key]=Module[key]);var ENVIRONMENT_IS_WEB=!1,ENVIRONMENT_IS_WORKER=!1,ENVIRONMENT_IS_NODE=!1,ENVIRONMENT_IS_SHELL=!1,nodeFS,nodePath;if(Module.ENVIRONMENT)if("WEB"===Module.ENVIRONMENT)ENVIRONMENT_IS_WEB=!0;else if("WORKER"===Module.ENVIRONMENT)ENVIRONMENT_IS_WORKER=!0;else if("NODE"===Module.ENVIRONMENT)ENVIRONMENT_IS_NODE=!0;else{if("SHELL"!==Module.ENVIRONMENT)throw new Error("The provided Module['ENVIRONMENT'] value is not valid. It must be one of: WEB|WORKER|NODE|SHELL.");ENVIRONMENT_IS_SHELL=!0}else ENVIRONMENT_IS_WEB="object"==typeof window,ENVIRONMENT_IS_WORKER="function"==typeof importScripts,ENVIRONMENT_IS_NODE="object"==typeof process&&"function"==typeof require&&!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_WORKER,ENVIRONMENT_IS_SHELL=!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_NODE&&!ENVIRONMENT_IS_WORKER;if(ENVIRONMENT_IS_NODE)Module.print||(Module.print=console.log),Module.printErr||(Module.printErr=console.warn),Module.read=function(n,e){nodeFS||(nodeFS={}("")),nodePath||(nodePath={}("")),n=nodePath.normalize(n);var r=nodeFS.readFileSync(n);return e?r:r.toString()},Module.readBinary=function(n){var e=Module.read(n,!0);return e.buffer||(e=new Uint8Array(e)),assert(e.buffer),e},Module.load=function(n){globalEval(read(n))},Module.thisProgram||(process.argv.length>1?Module.thisProgram=process.argv[1].replace(/\\\\/g,"/"):Module.thisProgram="unknown-program"),Module.arguments=process.argv.slice(2),"undefined"!=typeof module&&(module.exports=Module),process.on("uncaughtException",(function(n){if(!(n instanceof ExitStatus))throw n})),Module.inspect=function(){return"[Emscripten Module object]"};else if(ENVIRONMENT_IS_SHELL)Module.print||(Module.print=print),"undefined"!=typeof printErr&&(Module.printErr=printErr),"undefined"!=typeof read?Module.read=read:Module.read=function(){throw"no read() available"},Module.readBinary=function(n){if("function"==typeof readbuffer)return new Uint8Array(readbuffer(n));var e=read(n,"binary");return assert("object"==typeof e),e},"undefined"!=typeof scriptArgs?Module.arguments=scriptArgs:void 0!==arguments&&(Module.arguments=arguments),"function"==typeof quit&&(Module.quit=function(n,e){quit(n)});else{if(!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_WORKER)throw"Unknown runtime environment. Where are we?";if(Module.read=function(n){var e=new XMLHttpRequest;return e.open("GET",n,!1),e.send(null),e.responseText},ENVIRONMENT_IS_WORKER&&(Module.readBinary=function(n){var e=new XMLHttpRequest;return e.open("GET",n,!1),e.responseType="arraybuffer",e.send(null),new Uint8Array(e.response)}),Module.readAsync=function(n,e,r){var t=new XMLHttpRequest;t.open("GET",n,!0),t.responseType="arraybuffer",t.onload=function(){200==t.status||0==t.status&&t.response?e(t.response):r()},t.onerror=r,t.send(null)},void 0!==arguments&&(Module.arguments=arguments),"undefined"!=typeof console)Module.print||(Module.print=function(n){console.log(n)}),Module.printErr||(Module.printErr=function(n){console.warn(n)});else{var TRY_USE_DUMP=!1;Module.print||(Module.print=TRY_USE_DUMP&&"undefined"!=typeof dump?function(n){dump(n)}:function(n){})}ENVIRONMENT_IS_WORKER&&(Module.load=importScripts),void 0===Module.setWindowTitle&&(Module.setWindowTitle=function(n){document.title=n})}function globalEval(n){eval.call(null,n)}for(var key in!Module.load&&Module.read&&(Module.load=function(n){globalEval(Module.read(n))}),Module.print||(Module.print=function(){}),Module.printErr||(Module.printErr=Module.print),Module.arguments||(Module.arguments=[]),Module.thisProgram||(Module.thisProgram="./this.program"),Module.quit||(Module.quit=function(n,e){throw e}),Module.print=Module.print,Module.printErr=Module.printErr,Module.preRun=[],Module.postRun=[],moduleOverrides)moduleOverrides.hasOwnProperty(key)&&(Module[key]=moduleOverrides[key]);moduleOverrides=void 0;var Runtime={setTempRet0:function(n){return tempRet0=n,n},getTempRet0:function(){return tempRet0},stackSave:function(){return STACKTOP},stackRestore:function(n){STACKTOP=n},getNativeTypeSize:function(n){switch(n){case"i1":case"i8":return 1;case"i16":return 2;case"i32":return 4;case"i64":return 8;case"float":return 4;case"double":return 8;default:if("*"===n[n.length-1])return Runtime.QUANTUM_SIZE;if("i"===n[0]){var e=parseInt(n.substr(1));return assert(e%8==0),e/8}return 0}},getNativeFieldSize:function(n){return Math.max(Runtime.getNativeTypeSize(n),Runtime.QUANTUM_SIZE)},STACK_ALIGN:16,prepVararg:function(n,e){return"double"===e||"i64"===e?7&n&&(assert(4==(7&n)),n+=4):assert(0==(3&n)),n},getAlignSize:function(n,e,r){return r||"i64"!=n&&"double"!=n?n?Math.min(e||(n?Runtime.getNativeFieldSize(n):0),Runtime.QUANTUM_SIZE):Math.min(e,8):8},dynCall:function(n,e,r){return r&&r.length?Module["dynCall_"+n].apply(null,[e].concat(r)):Module["dynCall_"+n].call(null,e)},functionPointers:[],addFunction:function(n){for(var e=0;e<Runtime.functionPointers.length;e++)if(!Runtime.functionPointers[e])return Runtime.functionPointers[e]=n,2*(1+e);throw"Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS."},removeFunction:function(n){Runtime.functionPointers[(n-2)/2]=null},warnOnce:function(n){Runtime.warnOnce.shown||(Runtime.warnOnce.shown={}),Runtime.warnOnce.shown[n]||(Runtime.warnOnce.shown[n]=1,Module.printErr(n))},funcWrappers:{},getFuncWrapper:function(n,e){if(n){assert(e),Runtime.funcWrappers[e]||(Runtime.funcWrappers[e]={});var r=Runtime.funcWrappers[e];return r[n]||(1===e.length?r[n]=function(){return Runtime.dynCall(e,n)}:2===e.length?r[n]=function(r){return Runtime.dynCall(e,n,[r])}:r[n]=function(){return Runtime.dynCall(e,n,Array.prototype.slice.call(arguments))}),r[n]}},getCompilerSetting:function(n){throw"You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work"},stackAlloc:function(n){var e=STACKTOP;return STACKTOP=(STACKTOP=STACKTOP+n|0)+15&-16,e},staticAlloc:function(n){var e=STATICTOP;return STATICTOP=(STATICTOP=STATICTOP+n|0)+15&-16,e},dynamicAlloc:function(n){var e=HEAP32[DYNAMICTOP_PTR>>2],r=-16&(e+n+15|0);if((HEAP32[DYNAMICTOP_PTR>>2]=r,r>=TOTAL_MEMORY)&&!enlargeMemory())return HEAP32[DYNAMICTOP_PTR>>2]=e,0;return e},alignMemory:function(n,e){return n=Math.ceil(n/(e||16))*(e||16)},makeBigInt:function(n,e,r){return r?+(n>>>0)+4294967296*+(e>>>0):+(n>>>0)+4294967296*+(0|e)},GLOBAL_BASE:8,QUANTUM_SIZE:4,__dummy__:0};Module.Runtime=Runtime;var ABORT=0,EXITSTATUS=0,cwrap,ccall;function assert(n,e){n||abort("Assertion failed: "+e)}function getCFunc(ident){var func=Module["_"+ident];if(!func)try{func=eval("_"+ident)}catch(n){}return assert(func,"Cannot call unknown function "+ident+" (perhaps LLVM optimizations or closure removed it?)"),func}function setValue(n,e,r,t){switch("*"===(r=r||"i8").charAt(r.length-1)&&(r="i32"),r){case"i1":case"i8":HEAP8[n>>0]=e;break;case"i16":HEAP16[n>>1]=e;break;case"i32":HEAP32[n>>2]=e;break;case"i64":tempI64=[e>>>0,(tempDouble=e,+Math_abs(tempDouble)>=1?tempDouble>0?(0|Math_min(+Math_floor(tempDouble/4294967296),4294967295))>>>0:~~+Math_ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[n>>2]=tempI64[0],HEAP32[n+4>>2]=tempI64[1];break;case"float":HEAPF32[n>>2]=e;break;case"double":HEAPF64[n>>3]=e;break;default:abort("invalid type for setValue: "+r)}}function getValue(n,e,r){switch("*"===(e=e||"i8").charAt(e.length-1)&&(e="i32"),e){case"i1":case"i8":return HEAP8[n>>0];case"i16":return HEAP16[n>>1];case"i32":case"i64":return HEAP32[n>>2];case"float":return HEAPF32[n>>2];case"double":return HEAPF64[n>>3];default:abort("invalid type for setValue: "+e)}return null}!function(){var JSfuncs={stackSave:function(){Runtime.stackSave()},stackRestore:function(){Runtime.stackRestore()},arrayToC:function(n){var e=Runtime.stackAlloc(n.length);return writeArrayToMemory(n,e),e},stringToC:function(n){var e=0;if(null!=n&&0!==n){var r=1+(n.length<<2);stringToUTF8(n,e=Runtime.stackAlloc(r),r)}return e}},toC={string:JSfuncs.stringToC,array:JSfuncs.arrayToC};ccall=function(n,e,r,t,i){var u=getCFunc(n),o=[],a=0;if(t)for(var f=0;f<t.length;f++){var c=toC[r[f]];c?(0===a&&(a=Runtime.stackSave()),o[f]=c(t[f])):o[f]=t[f]}var l=u.apply(null,o);if("string"===e&&(l=Pointer_stringify(l)),0!==a){if(i&&i.async)return void EmterpreterAsync.asyncFinalizers.push((function(){Runtime.stackRestore(a)}));Runtime.stackRestore(a)}return l};var sourceRegex=/^function\\s*[a-zA-Z$_0-9]*\\s*\\(([^)]*)\\)\\s*{\\s*([^*]*?)[\\s;]*(?:return\\s*(.*?)[;\\s]*)?}$/;function parseJSFunc(n){var e=n.toString().match(sourceRegex).slice(1);return{arguments:e[0],body:e[1],returnValue:e[2]}}var JSsource=null;function ensureJSsource(){if(!JSsource)for(var n in JSsource={},JSfuncs)JSfuncs.hasOwnProperty(n)&&(JSsource[n]=parseJSFunc(JSfuncs[n]))}cwrap=function cwrap(ident,returnType,argTypes){argTypes=argTypes||[];var cfunc=getCFunc(ident),numericArgs=argTypes.every((function(n){return"number"===n})),numericRet="string"!==returnType;if(numericRet&&numericArgs)return cfunc;var argNames=argTypes.map((function(n,e){return"$"+e})),funcstr="(function("+argNames.join(",")+") {",nargs=argTypes.length;if(!numericArgs){ensureJSsource(),funcstr+="var stack = "+JSsource.stackSave.body+";";for(var i=0;i<nargs;i++){var arg=argNames[i],type=argTypes[i];if("number"!==type){var convertCode=JSsource[type+"ToC"];funcstr+="var "+convertCode.arguments+" = "+arg+";",funcstr+=convertCode.body+";",funcstr+=arg+"=("+convertCode.returnValue+");"}}}var cfuncname=parseJSFunc((function(){return cfunc})).returnValue;if(funcstr+="var ret = "+cfuncname+"("+argNames.join(",")+");",!numericRet){var strgfy=parseJSFunc((function(){return Pointer_stringify})).returnValue;funcstr+="ret = "+strgfy+"(ret);"}return numericArgs||(ensureJSsource(),funcstr+=JSsource.stackRestore.body.replace("()","(stack)")+";"),funcstr+="return ret})",eval(funcstr)}}(),Module.ccall=ccall,Module.cwrap=cwrap,Module.setValue=setValue,Module.getValue=getValue;var ALLOC_NORMAL=0,ALLOC_STACK=1,ALLOC_STATIC=2,ALLOC_DYNAMIC=3,ALLOC_NONE=4;function allocate(n,e,r,t){var i,u;"number"==typeof n?(i=!0,u=n):(i=!1,u=n.length);var o,a="string"==typeof e?e:null;if(o=r==ALLOC_NONE?t:["function"==typeof _malloc?_malloc:Runtime.staticAlloc,Runtime.stackAlloc,Runtime.staticAlloc,Runtime.dynamicAlloc][void 0===r?ALLOC_STATIC:r](Math.max(u,a?1:e.length)),i){var f;t=o;for(assert(0==(3&o)),f=o+(-4&u);t<f;t+=4)HEAP32[t>>2]=0;for(f=o+u;t<f;)HEAP8[t++>>0]=0;return o}if("i8"===a)return n.subarray||n.slice?HEAPU8.set(n,o):HEAPU8.set(new Uint8Array(n),o),o;for(var c,l,s,d=0;d<u;){var _=n[d];"function"==typeof _&&(_=Runtime.getFunctionIndex(_)),0!==(c=a||e[d])?("i64"==c&&(c="i32"),setValue(o+d,_,c),s!==c&&(l=Runtime.getNativeTypeSize(c),s=c),d+=l):d++}return o}function getMemory(n){return staticSealed?runtimeInitialized?_malloc(n):Runtime.dynamicAlloc(n):Runtime.staticAlloc(n)}function Pointer_stringify(n,e){if(0===e||!n)return"";for(var r,t=0,i=0;t|=r=HEAPU8[n+i>>0],(0!=r||e)&&(i++,!e||i!=e););e||(e=i);var u="";if(t<128){for(var o;e>0;)o=String.fromCharCode.apply(String,HEAPU8.subarray(n,n+Math.min(e,1024))),u=u?u+o:o,n+=1024,e-=1024;return u}return Module.UTF8ToString(n)}function AsciiToString(n){for(var e="";;){var r=HEAP8[n++>>0];if(!r)return e;e+=String.fromCharCode(r)}}function stringToAscii(n,e){return writeAsciiToMemory(n,e,!1)}Module.ALLOC_NORMAL=ALLOC_NORMAL,Module.ALLOC_STACK=ALLOC_STACK,Module.ALLOC_STATIC=ALLOC_STATIC,Module.ALLOC_DYNAMIC=ALLOC_DYNAMIC,Module.ALLOC_NONE=ALLOC_NONE,Module.allocate=allocate,Module.getMemory=getMemory,Module.Pointer_stringify=Pointer_stringify,Module.AsciiToString=AsciiToString,Module.stringToAscii=stringToAscii;var UTF8Decoder="undefined"!=typeof TextDecoder?new TextDecoder("utf8"):void 0;function UTF8ArrayToString(n,e){for(var r=e;n[r];)++r;if(r-e>16&&n.subarray&&UTF8Decoder)return UTF8Decoder.decode(n.subarray(e,r));for(var t,i,u,o,a,f="";;){if(!(t=n[e++]))return f;if(128&t)if(i=63&n[e++],192!=(224&t))if(u=63&n[e++],224==(240&t)?t=(15&t)<<12|i<<6|u:(o=63&n[e++],240==(248&t)?t=(7&t)<<18|i<<12|u<<6|o:(a=63&n[e++],t=248==(252&t)?(3&t)<<24|i<<18|u<<12|o<<6|a:(1&t)<<30|i<<24|u<<18|o<<12|a<<6|63&n[e++])),t<65536)f+=String.fromCharCode(t);else{var c=t-65536;f+=String.fromCharCode(55296|c>>10,56320|1023&c)}else f+=String.fromCharCode((31&t)<<6|i);else f+=String.fromCharCode(t)}}function UTF8ToString(n){return UTF8ArrayToString(HEAPU8,n)}function stringToUTF8Array(n,e,r,t){if(!(t>0))return 0;for(var i=r,u=r+t-1,o=0;o<n.length;++o){var a=n.charCodeAt(o);if(a>=55296&&a<=57343&&(a=65536+((1023&a)<<10)|1023&n.charCodeAt(++o)),a<=127){if(r>=u)break;e[r++]=a}else if(a<=2047){if(r+1>=u)break;e[r++]=192|a>>6,e[r++]=128|63&a}else if(a<=65535){if(r+2>=u)break;e[r++]=224|a>>12,e[r++]=128|a>>6&63,e[r++]=128|63&a}else if(a<=2097151){if(r+3>=u)break;e[r++]=240|a>>18,e[r++]=128|a>>12&63,e[r++]=128|a>>6&63,e[r++]=128|63&a}else if(a<=67108863){if(r+4>=u)break;e[r++]=248|a>>24,e[r++]=128|a>>18&63,e[r++]=128|a>>12&63,e[r++]=128|a>>6&63,e[r++]=128|63&a}else{if(r+5>=u)break;e[r++]=252|a>>30,e[r++]=128|a>>24&63,e[r++]=128|a>>18&63,e[r++]=128|a>>12&63,e[r++]=128|a>>6&63,e[r++]=128|63&a}}return e[r]=0,r-i}function stringToUTF8(n,e,r){return stringToUTF8Array(n,HEAPU8,e,r)}function lengthBytesUTF8(n){for(var e=0,r=0;r<n.length;++r){var t=n.charCodeAt(r);t>=55296&&t<=57343&&(t=65536+((1023&t)<<10)|1023&n.charCodeAt(++r)),t<=127?++e:e+=t<=2047?2:t<=65535?3:t<=2097151?4:t<=67108863?5:6}return e}Module.UTF8ArrayToString=UTF8ArrayToString,Module.UTF8ToString=UTF8ToString,Module.stringToUTF8Array=stringToUTF8Array,Module.stringToUTF8=stringToUTF8,Module.lengthBytesUTF8=lengthBytesUTF8;var UTF16Decoder="undefined"!=typeof TextDecoder?new TextDecoder("utf-16le"):void 0,HEAP,buffer,HEAP8,HEAPU8,HEAP16,HEAPU16,HEAP32,HEAPU32,HEAPF32,HEAPF64,STATIC_BASE,STATICTOP,staticSealed,STACK_BASE,STACKTOP,STACK_MAX,DYNAMIC_BASE,DYNAMICTOP_PTR;function demangle(n){var e=Module.___cxa_demangle||Module.__cxa_demangle;if(e){try{var r=n.substr(1),t=lengthBytesUTF8(r)+1,i=_malloc(t);stringToUTF8(r,i,t);var u=_malloc(4),o=e(i,0,0,u);if(0===getValue(u,"i32")&&o)return Pointer_stringify(o)}catch(n){}finally{i&&_free(i),u&&_free(u),o&&_free(o)}return n}return Runtime.warnOnce("warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling"),n}function demangleAll(n){return n.replace(/__Z[\\w\\d_]+/g,(function(n){var e=demangle(n);return n===e?n:n+" ["+e+"]"}))}function jsStackTrace(){var n=new Error;if(!n.stack){try{throw new Error(0)}catch(e){n=e}if(!n.stack)return"(no stack trace available)"}return n.stack.toString()}function stackTrace(){var n=jsStackTrace();return Module.extraStackTrace&&(n+="\\n"+Module.extraStackTrace()),demangleAll(n)}function updateGlobalBufferViews(){Module.HEAP8=HEAP8=new Int8Array(buffer),Module.HEAP16=HEAP16=new Int16Array(buffer),Module.HEAP32=HEAP32=new Int32Array(buffer),Module.HEAPU8=HEAPU8=new Uint8Array(buffer),Module.HEAPU16=HEAPU16=new Uint16Array(buffer),Module.HEAPU32=HEAPU32=new Uint32Array(buffer),Module.HEAPF32=HEAPF32=new Float32Array(buffer),Module.HEAPF64=HEAPF64=new Float64Array(buffer)}function abortOnCannotGrowMemory(){abort("Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value "+TOTAL_MEMORY+", (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ")}function enlargeMemory(){abortOnCannotGrowMemory()}Module.stackTrace=stackTrace,STATIC_BASE=STATICTOP=STACK_BASE=STACKTOP=STACK_MAX=DYNAMIC_BASE=DYNAMICTOP_PTR=0,staticSealed=!1;var TOTAL_STACK=Module.TOTAL_STACK||5242880,TOTAL_MEMORY=Module.TOTAL_MEMORY||134217728;function getTotalMemory(){return TOTAL_MEMORY}if(TOTAL_MEMORY<TOTAL_STACK&&Module.printErr("TOTAL_MEMORY should be larger than TOTAL_STACK, was "+TOTAL_MEMORY+"! (TOTAL_STACK="+TOTAL_STACK+")"),buffer=Module.buffer?Module.buffer:new ArrayBuffer(TOTAL_MEMORY),updateGlobalBufferViews(),HEAP32[0]=1668509029,HEAP16[1]=25459,115!==HEAPU8[2]||99!==HEAPU8[3])throw"Runtime error: expected the system to be little-endian!";function callRuntimeCallbacks(n){for(;n.length>0;){var e=n.shift();if("function"!=typeof e){var r=e.func;"number"==typeof r?void 0===e.arg?Module.dynCall_v(r):Module.dynCall_vi(r,e.arg):r(void 0===e.arg?null:e.arg)}else e()}}Module.HEAP=HEAP,Module.buffer=buffer,Module.HEAP8=HEAP8,Module.HEAP16=HEAP16,Module.HEAP32=HEAP32,Module.HEAPU8=HEAPU8,Module.HEAPU16=HEAPU16,Module.HEAPU32=HEAPU32,Module.HEAPF32=HEAPF32,Module.HEAPF64=HEAPF64;var __ATPRERUN__=[],__ATINIT__=[],__ATMAIN__=[],__ATEXIT__=[],__ATPOSTRUN__=[],runtimeInitialized=!1,runtimeExited=!1;function preRun(){if(Module.preRun)for("function"==typeof Module.preRun&&(Module.preRun=[Module.preRun]);Module.preRun.length;)addOnPreRun(Module.preRun.shift());callRuntimeCallbacks(__ATPRERUN__)}function ensureInitRuntime(){runtimeInitialized||(runtimeInitialized=!0,callRuntimeCallbacks(__ATINIT__))}function preMain(){callRuntimeCallbacks(__ATMAIN__)}function exitRuntime(){callRuntimeCallbacks(__ATEXIT__),runtimeExited=!0}function postRun(){if(Module.postRun)for("function"==typeof Module.postRun&&(Module.postRun=[Module.postRun]);Module.postRun.length;)addOnPostRun(Module.postRun.shift());callRuntimeCallbacks(__ATPOSTRUN__)}function addOnPreRun(n){__ATPRERUN__.unshift(n)}function addOnInit(n){__ATINIT__.unshift(n)}function addOnPreMain(n){__ATMAIN__.unshift(n)}function addOnExit(n){__ATEXIT__.unshift(n)}function addOnPostRun(n){__ATPOSTRUN__.unshift(n)}function intArrayFromString(n,e,r){var t=r>0?r:lengthBytesUTF8(n)+1,i=new Array(t),u=stringToUTF8Array(n,i,0,i.length);return e&&(i.length=u),i}function intArrayToString(n){for(var e=[],r=0;r<n.length;r++){var t=n[r];t>255&&(t&=255),e.push(String.fromCharCode(t))}return e.join("")}function writeStringToMemory(n,e,r){var t,i;Runtime.warnOnce("writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!"),r&&(i=e+lengthBytesUTF8(n),t=HEAP8[i]),stringToUTF8(n,e,1/0),r&&(HEAP8[i]=t)}function writeArrayToMemory(n,e){HEAP8.set(n,e)}function writeAsciiToMemory(n,e,r){for(var t=0;t<n.length;++t)HEAP8[e++>>0]=n.charCodeAt(t);r||(HEAP8[e>>0]=0)}if(Module.addOnPreRun=addOnPreRun,Module.addOnInit=addOnInit,Module.addOnPreMain=addOnPreMain,Module.addOnExit=addOnExit,Module.addOnPostRun=addOnPostRun,Module.intArrayFromString=intArrayFromString,Module.intArrayToString=intArrayToString,Module.writeStringToMemory=writeStringToMemory,Module.writeArrayToMemory=writeArrayToMemory,Module.writeAsciiToMemory=writeAsciiToMemory,Math.imul&&-5===Math.imul(4294967295,5)||(Math.imul=function(n,e){var r=65535&n,t=65535&e;return r*t+((n>>>16)*t+r*(e>>>16)<<16)|0}),Math.imul=Math.imul,!Math.fround){var froundBuffer=new Float32Array(1);Math.fround=function(n){return froundBuffer[0]=n,froundBuffer[0]}}Math.fround=Math.fround,Math.clz32||(Math.clz32=function(n){n>>>=0;for(var e=0;e<32;e++)if(n&1<<31-e)return e;return 32}),Math.clz32=Math.clz32,Math.trunc||(Math.trunc=function(n){return n<0?Math.ceil(n):Math.floor(n)}),Math.trunc=Math.trunc;var Math_abs=Math.abs,Math_cos=Math.cos,Math_sin=Math.sin,Math_tan=Math.tan,Math_acos=Math.acos,Math_asin=Math.asin,Math_atan=Math.atan,Math_atan2=Math.atan2,Math_exp=Math.exp,Math_log=Math.log,Math_sqrt=Math.sqrt,Math_ceil=Math.ceil,Math_floor=Math.floor,Math_pow=Math.pow,Math_imul=Math.imul,Math_fround=Math.fround,Math_round=Math.round,Math_min=Math.min,Math_clz32=Math.clz32,Math_trunc=Math.trunc,runDependencies=0,runDependencyWatcher=null,dependenciesFulfilled=null;function getUniqueRunDependency(n){return n}function addRunDependency(n){runDependencies++,Module.monitorRunDependencies&&Module.monitorRunDependencies(runDependencies)}function removeRunDependency(n){if(runDependencies--,Module.monitorRunDependencies&&Module.monitorRunDependencies(runDependencies),0==runDependencies&&(null!==runDependencyWatcher&&(clearInterval(runDependencyWatcher),runDependencyWatcher=null),dependenciesFulfilled)){var e=dependenciesFulfilled;dependenciesFulfilled=null,e()}}Module.addRunDependency=addRunDependency,Module.removeRunDependency=removeRunDependency,Module.preloadedImages={},Module.preloadedAudios={};var ASM_CONSTS=[function(n,e,r,t,i,u,o,a){return _nbind.callbackSignatureList[n].apply(this,arguments)}];function _emscripten_asm_const_iiiiiiii(n,e,r,t,i,u,o,a){return ASM_CONSTS[n](e,r,t,i,u,o,a)}function _emscripten_asm_const_iiiii(n,e,r,t,i){return ASM_CONSTS[n](e,r,t,i)}function _emscripten_asm_const_iiidddddd(n,e,r,t,i,u,o,a,f){return ASM_CONSTS[n](e,r,t,i,u,o,a,f)}function _emscripten_asm_const_iiididi(n,e,r,t,i,u,o){return ASM_CONSTS[n](e,r,t,i,u,o)}function _emscripten_asm_const_iiii(n,e,r,t){return ASM_CONSTS[n](e,r,t)}function _emscripten_asm_const_iiiid(n,e,r,t,i){return ASM_CONSTS[n](e,r,t,i)}function _emscripten_asm_const_iiiiii(n,e,r,t,i,u){return ASM_CONSTS[n](e,r,t,i,u)}STATIC_BASE=Runtime.GLOBAL_BASE,STATICTOP=STATIC_BASE+12800,__ATINIT__.push({func:function(){__GLOBAL__sub_I_Yoga_cpp()}},{func:function(){__GLOBAL__sub_I_nbind_cc()}},{func:function(){__GLOBAL__sub_I_common_cc()}},{func:function(){__GLOBAL__sub_I_Binding_cc()}}),allocatei8",ALLOC_NONE,Runtime.GLOBAL_BASE);var tempDoublePtr=STATICTOP;function _atexit(n,e){__ATEXIT__.unshift({func:n,arg:e})}function ___cxa_atexit(){return _atexit.apply(null,arguments)}function _abort(){Module.abort()}function __ZN8facebook4yoga14YGNodeToStringEPNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEP6YGNode14YGPrintOptionsj(){Module.printErr("missing function: _ZN8facebook4yoga14YGNodeToStringEPNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEP6YGNode14YGPrintOptionsj"),abort(-1)}function __decorate(n,e,r,t){var i,u=arguments.length,o=u<3?e:null===t?t=Object.getOwnPropertyDescriptor(e,r):t;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(n,e,r,t);else for(var a=n.length-1;a>=0;a--)(i=n[a])&&(o=(u<3?i(o):u>3?i(e,r,o):i(e,r))||o);return u>3&&o&&Object.defineProperty(e,r,o),o}function _defineHidden(n){return function(e,r){Object.defineProperty(e,r,{configurable:!1,enumerable:!1,value:n,writable:!0})}}STATICTOP+=16;var _nbind={};function __nbind_free_external(n){_nbind.externalList[n].dereference(n)}function __nbind_reference_external(n){_nbind.externalList[n].reference()}function _llvm_stackrestore(n){var e=_llvm_stacksave,r=e.LLVM_SAVEDSTACKS[n];e.LLVM_SAVEDSTACKS.splice(n,1),Runtime.stackRestore(r)}function __nbind_register_pool(n,e,r,t){_nbind.Pool.pageSize=n,_nbind.Pool.usedPtr=e/4,_nbind.Pool.rootPtr=r,_nbind.Pool.pagePtr=t/4,HEAP32[e/4]=16909060,1==HEAP8[e]&&(_nbind.bigEndian=!0),HEAP32[e/4]=0,_nbind.makeTypeKindTbl=((i={})[1024]=_nbind.PrimitiveType,i[64]=_nbind.Int64Type,i[2048]=_nbind.BindClass,i[3072]=_nbind.BindClassPtr,i[4096]=_nbind.SharedClassPtr,i[5120]=_nbind.ArrayType,i[6144]=_nbind.ArrayType,i[7168]=_nbind.CStringType,i[9216]=_nbind.CallbackType,i[10240]=_nbind.BindType,i),_nbind.makeTypeNameTbl={Buffer:_nbind.BufferType,External:_nbind.ExternalType,Int64:_nbind.Int64Type,_nbind_new:_nbind.CreateValueType,bool:_nbind.BooleanType,"cbFunction &":_nbind.CallbackType,"const cbFunction &":_nbind.CallbackType,"const std::string &":_nbind.StringType,"std::string":_nbind.StringType},Module.toggleLightGC=_nbind.toggleLightGC,_nbind.callUpcast=Module.dynCall_ii;var i,u=_nbind.makeType(_nbind.constructType,{flags:2048,id:0,name:""});u.proto=Module,_nbind.BindClass.list.push(u)}function _emscripten_set_main_loop_timing(n,e){if(Browser.mainLoop.timingMode=n,Browser.mainLoop.timingValue=e,!Browser.mainLoop.func)return 1;if(0==n)Browser.mainLoop.scheduler=function(){var n=0|Math.max(0,Browser.mainLoop.tickStartTime+e-_emscripten_get_now());setTimeout(Browser.mainLoop.runner,n)},Browser.mainLoop.method="timeout";else if(1==n)Browser.mainLoop.scheduler=function(){Browser.requestAnimationFrame(Browser.mainLoop.runner)},Browser.mainLoop.method="rAF";else if(2==n){if(!window.setImmediate){var r=[];window.addEventListener("message",(function(n){n.source===window&&"setimmediate"===n.data&&(n.stopPropagation(),r.shift()())}),!0),window.setImmediate=function(n){r.push(n),ENVIRONMENT_IS_WORKER?(void 0===Module.setImmediates&&(Module.setImmediates=[]),Module.setImmediates.push(n),window.postMessage({target:"setimmediate"})):window.postMessage("setimmediate","*")}}Browser.mainLoop.scheduler=function(){window.setImmediate(Browser.mainLoop.runner)},Browser.mainLoop.method="immediate"}return 0}function _emscripten_get_now(){abort()}function _emscripten_set_main_loop(n,e,r,t,i){var u;Module.noExitRuntime=!0,assert(!Browser.mainLoop.func,"emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters."),Browser.mainLoop.func=n,Browser.mainLoop.arg=t,u=void 0!==t?function(){Module.dynCall_vi(n,t)}:function(){Module.dynCall_v(n)};var o=Browser.mainLoop.currentlyRunningMainloop;if(Browser.mainLoop.runner=function(){if(!ABORT)if(Browser.mainLoop.queue.length>0){var n=Date.now(),e=Browser.mainLoop.queue.shift();if(e.func(e.arg),Browser.mainLoop.remainingBlockers){var r=Browser.mainLoop.remainingBlockers,t=r%1==0?r-1:Math.floor(r);e.counted?Browser.mainLoop.remainingBlockers=t:(t+=.5,Browser.mainLoop.remainingBlockers=(8*r+t)/9)}if(console.log('main loop blocker "'+e.name+'" took '+(Date.now()-n)+" ms"),Browser.mainLoop.updateStatus(),o<Browser.mainLoop.currentlyRunningMainloop)return;setTimeout(Browser.mainLoop.runner,0)}else o<Browser.mainLoop.currentlyRunningMainloop||(Browser.mainLoop.currentFrameNumber=Browser.mainLoop.currentFrameNumber+1|0,1==Browser.mainLoop.timingMode&&Browser.mainLoop.timingValue>1&&Browser.mainLoop.currentFrameNumber%Browser.mainLoop.timingValue!=0?Browser.mainLoop.scheduler():(0==Browser.mainLoop.timingMode&&(Browser.mainLoop.tickStartTime=_emscripten_get_now()),"timeout"===Browser.mainLoop.method&&Module.ctx&&(Module.printErr("Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!"),Browser.mainLoop.method=""),Browser.mainLoop.runIter(u),o<Browser.mainLoop.currentlyRunningMainloop||("object"==typeof SDL&&SDL.audio&&SDL.audio.queueNewAudioData&&SDL.audio.queueNewAudioData(),Browser.mainLoop.scheduler())))},i||(e&&e>0?_emscripten_set_main_loop_timing(0,1e3/e):_emscripten_set_main_loop_timing(1,1),Browser.mainLoop.scheduler()),r)throw"SimulateInfiniteLoop"}var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function(){Browser.mainLoop.scheduler=null,Browser.mainLoop.currentlyRunningMainloop++},resume:function(){Browser.mainLoop.currentlyRunningMainloop++;var n=Browser.mainLoop.timingMode,e=Browser.mainLoop.timingValue,r=Browser.mainLoop.func;Browser.mainLoop.func=null,_emscripten_set_main_loop(r,0,!1,Browser.mainLoop.arg,!0),_emscripten_set_main_loop_timing(n,e),Browser.mainLoop.scheduler()},updateStatus:function(){if(Module.setStatus){var n=Module.statusMessage||"Please wait...",e=Browser.mainLoop.remainingBlockers,r=Browser.mainLoop.expectedBlockers;e?e<r?Module.setStatus(n+" ("+(r-e)+"/"+r+")"):Module.setStatus(n):Module.setStatus("")}},runIter:function(n){if(!ABORT){if(Module.preMainLoop)if(!1===Module.preMainLoop())return;try{n()}catch(n){if(n instanceof ExitStatus)return;throw n&&"object"==typeof n&&n.stack&&Module.printErr("exception thrown: "+[n,n.stack]),n}Module.postMainLoop&&Module.postMainLoop()}}},isFullscreen:!1,pointerLock:!1,moduleContextCreatedCallbacks:[],workers:[],init:function(){if(Module.preloadPlugins||(Module.preloadPlugins=[]),!Browser.initted){Browser.initted=!0;try{new Blob,Browser.hasBlobConstructor=!0}catch(n){Browser.hasBlobConstructor=!1,console.log("warning: no blob constructor, cannot create blobs with mimetypes")}Browser.BlobBuilder="undefined"!=typeof MozBlobBuilder?MozBlobBuilder:"undefined"!=typeof WebKitBlobBuilder?WebKitBlobBuilder:Browser.hasBlobConstructor?null:console.log("warning: no BlobBuilder"),Browser.URLObject="undefined"!=typeof window?window.URL?window.URL:window.webkitURL:void 0,Module.noImageDecoding||void 0!==Browser.URLObject||(console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available."),Module.noImageDecoding=!0);var n={canHandle:function(n){return!Module.noImageDecoding&&/\\.(jpg|jpeg|png|bmp)$/i.test(n)},handle:function(n,e,r,t){var i=null;if(Browser.hasBlobConstructor)try{(i=new Blob([n],{type:Browser.getMimetype(e)})).size!==n.length&&(i=new Blob([new Uint8Array(n).buffer],{type:Browser.getMimetype(e)}))}catch(n){Runtime.warnOnce("Blob constructor present but fails: "+n+"; falling back to blob builder")}if(!i){var u=new Browser.BlobBuilder;u.append(new Uint8Array(n).buffer),i=u.getBlob()}var o=Browser.URLObject.createObjectURL(i),a=new Image;a.onload=function(){assert(a.complete,"Image "+e+" could not be decoded");var t=document.createElement("canvas");t.width=a.width,t.height=a.height,t.getContext("2d").drawImage(a,0,0),Module.preloadedImages[e]=t,Browser.URLObject.revokeObjectURL(o),r&&r(n)},a.onerror=function(n){console.log("Image "+o+" could not be decoded"),t&&t()},a.src=o}};Module.preloadPlugins.push(n);var e={canHandle:function(n){return!Module.noAudioDecoding&&n.substr(-4)in{".ogg":1,".wav":1,".mp3":1}},handle:function(n,e,r,t){var i=!1;function u(t){i||(i=!0,Module.preloadedAudios[e]=t,r&&r(n))}function o(){i||(i=!0,Module.preloadedAudios[e]=new Audio,t&&t())}if(!Browser.hasBlobConstructor)return o();try{var a=new Blob([n],{type:Browser.getMimetype(e)})}catch(n){return o()}var f=Browser.URLObject.createObjectURL(a),c=new Audio;c.addEventListener("canplaythrough",(function(){u(c)}),!1),c.onerror=function(r){i||(console.log("warning: browser could not fully decode audio "+e+", trying slower base64 approach"),c.src="data:audio/x-"+e.substr(-3)+";base64,"+function(n){for(var e="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",r="",t=0,i=0,u=0;u<n.length;u++)for(t=t<<8|n[u],i+=8;i>=6;){var o=t>>i-6&63;i-=6,r+=e[o]}return 2==i?(r+=e[(3&t)<<4],r+="=="):4==i&&(r+=e[(15&t)<<2],r+="="),r}(n),u(c))},c.src=f,Browser.safeSetTimeout((function(){u(c)}),1e4)}};Module.preloadPlugins.push(e);var r=Module.canvas;r&&(r.requestPointerLock=r.requestPointerLock||r.mozRequestPointerLock||r.webkitRequestPointerLock||r.msRequestPointerLock||function(){},r.exitPointerLock=document.exitPointerLock||document.mozExitPointerLock||document.webkitExitPointerLock||document.msExitPointerLock||function(){},r.exitPointerLock=r.exitPointerLock.bind(document),document.addEventListener("pointerlockchange",t,!1),document.addEventListener("mozpointerlockchange",t,!1),document.addEventListener("webkitpointerlockchange",t,!1),document.addEventListener("mspointerlockchange",t,!1),Module.elementPointerLock&&r.addEventListener("click",(function(n){!Browser.pointerLock&&Module.canvas.requestPointerLock&&(Module.canvas.requestPointerLock(),n.preventDefault())}),!1))}function t(){Browser.pointerLock=document.pointerLockElement===Module.canvas||document.mozPointerLockElement===Module.canvas||document.webkitPointerLockElement===Module.canvas||document.msPointerLockElement===Module.canvas}},createContext:function(n,e,r,t){if(e&&Module.ctx&&n==Module.canvas)return Module.ctx;var i,u;if(e){var o={antialias:!1,alpha:!1};if(t)for(var a in t)o[a]=t[a];(u=GL.createContext(n,o))&&(i=GL.getContext(u).GLctx)}else i=n.getContext("2d");return i?(r&&(e||assert("undefined"==typeof GLctx,"cannot set in module if GLctx is used, but we are a non-GL context that would replace it"),Module.ctx=i,e&&GL.makeContextCurrent(u),Module.useWebGL=e,Browser.moduleContextCreatedCallbacks.forEach((function(n){n()})),Browser.init()),i):null},destroyContext:function(n,e,r){},fullscreenHandlersInstalled:!1,lockPointer:void 0,resizeCanvas:void 0,requestFullscreen:function(n,e,r){Browser.lockPointer=n,Browser.resizeCanvas=e,Browser.vrDevice=r,void 0===Browser.lockPointer&&(Browser.lockPointer=!0),void 0===Browser.resizeCanvas&&(Browser.resizeCanvas=!1),void 0===Browser.vrDevice&&(Browser.vrDevice=null);var t=Module.canvas;function i(){Browser.isFullscreen=!1;var n=t.parentNode;(document.fullscreenElement||document.mozFullScreenElement||document.msFullscreenElement||document.webkitFullscreenElement||document.webkitCurrentFullScreenElement)===n?(t.exitFullscreen=document.exitFullscreen||document.cancelFullScreen||document.mozCancelFullScreen||document.msExitFullscreen||document.webkitCancelFullScreen||function(){},t.exitFullscreen=t.exitFullscreen.bind(document),Browser.lockPointer&&t.requestPointerLock(),Browser.isFullscreen=!0,Browser.resizeCanvas&&Browser.setFullscreenCanvasSize()):(n.parentNode.insertBefore(t,n),n.parentNode.removeChild(n),Browser.resizeCanvas&&Browser.setWindowedCanvasSize()),Module.onFullScreen&&Module.onFullScreen(Browser.isFullscreen),Module.onFullscreen&&Module.onFullscreen(Browser.isFullscreen),Browser.updateCanvasDimensions(t)}Browser.fullscreenHandlersInstalled||(Browser.fullscreenHandlersInstalled=!0,document.addEventListener("fullscreenchange",i,!1),document.addEventListener("mozfullscreenchange",i,!1),document.addEventListener("webkitfullscreenchange",i,!1),document.addEventListener("MSFullscreenChange",i,!1));var u=document.createElement("div");t.parentNode.insertBefore(u,t),u.appendChild(t),u.requestFullscreen=u.requestFullscreen||u.mozRequestFullScreen||u.msRequestFullscreen||(u.webkitRequestFullscreen?function(){u.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT)}:null)||(u.webkitRequestFullScreen?function(){u.webkitRequestFullScreen(Element.ALLOW_KEYBOARD_INPUT)}:null),r?u.requestFullscreen({vrDisplay:r}):u.requestFullscreen()},requestFullScreen:function(n,e,r){return Module.printErr("Browser.requestFullScreen() is deprecated. Please call Browser.requestFullscreen instead."),Browser.requestFullScreen=function(n,e,r){return Browser.requestFullscreen(n,e,r)},Browser.requestFullscreen(n,e,r)},nextRAF:0,fakeRequestAnimationFrame:function(n){var e=Date.now();if(0===Browser.nextRAF)Browser.nextRAF=e+1e3/60;else for(;e+2>=Browser.nextRAF;)Browser.nextRAF+=1e3/60;var r=Math.max(Browser.nextRAF-e,0);setTimeout(n,r)},requestAnimationFrame:function(n){"undefined"==typeof window?Browser.fakeRequestAnimationFrame(n):(window.requestAnimationFrame||(window.requestAnimationFrame=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||window.msRequestAnimationFrame||window.oRequestAnimationFrame||Browser.fakeRequestAnimationFrame),window.requestAnimationFrame(n))},safeCallback:function(n){return function(){if(!ABORT)return n.apply(null,arguments)}},allowAsyncCallbacks:!0,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function(){Browser.allowAsyncCallbacks=!1},resumeAsyncCallbacks:function(){if(Browser.allowAsyncCallbacks=!0,Browser.queuedAsyncCallbacks.length>0){var n=Browser.queuedAsyncCallbacks;Browser.queuedAsyncCallbacks=[],n.forEach((function(n){n()}))}},safeRequestAnimationFrame:function(n){return Browser.requestAnimationFrame((function(){ABORT||(Browser.allowAsyncCallbacks?n():Browser.queuedAsyncCallbacks.push(n))}))},safeSetTimeout:function(n,e){return Module.noExitRuntime=!0,setTimeout((function(){ABORT||(Browser.allowAsyncCallbacks?n():Browser.queuedAsyncCallbacks.push(n))}),e)},safeSetInterval:function(n,e){return Module.noExitRuntime=!0,setInterval((function(){ABORT||Browser.allowAsyncCallbacks&&n()}),e)},getMimetype:function(n){return{jpg:"image/jpeg",jpeg:"image/jpeg",png:"image/png",bmp:"image/bmp",ogg:"audio/ogg",wav:"audio/wav",mp3:"audio/mpeg"}[n.substr(n.lastIndexOf(".")+1)]},getUserMedia:function(n){window.getUserMedia||(window.getUserMedia=navigator.getUserMedia||navigator.mozGetUserMedia),window.getUserMedia(n)},getMovementX:function(n){return n.movementX||n.mozMovementX||n.webkitMovementX||0},getMovementY:function(n){return n.movementY||n.mozMovementY||n.webkitMovementY||0},getMouseWheelDelta:function(n){var e=0;switch(n.type){case"DOMMouseScroll":e=n.detail;break;case"mousewheel":e=n.wheelDelta;break;case"wheel":e=n.deltaY;break;default:throw"unrecognized mouse wheel event: "+n.type}return e},mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function(n){if(Browser.pointerLock)"mousemove"!=n.type&&"mozMovementX"in n?Browser.mouseMovementX=Browser.mouseMovementY=0:(Browser.mouseMovementX=Browser.getMovementX(n),Browser.mouseMovementY=Browser.getMovementY(n)),"undefined"!=typeof SDL?(Browser.mouseX=SDL.mouseX+Browser.mouseMovementX,Browser.mouseY=SDL.mouseY+Browser.mouseMovementY):(Browser.mouseX+=Browser.mouseMovementX,Browser.mouseY+=Browser.mouseMovementY);else{var e=Module.canvas.getBoundingClientRect(),r=Module.canvas.width,t=Module.canvas.height,i=void 0!==window.scrollX?window.scrollX:window.pageXOffset,u=void 0!==window.scrollY?window.scrollY:window.pageYOffset;if("touchstart"===n.type||"touchend"===n.type||"touchmove"===n.type){var o=n.touch;if(void 0===o)return;var a=o.pageX-(i+e.left),f=o.pageY-(u+e.top),c={x:a*=r/e.width,y:f*=t/e.height};if("touchstart"===n.type)Browser.lastTouches[o.identifier]=c,Browser.touches[o.identifier]=c;else if("touchend"===n.type||"touchmove"===n.type){var l=Browser.touches[o.identifier];l||(l=c),Browser.lastTouches[o.identifier]=l,Browser.touches[o.identifier]=c}return}var s=n.pageX-(i+e.left),d=n.pageY-(u+e.top);s*=r/e.width,d*=t/e.height,Browser.mouseMovementX=s-Browser.mouseX,Browser.mouseMovementY=d-Browser.mouseY,Browser.mouseX=s,Browser.mouseY=d}},asyncLoad:function(n,e,r,t){var i=t?"":getUniqueRunDependency("al "+n);Module.readAsync(n,(function(r){assert(r,'Loading data file "'+n+'" failed (no arrayBuffer).'),e(new Uint8Array(r)),i&&removeRunDependency(i)}),(function(e){if(!r)throw'Loading data file "'+n+'" failed.';r()})),i&&addRunDependency(i)},resizeListeners:[],updateResizeListeners:function(){var n=Module.canvas;Browser.resizeListeners.forEach((function(e){e(n.width,n.height)}))},setCanvasSize:function(n,e,r){var t=Module.canvas;Browser.updateCanvasDimensions(t,n,e),r||Browser.updateResizeListeners()},windowedWidth:0,windowedHeight:0,setFullscreenCanvasSize:function(){if("undefined"!=typeof SDL){var n=HEAPU32[SDL.screen+0*Runtime.QUANTUM_SIZE>>2];n|=8388608,HEAP32[SDL.screen+0*Runtime.QUANTUM_SIZE>>2]=n}Browser.updateResizeListeners()},setWindowedCanvasSize:function(){if("undefined"!=typeof SDL){var n=HEAPU32[SDL.screen+0*Runtime.QUANTUM_SIZE>>2];n&=-8388609,HEAP32[SDL.screen+0*Runtime.QUANTUM_SIZE>>2]=n}Browser.updateResizeListeners()},updateCanvasDimensions:function(n,e,r){e&&r?(n.widthNative=e,n.heightNative=r):(e=n.widthNative,r=n.heightNative);var t=e,i=r;if(Module.forcedAspectRatio&&Module.forcedAspectRatio>0&&(t/i<Module.forcedAspectRatio?t=Math.round(i*Module.forcedAspectRatio):i=Math.round(t/Module.forcedAspectRatio)),(document.fullscreenElement||document.mozFullScreenElement||document.msFullscreenElement||document.webkitFullscreenElement||document.webkitCurrentFullScreenElement)===n.parentNode&&"undefined"!=typeof screen){var u=Math.min(screen.width/t,screen.height/i);t=Math.round(t*u),i=Math.round(i*u)}Browser.resizeCanvas?(n.width!=t&&(n.width=t),n.height!=i&&(n.height=i),void 0!==n.style&&(n.style.removeProperty("width"),n.style.removeProperty("height"))):(n.width!=e&&(n.width=e),n.height!=r&&(n.height=r),void 0!==n.style&&(t!=e||i!=r?(n.style.setProperty("width",t+"px","important"),n.style.setProperty("height",i+"px","important")):(n.style.removeProperty("width"),n.style.removeProperty("height"))))},wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function(){var n=Browser.nextWgetRequestHandle;return Browser.nextWgetRequestHandle++,n}},SYSCALLS={varargs:0,get:function(n){return SYSCALLS.varargs+=4,HEAP32[SYSCALLS.varargs-4>>2]},getStr:function(){return Pointer_stringify(SYSCALLS.get())},get64:function(){var n=SYSCALLS.get(),e=SYSCALLS.get();return assert(n>=0?0===e:-1===e),n},getZero:function(){assert(0===SYSCALLS.get())}};function ___syscall6(n,e){SYSCALLS.varargs=e;try{var r=SYSCALLS.getStreamFromFD();return FS.close(r),0}catch(n){return"undefined"!=typeof FS&&n instanceof FS.ErrnoError||abort(n),-n.errno}}function ___syscall54(n,e){SYSCALLS.varargs=e;try{return 0}catch(n){return"undefined"!=typeof FS&&n instanceof FS.ErrnoError||abort(n),-n.errno}}function _typeModule(n){var e=[[0,1,"X"],[1,1,"const X"],[128,1,"X *"],[256,1,"X &"],[384,1,"X &&"],[512,1,"std::shared_ptr<X>"],[640,1,"std::unique_ptr<X>"],[5120,1,"std::vector<X>"],[6144,2,"std::array<X, Y>"],[9216,-1,"std::function<X (Y)>"]];function r(n,e,r,t,i,u){if(1==e){var o=896&t;128!=o&&256!=o&&384!=o||(n="X const")}return(u?r.replace("X",n).replace("Y",i):n.replace("X",r).replace("Y",i)).replace(/([*&]) (?=[*&])/g,"$1")}function t(n,e){var r=e.flags,t=896&r,i=15360&r;return e.name||1024!=i||(1==e.ptrSize?e.name=(16&r?"":(8&r?"un":"")+"signed ")+"char":e.name=(8&r?"u":"")+(32&r?"float":"int")+8*e.ptrSize+"_t"),8!=e.ptrSize||32&r||(i=64),2048==i&&(512==t||640==t?i=4096:t&&(i=3072)),n(i,e)}var i={Type:function(){function n(n){this.id=n.id,this.name=n.name,this.flags=n.flags,this.spec=n}return n.prototype.toString=function(){return this.name},n}(),getComplexType:function n(i,u,o,a,f,c,l,s){void 0===c&&(c="X"),void 0===s&&(s=1);var d=o(i);if(d)return d;var _,v=a(i),p=v.placeholderFlag,m=e[p];l&&m&&(c=r(l[2],l[0],c,m[0],"?",!0)),0==p&&(_="Unbound"),p>=10&&(_="Corrupt"),s>20&&(_="Deeply nested"),_&&function(n,e,r,t,i){throw new Error(n+" type "+r.replace("X",e+"?")+(t?" with flag "+t:"")+" in "+i)}(_,i,c,p,f||"?");var b,h=n(v.paramList[0],u,o,a,f,c,m,s+1),y={flags:m[0],id:i,name:"",paramList:[h]},w=[],M="?";switch(v.placeholderFlag){case 1:b=h.spec;break;case 2:if(1024==(15360&h.flags)&&1==h.spec.ptrSize){y.flags=7168;break}case 3:case 6:case 5:b=h.spec,h.flags;break;case 8:M=""+v.paramList[1],y.paramList.push(v.paramList[1]);break;case 9:for(var k=0,g=v.paramList[1];k<g.length;k++){var T=n(g[k],u,o,a,f,c,m,s+1);w.push(T.name),y.paramList.push(T)}M=w.join(", ")}if(y.name=r(m[2],m[0],h.name,h.flags,M),b){for(var A=0,S=Object.keys(b);A<S.length;A++){var E=S[A];y[E]=y[E]||b[E]}y.flags|=b.flags}return t(u,y)},makeType:t,structureList:e};return n.output=i,n.output||i}function __nbind_register_type(n,e){var r={flags:10240,id:n,name:_nbind.readAsciiString(e)};_nbind.makeType(_nbind.constructType,r)}function __nbind_register_callback_signature(n,e){var r=_nbind.readTypeIdList(n,e),t=_nbind.callbackSignatureList.length;return _nbind.callbackSignatureList[t]=_nbind.makeJSCaller(r),t}function __extends(n,e){for(var r in e)e.hasOwnProperty(r)&&(n[r]=e[r]);function t(){this.constructor=n}t.prototype=e.prototype,n.prototype=new t}function __nbind_register_class(n,e,r,t,i,u,o){var a=_nbind.readAsciiString(o),f=_nbind.readPolicyList(e),c=HEAPU32.subarray(n/4,n/4+2),l={flags:2048|(f.Value?2:0),id:c[0],name:a},s=_nbind.makeType(_nbind.constructType,l);s.ptrType=_nbind.getComplexType(c[1],_nbind.constructType,_nbind.getType,_nbind.queryType),s.destroy=_nbind.makeMethodCaller(s.ptrType,{boundID:l.id,flags:0,name:"destroy",num:0,ptr:u,title:s.name+".free",typeList:["void","uint32_t","uint32_t"]}),i&&(s.superIdList=Array.prototype.slice.call(HEAPU32.subarray(r/4,r/4+i)),s.upcastList=Array.prototype.slice.call(HEAPU32.subarray(t/4,t/4+i))),Module[s.name]=s.makeBound(f),_nbind.BindClass.list.push(s)}function _removeAccessorPrefix(n){return n.replace(/^[Gg]et_?([A-Z]?([A-Z]?))/,(function(n,e,r){return r?e:e.toLowerCase()}))}function __nbind_register_function(n,e,r,t,i,u,o,a,f,c){var l,s=_nbind.getType(n),d=_nbind.readPolicyList(e),_=_nbind.readTypeIdList(r,t);if(5==o)l=[{direct:i,name:"__nbindConstructor",ptr:0,title:s.name+" constructor",typeList:["uint32_t"].concat(_.slice(1))},{direct:u,name:"__nbindValueConstructor",ptr:0,title:s.name+" value constructor",typeList:["void","uint32_t"].concat(_.slice(1))}];else{var v=_nbind.readAsciiString(a),p=(s.name&&s.name+".")+v;3!=o&&4!=o||(v=_removeAccessorPrefix(v)),l=[{boundID:n,direct:u,name:v,ptr:i,title:p,typeList:_}]}for(var m=0,b=l;m<b.length;m++){var h=b[m];h.signatureType=o,h.policyTbl=d,h.num=f,h.flags=c,s.addMethod(h)}}function _nbind_value(n,e){_nbind.typeNameTbl[n]||_nbind.throwError("Unknown value type "+n),Module.NBind.bind_value(n,e),_defineHidden(_nbind.typeNameTbl[n].proto.prototype.__nbindValueConstructor)(e.prototype,"__nbindValueConstructor")}function __nbind_get_value_object(n,e){var r=_nbind.popValue(n);if(!r.fromJS)throw new Error("Object "+r+" has no fromJS function");r.fromJS((function(){r.__nbindValueConstructor.apply(this,Array.prototype.concat.apply([e],arguments))}))}function _emscripten_memcpy_big(n,e,r){return HEAPU8.set(HEAPU8.subarray(e,e+r),n),n}function __nbind_register_primitive(n,e,r){var t={flags:1024|r,id:n,ptrSize:e};_nbind.makeType(_nbind.constructType,t)}Module._nbind_value=_nbind_value;var cttz_i8=allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0],"i8",ALLOC_STATIC);function ___setErrNo(n){return Module.___errno_location&&(HEAP32[Module.___errno_location()>>2]=n),n}function _llvm_stacksave(){var n=_llvm_stacksave;return n.LLVM_SAVEDSTACKS||(n.LLVM_SAVEDSTACKS=[]),n.LLVM_SAVEDSTACKS.push(Runtime.stackSave()),n.LLVM_SAVEDSTACKS.length-1}function ___syscall140(n,e){SYSCALLS.varargs=e;try{var r=SYSCALLS.getStreamFromFD(),t=(SYSCALLS.get(),SYSCALLS.get()),i=SYSCALLS.get(),u=SYSCALLS.get(),o=t;return FS.llseek(r,o,u),HEAP32[i>>2]=r.position,r.getdents&&0===o&&0===u&&(r.getdents=null),0}catch(n){return"undefined"!=typeof FS&&n instanceof FS.ErrnoError||abort(n),-n.errno}}function ___syscall146(n,e){SYSCALLS.varargs=e;try{var r=SYSCALLS.get(),t=SYSCALLS.get(),i=SYSCALLS.get(),u=0;___syscall146.buffer||(___syscall146.buffers=[null,[],[]],___syscall146.printChar=function(n,e){var r=___syscall146.buffers[n];assert(r),0===e||10===e?((1===n?Module.print:Module.printErr)(UTF8ArrayToString(r,0)),r.length=0):r.push(e)});for(var o=0;o<i;o++){for(var a=HEAP32[t+8*o>>2],f=HEAP32[t+(8*o+4)>>2],c=0;c<f;c++)___syscall146.printChar(r,HEAPU8[a+c]);u+=f}return u}catch(n){return"undefined"!=typeof FS&&n instanceof FS.ErrnoError||abort(n),-n.errno}}function __nbind_finish(){for(var n=0,e=_nbind.BindClass.list;n<e.length;n++){e[n].finish()}}var ___dso_handle=STATICTOP;function invoke_viiiii(n,e,r,t,i,u){try{Module.dynCall_viiiii(n,e,r,t,i,u)}catch(n){if("number"!=typeof n&&"longjmp"!==n)throw n;Module.setThrew(1,0)}}function invoke_vif(n,e,r){try{Module.dynCall_vif(n,e,r)}catch(n){if("number"!=typeof n&&"longjmp"!==n)throw n;Module.setThrew(1,0)}}function invoke_vid(n,e,r){try{Module.dynCall_vid(n,e,r)}catch(n){if("number"!=typeof n&&"longjmp"!==n)throw n;Module.setThrew(1,0)}}function invoke_fiff(n,e,r,t){try{return Module.dynCall_fiff(n,e,r,t)}catch(n){if("number"!=typeof n&&"longjmp"!==n)throw n;Module.setThrew(1,0)}}function invoke_vi(n,e){try{Module.dynCall_vi(n,e)}catch(n){if("number"!=typeof n&&"longjmp"!==n)throw n;Module.setThrew(1,0)}}function invoke_vii(n,e,r){try{Module.dynCall_vii(n,e,r)}catch(n){if("number"!=typeof n&&"longjmp"!==n)throw n;Module.setThrew(1,0)}}function invoke_ii(n,e){try{return Module.dynCall_ii(n,e)}catch(n){if("number"!=typeof n&&"longjmp"!==n)throw n;Module.setThrew(1,0)}}function invoke_viddi(n,e,r,t,i){try{Module.dynCall_viddi(n,e,r,t,i)}catch(n){if("number"!=typeof n&&"longjmp"!==n)throw n;Module.setThrew(1,0)}}function invoke_vidd(n,e,r,t){try{Module.dynCall_vidd(n,e,r,t)}catch(n){if("number"!=typeof n&&"longjmp"!==n)throw n;Module.setThrew(1,0)}}function invoke_iiii(n,e,r,t){try{return Module.dynCall_iiii(n,e,r,t)}catch(n){if("number"!=typeof n&&"longjmp"!==n)throw n;Module.setThrew(1,0)}}function invoke_diii(n,e,r,t){try{return Module.dynCall_diii(n,e,r,t)}catch(n){if("number"!=typeof n&&"longjmp"!==n)throw n;Module.setThrew(1,0)}}function invoke_di(n,e){try{return Module.dynCall_di(n,e)}catch(n){if("number"!=typeof n&&"longjmp"!==n)throw n;Module.setThrew(1,0)}}function invoke_iid(n,e,r){try{return Module.dynCall_iid(n,e,r)}catch(n){if("number"!=typeof n&&"longjmp"!==n)throw n;Module.setThrew(1,0)}}function invoke_iii(n,e,r){try{return Module.dynCall_iii(n,e,r)}catch(n){if("number"!=typeof n&&"longjmp"!==n)throw n;Module.setThrew(1,0)}}function invoke_viiddi(n,e,r,t,i,u){try{Module.dynCall_viiddi(n,e,r,t,i,u)}catch(n){if("number"!=typeof n&&"longjmp"!==n)throw n;Module.setThrew(1,0)}}function invoke_viiiiii(n,e,r,t,i,u,o){try{Module.dynCall_viiiiii(n,e,r,t,i,u,o)}catch(n){if("number"!=typeof n&&"longjmp"!==n)throw n;Module.setThrew(1,0)}}function invoke_dii(n,e,r){try{return Module.dynCall_dii(n,e,r)}catch(n){if("number"!=typeof n&&"longjmp"!==n)throw n;Module.setThrew(1,0)}}function invoke_i(n){try{return Module.dynCall_i(n)}catch(n){if("number"!=typeof n&&"longjmp"!==n)throw n;Module.setThrew(1,0)}}function invoke_iiiiii(n,e,r,t,i,u){try{return Module.dynCall_iiiiii(n,e,r,t,i,u)}catch(n){if("number"!=typeof n&&"longjmp"!==n)throw n;Module.setThrew(1,0)}}function invoke_viiid(n,e,r,t,i){try{Module.dynCall_viiid(n,e,r,t,i)}catch(n){if("number"!=typeof n&&"longjmp"!==n)throw n;Module.setThrew(1,0)}}function invoke_viififi(n,e,r,t,i,u,o){try{Module.dynCall_viififi(n,e,r,t,i,u,o)}catch(n){if("number"!=typeof n&&"longjmp"!==n)throw n;Module.setThrew(1,0)}}function invoke_viii(n,e,r,t){try{Module.dynCall_viii(n,e,r,t)}catch(n){if("number"!=typeof n&&"longjmp"!==n)throw n;Module.setThrew(1,0)}}function invoke_v(n){try{Module.dynCall_v(n)}catch(n){if("number"!=typeof n&&"longjmp"!==n)throw n;Module.setThrew(1,0)}}function invoke_viid(n,e,r,t){try{Module.dynCall_viid(n,e,r,t)}catch(n){if("number"!=typeof n&&"longjmp"!==n)throw n;Module.setThrew(1,0)}}function invoke_idd(n,e,r){try{return Module.dynCall_idd(n,e,r)}catch(n){if("number"!=typeof n&&"longjmp"!==n)throw n;Module.setThrew(1,0)}}function invoke_viiii(n,e,r,t,i){try{Module.dynCall_viiii(n,e,r,t,i)}catch(n){if("number"!=typeof n&&"longjmp"!==n)throw n;Module.setThrew(1,0)}}STATICTOP+=16,function(_nbind){var typeIdTbl={};_nbind.typeNameTbl={};var Pool=function(){function n(){}return n.lalloc=function(e){e=e+7&-8;var r=HEAPU32[n.usedPtr];return e>n.pageSize/2||e>n.pageSize-r?_nbind.typeNameTbl.NBind.proto.lalloc(e):(HEAPU32[n.usedPtr]=r+e,n.rootPtr+r)},n.lreset=function(e,r){HEAPU32[n.pagePtr]?_nbind.typeNameTbl.NBind.proto.lreset(e,r):HEAPU32[n.usedPtr]=e},n}();function constructType(n,e){var r=new(10240==n?_nbind.makeTypeNameTbl[e.name]||_nbind.BindType:_nbind.makeTypeKindTbl[n])(e);return typeIdTbl[e.id]=r,_nbind.typeNameTbl[e.name]=r,r}function getType(n){return typeIdTbl[n]}function queryType(n){var e=HEAPU8[n],r=_nbind.structureList[e][1];n/=4,r<0&&(++n,r=HEAPU32[n]+1);var t=Array.prototype.slice.call(HEAPU32.subarray(n+1,n+1+r));return 9==e&&(t=[t[0],t.slice(1)]),{paramList:t,placeholderFlag:e}}function getTypes(n,e){return n.map((function(n){return"number"==typeof n?_nbind.getComplexType(n,constructType,getType,queryType,e):_nbind.typeNameTbl[n]}))}function readTypeIdList(n,e){return Array.prototype.slice.call(HEAPU32,n/4,n/4+e)}function readAsciiString(n){for(var e=n;HEAPU8[e++];);return String.fromCharCode.apply("",HEAPU8.subarray(n,e-1))}function readPolicyList(n){var e={};if(n)for(;;){var r=HEAPU32[n/4];if(!r)break;e[readAsciiString(r)]=!0,n+=4}return e}function getDynCall(n,e){var r={float32_t:"d",float64_t:"d",int64_t:"d",uint64_t:"d",void:"v"},t=n.map((function(n){return r[n.name]||"i"})).join(""),i=Module["dynCall_"+t];if(!i)throw new Error("dynCall_"+t+" not found for "+e+"("+n.map((function(n){return n.name})).join(", ")+")");return i}function addMethod(n,e,r,t){var i=n[e];n.hasOwnProperty(e)&&i?((i.arity||0===i.arity)&&(i=_nbind.makeOverloader(i,i.arity),n[e]=i),i.addMethod(r,t)):(r.arity=t,n[e]=r)}function throwError(n){throw new Error(n)}_nbind.Pool=Pool,_nbind.constructType=constructType,_nbind.getType=getType,_nbind.queryType=queryType,_nbind.getTypes=getTypes,_nbind.readTypeIdList=readTypeIdList,_nbind.readAsciiString=readAsciiString,_nbind.readPolicyList=readPolicyList,_nbind.getDynCall=getDynCall,_nbind.addMethod=addMethod,_nbind.throwError=throwError,_nbind.bigEndian=!1;var _a=_typeModule(_typeModule);_nbind.Type=_a.Type,_nbind.makeType=_a.makeType,_nbind.getComplexType=_a.getComplexType,_nbind.structureList=_a.structureList;var BindType=function(n){function e(){var e=null!==n&&n.apply(this,arguments)||this;return e.heap=HEAPU32,e.ptrSize=4,e}return __extends(e,n),e.prototype.needsWireRead=function(n){return!!this.wireRead||!!this.makeWireRead},e.prototype.needsWireWrite=function(n){return!!this.wireWrite||!!this.makeWireWrite},e}(_nbind.Type);_nbind.BindType=BindType;var PrimitiveType=function(n){function e(e){var r=n.call(this,e)||this,t=32&e.flags?{32:HEAPF32,64:HEAPF64}:8&e.flags?{8:HEAPU8,16:HEAPU16,32:HEAPU32}:{8:HEAP8,16:HEAP16,32:HEAP32};return r.heap=t[8*e.ptrSize],r.ptrSize=e.ptrSize,r}return __extends(e,n),e.prototype.needsWireWrite=function(n){return!!n&&!!n.Strict},e.prototype.makeWireWrite=function(n,e){return e&&e.Strict&&function(n){if("number"==typeof n)return n;throw new Error("Type mismatch")}},e}(BindType);function pushCString(n,e){if(null==n){if(e&&e.Nullable)return 0;throw new Error("Type mismatch")}if(e&&e.Strict){if("string"!=typeof n)throw new Error("Type mismatch")}else n=n.toString();var r=Module.lengthBytesUTF8(n)+1,t=_nbind.Pool.lalloc(r);return Module.stringToUTF8Array(n,HEAPU8,t,r),t}function popCString(n){return 0===n?null:Module.Pointer_stringify(n)}_nbind.PrimitiveType=PrimitiveType,_nbind.pushCString=pushCString,_nbind.popCString=popCString;var CStringType=function(n){function e(){var e=null!==n&&n.apply(this,arguments)||this;return e.wireRead=popCString,e.wireWrite=pushCString,e.readResources=[_nbind.resources.pool],e.writeResources=[_nbind.resources.pool],e}return __extends(e,n),e.prototype.makeWireWrite=function(n,e){return function(n){return pushCString(n,e)}},e}(BindType);_nbind.CStringType=CStringType;var BooleanType=function(n){function e(){var e=null!==n&&n.apply(this,arguments)||this;return e.wireRead=function(n){return!!n},e}return __extends(e,n),e.prototype.needsWireWrite=function(n){return!!n&&!!n.Strict},e.prototype.makeWireRead=function(n){return"!!("+n+")"},e.prototype.makeWireWrite=function(n,e){return e&&e.Strict&&function(n){if("boolean"==typeof n)return n;throw new Error("Type mismatch")}||n},e}(BindType);_nbind.BooleanType=BooleanType;var Wrapper=function(){function n(){}return n.prototype.persist=function(){this.__nbindState|=1},n}();function makeBound(n,e){var r=function(n){function r(e,t,i,u){var o=n.call(this)||this;if(!(o instanceof r))return new(Function.prototype.bind.apply(r,Array.prototype.concat.apply([null],arguments)));var a=t,f=i,c=u;if(e!==_nbind.ptrMarker){var l=o.__nbindConstructor.apply(o,arguments);a=4608,c=HEAPU32[l/4],f=HEAPU32[l/4+1]}var s={configurable:!0,enumerable:!1,value:null,writable:!1},d={__nbindFlags:a,__nbindPtr:f};c&&(d.__nbindShared=c,_nbind.mark(o));for(var _=0,v=Object.keys(d);_<v.length;_++){var p=v[_];s.value=d[p],Object.defineProperty(o,p,s)}return _defineHidden(0)(o,"__nbindState"),o}return __extends(r,n),r.prototype.free=function(){e.destroy.call(this,this.__nbindShared,this.__nbindFlags),this.__nbindState|=2,disableMember(this,"__nbindShared"),disableMember(this,"__nbindPtr")},r}(Wrapper);return __decorate([_defineHidden()],r.prototype,"__nbindConstructor",void 0),__decorate([_defineHidden()],r.prototype,"__nbindValueConstructor",void 0),__decorate([_defineHidden(n)],r.prototype,"__nbindPolicies",void 0),r}function disableMember(n,e){function r(){throw new Error("Accessing deleted object")}Object.defineProperty(n,e,{configurable:!1,enumerable:!1,get:r,set:r})}_nbind.Wrapper=Wrapper,_nbind.makeBound=makeBound,_nbind.ptrMarker={};var BindClass=function(n){function e(e){var r=n.call(this,e)||this;return r.wireRead=function(n){return _nbind.popValue(n,r.ptrType)},r.wireWrite=function(n){return pushPointer(n,r.ptrType,!0)},r.pendingSuperCount=0,r.ready=!1,r.methodTbl={},e.paramList?(r.classType=e.paramList[0].classType,r.proto=r.classType.proto):r.classType=r,r}return __extends(e,n),e.prototype.makeBound=function(n){var e=_nbind.makeBound(n,this);return this.proto=e,this.ptrType.proto=e,e},e.prototype.addMethod=function(n){var e=this.methodTbl[n.name]||[];e.push(n),this.methodTbl[n.name]=e},e.prototype.registerMethods=function(n,e){for(var r,t=0,i=Object.keys(n.methodTbl);t<i.length;t++)for(var u=i[t],o=0,a=n.methodTbl[u];o<a.length;o++){var f=a[o],c=void 0,l=void 0;if(c=this.proto.prototype,!e||1==f.signatureType)switch(f.signatureType){case 1:c=this.proto;case 5:l=_nbind.makeCaller(f),_nbind.addMethod(c,f.name,l,f.typeList.length-1);break;case 4:r=_nbind.makeMethodCaller(n.ptrType,f);break;case 3:Object.defineProperty(c,f.name,{configurable:!0,enumerable:!1,get:_nbind.makeMethodCaller(n.ptrType,f),set:r});break;case 2:l=_nbind.makeMethodCaller(n.ptrType,f),_nbind.addMethod(c,f.name,l,f.typeList.length-1)}}},e.prototype.registerSuperMethods=function(n,e,r){if(!r[n.name]){r[n.name]=!0;for(var t,i=0,u=0,o=n.superIdList||[];u<o.length;u++){var a=o[u],f=_nbind.getType(a);t=i++<e||e<0?-1:0,this.registerSuperMethods(f,t,r)}this.registerMethods(n,e<0)}},e.prototype.finish=function(){if(this.ready)return this;this.ready=!0,this.superList=(this.superIdList||[]).map((function(n){return _nbind.getType(n).finish()}));var n=this.proto;if(this.superList.length){var e=function(){this.constructor=n};e.prototype=this.superList[0].proto.prototype,n.prototype=new e}return n!=Module&&(n.prototype.__nbindType=this),this.registerSuperMethods(this,1,{}),this},e.prototype.upcastStep=function(n,e){if(n==this)return e;for(var r=0;r<this.superList.length;++r){var t=this.superList[r].upcastStep(n,_nbind.callUpcast(this.upcastList[r],e));if(t)return t}return 0},e}(_nbind.BindType);function popPointer(n,e){return n?new e.proto(_nbind.ptrMarker,e.flags,n):null}function pushPointer(n,e,r){if(!(n instanceof _nbind.Wrapper)){if(r)return _nbind.pushValue(n);throw new Error("Type mismatch")}var t=n.__nbindPtr,i=n.__nbindType.classType,u=e.classType;if(n instanceof e.proto)for(;i!=u;)t=_nbind.callUpcast(i.upcastList[0],t),i=i.superList[0];else if(!(t=i.upcastStep(u,t)))throw new Error("Type mismatch");return t}function pushMutablePointer(n,e){var r=pushPointer(n,e);if(1&n.__nbindFlags)throw new Error("Passing a const value as a non-const argument");return r}BindClass.list=[],_nbind.BindClass=BindClass,_nbind.popPointer=popPointer,_nbind.pushPointer=pushPointer;var BindClassPtr=function(n){function e(e){var r=n.call(this,e)||this;r.classType=e.paramList[0].classType,r.proto=r.classType.proto;var t=1&e.flags,i=256==(896&r.flags)&&2&e.flags,u=t?pushPointer:pushMutablePointer,o=i?_nbind.popValue:popPointer;return r.makeWireWrite=function(n,e){return e.Nullable?function(n){return n?u(n,r):0}:function(n){return u(n,r)}},r.wireRead=function(n){return o(n,r)},r.wireWrite=function(n){return u(n,r)},r}return __extends(e,n),e}(_nbind.BindType);function popShared(n,e){var r=HEAPU32[n/4],t=HEAPU32[n/4+1];return t?new e.proto(_nbind.ptrMarker,e.flags,t,r):null}function pushShared(n,e){if(!(n instanceof e.proto))throw new Error("Type mismatch");return n.__nbindShared}function pushMutableShared(n,e){if(!(n instanceof e.proto))throw new Error("Type mismatch");if(1&n.__nbindFlags)throw new Error("Passing a const value as a non-const argument");return n.__nbindShared}_nbind.BindClassPtr=BindClassPtr,_nbind.popShared=popShared;var SharedClassPtr=function(n){function e(e){var r=n.call(this,e)||this;r.readResources=[_nbind.resources.pool],r.classType=e.paramList[0].classType,r.proto=r.classType.proto;var t=1&e.flags?pushShared:pushMutableShared;return r.wireRead=function(n){return popShared(n,r)},r.wireWrite=function(n){return t(n,r)},r}return __extends(e,n),e}(_nbind.BindType);_nbind.SharedClassPtr=SharedClassPtr,_nbind.externalList=[0];var firstFreeExternal=0,External=function(){function n(n){this.refCount=1,this.data=n}return n.prototype.register=function(){var n=firstFreeExternal;return n?firstFreeExternal=_nbind.externalList[n]:n=_nbind.externalList.length,_nbind.externalList[n]=this,n},n.prototype.reference=function(){++this.refCount},n.prototype.dereference=function(n){0==--this.refCount&&(this.free&&this.free(),_nbind.externalList[n]=firstFreeExternal,firstFreeExternal=n)},n}();function popExternal(n){var e=_nbind.externalList[n];return e.dereference(n),e.data}function pushExternal(n){var e=new External(n);return e.reference(),e.register()}_nbind.External=External;var ExternalType=function(n){function e(){var e=null!==n&&n.apply(this,arguments)||this;return e.wireRead=popExternal,e.wireWrite=pushExternal,e}return __extends(e,n),e}(_nbind.BindType);_nbind.ExternalType=ExternalType,_nbind.callbackSignatureList=[];var CallbackType=function(n){function e(){var e=null!==n&&n.apply(this,arguments)||this;return e.wireWrite=function(n){return"function"!=typeof n&&_nbind.throwError("Type mismatch"),new _nbind.External(n).register()},e}return __extends(e,n),e}(_nbind.BindType);_nbind.CallbackType=CallbackType,_nbind.valueList=[0];var firstFreeValue=0;function pushValue(n){var e=firstFreeValue;return e?firstFreeValue=_nbind.valueList[e]:e=_nbind.valueList.length,_nbind.valueList[e]=n,2*e+1}function popValue(n,e){if(n||_nbind.throwError("Value type JavaScript class is missing or not registered"),1&n){n>>=1;var r=_nbind.valueList[n];return _nbind.valueList[n]=firstFreeValue,firstFreeValue=n,r}if(e)return _nbind.popShared(n,e);throw new Error("Invalid value slot "+n)}_nbind.pushValue=pushValue,_nbind.popValue=popValue;var valueBase=0x10000000000000000;function push64(n){return"number"==typeof n?n:4096*pushValue(n)+valueBase}function pop64(n){return n<valueBase?n:popValue((n-valueBase)/4096)}var CreateValueType=function(n){function e(){return null!==n&&n.apply(this,arguments)||this}return __extends(e,n),e.prototype.makeWireWrite=function(n){return"(_nbind.pushValue(new "+n+"))"},e}(_nbind.BindType);_nbind.CreateValueType=CreateValueType;var Int64Type=function(n){function e(){var e=null!==n&&n.apply(this,arguments)||this;return e.wireWrite=push64,e.wireRead=pop64,e}return __extends(e,n),e}(_nbind.BindType);function pushArray(n,e){if(!n)return 0;var r=n.length;if((e.size||0===e.size)&&r<e.size)throw new Error("Type mismatch");var t=e.memberType.ptrSize,i=_nbind.Pool.lalloc(4+r*t);HEAPU32[i/4]=r;var u=e.memberType.heap,o=(i+4)/t,a=e.memberType.wireWrite,f=0;if(a)for(;f<r;)u[o++]=a(n[f++]);else for(;f<r;)u[o++]=n[f++];return i}function popArray(n,e){if(0===n)return null;var r=HEAPU32[n/4],t=new Array(r),i=e.memberType.heap;n=(n+4)/e.memberType.ptrSize;var u=e.memberType.wireRead,o=0;if(u)for(;o<r;)t[o++]=u(i[n++]);else for(;o<r;)t[o++]=i[n++];return t}_nbind.Int64Type=Int64Type,_nbind.pushArray=pushArray,_nbind.popArray=popArray;var ArrayType=function(n){function e(e){var r=n.call(this,e)||this;return r.wireRead=function(n){return popArray(n,r)},r.wireWrite=function(n){return pushArray(n,r)},r.readResources=[_nbind.resources.pool],r.writeResources=[_nbind.resources.pool],r.memberType=e.paramList[0],e.paramList[1]&&(r.size=e.paramList[1]),r}return __extends(e,n),e}(_nbind.BindType);function pushString(n,e){if(null==n){if(!e||!e.Nullable)throw new Error("Type mismatch");n=""}if(e&&e.Strict){if("string"!=typeof n)throw new Error("Type mismatch")}else n=n.toString();var r=Module.lengthBytesUTF8(n),t=_nbind.Pool.lalloc(4+r+1);return HEAPU32[t/4]=r,Module.stringToUTF8Array(n,HEAPU8,t+4,r+1),t}function popString(n){if(0===n)return null;var e=HEAPU32[n/4];return Module.Pointer_stringify(n+4,e)}_nbind.ArrayType=ArrayType,_nbind.pushString=pushString,_nbind.popString=popString;var StringType=function(n){function e(){var e=null!==n&&n.apply(this,arguments)||this;return e.wireRead=popString,e.wireWrite=pushString,e.readResources=[_nbind.resources.pool],e.writeResources=[_nbind.resources.pool],e}return __extends(e,n),e.prototype.makeWireWrite=function(n,e){return function(n){return pushString(n,e)}},e}(_nbind.BindType);function makeArgList(n){return Array.apply(null,Array(n)).map((function(n,e){return"a"+(e+1)}))}function anyNeedsWireWrite(n,e){return n.reduce((function(n,r){return n||r.needsWireWrite(e)}),!1)}function anyNeedsWireRead(n,e){return n.reduce((function(n,r){return n||!!r.needsWireRead(e)}),!1)}function makeWireRead(n,e,r,t){var i=n.length;return r.makeWireRead?r.makeWireRead(t,n,i):r.wireRead?(n[i]=r.wireRead,"(convertParamList["+i+"]("+t+"))"):t}function makeWireWrite(n,e,r,t){var i,u=n.length;return(i=r.makeWireWrite?r.makeWireWrite(t,e,n,u):r.wireWrite)?"string"==typeof i?i:(n[u]=i,"(convertParamList["+u+"]("+t+"))"):t}function buildCallerFunction(dynCall,ptrType,ptr,num,policyTbl,needsWireWrite,prefix,returnType,argTypeList,mask,err){var argList=makeArgList(argTypeList.length),convertParamList=[],callExpression=makeWireRead(convertParamList,policyTbl,returnType,"dynCall("+[prefix].concat(argList.map((function(n,e){return makeWireWrite(convertParamList,policyTbl,argTypeList[e],n)}))).join(",")+")"),resourceSet=_nbind.listResources([returnType],argTypeList),sourceCode="function("+argList.join(",")+"){"+(mask?"this.__nbindFlags&mask&&err();":"")+resourceSet.makeOpen()+"var r="+callExpression+";"+resourceSet.makeClose()+"return r;}";return eval("("+sourceCode+")")}function buildJSCallerFunction(returnType,argTypeList){var argList=makeArgList(argTypeList.length),convertParamList=[],callExpression=makeWireWrite(convertParamList,null,returnType,"_nbind.externalList[num].data("+argList.map((function(n,e){return makeWireRead(convertParamList,null,argTypeList[e],n)})).join(",")+")"),resourceSet=_nbind.listResources(argTypeList,[returnType]);resourceSet.remove(_nbind.resources.pool);var sourceCode="function("+["dummy","num"].concat(argList).join(",")+"){"+resourceSet.makeOpen()+"var r="+callExpression+";"+resourceSet.makeClose()+"return r;}";return eval("("+sourceCode+")")}function makeJSCaller(n){var e=n.length-1,r=_nbind.getTypes(n,"callback"),t=r[0],i=r.slice(1),u=anyNeedsWireRead(i,null);if(!t.needsWireWrite(null)&&!u)switch(e){case 0:return function(n,e){return _nbind.externalList[e].data()};case 1:return function(n,e,r){return _nbind.externalList[e].data(r)};case 2:return function(n,e,r,t){return _nbind.externalList[e].data(r,t)};case 3:return function(n,e,r,t,i){return _nbind.externalList[e].data(r,t,i)}}return buildJSCallerFunction(t,i)}function makeMethodCaller(n,e){var r=e.typeList.length-1,t=e.typeList.slice(0);t.splice(1,0,"uint32_t",e.boundID);var i=_nbind.getTypes(t,e.title),u=i[0],o=i.slice(3),a=u.needsWireRead(e.policyTbl),f=anyNeedsWireWrite(o,e.policyTbl),c=e.ptr,l=e.num,s=_nbind.getDynCall(i,e.title),d=1&~e.flags;function _(){throw new Error("Calling a non-const method on a const object")}if(!a&&!f)switch(r){case 0:return function(){return this.__nbindFlags&d?_():s(c,l,_nbind.pushPointer(this,n))};case 1:return function(e){return this.__nbindFlags&d?_():s(c,l,_nbind.pushPointer(this,n),e)};case 2:return function(e,r){return this.__nbindFlags&d?_():s(c,l,_nbind.pushPointer(this,n),e,r)};case 3:return function(e,r,t){return this.__nbindFlags&d?_():s(c,l,_nbind.pushPointer(this,n),e,r,t)}}return buildCallerFunction(s,n,c,l,e.policyTbl,f,"ptr,num,pushPointer(this,ptrType)",u,o,d,_)}function makeCaller(n){var e,r=n.typeList.length-1,t=_nbind.getTypes(n.typeList,n.title),i=t[0],u=t.slice(1),o=i.needsWireRead(n.policyTbl),a=anyNeedsWireWrite(u,n.policyTbl),f=n.direct,c=n.ptr;if(n.direct&&!o&&!a){var l=_nbind.getDynCall(t,n.title);switch(r){case 0:return function(){return l(f)};case 1:return function(n){return l(f,n)};case 2:return function(n,e){return l(f,n,e)};case 3:return function(n,e,r){return l(f,n,e,r)}}c=0}if(c){var s=n.typeList.slice(0);s.splice(1,0,"uint32_t"),t=_nbind.getTypes(s,n.title),e="ptr,num"}else c=f,e="ptr";return buildCallerFunction(_nbind.getDynCall(t,n.title),null,c,n.num,n.policyTbl,a,e,i,u)}function makeOverloader(n,e){var r=[];function t(){return r[arguments.length].apply(this,arguments)}return t.addMethod=function(n,e){r[e]=n},t.addMethod(n,e),t}_nbind.StringType=StringType,_nbind.buildJSCallerFunction=buildJSCallerFunction,_nbind.makeJSCaller=makeJSCaller,_nbind.makeMethodCaller=makeMethodCaller,_nbind.makeCaller=makeCaller,_nbind.makeOverloader=makeOverloader;var Resource=function(){function n(n,e){var r=this;this.makeOpen=function(){return Object.keys(r.openTbl).join("")},this.makeClose=function(){return Object.keys(r.closeTbl).join("")},this.openTbl={},this.closeTbl={},n&&(this.openTbl[n]=!0),e&&(this.closeTbl[e]=!0)}return n.prototype.add=function(n){for(var e=0,r=Object.keys(n.openTbl);e<r.length;e++){var t=r[e];this.openTbl[t]=!0}for(var i=0,u=Object.keys(n.closeTbl);i<u.length;i++){t=u[i];this.closeTbl[t]=!0}},n.prototype.remove=function(n){for(var e=0,r=Object.keys(n.openTbl);e<r.length;e++){var t=r[e];delete this.openTbl[t]}for(var i=0,u=Object.keys(n.closeTbl);i<u.length;i++){t=u[i];delete this.closeTbl[t]}},n}();function listResources(n,e){for(var r=new Resource,t=0,i=n;t<i.length;t++)for(var u=0,o=i[t].readResources||[];u<o.length;u++){var a=o[u];r.add(a)}for(var f=0,c=e;f<c.length;f++)for(var l=0,s=c[f].writeResources||[];l<s.length;l++){a=s[l];r.add(a)}return r}_nbind.Resource=Resource,_nbind.listResources=listResources,_nbind.resources={pool:new Resource("var used=HEAPU32[_nbind.Pool.usedPtr],page=HEAPU32[_nbind.Pool.pagePtr];","_nbind.Pool.lreset(used,page);")};var ExternalBuffer=function(n){function e(e,r){var t=n.call(this,e)||this;return t.ptr=r,t}return __extends(e,n),e.prototype.free=function(){_free(this.ptr)},e}(_nbind.External);function getBuffer(n){return n instanceof ArrayBuffer?new Uint8Array(n):n instanceof DataView?new Uint8Array(n.buffer,n.byteOffset,n.byteLength):n}function pushBuffer(n,e){if(null==n&&e&&e.Nullable&&(n=[]),"object"!=typeof n)throw new Error("Type mismatch");var r=n,t=r.byteLength||r.length;if(!t&&0!==t&&0!==r.byteLength)throw new Error("Type mismatch");var i=_nbind.Pool.lalloc(8),u=_malloc(t),o=i/4;return HEAPU32[o++]=t,HEAPU32[o++]=u,HEAPU32[o++]=new ExternalBuffer(n,u).register(),HEAPU8.set(getBuffer(n),u),i}var BufferType=function(n){function e(){var e=null!==n&&n.apply(this,arguments)||this;return e.wireWrite=pushBuffer,e.readResources=[_nbind.resources.pool],e.writeResources=[_nbind.resources.pool],e}return __extends(e,n),e.prototype.makeWireWrite=function(n,e){return function(n){return pushBuffer(n,e)}},e}(_nbind.BindType);function commitBuffer(n,e,r){var t=_nbind.externalList[n].data,i=Buffer;if("function"!=typeof Buffer&&(i=function(){}),t instanceof Array);else{var u=HEAPU8.subarray(e,e+r);if(t instanceof i){("function"==typeof Buffer.from&&Buffer.from.length>=3?Buffer.from(u):new Buffer(u)).copy(t)}else getBuffer(t).set(u)}}_nbind.BufferType=BufferType,_nbind.commitBuffer=commitBuffer;var dirtyList=[],gcTimer=0;function sweep(){for(var n=0,e=dirtyList;n<e.length;n++){var r=e[n];3&r.__nbindState||r.free()}dirtyList=[],gcTimer=0}function toggleLightGC(n){_nbind.mark=n?function(n){dirtyList.push(n),gcTimer||(gcTimer=setTimeout(sweep,0))}:function(n){}}_nbind.mark=function(n){},_nbind.toggleLightGC=toggleLightGC}(_nbind),Module.requestFullScreen=function(n,e,r){Module.printErr("Module.requestFullScreen is deprecated. Please call Module.requestFullscreen instead."),Module.requestFullScreen=Module.requestFullscreen,Browser.requestFullScreen(n,e,r)},Module.requestFullscreen=function(n,e,r){Browser.requestFullscreen(n,e,r)},Module.requestAnimationFrame=function(n){Browser.requestAnimationFrame(n)},Module.setCanvasSize=function(n,e,r){Browser.setCanvasSize(n,e,r)},Module.pauseMainLoop=function(){Browser.mainLoop.pause()},Module.resumeMainLoop=function(){Browser.mainLoop.resume()},Module.getUserMedia=function(){Browser.getUserMedia()},Module.createContext=function(n,e,r,t){return Browser.createContext(n,e,r,t)},_emscripten_get_now=ENVIRONMENT_IS_NODE?function(){var n=process.hrtime();return 1e3*n[0]+n[1]/1e6}:"undefined"!=typeof dateNow?dateNow:"object"==typeof self&&self.performance&&"function"==typeof self.performance.now?function(){return self.performance.now()}:"object"==typeof performance&&"function"==typeof performance.now?function(){return performance.now()}:Date.now,__ATEXIT__.push((function(){var n=Module._fflush;n&&n(0);var e=___syscall146.printChar;if(e){var r=___syscall146.buffers;r[1].length&&e(1,10),r[2].length&&e(2,10)}})),DYNAMICTOP_PTR=allocate(1,"i32",ALLOC_STATIC),STACK_BASE=STACKTOP=Runtime.alignMemory(STATICTOP),STACK_MAX=STACK_BASE+TOTAL_STACK,DYNAMIC_BASE=Runtime.alignMemory(STACK_MAX),HEAP32[DYNAMICTOP_PTR>>2]=DYNAMIC_BASE,staticSealed=!0,Module.asmGlobalArg={Math:Math,Int8Array:Int8Array,Int16Array:Int16Array,Int32Array:Int32Array,Uint8Array:Uint8Array,Uint16Array:Uint16Array,Uint32Array:Uint32Array,Float32Array:Float32Array,Float64Array:Float64Array,NaN:NaN,Infinity:1/0},Module.asmLibraryArg={abort:abort,assert:assert,enlargeMemory:enlargeMemory,getTotalMemory:getTotalMemory,abortOnCannotGrowMemory:abortOnCannotGrowMemory,invoke_viiiii:invoke_viiiii,invoke_vif:invoke_vif,invoke_vid:invoke_vid,invoke_fiff:invoke_fiff,invoke_vi:invoke_vi,invoke_vii:invoke_vii,invoke_ii:invoke_ii,invoke_viddi:invoke_viddi,invoke_vidd:invoke_vidd,invoke_iiii:invoke_iiii,invoke_diii:invoke_diii,invoke_di:invoke_di,invoke_iid:invoke_iid,invoke_iii:invoke_iii,invoke_viiddi:invoke_viiddi,invoke_viiiiii:invoke_viiiiii,invoke_dii:invoke_dii,invoke_i:invoke_i,invoke_iiiiii:invoke_iiiiii,invoke_viiid:invoke_viiid,invoke_viififi:invoke_viififi,invoke_viii:invoke_viii,invoke_v:invoke_v,invoke_viid:invoke_viid,invoke_idd:invoke_idd,invoke_viiii:invoke_viiii,_emscripten_asm_const_iiiii:_emscripten_asm_const_iiiii,_emscripten_asm_const_iiidddddd:_emscripten_asm_const_iiidddddd,_emscripten_asm_const_iiiid:_emscripten_asm_const_iiiid,__nbind_reference_external:__nbind_reference_external,_emscripten_asm_const_iiiiiiii:_emscripten_asm_const_iiiiiiii,_removeAccessorPrefix:_removeAccessorPrefix,_typeModule:_typeModule,__nbind_register_pool:__nbind_register_pool,__decorate:__decorate,_llvm_stackrestore:_llvm_stackrestore,___cxa_atexit:___cxa_atexit,__extends:__extends,__nbind_get_value_object:__nbind_get_value_object,__ZN8facebook4yoga14YGNodeToStringEPNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEP6YGNode14YGPrintOptionsj:__ZN8facebook4yoga14YGNodeToStringEPNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEP6YGNode14YGPrintOptionsj,_emscripten_set_main_loop_timing:_emscripten_set_main_loop_timing,__nbind_register_primitive:__nbind_register_primitive,__nbind_register_type:__nbind_register_type,_emscripten_memcpy_big:_emscripten_memcpy_big,__nbind_register_function:__nbind_register_function,___setErrNo:___setErrNo,__nbind_register_class:__nbind_register_class,__nbind_finish:__nbind_finish,_abort:_abort,_nbind_value:_nbind_value,_llvm_stacksave:_llvm_stacksave,___syscall54:___syscall54,_defineHidden:_defineHidden,_emscripten_set_main_loop:_emscripten_set_main_loop,_emscripten_get_now:_emscripten_get_now,__nbind_register_callback_signature:__nbind_register_callback_signature,_emscripten_asm_const_iiiiii:_emscripten_asm_const_iiiiii,__nbind_free_external:__nbind_free_external,_emscripten_asm_const_iiii:_emscripten_asm_const_iiii,_emscripten_asm_const_iiididi:_emscripten_asm_const_iiididi,___syscall6:___syscall6,_atexit:_atexit,___syscall140:___syscall140,___syscall146:___syscall146,DYNAMICTOP_PTR:DYNAMICTOP_PTR,tempDoublePtr:tempDoublePtr,ABORT:ABORT,STACKTOP:STACKTOP,STACK_MAX:STACK_MAX,cttz_i8:cttz_i8,___dso_handle:___dso_handle};var asm=function(n,e,r){"use asm";var t=new n.Int8Array(r);var i=new n.Int16Array(r);var u=new n.Int32Array(r);var o=new n.Uint8Array(r);var a=new n.Uint16Array(r);var f=new n.Uint32Array(r);var c=new n.Float32Array(r);var l=new n.Float64Array(r);var s=e.DYNAMICTOP_PTR|0;var d=e.tempDoublePtr|0;var _=e.ABORT|0;var v=e.STACKTOP|0;var p=e.STACK_MAX|0;var m=e.cttz_i8|0;var b=e.___dso_handle|0;var h=0;var y=0;var w=0;var M=0;var k=n.NaN,g=n.Infinity;var T=0,A=0,S=0,E=0,C=0.0;var L=0;var R=n.Math.floor;var P=n.Math.abs;var B=n.Math.sqrt;var O=n.Math.pow;var N=n.Math.cos;var I=n.Math.sin;var F=n.Math.tan;var x=n.Math.acos;var U=n.Math.asin;var H=n.Math.atan;var D=n.Math.atan2;var W=n.Math.exp;var Y=n.Math.log;var V=n.Math.ceil;var j=n.Math.imul;var q=n.Math.min;var z=n.Math.max;var G=n.Math.clz32;var K=n.Math.fround;var X=e.abort;var J=e.assert;var Z=e.enlargeMemory;var Q=e.getTotalMemory;var $=e.abortOnCannotGrowMemory;var nn=e.invoke_viiiii;var en=e.invoke_vif;var rn=e.invoke_vid;var tn=e.invoke_fiff;var un=e.invoke_vi;var on=e.invoke_vii;var an=e.invoke_ii;var fn=e.invoke_viddi;var cn=e.invoke_vidd;var ln=e.invoke_iiii;var sn=e.invoke_diii;var dn=e.invoke_di;var _n=e.invoke_iid;var vn=e.invoke_iii;var pn=e.invoke_viiddi;var mn=e.invoke_viiiiii;var bn=e.invoke_dii;var hn=e.invoke_i;var yn=e.invoke_iiiiii;var wn=e.invoke_viiid;var Mn=e.invoke_viififi;var kn=e.invoke_viii;var gn=e.invoke_v;var Tn=e.invoke_viid;var An=e.invoke_idd;var Sn=e.invoke_viiii;var En=e._emscripten_asm_const_iiiii;var Cn=e._emscripten_asm_const_iiidddddd;var Ln=e._emscripten_asm_const_iiiid;var Rn=e.__nbind_reference_external;var Pn=e._emscripten_asm_const_iiiiiiii;var Bn=e._removeAccessorPrefix;var On=e._typeModule;var Nn=e.__nbind_register_pool;var In=e.__decorate;var Fn=e._llvm_stackrestore;var xn=e.___cxa_atexit;var Un=e.__extends;var Hn=e.__nbind_get_value_object;var Dn=e.__ZN8facebook4yoga14YGNodeToStringEPNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEP6YGNode14YGPrintOptionsj;var Wn=e._emscripten_set_main_loop_timing;var Yn=e.__nbind_register_primitive;var Vn=e.__nbind_register_type;var jn=e._emscripten_memcpy_big;var qn=e.__nbind_register_function;var zn=e.___setErrNo;var Gn=e.__nbind_register_class;var Kn=e.__nbind_finish;var Xn=e._abort;var Jn=e._nbind_value;var Zn=e._llvm_stacksave;var Qn=e.___syscall54;var $n=e._defineHidden;var ne=e._emscripten_set_main_loop;var ee=e._emscripten_get_now;var re=e.__nbind_register_callback_signature;var te=e._emscripten_asm_const_iiiiii;var ie=e.__nbind_free_external;var ue=e._emscripten_asm_const_iiii;var oe=e._emscripten_asm_const_iiididi;var ae=e.___syscall6;var fe=e._atexit;var ce=e.___syscall140;var le=e.___syscall146;var se=K(0);const de=K(0);function _e(n){n=n|0;var e=0;e=v;v=v+n|0;v=v+15&-16;return e|0}function ve(){return v|0}function pe(n){n=n|0;v=n}function me(n,e){n=n|0;e=e|0;v=n;p=e}function be(n,e){n=n|0;e=e|0;if(!h){h=n;y=e}}function he(n){n=n|0;L=n}function ye(){return L|0}function we(){var n=0,e=0;iC(8104,8,400)|0;iC(8504,408,540)|0;n=9044;e=n+44|0;do{u[n>>2]=0;n=n+4|0}while((n|0)<(e|0));t[9088]=0;t[9089]=1;u[2273]=0;u[2274]=948;u[2275]=948;xn(17,8104,b|0)|0;return}function Me(n){n=n|0;ze(n+948|0);return}function ke(n){n=K(n);return((Bi(n)|0)&2147483647)>>>0>2139095040|0}function ge(n,e,r){n=n|0;e=e|0;r=r|0;n:do{if(!(u[n+(e<<3)+4>>2]|0)){if((e|2|0)==3?u[n+60>>2]|0:0){n=n+56|0;break}switch(e|0){case 0:case 2:case 4:case 5:{if(u[n+52>>2]|0){n=n+48|0;break n}break}default:{}}if(!(u[n+68>>2]|0)){n=(e|1|0)==5?948:r;break}else{n=n+64|0;break}}else n=n+(e<<3)|0}while(0);return n|0}function Te(n){n=n|0;var e=0;e=qS(1e3)|0;Ae(n,(e|0)!=0,2456);u[2276]=(u[2276]|0)+1;iC(e|0,8104,1e3)|0;if(t[n+2>>0]|0){u[e+4>>2]=2;u[e+12>>2]=4}u[e+976>>2]=n;return e|0}function Ae(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0;i=v;v=v+16|0;t=i;if(!e){u[t>>2]=r;xt(n,5,3197,t)}v=i;return}function Se(){return Te(956)|0}function Ee(n){n=n|0;var e=0;e=GE(1e3)|0;Ce(e,n);Ae(u[n+976>>2]|0,1,2456);u[2276]=(u[2276]|0)+1;u[e+944>>2]=0;return e|0}function Ce(n,e){n=n|0;e=e|0;var r=0;iC(n|0,e|0,948)|0;Dt(n+948|0,e+948|0);r=n+960|0;n=e+960|0;e=r+40|0;do{u[r>>2]=u[n>>2];r=r+4|0;n=n+4|0}while((r|0)<(e|0));return}function Le(n){n=n|0;var e=0,r=0,t=0,i=0;e=n+944|0;r=u[e>>2]|0;if(r|0){Re(r+948|0,n)|0;u[e>>2]=0}r=Pe(n)|0;if(r|0){e=0;do{u[(Be(n,e)|0)+944>>2]=0;e=e+1|0}while((e|0)!=(r|0))}r=n+948|0;t=u[r>>2]|0;i=n+952|0;e=u[i>>2]|0;if((e|0)!=(t|0))u[i>>2]=e+(~((e+-4-t|0)>>>2)<<2);Oe(r);zS(n);u[2276]=(u[2276]|0)+-1;return}function Re(n,e){n=n|0;e=e|0;var r=0,t=0,i=0,o=0,a=0,f=0;t=u[n>>2]|0;f=n+4|0;r=u[f>>2]|0;o=r;n:do{if((t|0)==(r|0)){i=t;a=4}else{n=t;while(1){if((u[n>>2]|0)==(e|0)){i=n;a=4;break n}n=n+4|0;if((n|0)==(r|0)){n=0;break}}}}while(0);if((a|0)==4)if((i|0)!=(r|0)){t=i+4|0;n=o-t|0;e=n>>2;if(e){cC(i|0,t|0,n|0)|0;r=u[f>>2]|0}n=i+(e<<2)|0;if((r|0)==(n|0))n=1;else{u[f>>2]=r+(~((r+-4-n|0)>>>2)<<2);n=1}}else n=0;return n|0}function Pe(n){n=n|0;return(u[n+952>>2]|0)-(u[n+948>>2]|0)>>2|0}function Be(n,e){n=n|0;e=e|0;var r=0;r=u[n+948>>2]|0;if((u[n+952>>2]|0)-r>>2>>>0>e>>>0)n=u[r+(e<<2)>>2]|0;else n=0;return n|0}function Oe(n){n=n|0;var e=0,r=0,t=0,i=0;t=v;v=v+32|0;e=t;i=u[n>>2]|0;r=(u[n+4>>2]|0)-i|0;if(((u[n+8>>2]|0)-i|0)>>>0>r>>>0){i=r>>2;Oi(e,i,i,n+8|0);Ni(n,e);Ii(e)}v=t;return}function Ne(n,e){n=n|0;e=e|0;var r=0,t=0,i=0,o=0,a=0,f=0,c=0,l=0;l=Pe(n)|0;do{if(l|0){if((u[(Be(n,0)|0)+944>>2]|0)==(n|0)){if(!(Re(n+948|0,e)|0))break;iC(e+400|0,8504,540)|0;u[e+944>>2]=0;qe(n);break}a=u[(u[n+976>>2]|0)+12>>2]|0;f=n+948|0;c=(a|0)==0;r=0;o=0;do{t=u[(u[f>>2]|0)+(o<<2)>>2]|0;if((t|0)==(e|0))qe(n);else{i=Ee(t)|0;u[(u[f>>2]|0)+(r<<2)>>2]=i;u[i+944>>2]=n;if(!c)IL[a&15](t,i,n,r);r=r+1|0}o=o+1|0}while((o|0)!=(l|0));if(r>>>0<l>>>0){c=n+948|0;f=n+952|0;a=r;r=u[f>>2]|0;do{o=(u[c>>2]|0)+(a<<2)|0;t=o+4|0;i=r-t|0;e=i>>2;if(!e)i=r;else{cC(o|0,t|0,i|0)|0;r=u[f>>2]|0;i=r}t=o+(e<<2)|0;if((i|0)!=(t|0)){r=i+(~((i+-4-t|0)>>>2)<<2)|0;u[f>>2]=r}a=a+1|0}while((a|0)!=(l|0))}}}while(0);return}function Ie(n){n=n|0;var e=0,r=0,i=0,o=0;Fe(n,(Pe(n)|0)==0,2491);Fe(n,(u[n+944>>2]|0)==0,2545);e=n+948|0;r=u[e>>2]|0;i=n+952|0;o=u[i>>2]|0;if((o|0)!=(r|0))u[i>>2]=o+(~((o+-4-r|0)>>>2)<<2);Oe(e);e=n+976|0;r=u[e>>2]|0;iC(n|0,8104,1e3)|0;if(t[r+2>>0]|0){u[n+4>>2]=2;u[n+12>>2]=4}u[e>>2]=r;return}function Fe(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0;i=v;v=v+16|0;t=i;if(!e){u[t>>2]=r;At(n,5,3197,t)}v=i;return}function xe(){return u[2276]|0}function Ue(){var n=0;n=qS(20)|0;He((n|0)!=0,2592);u[2277]=(u[2277]|0)+1;u[n>>2]=u[239];u[n+4>>2]=u[240];u[n+8>>2]=u[241];u[n+12>>2]=u[242];u[n+16>>2]=u[243];return n|0}function He(n,e){n=n|0;e=e|0;var r=0,t=0;t=v;v=v+16|0;r=t;if(!n){u[r>>2]=e;At(0,5,3197,r)}v=t;return}function De(n){n=n|0;zS(n);u[2277]=(u[2277]|0)+-1;return}function We(n,e){n=n|0;e=e|0;var r=0;if(!e){r=0;e=0}else{Fe(n,(Pe(n)|0)==0,2629);r=1}u[n+964>>2]=e;u[n+988>>2]=r;return}function Ye(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0;t=v;v=v+16|0;o=t+8|0;i=t+4|0;a=t;u[i>>2]=e;Fe(n,(u[e+944>>2]|0)==0,2709);Fe(n,(u[n+964>>2]|0)==0,2763);Ve(n);e=n+948|0;u[a>>2]=(u[e>>2]|0)+(r<<2);u[o>>2]=u[a>>2];je(e,o,i)|0;u[(u[i>>2]|0)+944>>2]=n;qe(n);v=t;return}function Ve(n){n=n|0;var e=0,r=0,t=0,i=0,o=0,a=0,f=0;r=Pe(n)|0;if(r|0?(u[(Be(n,0)|0)+944>>2]|0)!=(n|0):0){t=u[(u[n+976>>2]|0)+12>>2]|0;i=n+948|0;o=(t|0)==0;e=0;do{a=u[(u[i>>2]|0)+(e<<2)>>2]|0;f=Ee(a)|0;u[(u[i>>2]|0)+(e<<2)>>2]=f;u[f+944>>2]=n;if(!o)IL[t&15](a,f,n,e);e=e+1|0}while((e|0)!=(r|0))}return}function je(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0,f=0,c=0,l=0,s=0,d=0,_=0,p=0,m=0,b=0,h=0,y=0;h=v;v=v+64|0;d=h+52|0;f=h+48|0;_=h+28|0;p=h+24|0;m=h+20|0;b=h;t=u[n>>2]|0;o=t;e=t+((u[e>>2]|0)-o>>2<<2)|0;t=n+4|0;i=u[t>>2]|0;a=n+8|0;do{if(i>>>0<(u[a>>2]|0)>>>0){if((e|0)==(i|0)){u[e>>2]=u[r>>2];u[t>>2]=(u[t>>2]|0)+4;break}Fi(n,e,i,e+4|0);if(e>>>0<=r>>>0)r=(u[t>>2]|0)>>>0>r>>>0?r+4|0:r;u[e>>2]=u[r>>2]}else{t=(i-o>>2)+1|0;i=Vt(n)|0;if(i>>>0<t>>>0)DE(n);s=u[n>>2]|0;l=(u[a>>2]|0)-s|0;o=l>>1;Oi(b,l>>2>>>0<i>>>1>>>0?o>>>0<t>>>0?t:o:i,e-s>>2,n+8|0);s=b+8|0;t=u[s>>2]|0;o=b+12|0;l=u[o>>2]|0;a=l;c=t;do{if((t|0)==(l|0)){l=b+4|0;t=u[l>>2]|0;y=u[b>>2]|0;i=y;if(t>>>0<=y>>>0){t=a-i>>1;t=(t|0)==0?1:t;Oi(_,t,t>>>2,u[b+16>>2]|0);u[p>>2]=u[l>>2];u[m>>2]=u[s>>2];u[f>>2]=u[p>>2];u[d>>2]=u[m>>2];Ui(_,f,d);t=u[b>>2]|0;u[b>>2]=u[_>>2];u[_>>2]=t;t=_+4|0;y=u[l>>2]|0;u[l>>2]=u[t>>2];u[t>>2]=y;t=_+8|0;y=u[s>>2]|0;u[s>>2]=u[t>>2];u[t>>2]=y;t=_+12|0;y=u[o>>2]|0;u[o>>2]=u[t>>2];u[t>>2]=y;Ii(_);t=u[s>>2]|0;break}o=t;a=((o-i>>2)+1|0)/-2|0;f=t+(a<<2)|0;i=c-o|0;o=i>>2;if(o){cC(f|0,t|0,i|0)|0;t=u[l>>2]|0}y=f+(o<<2)|0;u[s>>2]=y;u[l>>2]=t+(a<<2);t=y}}while(0);u[t>>2]=u[r>>2];u[s>>2]=(u[s>>2]|0)+4;e=xi(n,b,e)|0;Ii(b)}}while(0);v=h;return e|0}function qe(n){n=n|0;var e=0;do{e=n+984|0;if(t[e>>0]|0)break;t[e>>0]=1;c[n+504>>2]=K(k);n=u[n+944>>2]|0}while((n|0)!=0);return}function ze(n){n=n|0;var e=0,r=0,t=0;r=u[n>>2]|0;t=r;if(r|0){n=n+4|0;e=u[n>>2]|0;if((e|0)!=(r|0))u[n>>2]=e+(~((e+-4-t|0)>>>2)<<2);XE(r)}return}function Ge(n){n=n|0;return u[n+944>>2]|0}function Ke(n){n=n|0;Fe(n,(u[n+964>>2]|0)!=0,2832);qe(n);return}function Xe(n){n=n|0;return(t[n+984>>0]|0)!=0|0}function Je(n,e){n=n|0;e=e|0;if(iE(n,e,400)|0){iC(n|0,e|0,400)|0;qe(n)}return}function Ze(n){n=n|0;var e=de;e=K(c[n+44>>2]);n=ke(e)|0;return K(n?K(0.0):e)}function Qe(n){n=n|0;var e=de;e=K(c[n+48>>2]);if(ke(e)|0)e=t[(u[n+976>>2]|0)+2>>0]|0?K(1.0):K(0.0);return K(e)}function $e(n,e){n=n|0;e=e|0;u[n+980>>2]=e;return}function nr(n){n=n|0;return u[n+980>>2]|0}function er(n,e){n=n|0;e=e|0;var r=0;r=n+4|0;if((u[r>>2]|0)!=(e|0)){u[r>>2]=e;qe(n)}return}function rr(n){n=n|0;return u[n+4>>2]|0}function tr(n,e){n=n|0;e=e|0;var r=0;r=n+8|0;if((u[r>>2]|0)!=(e|0)){u[r>>2]=e;qe(n)}return}function ir(n){n=n|0;return u[n+8>>2]|0}function ur(n,e){n=n|0;e=e|0;var r=0;r=n+12|0;if((u[r>>2]|0)!=(e|0)){u[r>>2]=e;qe(n)}return}function or(n){n=n|0;return u[n+12>>2]|0}function ar(n,e){n=n|0;e=e|0;var r=0;r=n+16|0;if((u[r>>2]|0)!=(e|0)){u[r>>2]=e;qe(n)}return}function fr(n){n=n|0;return u[n+16>>2]|0}function cr(n,e){n=n|0;e=e|0;var r=0;r=n+20|0;if((u[r>>2]|0)!=(e|0)){u[r>>2]=e;qe(n)}return}function lr(n){n=n|0;return u[n+20>>2]|0}function sr(n,e){n=n|0;e=e|0;var r=0;r=n+24|0;if((u[r>>2]|0)!=(e|0)){u[r>>2]=e;qe(n)}return}function dr(n){n=n|0;return u[n+24>>2]|0}function _r(n,e){n=n|0;e=e|0;var r=0;r=n+28|0;if((u[r>>2]|0)!=(e|0)){u[r>>2]=e;qe(n)}return}function vr(n){n=n|0;return u[n+28>>2]|0}function pr(n,e){n=n|0;e=e|0;var r=0;r=n+32|0;if((u[r>>2]|0)!=(e|0)){u[r>>2]=e;qe(n)}return}function mr(n){n=n|0;return u[n+32>>2]|0}function br(n,e){n=n|0;e=e|0;var r=0;r=n+36|0;if((u[r>>2]|0)!=(e|0)){u[r>>2]=e;qe(n)}return}function hr(n){n=n|0;return u[n+36>>2]|0}function yr(n,e){n=n|0;e=K(e);var r=0;r=n+40|0;if(K(c[r>>2])!=e){c[r>>2]=e;qe(n)}return}function wr(n,e){n=n|0;e=K(e);var r=0;r=n+44|0;if(K(c[r>>2])!=e){c[r>>2]=e;qe(n)}return}function Mr(n,e){n=n|0;e=K(e);var r=0;r=n+48|0;if(K(c[r>>2])!=e){c[r>>2]=e;qe(n)}return}function kr(n,e){n=n|0;e=K(e);var r=0,t=0,i=0,o=0;o=ke(e)|0;r=(o^1)&1;t=n+52|0;i=n+56|0;if(!(o|K(c[t>>2])==e?(u[i>>2]|0)==(r|0):0)){c[t>>2]=e;u[i>>2]=r;qe(n)}return}function gr(n,e){n=n|0;e=K(e);var r=0,t=0;t=n+52|0;r=n+56|0;if(!(!(K(c[t>>2])!=e)?(u[r>>2]|0)==2:0)){c[t>>2]=e;t=ke(e)|0;u[r>>2]=t?3:2;qe(n)}return}function Tr(n,e){n=n|0;e=e|0;var r=0,t=0;t=e+52|0;r=u[t+4>>2]|0;e=n;u[e>>2]=u[t>>2];u[e+4>>2]=r;return}function Ar(n,e,r){n=n|0;e=e|0;r=K(r);var t=0,i=0,o=0;o=ke(r)|0;t=(o^1)&1;i=n+132+(e<<3)|0;e=n+132+(e<<3)+4|0;if(!(o|K(c[i>>2])==r?(u[e>>2]|0)==(t|0):0)){c[i>>2]=r;u[e>>2]=t;qe(n)}return}function Sr(n,e,r){n=n|0;e=e|0;r=K(r);var t=0,i=0,o=0;o=ke(r)|0;t=o?0:2;i=n+132+(e<<3)|0;e=n+132+(e<<3)+4|0;if(!(o|K(c[i>>2])==r?(u[e>>2]|0)==(t|0):0)){c[i>>2]=r;u[e>>2]=t;qe(n)}return}function Er(n,e,r){n=n|0;e=e|0;r=r|0;var t=0;t=e+132+(r<<3)|0;e=u[t+4>>2]|0;r=n;u[r>>2]=u[t>>2];u[r+4>>2]=e;return}function Cr(n,e,r){n=n|0;e=e|0;r=K(r);var t=0,i=0,o=0;o=ke(r)|0;t=(o^1)&1;i=n+60+(e<<3)|0;e=n+60+(e<<3)+4|0;if(!(o|K(c[i>>2])==r?(u[e>>2]|0)==(t|0):0)){c[i>>2]=r;u[e>>2]=t;qe(n)}return}function Lr(n,e,r){n=n|0;e=e|0;r=K(r);var t=0,i=0,o=0;o=ke(r)|0;t=o?0:2;i=n+60+(e<<3)|0;e=n+60+(e<<3)+4|0;if(!(o|K(c[i>>2])==r?(u[e>>2]|0)==(t|0):0)){c[i>>2]=r;u[e>>2]=t;qe(n)}return}function Rr(n,e,r){n=n|0;e=e|0;r=r|0;var t=0;t=e+60+(r<<3)|0;e=u[t+4>>2]|0;r=n;u[r>>2]=u[t>>2];u[r+4>>2]=e;return}function Pr(n,e){n=n|0;e=e|0;var r=0;r=n+60+(e<<3)+4|0;if((u[r>>2]|0)!=3){c[n+60+(e<<3)>>2]=K(k);u[r>>2]=3;qe(n)}return}function Br(n,e,r){n=n|0;e=e|0;r=K(r);var t=0,i=0,o=0;o=ke(r)|0;t=(o^1)&1;i=n+204+(e<<3)|0;e=n+204+(e<<3)+4|0;if(!(o|K(c[i>>2])==r?(u[e>>2]|0)==(t|0):0)){c[i>>2]=r;u[e>>2]=t;qe(n)}return}function Or(n,e,r){n=n|0;e=e|0;r=K(r);var t=0,i=0,o=0;o=ke(r)|0;t=o?0:2;i=n+204+(e<<3)|0;e=n+204+(e<<3)+4|0;if(!(o|K(c[i>>2])==r?(u[e>>2]|0)==(t|0):0)){c[i>>2]=r;u[e>>2]=t;qe(n)}return}function Nr(n,e,r){n=n|0;e=e|0;r=r|0;var t=0;t=e+204+(r<<3)|0;e=u[t+4>>2]|0;r=n;u[r>>2]=u[t>>2];u[r+4>>2]=e;return}function Ir(n,e,r){n=n|0;e=e|0;r=K(r);var t=0,i=0,o=0;o=ke(r)|0;t=(o^1)&1;i=n+276+(e<<3)|0;e=n+276+(e<<3)+4|0;if(!(o|K(c[i>>2])==r?(u[e>>2]|0)==(t|0):0)){c[i>>2]=r;u[e>>2]=t;qe(n)}return}function Fr(n,e){n=n|0;e=e|0;return K(c[n+276+(e<<3)>>2])}function xr(n,e){n=n|0;e=K(e);var r=0,t=0,i=0,o=0;o=ke(e)|0;r=(o^1)&1;t=n+348|0;i=n+352|0;if(!(o|K(c[t>>2])==e?(u[i>>2]|0)==(r|0):0)){c[t>>2]=e;u[i>>2]=r;qe(n)}return}function Ur(n,e){n=n|0;e=K(e);var r=0,t=0;t=n+348|0;r=n+352|0;if(!(!(K(c[t>>2])!=e)?(u[r>>2]|0)==2:0)){c[t>>2]=e;t=ke(e)|0;u[r>>2]=t?3:2;qe(n)}return}function Hr(n){n=n|0;var e=0;e=n+352|0;if((u[e>>2]|0)!=3){c[n+348>>2]=K(k);u[e>>2]=3;qe(n)}return}function Dr(n,e){n=n|0;e=e|0;var r=0,t=0;t=e+348|0;r=u[t+4>>2]|0;e=n;u[e>>2]=u[t>>2];u[e+4>>2]=r;return}function Wr(n,e){n=n|0;e=K(e);var r=0,t=0,i=0,o=0;o=ke(e)|0;r=(o^1)&1;t=n+356|0;i=n+360|0;if(!(o|K(c[t>>2])==e?(u[i>>2]|0)==(r|0):0)){c[t>>2]=e;u[i>>2]=r;qe(n)}return}function Yr(n,e){n=n|0;e=K(e);var r=0,t=0;t=n+356|0;r=n+360|0;if(!(!(K(c[t>>2])!=e)?(u[r>>2]|0)==2:0)){c[t>>2]=e;t=ke(e)|0;u[r>>2]=t?3:2;qe(n)}return}function Vr(n){n=n|0;var e=0;e=n+360|0;if((u[e>>2]|0)!=3){c[n+356>>2]=K(k);u[e>>2]=3;qe(n)}return}function jr(n,e){n=n|0;e=e|0;var r=0,t=0;t=e+356|0;r=u[t+4>>2]|0;e=n;u[e>>2]=u[t>>2];u[e+4>>2]=r;return}function qr(n,e){n=n|0;e=K(e);var r=0,t=0,i=0,o=0;o=ke(e)|0;r=(o^1)&1;t=n+364|0;i=n+368|0;if(!(o|K(c[t>>2])==e?(u[i>>2]|0)==(r|0):0)){c[t>>2]=e;u[i>>2]=r;qe(n)}return}function zr(n,e){n=n|0;e=K(e);var r=0,t=0,i=0,o=0;o=ke(e)|0;r=o?0:2;t=n+364|0;i=n+368|0;if(!(o|K(c[t>>2])==e?(u[i>>2]|0)==(r|0):0)){c[t>>2]=e;u[i>>2]=r;qe(n)}return}function Gr(n,e){n=n|0;e=e|0;var r=0,t=0;t=e+364|0;r=u[t+4>>2]|0;e=n;u[e>>2]=u[t>>2];u[e+4>>2]=r;return}function Kr(n,e){n=n|0;e=K(e);var r=0,t=0,i=0,o=0;o=ke(e)|0;r=(o^1)&1;t=n+372|0;i=n+376|0;if(!(o|K(c[t>>2])==e?(u[i>>2]|0)==(r|0):0)){c[t>>2]=e;u[i>>2]=r;qe(n)}return}function Xr(n,e){n=n|0;e=K(e);var r=0,t=0,i=0,o=0;o=ke(e)|0;r=o?0:2;t=n+372|0;i=n+376|0;if(!(o|K(c[t>>2])==e?(u[i>>2]|0)==(r|0):0)){c[t>>2]=e;u[i>>2]=r;qe(n)}return}function Jr(n,e){n=n|0;e=e|0;var r=0,t=0;t=e+372|0;r=u[t+4>>2]|0;e=n;u[e>>2]=u[t>>2];u[e+4>>2]=r;return}function Zr(n,e){n=n|0;e=K(e);var r=0,t=0,i=0,o=0;o=ke(e)|0;r=(o^1)&1;t=n+380|0;i=n+384|0;if(!(o|K(c[t>>2])==e?(u[i>>2]|0)==(r|0):0)){c[t>>2]=e;u[i>>2]=r;qe(n)}return}function Qr(n,e){n=n|0;e=K(e);var r=0,t=0,i=0,o=0;o=ke(e)|0;r=o?0:2;t=n+380|0;i=n+384|0;if(!(o|K(c[t>>2])==e?(u[i>>2]|0)==(r|0):0)){c[t>>2]=e;u[i>>2]=r;qe(n)}return}function $r(n,e){n=n|0;e=e|0;var r=0,t=0;t=e+380|0;r=u[t+4>>2]|0;e=n;u[e>>2]=u[t>>2];u[e+4>>2]=r;return}function nt(n,e){n=n|0;e=K(e);var r=0,t=0,i=0,o=0;o=ke(e)|0;r=(o^1)&1;t=n+388|0;i=n+392|0;if(!(o|K(c[t>>2])==e?(u[i>>2]|0)==(r|0):0)){c[t>>2]=e;u[i>>2]=r;qe(n)}return}function et(n,e){n=n|0;e=K(e);var r=0,t=0,i=0,o=0;o=ke(e)|0;r=o?0:2;t=n+388|0;i=n+392|0;if(!(o|K(c[t>>2])==e?(u[i>>2]|0)==(r|0):0)){c[t>>2]=e;u[i>>2]=r;qe(n)}return}function rt(n,e){n=n|0;e=e|0;var r=0,t=0;t=e+388|0;r=u[t+4>>2]|0;e=n;u[e>>2]=u[t>>2];u[e+4>>2]=r;return}function tt(n,e){n=n|0;e=K(e);var r=0;r=n+396|0;if(K(c[r>>2])!=e){c[r>>2]=e;qe(n)}return}function it(n){n=n|0;return K(c[n+396>>2])}function ut(n){n=n|0;return K(c[n+400>>2])}function ot(n){n=n|0;return K(c[n+404>>2])}function at(n){n=n|0;return K(c[n+408>>2])}function ft(n){n=n|0;return K(c[n+412>>2])}function ct(n){n=n|0;return K(c[n+416>>2])}function lt(n){n=n|0;return K(c[n+420>>2])}function st(n,e){n=n|0;e=e|0;Fe(n,(e|0)<6,2918);switch(e|0){case 0:{e=(u[n+496>>2]|0)==2?5:4;break}case 2:{e=(u[n+496>>2]|0)==2?4:5;break}default:{}}return K(c[n+424+(e<<2)>>2])}function dt(n,e){n=n|0;e=e|0;Fe(n,(e|0)<6,2918);switch(e|0){case 0:{e=(u[n+496>>2]|0)==2?5:4;break}case 2:{e=(u[n+496>>2]|0)==2?4:5;break}default:{}}return K(c[n+448+(e<<2)>>2])}function _t(n,e){n=n|0;e=e|0;Fe(n,(e|0)<6,2918);switch(e|0){case 0:{e=(u[n+496>>2]|0)==2?5:4;break}case 2:{e=(u[n+496>>2]|0)==2?4:5;break}default:{}}return K(c[n+472+(e<<2)>>2])}function vt(n,e){n=n|0;e=e|0;var r=0,t=de;r=u[n+4>>2]|0;if((r|0)==(u[e+4>>2]|0)){if(!r)n=1;else{t=K(c[n>>2]);n=K(P(K(t-K(c[e>>2]))))<K(.0000999999974)}}else n=0;return n|0}function pt(n,e){n=K(n);e=K(e);var r=0;if(ke(n)|0)r=ke(e)|0;else r=K(P(K(n-e)))<K(.0000999999974);return r|0}function mt(n,e){n=n|0;e=e|0;bt(n,e);return}function bt(n,e){n=n|0;e=e|0;var r=0,i=0;r=v;v=v+16|0;i=r+4|0;u[i>>2]=0;u[i+4>>2]=0;u[i+8>>2]=0;Dn(i|0,n|0,e|0,0);At(n,3,(t[i+11>>0]|0)<0?u[i>>2]|0:i,r);JE(i);v=r;return}function ht(n,e,r,t){n=K(n);e=K(e);r=r|0;t=t|0;var i=de;n=K(n*e);i=K(xE(n,K(1.0)));do{if(!(pt(i,K(0.0))|0)){n=K(n-i);if(pt(i,K(1.0))|0){n=K(n+K(1.0));break}if(r){n=K(n+K(1.0));break}if(!t){if(i>K(.5))i=K(1.0);else{t=pt(i,K(.5))|0;i=t?K(1.0):K(0.0)}n=K(n+i)}}else n=K(n-i)}while(0);return K(n/e)}function yt(n,e,r,t,i,u,o,a,f,l,s,d,_){n=n|0;e=K(e);r=r|0;t=K(t);i=i|0;u=K(u);o=o|0;a=K(a);f=K(f);l=K(l);s=K(s);d=K(d);_=_|0;var v=0,p=de,m=de,b=de,h=de,y=de,w=de;if(f<K(0.0)|l<K(0.0))_=0;else{if((_|0)!=0?(p=K(c[_+4>>2]),p!=K(0.0)):0){b=K(ht(e,p,0,0));h=K(ht(t,p,0,0));m=K(ht(u,p,0,0));p=K(ht(a,p,0,0))}else{m=u;b=e;p=a;h=t}if((i|0)==(n|0))v=pt(m,b)|0;else v=0;if((o|0)==(r|0))_=pt(p,h)|0;else _=0;if((!v?(y=K(e-s),!(wt(n,y,f)|0)):0)?!(Mt(n,y,i,f)|0):0)v=kt(n,y,i,u,f)|0;else v=1;if((!_?(w=K(t-d),!(wt(r,w,l)|0)):0)?!(Mt(r,w,o,l)|0):0)_=kt(r,w,o,a,l)|0;else _=1;_=v&_}return _|0}function wt(n,e,r){n=n|0;e=K(e);r=K(r);if((n|0)==1)n=pt(e,r)|0;else n=0;return n|0}function Mt(n,e,r,t){n=n|0;e=K(e);r=r|0;t=K(t);if((n|0)==2&(r|0)==0){if(!(e>=t))n=pt(e,t)|0;else n=1}else n=0;return n|0}function kt(n,e,r,t,i){n=n|0;e=K(e);r=r|0;t=K(t);i=K(i);if((n|0)==2&(r|0)==2&t>e){if(!(i<=e))n=pt(e,i)|0;else n=1}else n=0;return n|0}function gt(n,e,r,i,o,a,f,s,d,_,p){n=n|0;e=K(e);r=K(r);i=i|0;o=o|0;a=a|0;f=K(f);s=K(s);d=d|0;_=_|0;p=p|0;var m=0,b=0,h=0,y=0,w=de,M=de,k=0,g=0,T=0,A=0,S=0,E=0,C=0,L=0,R=0,P=0,B=0,O=de,N=de,I=de,F=0.0,x=0.0;B=v;v=v+160|0;L=B+152|0;C=B+120|0;E=B+104|0;T=B+72|0;y=B+56|0;S=B+8|0;g=B;A=(u[2279]|0)+1|0;u[2279]=A;R=n+984|0;if((t[R>>0]|0)!=0?(u[n+512>>2]|0)!=(u[2278]|0):0)k=4;else if((u[n+516>>2]|0)==(i|0))P=0;else k=4;if((k|0)==4){u[n+520>>2]=0;u[n+924>>2]=-1;u[n+928>>2]=-1;c[n+932>>2]=K(-1.0);c[n+936>>2]=K(-1.0);P=1}n:do{if(!(u[n+964>>2]|0)){if(d){m=n+916|0;if(!(pt(K(c[m>>2]),e)|0)){k=21;break}if(!(pt(K(c[n+920>>2]),r)|0)){k=21;break}if((u[n+924>>2]|0)!=(o|0)){k=21;break}m=(u[n+928>>2]|0)==(a|0)?m:0;k=22;break}h=u[n+520>>2]|0;if(!h)k=21;else{b=0;while(1){m=n+524+(b*24|0)|0;if(((pt(K(c[m>>2]),e)|0?pt(K(c[n+524+(b*24|0)+4>>2]),r)|0:0)?(u[n+524+(b*24|0)+8>>2]|0)==(o|0):0)?(u[n+524+(b*24|0)+12>>2]|0)==(a|0):0){k=22;break n}b=b+1|0;if(b>>>0>=h>>>0){k=21;break}}}}else{w=K(Tt(n,2,f));M=K(Tt(n,0,f));m=n+916|0;I=K(c[m>>2]);N=K(c[n+920>>2]);O=K(c[n+932>>2]);if(!(yt(o,e,a,r,u[n+924>>2]|0,I,u[n+928>>2]|0,N,O,K(c[n+936>>2]),w,M,p)|0)){h=u[n+520>>2]|0;if(!h)k=21;else{b=0;while(1){m=n+524+(b*24|0)|0;O=K(c[m>>2]);N=K(c[n+524+(b*24|0)+4>>2]);I=K(c[n+524+(b*24|0)+16>>2]);if(yt(o,e,a,r,u[n+524+(b*24|0)+8>>2]|0,O,u[n+524+(b*24|0)+12>>2]|0,N,I,K(c[n+524+(b*24|0)+20>>2]),w,M,p)|0){k=22;break n}b=b+1|0;if(b>>>0>=h>>>0){k=21;break}}}}else k=22}}while(0);do{if((k|0)==21){if(!(t[11697]|0)){m=0;k=31}else{m=0;k=28}}else if((k|0)==22){b=(t[11697]|0)!=0;if(!((m|0)!=0&(P^1)))if(b){k=28;break}else{k=31;break}y=m+16|0;u[n+908>>2]=u[y>>2];h=m+20|0;u[n+912>>2]=u[h>>2];if(!((t[11698]|0)==0|b^1)){u[g>>2]=St(A)|0;u[g+4>>2]=A;At(n,4,2972,g);b=u[n+972>>2]|0;if(b|0)vL[b&127](n);o=Et(o,d)|0;a=Et(a,d)|0;x=+K(c[y>>2]);F=+K(c[h>>2]);u[S>>2]=o;u[S+4>>2]=a;l[S+8>>3]=+e;l[S+16>>3]=+r;l[S+24>>3]=x;l[S+32>>3]=F;u[S+40>>2]=_;At(n,4,2989,S)}}}while(0);if((k|0)==28){b=St(A)|0;u[y>>2]=b;u[y+4>>2]=A;u[y+8>>2]=P?3047:11699;At(n,4,3038,y);b=u[n+972>>2]|0;if(b|0)vL[b&127](n);S=Et(o,d)|0;k=Et(a,d)|0;u[T>>2]=S;u[T+4>>2]=k;l[T+8>>3]=+e;l[T+16>>3]=+r;u[T+24>>2]=_;At(n,4,3049,T);k=31}if((k|0)==31){Ct(n,e,r,i,o,a,f,s,d,p);if(t[11697]|0){b=u[2279]|0;S=St(b)|0;u[E>>2]=S;u[E+4>>2]=b;u[E+8>>2]=P?3047:11699;At(n,4,3083,E);b=u[n+972>>2]|0;if(b|0)vL[b&127](n);S=Et(o,d)|0;E=Et(a,d)|0;F=+K(c[n+908>>2]);x=+K(c[n+912>>2]);u[C>>2]=S;u[C+4>>2]=E;l[C+8>>3]=F;l[C+16>>3]=x;u[C+24>>2]=_;At(n,4,3092,C)}u[n+516>>2]=i;if(!m){b=n+520|0;m=u[b>>2]|0;if((m|0)==16){if(t[11697]|0)At(n,4,3124,L);u[b>>2]=0;m=0}if(d)m=n+916|0;else{u[b>>2]=m+1;m=n+524+(m*24|0)|0}c[m>>2]=e;c[m+4>>2]=r;u[m+8>>2]=o;u[m+12>>2]=a;u[m+16>>2]=u[n+908>>2];u[m+20>>2]=u[n+912>>2];m=0}}if(d){u[n+416>>2]=u[n+908>>2];u[n+420>>2]=u[n+912>>2];t[n+985>>0]=1;t[R>>0]=0}u[2279]=(u[2279]|0)+-1;u[n+512>>2]=u[2278];v=B;return P|(m|0)==0|0}function Tt(n,e,r){n=n|0;e=e|0;r=K(r);var t=de;t=K(jt(n,e,r));return K(t+K(qt(n,e,r)))}function At(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;var i=0,o=0;o=v;v=v+16|0;i=o;u[i>>2]=t;if(!n)t=0;else t=u[n+976>>2]|0;Ut(t,n,e,r,i);v=o;return}function St(n){n=n|0;return(n>>>0>60?3201:3201+(60-n)|0)|0}function Et(n,e){n=n|0;e=e|0;var r=0,t=0,i=0;i=v;v=v+32|0;r=i+12|0;t=i;u[r>>2]=u[254];u[r+4>>2]=u[255];u[r+8>>2]=u[256];u[t>>2]=u[257];u[t+4>>2]=u[258];u[t+8>>2]=u[259];if((n|0)>2)n=11699;else n=u[(e?t:r)+(n<<2)>>2]|0;v=i;return n|0}function Ct(n,e,r,i,a,f,l,s,_,p){n=n|0;e=K(e);r=K(r);i=i|0;a=a|0;f=f|0;l=K(l);s=K(s);_=_|0;p=p|0;var m=0,b=0,h=0,y=0,w=de,M=de,k=de,g=de,T=de,A=de,S=de,E=0,C=0,L=0,R=de,P=de,B=0,O=de,N=0,I=0,F=0,x=0,U=0,H=0,D=0,W=0,Y=0,V=0,j=0,q=0,z=0,G=0,X=0,J=0,Z=0,Q=0,$=de,nn=de,en=de,rn=de,tn=de,un=0,on=0,an=0,fn=0,cn=0,ln=de,sn=de,dn=de,_n=de,vn=de,pn=de,mn=0,bn=de,hn=de,yn=de,wn=de,Mn=de,kn=de,gn=0,Tn=0,An=de,Sn=de,En=0,Cn=0,Ln=0,Rn=0,Pn=de,Bn=0,On=0,Nn=0,In=0,Fn=0,xn=0,Un=0,Hn=de,Dn=0,Wn=0;Un=v;v=v+16|0;un=Un+12|0;on=Un+8|0;an=Un+4|0;fn=Un;Fe(n,(a|0)==0|(ke(e)|0)^1,3326);Fe(n,(f|0)==0|(ke(r)|0)^1,3406);On=Kt(n,i)|0;u[n+496>>2]=On;Fn=Xt(2,On)|0;xn=Xt(0,On)|0;c[n+440>>2]=K(jt(n,Fn,l));c[n+444>>2]=K(qt(n,Fn,l));c[n+428>>2]=K(jt(n,xn,l));c[n+436>>2]=K(qt(n,xn,l));c[n+464>>2]=K(Jt(n,Fn));c[n+468>>2]=K(Zt(n,Fn));c[n+452>>2]=K(Jt(n,xn));c[n+460>>2]=K(Zt(n,xn));c[n+488>>2]=K(Qt(n,Fn,l));c[n+492>>2]=K($t(n,Fn,l));c[n+476>>2]=K(Qt(n,xn,l));c[n+484>>2]=K($t(n,xn,l));do{if(!(u[n+964>>2]|0)){Nn=n+948|0;In=(u[n+952>>2]|0)-(u[Nn>>2]|0)>>2;if(!In){ei(n,e,r,a,f,l,s);break}if(!_?ri(n,e,r,a,f,l,s)|0:0)break;Ve(n);J=n+508|0;t[J>>0]=0;Fn=Xt(u[n+4>>2]|0,On)|0;xn=ti(Fn,On)|0;Bn=zt(Fn)|0;Z=u[n+8>>2]|0;Cn=n+28|0;Q=(u[Cn>>2]|0)!=0;Mn=Bn?l:s;An=Bn?s:l;$=K(ii(n,Fn,l));nn=K(ui(n,Fn,l));w=K(ii(n,xn,l));kn=K(oi(n,Fn,l));Sn=K(oi(n,xn,l));L=Bn?a:f;En=Bn?f:a;Pn=Bn?kn:Sn;T=Bn?Sn:kn;wn=K(Tt(n,2,l));g=K(Tt(n,0,l));M=K(K(Ot(n+364|0,l))-Pn);k=K(K(Ot(n+380|0,l))-Pn);A=K(K(Ot(n+372|0,s))-T);S=K(K(Ot(n+388|0,s))-T);en=Bn?M:A;rn=Bn?k:S;wn=K(e-wn);e=K(wn-Pn);if(ke(e)|0)Pn=e;else Pn=K(OE(K(IE(e,k)),M));hn=K(r-g);e=K(hn-T);if(ke(e)|0)yn=e;else yn=K(OE(K(IE(e,S)),A));M=Bn?Pn:yn;bn=Bn?yn:Pn;n:do{if((L|0)==1){i=0;b=0;while(1){m=Be(n,b)|0;if(!i){if(K(fi(m))>K(0.0)?K(ci(m))>K(0.0):0)i=m;else i=0}else if(ai(m)|0){y=0;break n}b=b+1|0;if(b>>>0>=In>>>0){y=i;break}}}else y=0}while(0);E=y+500|0;C=y+504|0;i=0;m=0;e=K(0.0);h=0;do{b=u[(u[Nn>>2]|0)+(h<<2)>>2]|0;if((u[b+36>>2]|0)==1){li(b);t[b+985>>0]=1;t[b+984>>0]=0}else{Pt(b);if(_)Nt(b,Kt(b,On)|0,M,bn,Pn);do{if((u[b+24>>2]|0)!=1){if((b|0)==(y|0)){u[E>>2]=u[2278];c[C>>2]=K(0.0);break}else{si(n,b,Pn,a,yn,Pn,yn,f,On,p);break}}else{if(m|0)u[m+960>>2]=b;u[b+960>>2]=0;m=b;i=(i|0)==0?b:i}}while(0);pn=K(c[b+504>>2]);e=K(e+K(pn+K(Tt(b,Fn,Pn))))}h=h+1|0}while((h|0)!=(In|0));F=e>M;mn=Q&((L|0)==2&F)?1:L;N=(En|0)==1;U=N&(_^1);H=(mn|0)==1;D=(mn|0)==2;W=976+(Fn<<2)|0;Y=(En|2|0)==2;G=N&(Q^1);V=1040+(xn<<2)|0;j=1040+(Fn<<2)|0;q=976+(xn<<2)|0;z=(En|0)!=1;F=Q&((L|0)!=0&F);I=n+976|0;N=N^1;e=M;B=0;x=0;pn=K(0.0);tn=K(0.0);while(1){n:do{if(B>>>0<In>>>0){C=u[Nn>>2]|0;h=0;S=K(0.0);A=K(0.0);k=K(0.0);M=K(0.0);b=0;m=0;y=B;while(1){E=u[C+(y<<2)>>2]|0;if((u[E+36>>2]|0)!=1?(u[E+940>>2]=x,(u[E+24>>2]|0)!=1):0){g=K(Tt(E,Fn,Pn));X=u[W>>2]|0;r=K(Ot(E+380+(X<<3)|0,Mn));T=K(c[E+504>>2]);r=K(IE(r,T));r=K(OE(K(Ot(E+364+(X<<3)|0,Mn)),r));if(Q&(h|0)!=0&K(g+K(A+r))>e){f=h;g=S;L=y;break n}g=K(g+r);r=K(A+g);g=K(S+g);if(ai(E)|0){k=K(k+K(fi(E)));M=K(M-K(T*K(ci(E))))}if(m|0)u[m+960>>2]=E;u[E+960>>2]=0;h=h+1|0;m=E;b=(b|0)==0?E:b}else{g=S;r=A}y=y+1|0;if(y>>>0<In>>>0){S=g;A=r}else{f=h;L=y;break}}}else{f=0;g=K(0.0);k=K(0.0);M=K(0.0);b=0;L=B}}while(0);X=k>K(0.0)&k<K(1.0);R=X?K(1.0):k;X=M>K(0.0)&M<K(1.0);S=X?K(1.0):M;do{if(!H){if(!(g<en&((ke(en)|0)^1))){if(!(g>rn&((ke(rn)|0)^1))){if(!(t[(u[I>>2]|0)+3>>0]|0)){if(!(R==K(0.0))?!(K(fi(n))==K(0.0)):0){X=53;break}e=g;X=53}else X=51}else{e=rn;X=51}}else{e=en;X=51}}else X=51}while(0);if((X|0)==51){X=0;if(ke(e)|0)X=53;else{P=K(e-g);O=e}}if((X|0)==53){X=0;if(g<K(0.0)){P=K(-g);O=e}else{P=K(0.0);O=e}}if(!U?(cn=(b|0)==0,!cn):0){h=u[W>>2]|0;y=P<K(0.0);T=K(P/S);E=P>K(0.0);A=K(P/R);k=K(0.0);g=K(0.0);e=K(0.0);m=b;do{r=K(Ot(m+380+(h<<3)|0,Mn));M=K(Ot(m+364+(h<<3)|0,Mn));M=K(IE(r,K(OE(M,K(c[m+504>>2])))));if(y){r=K(M*K(ci(m)));if(r!=K(-0.0)?(Hn=K(M-K(T*r)),ln=K(di(m,Fn,Hn,O,Pn)),Hn!=ln):0){k=K(k-K(ln-M));e=K(e+r)}}else if((E?(sn=K(fi(m)),sn!=K(0.0)):0)?(Hn=K(M+K(A*sn)),dn=K(di(m,Fn,Hn,O,Pn)),Hn!=dn):0){k=K(k-K(dn-M));g=K(g-sn)}m=u[m+960>>2]|0}while((m|0)!=0);e=K(S+e);M=K(P+k);if(!cn){T=K(R+g);y=u[W>>2]|0;E=M<K(0.0);C=e==K(0.0);A=K(M/e);h=M>K(0.0);T=K(M/T);e=K(0.0);do{Hn=K(Ot(b+380+(y<<3)|0,Mn));k=K(Ot(b+364+(y<<3)|0,Mn));k=K(IE(Hn,K(OE(k,K(c[b+504>>2])))));if(E){Hn=K(k*K(ci(b)));M=K(-Hn);if(Hn!=K(-0.0)){Hn=K(A*M);M=K(di(b,Fn,K(k+(C?M:Hn)),O,Pn))}else M=k}else if(h?(_n=K(fi(b)),_n!=K(0.0)):0)M=K(di(b,Fn,K(k+K(T*_n)),O,Pn));else M=k;e=K(e-K(M-k));g=K(Tt(b,Fn,Pn));r=K(Tt(b,xn,Pn));M=K(M+g);c[on>>2]=M;u[fn>>2]=1;k=K(c[b+396>>2]);n:do{if(ke(k)|0){m=ke(bn)|0;do{if(!m){if(F|(Bt(b,xn,bn)|0|N))break;if((_i(n,b)|0)!=4)break;if((u[(vi(b,xn)|0)+4>>2]|0)==3)break;if((u[(pi(b,xn)|0)+4>>2]|0)==3)break;c[un>>2]=bn;u[an>>2]=1;break n}}while(0);if(Bt(b,xn,bn)|0){m=u[b+992+(u[q>>2]<<2)>>2]|0;Hn=K(r+K(Ot(m,bn)));c[un>>2]=Hn;m=z&(u[m+4>>2]|0)==2;u[an>>2]=((ke(Hn)|0|m)^1)&1;break}else{c[un>>2]=bn;u[an>>2]=m?0:2;break}}else{Hn=K(M-g);R=K(Hn/k);Hn=K(k*Hn);u[an>>2]=1;c[un>>2]=K(r+(Bn?R:Hn))}}while(0);mi(b,Fn,O,Pn,fn,on);mi(b,xn,bn,Pn,an,un);do{if(!(Bt(b,xn,bn)|0)?(_i(n,b)|0)==4:0){if((u[(vi(b,xn)|0)+4>>2]|0)==3){m=0;break}m=(u[(pi(b,xn)|0)+4>>2]|0)!=3}else m=0}while(0);Hn=K(c[on>>2]);R=K(c[un>>2]);Dn=u[fn>>2]|0;Wn=u[an>>2]|0;gt(b,Bn?Hn:R,Bn?R:Hn,On,Bn?Dn:Wn,Bn?Wn:Dn,Pn,yn,_&(m^1),3488,p)|0;t[J>>0]=t[J>>0]|t[b+508>>0];b=u[b+960>>2]|0}while((b|0)!=0)}else e=K(0.0)}else e=K(0.0);e=K(P+e);Wn=e<K(0.0)&1;t[J>>0]=Wn|o[J>>0];if(D&e>K(0.0)){m=u[W>>2]|0;if((u[n+364+(m<<3)+4>>2]|0)!=0?(vn=K(Ot(n+364+(m<<3)|0,Mn)),vn>=K(0.0)):0)M=K(OE(K(0.0),K(vn-K(O-e))));else M=K(0.0)}else M=e;E=B>>>0<L>>>0;if(E){y=u[Nn>>2]|0;h=B;m=0;do{b=u[y+(h<<2)>>2]|0;if(!(u[b+24>>2]|0)){m=((u[(vi(b,Fn)|0)+4>>2]|0)==3&1)+m|0;m=m+((u[(pi(b,Fn)|0)+4>>2]|0)==3&1)|0}h=h+1|0}while((h|0)!=(L|0));if(m){g=K(0.0);r=K(0.0)}else X=101}else X=101;n:do{if((X|0)==101){X=0;switch(Z|0){case 1:{m=0;g=K(M*K(.5));r=K(0.0);break n}case 2:{m=0;g=M;r=K(0.0);break n}case 3:{if(f>>>0<=1){m=0;g=K(0.0);r=K(0.0);break n}r=K((f+-1|0)>>>0);m=0;g=K(0.0);r=K(K(OE(M,K(0.0)))/r);break n}case 5:{r=K(M/K((f+1|0)>>>0));m=0;g=r;break n}case 4:{r=K(M/K(f>>>0));m=0;g=K(r*K(.5));break n}default:{m=0;g=K(0.0);r=K(0.0);break n}}}}while(0);e=K($+g);if(E){k=K(M/K(m|0));h=u[Nn>>2]|0;b=B;M=K(0.0);do{m=u[h+(b<<2)>>2]|0;n:do{if((u[m+36>>2]|0)!=1){switch(u[m+24>>2]|0){case 1:{if(bi(m,Fn)|0){if(!_)break n;Hn=K(hi(m,Fn,O));Hn=K(Hn+K(Jt(n,Fn)));Hn=K(Hn+K(jt(m,Fn,Pn)));c[m+400+(u[j>>2]<<2)>>2]=Hn;break n}break}case 0:{Wn=(u[(vi(m,Fn)|0)+4>>2]|0)==3;Hn=K(k+e);e=Wn?Hn:e;if(_){Wn=m+400+(u[j>>2]<<2)|0;c[Wn>>2]=K(e+K(c[Wn>>2]))}Wn=(u[(pi(m,Fn)|0)+4>>2]|0)==3;Hn=K(k+e);e=Wn?Hn:e;if(U){Hn=K(r+K(Tt(m,Fn,Pn)));M=bn;e=K(e+K(Hn+K(c[m+504>>2])));break n}else{e=K(e+K(r+K(yi(m,Fn,Pn))));M=K(OE(M,K(yi(m,xn,Pn))));break n}}default:{}}if(_){Hn=K(g+K(Jt(n,Fn)));Wn=m+400+(u[j>>2]<<2)|0;c[Wn>>2]=K(Hn+K(c[Wn>>2]))}}}while(0);b=b+1|0}while((b|0)!=(L|0))}else M=K(0.0);r=K(nn+e);if(Y)g=K(K(di(n,xn,K(Sn+M),An,l))-Sn);else g=bn;k=K(K(di(n,xn,K(Sn+(G?bn:M)),An,l))-Sn);if(E&_){b=B;do{h=u[(u[Nn>>2]|0)+(b<<2)>>2]|0;do{if((u[h+36>>2]|0)!=1){if((u[h+24>>2]|0)==1){if(bi(h,xn)|0){Hn=K(hi(h,xn,bn));Hn=K(Hn+K(Jt(n,xn)));Hn=K(Hn+K(jt(h,xn,Pn)));m=u[V>>2]|0;c[h+400+(m<<2)>>2]=Hn;if(!(ke(Hn)|0))break}else m=u[V>>2]|0;Hn=K(Jt(n,xn));c[h+400+(m<<2)>>2]=K(Hn+K(jt(h,xn,Pn)));break}m=_i(n,h)|0;do{if((m|0)==4){if((u[(vi(h,xn)|0)+4>>2]|0)==3){X=139;break}if((u[(pi(h,xn)|0)+4>>2]|0)==3){X=139;break}if(Bt(h,xn,bn)|0){e=w;break}Dn=u[h+908+(u[W>>2]<<2)>>2]|0;u[un>>2]=Dn;e=K(c[h+396>>2]);Wn=ke(e)|0;M=(u[d>>2]=Dn,K(c[d>>2]));if(Wn)e=k;else{P=K(Tt(h,xn,Pn));Hn=K(M/e);e=K(e*M);e=K(P+(Bn?Hn:e))}c[on>>2]=e;c[un>>2]=K(K(Tt(h,Fn,Pn))+M);u[an>>2]=1;u[fn>>2]=1;mi(h,Fn,O,Pn,an,un);mi(h,xn,bn,Pn,fn,on);e=K(c[un>>2]);P=K(c[on>>2]);Hn=Bn?e:P;e=Bn?P:e;Wn=((ke(Hn)|0)^1)&1;gt(h,Hn,e,On,Wn,((ke(e)|0)^1)&1,Pn,yn,1,3493,p)|0;e=w}else X=139}while(0);n:do{if((X|0)==139){X=0;e=K(g-K(yi(h,xn,Pn)));do{if((u[(vi(h,xn)|0)+4>>2]|0)==3){if((u[(pi(h,xn)|0)+4>>2]|0)!=3)break;e=K(w+K(OE(K(0.0),K(e*K(.5)))));break n}}while(0);if((u[(pi(h,xn)|0)+4>>2]|0)==3){e=w;break}if((u[(vi(h,xn)|0)+4>>2]|0)==3){e=K(w+K(OE(K(0.0),e)));break}switch(m|0){case 1:{e=w;break n}case 2:{e=K(w+K(e*K(.5)));break n}default:{e=K(w+e);break n}}}}while(0);Hn=K(pn+e);Wn=h+400+(u[V>>2]<<2)|0;c[Wn>>2]=K(Hn+K(c[Wn>>2]))}}while(0);b=b+1|0}while((b|0)!=(L|0))}pn=K(pn+k);tn=K(OE(tn,r));f=x+1|0;if(L>>>0>=In>>>0)break;else{e=O;B=L;x=f}}do{if(_){m=f>>>0>1;if(!m?!(wi(n)|0):0)break;if(!(ke(bn)|0)){e=K(bn-pn);n:do{switch(u[n+12>>2]|0){case 3:{w=K(w+e);A=K(0.0);break}case 2:{w=K(w+K(e*K(.5)));A=K(0.0);break}case 4:{if(bn>pn)A=K(e/K(f>>>0));else A=K(0.0);break}case 7:if(bn>pn){w=K(w+K(e/K(f<<1>>>0)));A=K(e/K(f>>>0));A=m?A:K(0.0);break n}else{w=K(w+K(e*K(.5)));A=K(0.0);break n}case 6:{A=K(e/K(x>>>0));A=bn>pn&m?A:K(0.0);break}default:A=K(0.0)}}while(0);if(f|0){E=1040+(xn<<2)|0;C=976+(xn<<2)|0;y=0;b=0;while(1){n:do{if(b>>>0<In>>>0){M=K(0.0);k=K(0.0);e=K(0.0);h=b;while(1){m=u[(u[Nn>>2]|0)+(h<<2)>>2]|0;do{if((u[m+36>>2]|0)!=1?(u[m+24>>2]|0)==0:0){if((u[m+940>>2]|0)!=(y|0))break n;if(Mi(m,xn)|0){Hn=K(c[m+908+(u[C>>2]<<2)>>2]);e=K(OE(e,K(Hn+K(Tt(m,xn,Pn)))))}if((_i(n,m)|0)!=5)break;vn=K(ki(m));vn=K(vn+K(jt(m,0,Pn)));Hn=K(c[m+912>>2]);Hn=K(K(Hn+K(Tt(m,0,Pn)))-vn);vn=K(OE(k,vn));Hn=K(OE(M,Hn));M=Hn;k=vn;e=K(OE(e,K(vn+Hn)))}}while(0);m=h+1|0;if(m>>>0<In>>>0)h=m;else{h=m;break}}}else{k=K(0.0);e=K(0.0);h=b}}while(0);T=K(A+e);r=w;w=K(w+T);if(b>>>0<h>>>0){g=K(r+k);m=b;do{b=u[(u[Nn>>2]|0)+(m<<2)>>2]|0;n:do{if((u[b+36>>2]|0)!=1?(u[b+24>>2]|0)==0:0)switch(_i(n,b)|0){case 1:{Hn=K(r+K(jt(b,xn,Pn)));c[b+400+(u[E>>2]<<2)>>2]=Hn;break n}case 3:{Hn=K(K(w-K(qt(b,xn,Pn)))-K(c[b+908+(u[C>>2]<<2)>>2]));c[b+400+(u[E>>2]<<2)>>2]=Hn;break n}case 2:{Hn=K(r+K(K(T-K(c[b+908+(u[C>>2]<<2)>>2]))*K(.5)));c[b+400+(u[E>>2]<<2)>>2]=Hn;break n}case 4:{Hn=K(r+K(jt(b,xn,Pn)));c[b+400+(u[E>>2]<<2)>>2]=Hn;if(Bt(b,xn,bn)|0)break n;if(Bn){M=K(c[b+908>>2]);e=K(M+K(Tt(b,Fn,Pn)));k=T}else{k=K(c[b+912>>2]);k=K(k+K(Tt(b,xn,Pn)));e=T;M=K(c[b+908>>2])}if(pt(e,M)|0?pt(k,K(c[b+912>>2]))|0:0)break n;gt(b,e,k,On,1,1,Pn,yn,1,3501,p)|0;break n}case 5:{c[b+404>>2]=K(K(g-K(ki(b)))+K(hi(b,0,bn)));break n}default:break n}}while(0);m=m+1|0}while((m|0)!=(h|0))}y=y+1|0;if((y|0)==(f|0))break;else b=h}}}}}while(0);c[n+908>>2]=K(di(n,2,wn,l,l));c[n+912>>2]=K(di(n,0,hn,s,l));if((mn|0)!=0?(gn=u[n+32>>2]|0,Tn=(mn|0)==2,!(Tn&(gn|0)!=2)):0){if(Tn&(gn|0)==2){e=K(kn+O);e=K(OE(K(IE(e,K(gi(n,Fn,tn,Mn)))),kn));X=198}}else{e=K(di(n,Fn,tn,Mn,l));X=198}if((X|0)==198)c[n+908+(u[976+(Fn<<2)>>2]<<2)>>2]=e;if((En|0)!=0?(Ln=u[n+32>>2]|0,Rn=(En|0)==2,!(Rn&(Ln|0)!=2)):0){if(Rn&(Ln|0)==2){e=K(Sn+bn);e=K(OE(K(IE(e,K(gi(n,xn,K(Sn+pn),An)))),Sn));X=204}}else{e=K(di(n,xn,K(Sn+pn),An,l));X=204}if((X|0)==204)c[n+908+(u[976+(xn<<2)>>2]<<2)>>2]=e;if(_){if((u[Cn>>2]|0)==2){b=976+(xn<<2)|0;h=1040+(xn<<2)|0;m=0;do{y=Be(n,m)|0;if(!(u[y+24>>2]|0)){Dn=u[b>>2]|0;Hn=K(c[n+908+(Dn<<2)>>2]);Wn=y+400+(u[h>>2]<<2)|0;Hn=K(Hn-K(c[Wn>>2]));c[Wn>>2]=K(Hn-K(c[y+908+(Dn<<2)>>2]))}m=m+1|0}while((m|0)!=(In|0))}if(i|0){m=Bn?mn:a;do{Ti(n,i,Pn,m,yn,On,p);i=u[i+960>>2]|0}while((i|0)!=0)}m=(Fn|2|0)==3;b=(xn|2|0)==3;if(m|b){i=0;do{h=u[(u[Nn>>2]|0)+(i<<2)>>2]|0;if((u[h+36>>2]|0)!=1){if(m)Ai(n,h,Fn);if(b)Ai(n,h,xn)}i=i+1|0}while((i|0)!=(In|0))}}}else ni(n,e,r,a,f,l,s)}while(0);v=Un;return}function Lt(n,e){n=n|0;e=K(e);var r=0;Ae(n,e>=K(0.0),3147);r=e==K(0.0);c[n+4>>2]=r?K(0.0):e;return}function Rt(n,e,r,i){n=n|0;e=K(e);r=K(r);i=i|0;var o=de,a=de,f=0,l=0,s=0;u[2278]=(u[2278]|0)+1;Pt(n);if(!(Bt(n,2,e)|0)){o=K(Ot(n+380|0,e));if(!(o>=K(0.0))){s=((ke(e)|0)^1)&1;o=e}else s=2}else{o=K(Ot(u[n+992>>2]|0,e));s=1;o=K(o+K(Tt(n,2,e)))}if(!(Bt(n,0,r)|0)){a=K(Ot(n+388|0,r));if(!(a>=K(0.0))){l=((ke(r)|0)^1)&1;a=r}else l=2}else{a=K(Ot(u[n+996>>2]|0,r));l=1;a=K(a+K(Tt(n,0,e)))}f=n+976|0;if(gt(n,o,a,i,s,l,e,r,1,3189,u[f>>2]|0)|0?(Nt(n,u[n+496>>2]|0,e,r,e),It(n,K(c[(u[f>>2]|0)+4>>2]),K(0.0),K(0.0)),t[11696]|0):0)mt(n,7);return}function Pt(n){n=n|0;var e=0,r=0,t=0,i=0,o=0,a=0,f=0,c=0,l=0,s=0;f=v;v=v+32|0;a=f+24|0;o=f+16|0;t=f+8|0;i=f;r=0;do{e=n+380+(r<<3)|0;if(!((u[n+380+(r<<3)+4>>2]|0)!=0?(c=e,l=u[c+4>>2]|0,s=t,u[s>>2]=u[c>>2],u[s+4>>2]=l,s=n+364+(r<<3)|0,l=u[s+4>>2]|0,c=i,u[c>>2]=u[s>>2],u[c+4>>2]=l,u[o>>2]=u[t>>2],u[o+4>>2]=u[t+4>>2],u[a>>2]=u[i>>2],u[a+4>>2]=u[i+4>>2],vt(o,a)|0):0))e=n+348+(r<<3)|0;u[n+992+(r<<2)>>2]=e;r=r+1|0}while((r|0)!=2);v=f;return}function Bt(n,e,r){n=n|0;e=e|0;r=K(r);var t=0;n=u[n+992+(u[976+(e<<2)>>2]<<2)>>2]|0;switch(u[n+4>>2]|0){case 0:case 3:{n=0;break}case 1:{if(K(c[n>>2])<K(0.0))n=0;else t=5;break}case 2:{if(K(c[n>>2])<K(0.0))n=0;else n=(ke(r)|0)^1;break}default:t=5}if((t|0)==5)n=1;return n|0}function Ot(n,e){n=n|0;e=K(e);switch(u[n+4>>2]|0){case 2:{e=K(K(K(c[n>>2])*e)/K(100.0));break}case 1:{e=K(c[n>>2]);break}default:e=K(k)}return K(e)}function Nt(n,e,r,t,i){n=n|0;e=e|0;r=K(r);t=K(t);i=K(i);var o=0,a=de;e=u[n+944>>2]|0?e:1;o=Xt(u[n+4>>2]|0,e)|0;e=ti(o,e)|0;r=K(Pi(n,o,r));t=K(Pi(n,e,t));a=K(r+K(jt(n,o,i)));c[n+400+(u[1040+(o<<2)>>2]<<2)>>2]=a;r=K(r+K(qt(n,o,i)));c[n+400+(u[1e3+(o<<2)>>2]<<2)>>2]=r;r=K(t+K(jt(n,e,i)));c[n+400+(u[1040+(e<<2)>>2]<<2)>>2]=r;i=K(t+K(qt(n,e,i)));c[n+400+(u[1e3+(e<<2)>>2]<<2)>>2]=i;return}function It(n,e,r,t){n=n|0;e=K(e);r=K(r);t=K(t);var i=0,o=0,a=de,f=de,l=0,s=0,d=de,_=0,v=de,p=de,m=de,b=de;if(!(e==K(0.0))){i=n+400|0;b=K(c[i>>2]);o=n+404|0;m=K(c[o>>2]);_=n+416|0;p=K(c[_>>2]);s=n+420|0;a=K(c[s>>2]);v=K(b+r);d=K(m+t);t=K(v+p);f=K(d+a);l=(u[n+988>>2]|0)==1;c[i>>2]=K(ht(b,e,0,l));c[o>>2]=K(ht(m,e,0,l));r=K(xE(K(p*e),K(1.0)));if(pt(r,K(0.0))|0)o=0;else o=(pt(r,K(1.0))|0)^1;r=K(xE(K(a*e),K(1.0)));if(pt(r,K(0.0))|0)i=0;else i=(pt(r,K(1.0))|0)^1;b=K(ht(t,e,l&o,l&(o^1)));c[_>>2]=K(b-K(ht(v,e,0,l)));b=K(ht(f,e,l&i,l&(i^1)));c[s>>2]=K(b-K(ht(d,e,0,l)));o=(u[n+952>>2]|0)-(u[n+948>>2]|0)>>2;if(o|0){i=0;do{It(Be(n,i)|0,e,v,d);i=i+1|0}while((i|0)!=(o|0))}}return}function Ft(n,e,r,t,i){n=n|0;e=e|0;r=r|0;t=t|0;i=i|0;switch(r|0){case 5:case 0:{n=uE(u[489]|0,t,i)|0;break}default:n=HE(t,i)|0}return n|0}function xt(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;var i=0,o=0;i=v;v=v+16|0;o=i;u[o>>2]=t;Ut(n,0,e,r,o);v=i;return}function Ut(n,e,r,t,i){n=n|0;e=e|0;r=r|0;t=t|0;i=i|0;n=n|0?n:956;CL[u[n+8>>2]&1](n,e,r,t,i)|0;if((r|0)==5)Xn();else return}function Ht(n,e,r){n=n|0;e=e|0;r=r|0;t[n+e>>0]=r&1;return}function Dt(n,e){n=n|0;e=e|0;var r=0,t=0;u[n>>2]=0;u[n+4>>2]=0;u[n+8>>2]=0;r=e+4|0;t=(u[r>>2]|0)-(u[e>>2]|0)>>2;if(t|0){Wt(n,t);Yt(n,u[e>>2]|0,u[r>>2]|0,t)}return}function Wt(n,e){n=n|0;e=e|0;var r=0;if((Vt(n)|0)>>>0<e>>>0)DE(n);if(e>>>0>1073741823)Xn();else{r=GE(e<<2)|0;u[n+4>>2]=r;u[n>>2]=r;u[n+8>>2]=r+(e<<2);return}}function Yt(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;t=n+4|0;n=r-e|0;if((n|0)>0){iC(u[t>>2]|0,e|0,n|0)|0;u[t>>2]=(u[t>>2]|0)+(n>>>2<<2)}return}function Vt(n){n=n|0;return 1073741823}function jt(n,e,r){n=n|0;e=e|0;r=K(r);if(zt(e)|0?(u[n+96>>2]|0)!=0:0)n=n+92|0;else n=ge(n+60|0,u[1040+(e<<2)>>2]|0,992)|0;return K(Gt(n,r))}function qt(n,e,r){n=n|0;e=e|0;r=K(r);if(zt(e)|0?(u[n+104>>2]|0)!=0:0)n=n+100|0;else n=ge(n+60|0,u[1e3+(e<<2)>>2]|0,992)|0;return K(Gt(n,r))}function zt(n){n=n|0;return(n|1|0)==3|0}function Gt(n,e){n=n|0;e=K(e);if((u[n+4>>2]|0)==3)e=K(0.0);else e=K(Ot(n,e));return K(e)}function Kt(n,e){n=n|0;e=e|0;n=u[n>>2]|0;return((n|0)==0?(e|0)>1?e:1:n)|0}function Xt(n,e){n=n|0;e=e|0;var r=0;n:do{if((e|0)==2){switch(n|0){case 2:{n=3;break n}case 3:break;default:{r=4;break n}}n=2}else r=4}while(0);return n|0}function Jt(n,e){n=n|0;e=e|0;var r=de;if(!((zt(e)|0?(u[n+312>>2]|0)!=0:0)?(r=K(c[n+308>>2]),r>=K(0.0)):0))r=K(OE(K(c[(ge(n+276|0,u[1040+(e<<2)>>2]|0,992)|0)>>2]),K(0.0)));return K(r)}function Zt(n,e){n=n|0;e=e|0;var r=de;if(!((zt(e)|0?(u[n+320>>2]|0)!=0:0)?(r=K(c[n+316>>2]),r>=K(0.0)):0))r=K(OE(K(c[(ge(n+276|0,u[1e3+(e<<2)>>2]|0,992)|0)>>2]),K(0.0)));return K(r)}function Qt(n,e,r){n=n|0;e=e|0;r=K(r);var t=de;if(!((zt(e)|0?(u[n+240>>2]|0)!=0:0)?(t=K(Ot(n+236|0,r)),t>=K(0.0)):0))t=K(OE(K(Ot(ge(n+204|0,u[1040+(e<<2)>>2]|0,992)|0,r)),K(0.0)));return K(t)}function $t(n,e,r){n=n|0;e=e|0;r=K(r);var t=de;if(!((zt(e)|0?(u[n+248>>2]|0)!=0:0)?(t=K(Ot(n+244|0,r)),t>=K(0.0)):0))t=K(OE(K(Ot(ge(n+204|0,u[1e3+(e<<2)>>2]|0,992)|0,r)),K(0.0)));return K(t)}function ni(n,e,r,t,i,o,a){n=n|0;e=K(e);r=K(r);t=t|0;i=i|0;o=K(o);a=K(a);var f=de,l=de,s=de,d=de,_=de,p=de,m=0,b=0,h=0;h=v;v=v+16|0;m=h;b=n+964|0;Fe(n,(u[b>>2]|0)!=0,3519);f=K(oi(n,2,e));l=K(oi(n,0,e));s=K(Tt(n,2,e));d=K(Tt(n,0,e));if(ke(e)|0)_=e;else _=K(OE(K(0.0),K(K(e-s)-f)));if(ke(r)|0)p=r;else p=K(OE(K(0.0),K(K(r-d)-l)));if((t|0)==1&(i|0)==1){c[n+908>>2]=K(di(n,2,K(e-s),o,o));e=K(di(n,0,K(r-d),a,o))}else{RL[u[b>>2]&1](m,n,_,t,p,i);_=K(f+K(c[m>>2]));p=K(e-s);c[n+908>>2]=K(di(n,2,(t|2|0)==2?_:p,o,o));p=K(l+K(c[m+4>>2]));e=K(r-d);e=K(di(n,0,(i|2|0)==2?p:e,a,o))}c[n+912>>2]=e;v=h;return}function ei(n,e,r,t,i,u,o){n=n|0;e=K(e);r=K(r);t=t|0;i=i|0;u=K(u);o=K(o);var a=de,f=de,l=de,s=de;l=K(oi(n,2,u));a=K(oi(n,0,u));s=K(Tt(n,2,u));f=K(Tt(n,0,u));e=K(e-s);c[n+908>>2]=K(di(n,2,(t|2|0)==2?l:e,u,u));r=K(r-f);c[n+912>>2]=K(di(n,0,(i|2|0)==2?a:r,o,u));return}function ri(n,e,r,t,i,u,o){n=n|0;e=K(e);r=K(r);t=t|0;i=i|0;u=K(u);o=K(o);var a=0,f=de,l=de;a=(t|0)==2;if((!(e<=K(0.0)&a)?!(r<=K(0.0)&(i|0)==2):0)?!((t|0)==1&(i|0)==1):0)n=0;else{f=K(Tt(n,0,u));l=K(Tt(n,2,u));a=e<K(0.0)&a|(ke(e)|0);e=K(e-l);c[n+908>>2]=K(di(n,2,a?K(0.0):e,u,u));e=K(r-f);a=r<K(0.0)&(i|0)==2|(ke(r)|0);c[n+912>>2]=K(di(n,0,a?K(0.0):e,o,u));n=1}return n|0}function ti(n,e){n=n|0;e=e|0;if(Si(n)|0)n=Xt(2,e)|0;else n=0;return n|0}function ii(n,e,r){n=n|0;e=e|0;r=K(r);r=K(Qt(n,e,r));return K(r+K(Jt(n,e)))}function ui(n,e,r){n=n|0;e=e|0;r=K(r);r=K($t(n,e,r));return K(r+K(Zt(n,e)))}function oi(n,e,r){n=n|0;e=e|0;r=K(r);var t=de;t=K(ii(n,e,r));return K(t+K(ui(n,e,r)))}function ai(n){n=n|0;if(!(u[n+24>>2]|0)){if(K(fi(n))!=K(0.0))n=1;else n=K(ci(n))!=K(0.0)}else n=0;return n|0}function fi(n){n=n|0;var e=de;if(u[n+944>>2]|0){e=K(c[n+44>>2]);if(ke(e)|0){e=K(c[n+40>>2]);n=e>K(0.0)&((ke(e)|0)^1);return K(n?e:K(0.0))}}else e=K(0.0);return K(e)}function ci(n){n=n|0;var e=de,r=0,i=de;do{if(u[n+944>>2]|0){e=K(c[n+48>>2]);if(ke(e)|0){r=t[(u[n+976>>2]|0)+2>>0]|0;if(r<<24>>24==0?(i=K(c[n+40>>2]),i<K(0.0)&((ke(i)|0)^1)):0){e=K(-i);break}e=r<<24>>24?K(1.0):K(0.0)}}else e=K(0.0)}while(0);return K(e)}function li(n){n=n|0;var e=0,r=0;eC(n+400|0,0,540)|0;t[n+985>>0]=1;Ve(n);r=Pe(n)|0;if(r|0){e=n+948|0;n=0;do{li(u[(u[e>>2]|0)+(n<<2)>>2]|0);n=n+1|0}while((n|0)!=(r|0))}return}function si(n,e,r,t,i,o,a,f,l,s){n=n|0;e=e|0;r=K(r);t=t|0;i=K(i);o=K(o);a=K(a);f=f|0;l=l|0;s=s|0;var d=0,_=de,p=0,m=0,b=de,h=de,y=0,w=de,M=0,g=de,T=0,A=0,S=0,E=0,C=0,L=0,R=0,P=0,B=0,O=0;B=v;v=v+16|0;S=B+12|0;E=B+8|0;C=B+4|0;L=B;P=Xt(u[n+4>>2]|0,l)|0;T=zt(P)|0;_=K(Ot(Ei(e)|0,T?o:a));A=Bt(e,2,o)|0;R=Bt(e,0,a)|0;do{if(!(ke(_)|0)?!(ke(T?r:i)|0):0){d=e+504|0;if(!(ke(K(c[d>>2]))|0)){if(!(Ci(u[e+976>>2]|0,0)|0))break;if((u[e+500>>2]|0)==(u[2278]|0))break}c[d>>2]=K(OE(_,K(oi(e,P,o))))}else p=7}while(0);do{if((p|0)==7){M=T^1;if(!(M|A^1)){a=K(Ot(u[e+992>>2]|0,o));c[e+504>>2]=K(OE(a,K(oi(e,2,o))));break}if(!(T|R^1)){a=K(Ot(u[e+996>>2]|0,a));c[e+504>>2]=K(OE(a,K(oi(e,0,o))));break}c[S>>2]=K(k);c[E>>2]=K(k);u[C>>2]=0;u[L>>2]=0;w=K(Tt(e,2,o));g=K(Tt(e,0,o));if(A){b=K(w+K(Ot(u[e+992>>2]|0,o)));c[S>>2]=b;u[C>>2]=1;m=1}else{m=0;b=K(k)}if(R){_=K(g+K(Ot(u[e+996>>2]|0,a)));c[E>>2]=_;u[L>>2]=1;d=1}else{d=0;_=K(k)}p=u[n+32>>2]|0;if(!(T&(p|0)==2)){if(ke(b)|0?!(ke(r)|0):0){c[S>>2]=r;u[C>>2]=2;m=2;b=r}}else p=2;if((!((p|0)==2&M)?ke(_)|0:0)?!(ke(i)|0):0){c[E>>2]=i;u[L>>2]=2;d=2;_=i}h=K(c[e+396>>2]);y=ke(h)|0;do{if(!y){if((m|0)==1&M){c[E>>2]=K(K(b-w)/h);u[L>>2]=1;d=1;p=1;break}if(T&(d|0)==1){c[S>>2]=K(h*K(_-g));u[C>>2]=1;d=1;p=1}else p=m}else p=m}while(0);O=ke(r)|0;m=(_i(n,e)|0)!=4;if(!(T|A|((t|0)!=1|O)|(m|(p|0)==1))?(c[S>>2]=r,u[C>>2]=1,!y):0){c[E>>2]=K(K(r-w)/h);u[L>>2]=1;d=1}if(!(R|M|((f|0)!=1|(ke(i)|0))|(m|(d|0)==1))?(c[E>>2]=i,u[L>>2]=1,!y):0){c[S>>2]=K(h*K(i-g));u[C>>2]=1}mi(e,2,o,o,C,S);mi(e,0,a,o,L,E);r=K(c[S>>2]);i=K(c[E>>2]);gt(e,r,i,l,u[C>>2]|0,u[L>>2]|0,o,a,0,3565,s)|0;a=K(c[e+908+(u[976+(P<<2)>>2]<<2)>>2]);c[e+504>>2]=K(OE(a,K(oi(e,P,o))))}}while(0);u[e+500>>2]=u[2278];v=B;return}function di(n,e,r,t,i){n=n|0;e=e|0;r=K(r);t=K(t);i=K(i);t=K(gi(n,e,r,t));return K(OE(t,K(oi(n,e,i))))}function _i(n,e){n=n|0;e=e|0;e=e+20|0;e=u[((u[e>>2]|0)==0?n+16|0:e)>>2]|0;if((e|0)==5?Si(u[n+4>>2]|0)|0:0)e=1;return e|0}function vi(n,e){n=n|0;e=e|0;if(zt(e)|0?(u[n+96>>2]|0)!=0:0)e=4;else e=u[1040+(e<<2)>>2]|0;return n+60+(e<<3)|0}function pi(n,e){n=n|0;e=e|0;if(zt(e)|0?(u[n+104>>2]|0)!=0:0)e=5;else e=u[1e3+(e<<2)>>2]|0;return n+60+(e<<3)|0}function mi(n,e,r,t,i,o){n=n|0;e=e|0;r=K(r);t=K(t);i=i|0;o=o|0;r=K(Ot(n+380+(u[976+(e<<2)>>2]<<3)|0,r));r=K(r+K(Tt(n,e,t)));switch(u[i>>2]|0){case 2:case 1:{i=ke(r)|0;t=K(c[o>>2]);c[o>>2]=i|t<r?t:r;break}case 0:{if(!(ke(r)|0)){u[i>>2]=2;c[o>>2]=r}break}default:{}}return}function bi(n,e){n=n|0;e=e|0;n=n+132|0;if(zt(e)|0?(u[(ge(n,4,948)|0)+4>>2]|0)!=0:0)n=1;else n=(u[(ge(n,u[1040+(e<<2)>>2]|0,948)|0)+4>>2]|0)!=0;return n|0}function hi(n,e,r){n=n|0;e=e|0;r=K(r);var t=0,i=0;n=n+132|0;if(zt(e)|0?(t=ge(n,4,948)|0,(u[t+4>>2]|0)!=0):0)i=4;else{t=ge(n,u[1040+(e<<2)>>2]|0,948)|0;if(!(u[t+4>>2]|0))r=K(0.0);else i=4}if((i|0)==4)r=K(Ot(t,r));return K(r)}function yi(n,e,r){n=n|0;e=e|0;r=K(r);var t=de;t=K(c[n+908+(u[976+(e<<2)>>2]<<2)>>2]);t=K(t+K(jt(n,e,r)));return K(t+K(qt(n,e,r)))}function wi(n){n=n|0;var e=0,r=0,t=0;n:do{if(!(Si(u[n+4>>2]|0)|0)){if((u[n+16>>2]|0)!=5){r=Pe(n)|0;if(!r)e=0;else{e=0;while(1){t=Be(n,e)|0;if((u[t+24>>2]|0)==0?(u[t+20>>2]|0)==5:0){e=1;break n}e=e+1|0;if(e>>>0>=r>>>0){e=0;break}}}}else e=1}else e=0}while(0);return e|0}function Mi(n,e){n=n|0;e=e|0;var r=de;r=K(c[n+908+(u[976+(e<<2)>>2]<<2)>>2]);return r>=K(0.0)&((ke(r)|0)^1)|0}function ki(n){n=n|0;var e=de,r=0,t=0,i=0,o=0,a=0,f=0,l=de;r=u[n+968>>2]|0;if(!r){o=Pe(n)|0;do{if(o|0){r=0;i=0;while(1){t=Be(n,i)|0;if(u[t+940>>2]|0){a=8;break}if((u[t+24>>2]|0)!=1){f=(_i(n,t)|0)==5;if(f){r=t;break}else r=(r|0)==0?t:r}i=i+1|0;if(i>>>0>=o>>>0){a=8;break}}if((a|0)==8)if(!r)break;e=K(ki(r));return K(e+K(c[r+404>>2]))}}while(0);e=K(c[n+912>>2])}else{l=K(c[n+908>>2]);e=K(c[n+912>>2]);e=K(_L[r&0](n,l,e));Fe(n,(ke(e)|0)^1,3573)}return K(e)}function gi(n,e,r,t){n=n|0;e=e|0;r=K(r);t=K(t);var i=de,u=0;if(!(Si(e)|0)){if(zt(e)|0){e=0;u=3}else{t=K(k);i=K(k)}}else{e=1;u=3}if((u|0)==3){i=K(Ot(n+364+(e<<3)|0,t));t=K(Ot(n+380+(e<<3)|0,t))}u=t<r&(t>=K(0.0)&((ke(t)|0)^1));r=u?t:r;u=i>=K(0.0)&((ke(i)|0)^1)&r<i;return K(u?i:r)}function Ti(n,e,r,t,i,o,a){n=n|0;e=e|0;r=K(r);t=t|0;i=K(i);o=o|0;a=a|0;var f=de,l=de,s=0,d=0,_=de,v=de,p=de,m=0,b=0,h=0,y=0,w=de,M=0;h=Xt(u[n+4>>2]|0,o)|0;m=ti(h,o)|0;b=zt(h)|0;_=K(Tt(e,2,r));v=K(Tt(e,0,r));if(!(Bt(e,2,r)|0)){if(bi(e,2)|0?Li(e,2)|0:0){f=K(c[n+908>>2]);l=K(Jt(n,2));l=K(f-K(l+K(Zt(n,2))));f=K(hi(e,2,r));f=K(di(e,2,K(l-K(f+K(Ri(e,2,r)))),r,r))}else f=K(k)}else f=K(_+K(Ot(u[e+992>>2]|0,r)));if(!(Bt(e,0,i)|0)){if(bi(e,0)|0?Li(e,0)|0:0){l=K(c[n+912>>2]);w=K(Jt(n,0));w=K(l-K(w+K(Zt(n,0))));l=K(hi(e,0,i));l=K(di(e,0,K(w-K(l+K(Ri(e,0,i)))),i,r))}else l=K(k)}else l=K(v+K(Ot(u[e+996>>2]|0,i)));s=ke(f)|0;d=ke(l)|0;do{if(s^d?(p=K(c[e+396>>2]),!(ke(p)|0)):0)if(s){f=K(_+K(K(l-v)*p));break}else{w=K(v+K(K(f-_)/p));l=d?w:l;break}}while(0);d=ke(f)|0;s=ke(l)|0;if(d|s){M=(d^1)&1;t=r>K(0.0)&((t|0)!=0&d);f=b?f:t?r:f;gt(e,f,l,o,b?M:t?2:M,d&(s^1)&1,f,l,0,3623,a)|0;f=K(c[e+908>>2]);f=K(f+K(Tt(e,2,r)));l=K(c[e+912>>2]);l=K(l+K(Tt(e,0,r)))}gt(e,f,l,o,1,1,f,l,1,3635,a)|0;if(Li(e,h)|0?!(bi(e,h)|0):0){M=u[976+(h<<2)>>2]|0;w=K(c[n+908+(M<<2)>>2]);w=K(w-K(c[e+908+(M<<2)>>2]));w=K(w-K(Zt(n,h)));w=K(w-K(qt(e,h,r)));w=K(w-K(Ri(e,h,b?r:i)));c[e+400+(u[1040+(h<<2)>>2]<<2)>>2]=w}else y=21;do{if((y|0)==21){if(!(bi(e,h)|0)?(u[n+8>>2]|0)==1:0){M=u[976+(h<<2)>>2]|0;w=K(c[n+908+(M<<2)>>2]);w=K(K(w-K(c[e+908+(M<<2)>>2]))*K(.5));c[e+400+(u[1040+(h<<2)>>2]<<2)>>2]=w;break}if(!(bi(e,h)|0)?(u[n+8>>2]|0)==2:0){M=u[976+(h<<2)>>2]|0;w=K(c[n+908+(M<<2)>>2]);w=K(w-K(c[e+908+(M<<2)>>2]));c[e+400+(u[1040+(h<<2)>>2]<<2)>>2]=w}}}while(0);if(Li(e,m)|0?!(bi(e,m)|0):0){M=u[976+(m<<2)>>2]|0;w=K(c[n+908+(M<<2)>>2]);w=K(w-K(c[e+908+(M<<2)>>2]));w=K(w-K(Zt(n,m)));w=K(w-K(qt(e,m,r)));w=K(w-K(Ri(e,m,b?i:r)));c[e+400+(u[1040+(m<<2)>>2]<<2)>>2]=w}else y=30;do{if((y|0)==30?!(bi(e,m)|0):0){if((_i(n,e)|0)==2){M=u[976+(m<<2)>>2]|0;w=K(c[n+908+(M<<2)>>2]);w=K(K(w-K(c[e+908+(M<<2)>>2]))*K(.5));c[e+400+(u[1040+(m<<2)>>2]<<2)>>2]=w;break}M=(_i(n,e)|0)==3;if(M^(u[n+28>>2]|0)==2){M=u[976+(m<<2)>>2]|0;w=K(c[n+908+(M<<2)>>2]);w=K(w-K(c[e+908+(M<<2)>>2]));c[e+400+(u[1040+(m<<2)>>2]<<2)>>2]=w}}}while(0);return}function Ai(n,e,r){n=n|0;e=e|0;r=r|0;var t=de,i=0;i=u[976+(r<<2)>>2]|0;t=K(c[e+908+(i<<2)>>2]);t=K(K(c[n+908+(i<<2)>>2])-t);t=K(t-K(c[e+400+(u[1040+(r<<2)>>2]<<2)>>2]));c[e+400+(u[1e3+(r<<2)>>2]<<2)>>2]=t;return}function Si(n){n=n|0;return(n|1|0)==1|0}function Ei(n){n=n|0;var e=de;switch(u[n+56>>2]|0){case 0:case 3:{e=K(c[n+40>>2]);if(e>K(0.0)&((ke(e)|0)^1))n=t[(u[n+976>>2]|0)+2>>0]|0?1056:992;else n=1056;break}default:n=n+52|0}return n|0}function Ci(n,e){n=n|0;e=e|0;return(t[n+e>>0]|0)!=0|0}function Li(n,e){n=n|0;e=e|0;n=n+132|0;if(zt(e)|0?(u[(ge(n,5,948)|0)+4>>2]|0)!=0:0)n=1;else n=(u[(ge(n,u[1e3+(e<<2)>>2]|0,948)|0)+4>>2]|0)!=0;return n|0}function Ri(n,e,r){n=n|0;e=e|0;r=K(r);var t=0,i=0;n=n+132|0;if(zt(e)|0?(t=ge(n,5,948)|0,(u[t+4>>2]|0)!=0):0)i=4;else{t=ge(n,u[1e3+(e<<2)>>2]|0,948)|0;if(!(u[t+4>>2]|0))r=K(0.0);else i=4}if((i|0)==4)r=K(Ot(t,r));return K(r)}function Pi(n,e,r){n=n|0;e=e|0;r=K(r);if(bi(n,e)|0)r=K(hi(n,e,r));else r=K(-K(Ri(n,e,r)));return K(r)}function Bi(n){n=K(n);return(c[d>>2]=n,u[d>>2]|0)|0}function Oi(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;var i=0;u[n+12>>2]=0;u[n+16>>2]=t;do{if(e){if(e>>>0>1073741823)Xn();else{i=GE(e<<2)|0;break}}else i=0}while(0);u[n>>2]=i;t=i+(r<<2)|0;u[n+8>>2]=t;u[n+4>>2]=t;u[n+12>>2]=i+(e<<2);return}function Ni(n,e){n=n|0;e=e|0;var r=0,t=0,i=0,o=0,a=0;t=u[n>>2]|0;a=n+4|0;o=e+4|0;i=(u[a>>2]|0)-t|0;r=(u[o>>2]|0)+(0-(i>>2)<<2)|0;u[o>>2]=r;if((i|0)>0){iC(r|0,t|0,i|0)|0;t=o;r=u[o>>2]|0}else t=o;o=u[n>>2]|0;u[n>>2]=r;u[t>>2]=o;o=e+8|0;i=u[a>>2]|0;u[a>>2]=u[o>>2];u[o>>2]=i;o=n+8|0;a=e+12|0;n=u[o>>2]|0;u[o>>2]=u[a>>2];u[a>>2]=n;u[e>>2]=u[t>>2];return}function Ii(n){n=n|0;var e=0,r=0,t=0;e=u[n+4>>2]|0;r=n+8|0;t=u[r>>2]|0;if((t|0)!=(e|0))u[r>>2]=t+(~((t+-4-e|0)>>>2)<<2);n=u[n>>2]|0;if(n|0)XE(n);return}function Fi(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;var i=0,o=0,a=0,f=0;a=n+4|0;f=u[a>>2]|0;i=f-t|0;o=i>>2;n=e+(o<<2)|0;if(n>>>0<r>>>0){t=f;do{u[t>>2]=u[n>>2];n=n+4|0;t=(u[a>>2]|0)+4|0;u[a>>2]=t}while(n>>>0<r>>>0)}if(o|0)cC(f+(0-o<<2)|0,e|0,i|0)|0;return}function xi(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0,f=0,c=0;f=e+4|0;c=u[f>>2]|0;i=u[n>>2]|0;a=r;o=a-i|0;t=c+(0-(o>>2)<<2)|0;u[f>>2]=t;if((o|0)>0)iC(t|0,i|0,o|0)|0;i=n+4|0;o=e+8|0;t=(u[i>>2]|0)-a|0;if((t|0)>0){iC(u[o>>2]|0,r|0,t|0)|0;u[o>>2]=(u[o>>2]|0)+(t>>>2<<2)}a=u[n>>2]|0;u[n>>2]=u[f>>2];u[f>>2]=a;a=u[i>>2]|0;u[i>>2]=u[o>>2];u[o>>2]=a;a=n+8|0;r=e+12|0;n=u[a>>2]|0;u[a>>2]=u[r>>2];u[r>>2]=n;u[e>>2]=u[f>>2];return c|0}function Ui(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0;a=u[e>>2]|0;o=u[r>>2]|0;if((a|0)!=(o|0)){i=n+8|0;r=((o+-4-a|0)>>>2)+1|0;n=a;t=u[i>>2]|0;do{u[t>>2]=u[n>>2];t=(u[i>>2]|0)+4|0;u[i>>2]=t;n=n+4|0}while((n|0)!=(o|0));u[e>>2]=a+(r<<2)}return}function Hi(){we();return}function Di(){var n=0;n=GE(4)|0;Wi(n);return n|0}function Wi(n){n=n|0;u[n>>2]=Ue()|0;return}function Yi(n){n=n|0;if(n|0){Vi(n);XE(n)}return}function Vi(n){n=n|0;De(u[n>>2]|0);return}function ji(n,e,r){n=n|0;e=e|0;r=r|0;Ht(u[n>>2]|0,e,r);return}function qi(n,e){n=n|0;e=K(e);Lt(u[n>>2]|0,e);return}function zi(n,e){n=n|0;e=e|0;return Ci(u[n>>2]|0,e)|0}function Gi(){var n=0;n=GE(8)|0;Ki(n,0);return n|0}function Ki(n,e){n=n|0;e=e|0;if(!e)e=Se()|0;else e=Te(u[e>>2]|0)|0;u[n>>2]=e;u[n+4>>2]=0;$e(e,n);return}function Xi(n){n=n|0;var e=0;e=GE(8)|0;Ki(e,n);return e|0}function Ji(n){n=n|0;if(n|0){Zi(n);XE(n)}return}function Zi(n){n=n|0;var e=0;Le(u[n>>2]|0);e=n+4|0;n=u[e>>2]|0;u[e>>2]=0;if(n|0){Qi(n);XE(n)}return}function Qi(n){n=n|0;$i(n);return}function $i(n){n=n|0;n=u[n>>2]|0;if(n|0)ie(n|0);return}function nu(n){n=n|0;return nr(n)|0}function eu(n){n=n|0;var e=0,r=0;r=n+4|0;e=u[r>>2]|0;u[r>>2]=0;if(e|0){Qi(e);XE(e)}Ie(u[n>>2]|0);return}function ru(n,e){n=n|0;e=e|0;Je(u[n>>2]|0,u[e>>2]|0);return}function tu(n,e){n=n|0;e=e|0;sr(u[n>>2]|0,e);return}function iu(n,e,r){n=n|0;e=e|0;r=+r;Ar(u[n>>2]|0,e,K(r));return}function uu(n,e,r){n=n|0;e=e|0;r=+r;Sr(u[n>>2]|0,e,K(r));return}function ou(n,e){n=n|0;e=e|0;ur(u[n>>2]|0,e);return}function au(n,e){n=n|0;e=e|0;ar(u[n>>2]|0,e);return}function fu(n,e){n=n|0;e=e|0;cr(u[n>>2]|0,e);return}function cu(n,e){n=n|0;e=e|0;er(u[n>>2]|0,e);return}function lu(n,e){n=n|0;e=e|0;_r(u[n>>2]|0,e);return}function su(n,e){n=n|0;e=e|0;tr(u[n>>2]|0,e);return}function du(n,e,r){n=n|0;e=e|0;r=+r;Cr(u[n>>2]|0,e,K(r));return}function _u(n,e,r){n=n|0;e=e|0;r=+r;Lr(u[n>>2]|0,e,K(r));return}function vu(n,e){n=n|0;e=e|0;Pr(u[n>>2]|0,e);return}function pu(n,e){n=n|0;e=e|0;pr(u[n>>2]|0,e);return}function mu(n,e){n=n|0;e=e|0;br(u[n>>2]|0,e);return}function bu(n,e){n=n|0;e=+e;yr(u[n>>2]|0,K(e));return}function hu(n,e){n=n|0;e=+e;kr(u[n>>2]|0,K(e));return}function yu(n,e){n=n|0;e=+e;gr(u[n>>2]|0,K(e));return}function wu(n,e){n=n|0;e=+e;wr(u[n>>2]|0,K(e));return}function Mu(n,e){n=n|0;e=+e;Mr(u[n>>2]|0,K(e));return}function ku(n,e){n=n|0;e=+e;xr(u[n>>2]|0,K(e));return}function gu(n,e){n=n|0;e=+e;Ur(u[n>>2]|0,K(e));return}function Tu(n){n=n|0;Hr(u[n>>2]|0);return}function Au(n,e){n=n|0;e=+e;Wr(u[n>>2]|0,K(e));return}function Su(n,e){n=n|0;e=+e;Yr(u[n>>2]|0,K(e));return}function Eu(n){n=n|0;Vr(u[n>>2]|0);return}function Cu(n,e){n=n|0;e=+e;qr(u[n>>2]|0,K(e));return}function Lu(n,e){n=n|0;e=+e;zr(u[n>>2]|0,K(e));return}function Ru(n,e){n=n|0;e=+e;Kr(u[n>>2]|0,K(e));return}function Pu(n,e){n=n|0;e=+e;Xr(u[n>>2]|0,K(e));return}function Bu(n,e){n=n|0;e=+e;Zr(u[n>>2]|0,K(e));return}function Ou(n,e){n=n|0;e=+e;Qr(u[n>>2]|0,K(e));return}function Nu(n,e){n=n|0;e=+e;nt(u[n>>2]|0,K(e));return}function Iu(n,e){n=n|0;e=+e;et(u[n>>2]|0,K(e));return}function Fu(n,e){n=n|0;e=+e;tt(u[n>>2]|0,K(e));return}function xu(n,e,r){n=n|0;e=e|0;r=+r;Ir(u[n>>2]|0,e,K(r));return}function Uu(n,e,r){n=n|0;e=e|0;r=+r;Br(u[n>>2]|0,e,K(r));return}function Hu(n,e,r){n=n|0;e=e|0;r=+r;Or(u[n>>2]|0,e,K(r));return}function Du(n){n=n|0;return dr(u[n>>2]|0)|0}function Wu(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0;t=v;v=v+16|0;i=t;Er(i,u[e>>2]|0,r);Yu(n,i);v=t;return}function Yu(n,e){n=n|0;e=e|0;Vu(n,u[e+4>>2]|0,+K(c[e>>2]));return}function Vu(n,e,r){n=n|0;e=e|0;r=+r;u[n>>2]=e;l[n+8>>3]=r;return}function ju(n){n=n|0;return or(u[n>>2]|0)|0}function qu(n){n=n|0;return fr(u[n>>2]|0)|0}function zu(n){n=n|0;return lr(u[n>>2]|0)|0}function Gu(n){n=n|0;return rr(u[n>>2]|0)|0}function Ku(n){n=n|0;return vr(u[n>>2]|0)|0}function Xu(n){n=n|0;return ir(u[n>>2]|0)|0}function Ju(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0;t=v;v=v+16|0;i=t;Rr(i,u[e>>2]|0,r);Yu(n,i);v=t;return}function Zu(n){n=n|0;return mr(u[n>>2]|0)|0}function Qu(n){n=n|0;return hr(u[n>>2]|0)|0}function $u(n,e){n=n|0;e=e|0;var r=0,t=0;r=v;v=v+16|0;t=r;Tr(t,u[e>>2]|0);Yu(n,t);v=r;return}function no(n){n=n|0;return+ +K(Ze(u[n>>2]|0))}function eo(n){n=n|0;return+ +K(Qe(u[n>>2]|0))}function ro(n,e){n=n|0;e=e|0;var r=0,t=0;r=v;v=v+16|0;t=r;Dr(t,u[e>>2]|0);Yu(n,t);v=r;return}function to(n,e){n=n|0;e=e|0;var r=0,t=0;r=v;v=v+16|0;t=r;jr(t,u[e>>2]|0);Yu(n,t);v=r;return}function io(n,e){n=n|0;e=e|0;var r=0,t=0;r=v;v=v+16|0;t=r;Gr(t,u[e>>2]|0);Yu(n,t);v=r;return}function uo(n,e){n=n|0;e=e|0;var r=0,t=0;r=v;v=v+16|0;t=r;Jr(t,u[e>>2]|0);Yu(n,t);v=r;return}function oo(n,e){n=n|0;e=e|0;var r=0,t=0;r=v;v=v+16|0;t=r;$r(t,u[e>>2]|0);Yu(n,t);v=r;return}function ao(n,e){n=n|0;e=e|0;var r=0,t=0;r=v;v=v+16|0;t=r;rt(t,u[e>>2]|0);Yu(n,t);v=r;return}function fo(n){n=n|0;return+ +K(it(u[n>>2]|0))}function co(n,e){n=n|0;e=e|0;return+ +K(Fr(u[n>>2]|0,e))}function lo(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0;t=v;v=v+16|0;i=t;Nr(i,u[e>>2]|0,r);Yu(n,i);v=t;return}function so(n,e,r){n=n|0;e=e|0;r=r|0;Ye(u[n>>2]|0,u[e>>2]|0,r);return}function _o(n,e){n=n|0;e=e|0;Ne(u[n>>2]|0,u[e>>2]|0);return}function vo(n){n=n|0;return Pe(u[n>>2]|0)|0}function po(n){n=n|0;n=Ge(u[n>>2]|0)|0;if(!n)n=0;else n=nu(n)|0;return n|0}function mo(n,e){n=n|0;e=e|0;n=Be(u[n>>2]|0,e)|0;if(!n)n=0;else n=nu(n)|0;return n|0}function bo(n,e){n=n|0;e=e|0;var r=0,t=0;t=GE(4)|0;ho(t,e);r=n+4|0;e=u[r>>2]|0;u[r>>2]=t;if(e|0){Qi(e);XE(e)}We(u[n>>2]|0,1);return}function ho(n,e){n=n|0;e=e|0;Uo(n,e);return}function yo(n,e,r,t,i,u){n=n|0;e=e|0;r=K(r);t=t|0;i=K(i);u=u|0;var o=0,a=0;o=v;v=v+16|0;a=o;wo(a,nr(e)|0,+r,t,+i,u);c[n>>2]=K(+l[a>>3]);c[n+4>>2]=K(+l[a+8>>3]);v=o;return}function wo(n,e,r,t,i,o){n=n|0;e=e|0;r=+r;t=t|0;i=+i;o=o|0;var a=0,f=0,c=0,s=0,d=0;a=v;v=v+32|0;d=a+8|0;s=a+20|0;c=a;f=a+16|0;l[d>>3]=r;u[s>>2]=t;l[c>>3]=i;u[f>>2]=o;Mo(n,u[e+4>>2]|0,d,s,c,f);v=a;return}function Mo(n,e,r,t,i,o){n=n|0;e=e|0;r=r|0;t=t|0;i=i|0;o=o|0;var a=0,f=0;a=v;v=v+16|0;f=a;gS(f);e=ko(e)|0;go(n,e,+l[r>>3],u[t>>2]|0,+l[i>>3],u[o>>2]|0);AS(f);v=a;return}function ko(n){n=n|0;return u[n>>2]|0}function go(n,e,r,t,i,u){n=n|0;e=e|0;r=+r;t=t|0;i=+i;u=u|0;var o=0;o=Ao(To()|0)|0;r=+So(r);t=Eo(t)|0;i=+So(i);Co(n,oe(0,o|0,e|0,+r,t|0,+i,Eo(u)|0)|0);return}function To(){var n=0;if(!(t[7608]|0)){Io(9120);n=7608;u[n>>2]=1;u[n+4>>2]=0}return 9120}function Ao(n){n=n|0;return u[n+8>>2]|0}function So(n){n=+n;return+ +No(n)}function Eo(n){n=n|0;return Oo(n)|0}function Co(n,e){n=n|0;e=e|0;var r=0,t=0,i=0;i=v;v=v+32|0;r=i;t=e;if(!(t&1)){u[n>>2]=u[e>>2];u[n+4>>2]=u[e+4>>2];u[n+8>>2]=u[e+8>>2];u[n+12>>2]=u[e+12>>2]}else{Lo(r,0);Hn(t|0,r|0)|0;Ro(n,r);Po(r)}v=i;return}function Lo(n,e){n=n|0;e=e|0;Bo(n,e);u[n+8>>2]=0;t[n+24>>0]=0;return}function Ro(n,e){n=n|0;e=e|0;e=e+8|0;u[n>>2]=u[e>>2];u[n+4>>2]=u[e+4>>2];u[n+8>>2]=u[e+8>>2];u[n+12>>2]=u[e+12>>2];return}function Po(n){n=n|0;t[n+24>>0]=0;return}function Bo(n,e){n=n|0;e=e|0;u[n>>2]=e;return}function Oo(n){n=n|0;return n|0}function No(n){n=+n;return+n}function Io(n){n=n|0;xo(n,Fo()|0,4);return}function Fo(){return 1064}function xo(n,e,r){n=n|0;e=e|0;r=r|0;u[n>>2]=e;u[n+4>>2]=r;u[n+8>>2]=re(e|0,r+1|0)|0;return}function Uo(n,e){n=n|0;e=e|0;e=u[e>>2]|0;u[n>>2]=e;Rn(e|0);return}function Ho(n){n=n|0;var e=0,r=0;r=n+4|0;e=u[r>>2]|0;u[r>>2]=0;if(e|0){Qi(e);XE(e)}We(u[n>>2]|0,0);return}function Do(n){n=n|0;Ke(u[n>>2]|0);return}function Wo(n){n=n|0;return Xe(u[n>>2]|0)|0}function Yo(n,e,r,t){n=n|0;e=+e;r=+r;t=t|0;Rt(u[n>>2]|0,K(e),K(r),t);return}function Vo(n){n=n|0;return+ +K(ut(u[n>>2]|0))}function jo(n){n=n|0;return+ +K(at(u[n>>2]|0))}function qo(n){n=n|0;return+ +K(ot(u[n>>2]|0))}function zo(n){n=n|0;return+ +K(ft(u[n>>2]|0))}function Go(n){n=n|0;return+ +K(ct(u[n>>2]|0))}function Ko(n){n=n|0;return+ +K(lt(u[n>>2]|0))}function Xo(n,e){n=n|0;e=e|0;l[n>>3]=+K(ut(u[e>>2]|0));l[n+8>>3]=+K(at(u[e>>2]|0));l[n+16>>3]=+K(ot(u[e>>2]|0));l[n+24>>3]=+K(ft(u[e>>2]|0));l[n+32>>3]=+K(ct(u[e>>2]|0));l[n+40>>3]=+K(lt(u[e>>2]|0));return}function Jo(n,e){n=n|0;e=e|0;return+ +K(st(u[n>>2]|0,e))}function Zo(n,e){n=n|0;e=e|0;return+ +K(dt(u[n>>2]|0,e))}function Qo(n,e){n=n|0;e=e|0;return+ +K(_t(u[n>>2]|0,e))}function $o(){return xe()|0}function na(){ea();ra();ta();ia();ua();oa();return}function ea(){Ww(11713,4938,1);return}function ra(){ew(10448);return}function ta(){Iy(10408);return}function ia(){Qh(10324);return}function ua(){qm(10096);return}function oa(){aa(9132);return}function aa(n){n=n|0;var e=0,r=0,t=0,i=0,o=0,a=0,f=0,c=0,l=0,s=0,d=0,_=0,p=0,m=0,b=0,h=0,y=0,w=0,M=0,k=0,g=0,T=0,A=0,S=0,E=0,C=0,L=0,R=0,P=0,B=0,O=0,N=0,I=0,F=0,x=0,U=0,H=0,D=0,W=0,Y=0,V=0,j=0,q=0,z=0,G=0,K=0,X=0,J=0,Z=0,Q=0,$=0,nn=0,en=0,rn=0,tn=0,un=0,on=0,an=0,fn=0,cn=0,ln=0,sn=0,dn=0,_n=0,vn=0,pn=0,mn=0,bn=0,hn=0,yn=0,wn=0,Mn=0,kn=0,gn=0,Tn=0,An=0,Sn=0,En=0,Cn=0,Ln=0,Rn=0,Pn=0,Bn=0,On=0;e=v;v=v+672|0;r=e+656|0;On=e+648|0;Bn=e+640|0;Pn=e+632|0;Rn=e+624|0;Ln=e+616|0;Cn=e+608|0;En=e+600|0;Sn=e+592|0;An=e+584|0;Tn=e+576|0;gn=e+568|0;kn=e+560|0;Mn=e+552|0;wn=e+544|0;yn=e+536|0;hn=e+528|0;bn=e+520|0;mn=e+512|0;pn=e+504|0;vn=e+496|0;_n=e+488|0;dn=e+480|0;sn=e+472|0;ln=e+464|0;cn=e+456|0;fn=e+448|0;an=e+440|0;on=e+432|0;un=e+424|0;tn=e+416|0;rn=e+408|0;en=e+400|0;nn=e+392|0;$=e+384|0;Q=e+376|0;Z=e+368|0;J=e+360|0;X=e+352|0;K=e+344|0;G=e+336|0;z=e+328|0;q=e+320|0;j=e+312|0;V=e+304|0;Y=e+296|0;W=e+288|0;D=e+280|0;H=e+272|0;U=e+264|0;x=e+256|0;F=e+248|0;I=e+240|0;N=e+232|0;O=e+224|0;B=e+216|0;P=e+208|0;R=e+200|0;L=e+192|0;C=e+184|0;E=e+176|0;S=e+168|0;A=e+160|0;T=e+152|0;g=e+144|0;k=e+136|0;M=e+128|0;w=e+120|0;y=e+112|0;h=e+104|0;b=e+96|0;m=e+88|0;p=e+80|0;_=e+72|0;d=e+64|0;s=e+56|0;l=e+48|0;c=e+40|0;f=e+32|0;a=e+24|0;o=e+16|0;i=e+8|0;t=e;fa(n,3646);ca(n,3651,2)|0;la(n,3665,2)|0;sa(n,3682,18)|0;u[On>>2]=19;u[On+4>>2]=0;u[r>>2]=u[On>>2];u[r+4>>2]=u[On+4>>2];da(n,3690,r)|0;u[Bn>>2]=1;u[Bn+4>>2]=0;u[r>>2]=u[Bn>>2];u[r+4>>2]=u[Bn+4>>2];_a(n,3696,r)|0;u[Pn>>2]=2;u[Pn+4>>2]=0;u[r>>2]=u[Pn>>2];u[r+4>>2]=u[Pn+4>>2];va(n,3706,r)|0;u[Rn>>2]=1;u[Rn+4>>2]=0;u[r>>2]=u[Rn>>2];u[r+4>>2]=u[Rn+4>>2];pa(n,3722,r)|0;u[Ln>>2]=2;u[Ln+4>>2]=0;u[r>>2]=u[Ln>>2];u[r+4>>2]=u[Ln+4>>2];pa(n,3734,r)|0;u[Cn>>2]=3;u[Cn+4>>2]=0;u[r>>2]=u[Cn>>2];u[r+4>>2]=u[Cn+4>>2];va(n,3753,r)|0;u[En>>2]=4;u[En+4>>2]=0;u[r>>2]=u[En>>2];u[r+4>>2]=u[En+4>>2];va(n,3769,r)|0;u[Sn>>2]=5;u[Sn+4>>2]=0;u[r>>2]=u[Sn>>2];u[r+4>>2]=u[Sn+4>>2];va(n,3783,r)|0;u[An>>2]=6;u[An+4>>2]=0;u[r>>2]=u[An>>2];u[r+4>>2]=u[An+4>>2];va(n,3796,r)|0;u[Tn>>2]=7;u[Tn+4>>2]=0;u[r>>2]=u[Tn>>2];u[r+4>>2]=u[Tn+4>>2];va(n,3813,r)|0;u[gn>>2]=8;u[gn+4>>2]=0;u[r>>2]=u[gn>>2];u[r+4>>2]=u[gn+4>>2];va(n,3825,r)|0;u[kn>>2]=3;u[kn+4>>2]=0;u[r>>2]=u[kn>>2];u[r+4>>2]=u[kn+4>>2];pa(n,3843,r)|0;u[Mn>>2]=4;u[Mn+4>>2]=0;u[r>>2]=u[Mn>>2];u[r+4>>2]=u[Mn+4>>2];pa(n,3853,r)|0;u[wn>>2]=9;u[wn+4>>2]=0;u[r>>2]=u[wn>>2];u[r+4>>2]=u[wn+4>>2];va(n,3870,r)|0;u[yn>>2]=10;u[yn+4>>2]=0;u[r>>2]=u[yn>>2];u[r+4>>2]=u[yn+4>>2];va(n,3884,r)|0;u[hn>>2]=11;u[hn+4>>2]=0;u[r>>2]=u[hn>>2];u[r+4>>2]=u[hn+4>>2];va(n,3896,r)|0;u[bn>>2]=1;u[bn+4>>2]=0;u[r>>2]=u[bn>>2];u[r+4>>2]=u[bn+4>>2];ma(n,3907,r)|0;u[mn>>2]=2;u[mn+4>>2]=0;u[r>>2]=u[mn>>2];u[r+4>>2]=u[mn+4>>2];ma(n,3915,r)|0;u[pn>>2]=3;u[pn+4>>2]=0;u[r>>2]=u[pn>>2];u[r+4>>2]=u[pn+4>>2];ma(n,3928,r)|0;u[vn>>2]=4;u[vn+4>>2]=0;u[r>>2]=u[vn>>2];u[r+4>>2]=u[vn+4>>2];ma(n,3948,r)|0;u[_n>>2]=5;u[_n+4>>2]=0;u[r>>2]=u[_n>>2];u[r+4>>2]=u[_n+4>>2];ma(n,3960,r)|0;u[dn>>2]=6;u[dn+4>>2]=0;u[r>>2]=u[dn>>2];u[r+4>>2]=u[dn+4>>2];ma(n,3974,r)|0;u[sn>>2]=7;u[sn+4>>2]=0;u[r>>2]=u[sn>>2];u[r+4>>2]=u[sn+4>>2];ma(n,3983,r)|0;u[ln>>2]=20;u[ln+4>>2]=0;u[r>>2]=u[ln>>2];u[r+4>>2]=u[ln+4>>2];da(n,3999,r)|0;u[cn>>2]=8;u[cn+4>>2]=0;u[r>>2]=u[cn>>2];u[r+4>>2]=u[cn+4>>2];ma(n,4012,r)|0;u[fn>>2]=9;u[fn+4>>2]=0;u[r>>2]=u[fn>>2];u[r+4>>2]=u[fn+4>>2];ma(n,4022,r)|0;u[an>>2]=21;u[an+4>>2]=0;u[r>>2]=u[an>>2];u[r+4>>2]=u[an+4>>2];da(n,4039,r)|0;u[on>>2]=10;u[on+4>>2]=0;u[r>>2]=u[on>>2];u[r+4>>2]=u[on+4>>2];ma(n,4053,r)|0;u[un>>2]=11;u[un+4>>2]=0;u[r>>2]=u[un>>2];u[r+4>>2]=u[un+4>>2];ma(n,4065,r)|0;u[tn>>2]=12;u[tn+4>>2]=0;u[r>>2]=u[tn>>2];u[r+4>>2]=u[tn+4>>2];ma(n,4084,r)|0;u[rn>>2]=13;u[rn+4>>2]=0;u[r>>2]=u[rn>>2];u[r+4>>2]=u[rn+4>>2];ma(n,4097,r)|0;u[en>>2]=14;u[en+4>>2]=0;u[r>>2]=u[en>>2];u[r+4>>2]=u[en+4>>2];ma(n,4117,r)|0;u[nn>>2]=15;u[nn+4>>2]=0;u[r>>2]=u[nn>>2];u[r+4>>2]=u[nn+4>>2];ma(n,4129,r)|0;u[$>>2]=16;u[$+4>>2]=0;u[r>>2]=u[$>>2];u[r+4>>2]=u[$+4>>2];ma(n,4148,r)|0;u[Q>>2]=17;u[Q+4>>2]=0;u[r>>2]=u[Q>>2];u[r+4>>2]=u[Q+4>>2];ma(n,4161,r)|0;u[Z>>2]=18;u[Z+4>>2]=0;u[r>>2]=u[Z>>2];u[r+4>>2]=u[Z+4>>2];ma(n,4181,r)|0;u[J>>2]=5;u[J+4>>2]=0;u[r>>2]=u[J>>2];u[r+4>>2]=u[J+4>>2];pa(n,4196,r)|0;u[X>>2]=6;u[X+4>>2]=0;u[r>>2]=u[X>>2];u[r+4>>2]=u[X+4>>2];pa(n,4206,r)|0;u[K>>2]=7;u[K+4>>2]=0;u[r>>2]=u[K>>2];u[r+4>>2]=u[K+4>>2];pa(n,4217,r)|0;u[G>>2]=3;u[G+4>>2]=0;u[r>>2]=u[G>>2];u[r+4>>2]=u[G+4>>2];ba(n,4235,r)|0;u[z>>2]=1;u[z+4>>2]=0;u[r>>2]=u[z>>2];u[r+4>>2]=u[z+4>>2];ha(n,4251,r)|0;u[q>>2]=4;u[q+4>>2]=0;u[r>>2]=u[q>>2];u[r+4>>2]=u[q+4>>2];ba(n,4263,r)|0;u[j>>2]=5;u[j+4>>2]=0;u[r>>2]=u[j>>2];u[r+4>>2]=u[j+4>>2];ba(n,4279,r)|0;u[V>>2]=6;u[V+4>>2]=0;u[r>>2]=u[V>>2];u[r+4>>2]=u[V+4>>2];ba(n,4293,r)|0;u[Y>>2]=7;u[Y+4>>2]=0;u[r>>2]=u[Y>>2];u[r+4>>2]=u[Y+4>>2];ba(n,4306,r)|0;u[W>>2]=8;u[W+4>>2]=0;u[r>>2]=u[W>>2];u[r+4>>2]=u[W+4>>2];ba(n,4323,r)|0;u[D>>2]=9;u[D+4>>2]=0;u[r>>2]=u[D>>2];u[r+4>>2]=u[D+4>>2];ba(n,4335,r)|0;u[H>>2]=2;u[H+4>>2]=0;u[r>>2]=u[H>>2];u[r+4>>2]=u[H+4>>2];ha(n,4353,r)|0;u[U>>2]=12;u[U+4>>2]=0;u[r>>2]=u[U>>2];u[r+4>>2]=u[U+4>>2];ya(n,4363,r)|0;u[x>>2]=1;u[x+4>>2]=0;u[r>>2]=u[x>>2];u[r+4>>2]=u[x+4>>2];wa(n,4376,r)|0;u[F>>2]=2;u[F+4>>2]=0;u[r>>2]=u[F>>2];u[r+4>>2]=u[F+4>>2];wa(n,4388,r)|0;u[I>>2]=13;u[I+4>>2]=0;u[r>>2]=u[I>>2];u[r+4>>2]=u[I+4>>2];ya(n,4402,r)|0;u[N>>2]=14;u[N+4>>2]=0;u[r>>2]=u[N>>2];u[r+4>>2]=u[N+4>>2];ya(n,4411,r)|0;u[O>>2]=15;u[O+4>>2]=0;u[r>>2]=u[O>>2];u[r+4>>2]=u[O+4>>2];ya(n,4421,r)|0;u[B>>2]=16;u[B+4>>2]=0;u[r>>2]=u[B>>2];u[r+4>>2]=u[B+4>>2];ya(n,4433,r)|0;u[P>>2]=17;u[P+4>>2]=0;u[r>>2]=u[P>>2];u[r+4>>2]=u[P+4>>2];ya(n,4446,r)|0;u[R>>2]=18;u[R+4>>2]=0;u[r>>2]=u[R>>2];u[r+4>>2]=u[R+4>>2];ya(n,4458,r)|0;u[L>>2]=3;u[L+4>>2]=0;u[r>>2]=u[L>>2];u[r+4>>2]=u[L+4>>2];wa(n,4471,r)|0;u[C>>2]=1;u[C+4>>2]=0;u[r>>2]=u[C>>2];u[r+4>>2]=u[C+4>>2];Ma(n,4486,r)|0;u[E>>2]=10;u[E+4>>2]=0;u[r>>2]=u[E>>2];u[r+4>>2]=u[E+4>>2];ba(n,4496,r)|0;u[S>>2]=11;u[S+4>>2]=0;u[r>>2]=u[S>>2];u[r+4>>2]=u[S+4>>2];ba(n,4508,r)|0;u[A>>2]=3;u[A+4>>2]=0;u[r>>2]=u[A>>2];u[r+4>>2]=u[A+4>>2];ha(n,4519,r)|0;u[T>>2]=4;u[T+4>>2]=0;u[r>>2]=u[T>>2];u[r+4>>2]=u[T+4>>2];ka(n,4530,r)|0;u[g>>2]=19;u[g+4>>2]=0;u[r>>2]=u[g>>2];u[r+4>>2]=u[g+4>>2];ga(n,4542,r)|0;u[k>>2]=12;u[k+4>>2]=0;u[r>>2]=u[k>>2];u[r+4>>2]=u[k+4>>2];Ta(n,4554,r)|0;u[M>>2]=13;u[M+4>>2]=0;u[r>>2]=u[M>>2];u[r+4>>2]=u[M+4>>2];Aa(n,4568,r)|0;u[w>>2]=2;u[w+4>>2]=0;u[r>>2]=u[w>>2];u[r+4>>2]=u[w+4>>2];Sa(n,4578,r)|0;u[y>>2]=20;u[y+4>>2]=0;u[r>>2]=u[y>>2];u[r+4>>2]=u[y+4>>2];Ea(n,4587,r)|0;u[h>>2]=22;u[h+4>>2]=0;u[r>>2]=u[h>>2];u[r+4>>2]=u[h+4>>2];da(n,4602,r)|0;u[b>>2]=23;u[b+4>>2]=0;u[r>>2]=u[b>>2];u[r+4>>2]=u[b+4>>2];da(n,4619,r)|0;u[m>>2]=14;u[m+4>>2]=0;u[r>>2]=u[m>>2];u[r+4>>2]=u[m+4>>2];Ca(n,4629,r)|0;u[p>>2]=1;u[p+4>>2]=0;u[r>>2]=u[p>>2];u[r+4>>2]=u[p+4>>2];La(n,4637,r)|0;u[_>>2]=4;u[_+4>>2]=0;u[r>>2]=u[_>>2];u[r+4>>2]=u[_+4>>2];wa(n,4653,r)|0;u[d>>2]=5;u[d+4>>2]=0;u[r>>2]=u[d>>2];u[r+4>>2]=u[d+4>>2];wa(n,4669,r)|0;u[s>>2]=6;u[s+4>>2]=0;u[r>>2]=u[s>>2];u[r+4>>2]=u[s+4>>2];wa(n,4686,r)|0;u[l>>2]=7;u[l+4>>2]=0;u[r>>2]=u[l>>2];u[r+4>>2]=u[l+4>>2];wa(n,4701,r)|0;u[c>>2]=8;u[c+4>>2]=0;u[r>>2]=u[c>>2];u[r+4>>2]=u[c+4>>2];wa(n,4719,r)|0;u[f>>2]=9;u[f+4>>2]=0;u[r>>2]=u[f>>2];u[r+4>>2]=u[f+4>>2];wa(n,4736,r)|0;u[a>>2]=21;u[a+4>>2]=0;u[r>>2]=u[a>>2];u[r+4>>2]=u[a+4>>2];Ra(n,4754,r)|0;u[o>>2]=2;u[o+4>>2]=0;u[r>>2]=u[o>>2];u[r+4>>2]=u[o+4>>2];Ma(n,4772,r)|0;u[i>>2]=3;u[i+4>>2]=0;u[r>>2]=u[i>>2];u[r+4>>2]=u[i+4>>2];Ma(n,4790,r)|0;u[t>>2]=4;u[t+4>>2]=0;u[r>>2]=u[t>>2];u[r+4>>2]=u[t+4>>2];Ma(n,4808,r)|0;v=e;return}function fa(n,e){n=n|0;e=e|0;var r=0;r=Nm()|0;u[n>>2]=r;Im(r,e);lM(u[n>>2]|0);return}function ca(n,e,r){n=n|0;e=e|0;r=r|0;bm(n,Ba(e)|0,r,0);return n|0}function la(n,e,r){n=n|0;e=e|0;r=r|0;Jp(n,Ba(e)|0,r,0);return n|0}function sa(n,e,r){n=n|0;e=e|0;r=r|0;Op(n,Ba(e)|0,r,0);return n|0}function da(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0;t=v;v=v+16|0;i=t+8|0;o=t;a=u[r+4>>2]|0;u[o>>2]=u[r>>2];u[o+4>>2]=a;u[i>>2]=u[o>>2];u[i+4>>2]=u[o+4>>2];vp(n,e,i);v=t;return n|0}function _a(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0;t=v;v=v+16|0;i=t+8|0;o=t;a=u[r+4>>2]|0;u[o>>2]=u[r>>2];u[o+4>>2]=a;u[i>>2]=u[o>>2];u[i+4>>2]=u[o+4>>2];zv(n,e,i);v=t;return n|0}function va(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0;t=v;v=v+16|0;i=t+8|0;o=t;a=u[r+4>>2]|0;u[o>>2]=u[r>>2];u[o+4>>2]=a;u[i>>2]=u[o>>2];u[i+4>>2]=u[o+4>>2];Ev(n,e,i);v=t;return n|0}function pa(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0;t=v;v=v+16|0;i=t+8|0;o=t;a=u[r+4>>2]|0;u[o>>2]=u[r>>2];u[o+4>>2]=a;u[i>>2]=u[o>>2];u[i+4>>2]=u[o+4>>2];fv(n,e,i);v=t;return n|0}function ma(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0;t=v;v=v+16|0;i=t+8|0;o=t;a=u[r+4>>2]|0;u[o>>2]=u[r>>2];u[o+4>>2]=a;u[i>>2]=u[o>>2];u[i+4>>2]=u[o+4>>2];V_(n,e,i);v=t;return n|0}function ba(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0;t=v;v=v+16|0;i=t+8|0;o=t;a=u[r+4>>2]|0;u[o>>2]=u[r>>2];u[o+4>>2]=a;u[i>>2]=u[o>>2];u[i+4>>2]=u[o+4>>2];T_(n,e,i);v=t;return n|0}function ha(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0;t=v;v=v+16|0;i=t+8|0;o=t;a=u[r+4>>2]|0;u[o>>2]=u[r>>2];u[o+4>>2]=a;u[i>>2]=u[o>>2];u[i+4>>2]=u[o+4>>2];u_(n,e,i);v=t;return n|0}function ya(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0;t=v;v=v+16|0;i=t+8|0;o=t;a=u[r+4>>2]|0;u[o>>2]=u[r>>2];u[o+4>>2]=a;u[i>>2]=u[o>>2];u[i+4>>2]=u[o+4>>2];Ad(n,e,i);v=t;return n|0}function wa(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0;t=v;v=v+16|0;i=t+8|0;o=t;a=u[r+4>>2]|0;u[o>>2]=u[r>>2];u[o+4>>2]=a;u[i>>2]=u[o>>2];u[i+4>>2]=u[o+4>>2];od(n,e,i);v=t;return n|0}function Ma(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0;t=v;v=v+16|0;i=t+8|0;o=t;a=u[r+4>>2]|0;u[o>>2]=u[r>>2];u[o+4>>2]=a;u[i>>2]=u[o>>2];u[i+4>>2]=u[o+4>>2];Ws(n,e,i);v=t;return n|0}function ka(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0;t=v;v=v+16|0;i=t+8|0;o=t;a=u[r+4>>2]|0;u[o>>2]=u[r>>2];u[o+4>>2]=a;u[i>>2]=u[o>>2];u[i+4>>2]=u[o+4>>2];ks(n,e,i);v=t;return n|0}function ga(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0;t=v;v=v+16|0;i=t+8|0;o=t;a=u[r+4>>2]|0;u[o>>2]=u[r>>2];u[o+4>>2]=a;u[i>>2]=u[o>>2];u[i+4>>2]=u[o+4>>2];ns(n,e,i);v=t;return n|0}function Ta(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0;t=v;v=v+16|0;i=t+8|0;o=t;a=u[r+4>>2]|0;u[o>>2]=u[r>>2];u[o+4>>2]=a;u[i>>2]=u[o>>2];u[i+4>>2]=u[o+4>>2];Nl(n,e,i);v=t;return n|0}function Aa(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0;t=v;v=v+16|0;i=t+8|0;o=t;a=u[r+4>>2]|0;u[o>>2]=u[r>>2];u[o+4>>2]=a;u[i>>2]=u[o>>2];u[i+4>>2]=u[o+4>>2];pl(n,e,i);v=t;return n|0}function Sa(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0;t=v;v=v+16|0;i=t+8|0;o=t;a=u[r+4>>2]|0;u[o>>2]=u[r>>2];u[o+4>>2]=a;u[i>>2]=u[o>>2];u[i+4>>2]=u[o+4>>2];zc(n,e,i);v=t;return n|0}function Ea(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0;t=v;v=v+16|0;i=t+8|0;o=t;a=u[r+4>>2]|0;u[o>>2]=u[r>>2];u[o+4>>2]=a;u[i>>2]=u[o>>2];u[i+4>>2]=u[o+4>>2];kc(n,e,i);v=t;return n|0}function Ca(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0;t=v;v=v+16|0;i=t+8|0;o=t;a=u[r+4>>2]|0;u[o>>2]=u[r>>2];u[o+4>>2]=a;u[i>>2]=u[o>>2];u[i+4>>2]=u[o+4>>2];rc(n,e,i);v=t;return n|0}function La(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0;t=v;v=v+16|0;i=t+8|0;o=t;a=u[r+4>>2]|0;u[o>>2]=u[r>>2];u[o+4>>2]=a;u[i>>2]=u[o>>2];u[i+4>>2]=u[o+4>>2];Pf(n,e,i);v=t;return n|0}function Ra(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0;t=v;v=v+16|0;i=t+8|0;o=t;a=u[r+4>>2]|0;u[o>>2]=u[r>>2];u[o+4>>2]=a;u[i>>2]=u[o>>2];u[i+4>>2]=u[o+4>>2];Pa(n,e,i);v=t;return n|0}function Pa(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0,f=0;t=v;v=v+16|0;i=t+8|0;o=t;f=u[r>>2]|0;a=u[r+4>>2]|0;r=Ba(e)|0;u[o>>2]=f;u[o+4>>2]=a;u[i>>2]=u[o>>2];u[i+4>>2]=u[o+4>>2];Oa(n,r,i,1);v=t;return}function Ba(n){n=n|0;return n|0}function Oa(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;var i=0,o=0,a=0,f=0,c=0,l=0,s=0;i=v;v=v+32|0;o=i+16|0;s=i+8|0;f=i;l=u[r>>2]|0;c=u[r+4>>2]|0;a=u[n>>2]|0;n=Na()|0;u[s>>2]=l;u[s+4>>2]=c;u[o>>2]=u[s>>2];u[o+4>>2]=u[s+4>>2];r=Ia(o)|0;u[f>>2]=l;u[f+4>>2]=c;u[o>>2]=u[f>>2];u[o+4>>2]=u[f+4>>2];xa(a,e,n,r,Fa(o,t)|0,t);v=i;return}function Na(){var n=0,e=0;if(!(t[7616]|0)){Ka(9136);xn(24,9136,b|0)|0;e=7616;u[e>>2]=1;u[e+4>>2]=0}if(!(Ja(9136)|0)){n=9136;e=n+36|0;do{u[n>>2]=0;n=n+4|0}while((n|0)<(e|0));Ka(9136)}return 9136}function Ia(n){n=n|0;return 0}function Fa(n,e){n=n|0;e=e|0;var r=0,t=0,i=0,o=0,a=0,f=0,c=0,l=0,s=0,d=0;s=v;v=v+32|0;i=s+24|0;a=s+16|0;f=s;c=s+8|0;o=u[n>>2]|0;t=u[n+4>>2]|0;u[f>>2]=o;u[f+4>>2]=t;d=Na()|0;l=d+24|0;n=Wa(e,4)|0;u[c>>2]=n;e=d+28|0;r=u[e>>2]|0;if(r>>>0<(u[d+32>>2]|0)>>>0){u[a>>2]=o;u[a+4>>2]=t;u[i>>2]=u[a>>2];u[i+4>>2]=u[a+4>>2];Ya(r,i,n);n=(u[e>>2]|0)+12|0;u[e>>2]=n}else{Va(l,f,c);n=u[e>>2]|0}v=s;return((n-(u[l>>2]|0)|0)/12|0)+-1|0}function xa(n,e,r,t,i,o){n=n|0;e=e|0;r=r|0;t=t|0;i=i|0;o=o|0;var a=0,f=0,c=0,l=0,s=0,d=0,_=0,p=0;a=v;v=v+32|0;_=a+24|0;d=a+20|0;c=a+16|0;s=a+12|0;l=a+8|0;f=a+4|0;p=a;u[d>>2]=e;u[c>>2]=r;u[s>>2]=t;u[l>>2]=i;u[f>>2]=o;o=n+28|0;u[p>>2]=u[o>>2];u[_>>2]=u[p>>2];Ua(n+24|0,_,d,s,l,c,f)|0;u[o>>2]=u[u[o>>2]>>2];v=a;return}function Ua(n,e,r,t,i,o,a){n=n|0;e=e|0;r=r|0;t=t|0;i=i|0;o=o|0;a=a|0;n=Ha(e)|0;e=GE(24)|0;Da(e+4|0,u[r>>2]|0,u[t>>2]|0,u[i>>2]|0,u[o>>2]|0,u[a>>2]|0);u[e>>2]=u[n>>2];u[n>>2]=e;return e|0}function Ha(n){n=n|0;return u[n>>2]|0}function Da(n,e,r,t,i,o){n=n|0;e=e|0;r=r|0;t=t|0;i=i|0;o=o|0;u[n>>2]=e;u[n+4>>2]=r;u[n+8>>2]=t;u[n+12>>2]=i;u[n+16>>2]=o;return}function Wa(n,e){n=n|0;e=e|0;return e|n|0}function Ya(n,e,r){n=n|0;e=e|0;r=r|0;var t=0;t=u[e+4>>2]|0;u[n>>2]=u[e>>2];u[n+4>>2]=t;u[n+8>>2]=r;return}function Va(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0,f=0,c=0,l=0,s=0,d=0,_=0;l=v;v=v+48|0;t=l+32|0;a=l+24|0;f=l;c=n+4|0;i=(((u[c>>2]|0)-(u[n>>2]|0)|0)/12|0)+1|0;o=ja(n)|0;if(o>>>0<i>>>0)DE(n);else{s=u[n>>2]|0;_=((u[n+8>>2]|0)-s|0)/12|0;d=_<<1;qa(f,_>>>0<o>>>1>>>0?d>>>0<i>>>0?i:d:o,((u[c>>2]|0)-s|0)/12|0,n+8|0);c=f+8|0;o=u[c>>2]|0;i=u[e+4>>2]|0;r=u[r>>2]|0;u[a>>2]=u[e>>2];u[a+4>>2]=i;u[t>>2]=u[a>>2];u[t+4>>2]=u[a+4>>2];Ya(o,t,r);u[c>>2]=(u[c>>2]|0)+12;za(n,f);Ga(f);v=l;return}}function ja(n){n=n|0;return 357913941}function qa(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;var i=0;u[n+12>>2]=0;u[n+16>>2]=t;do{if(e){if(e>>>0>357913941)Xn();else{i=GE(e*12|0)|0;break}}else i=0}while(0);u[n>>2]=i;t=i+(r*12|0)|0;u[n+8>>2]=t;u[n+4>>2]=t;u[n+12>>2]=i+(e*12|0);return}function za(n,e){n=n|0;e=e|0;var r=0,t=0,i=0,o=0,a=0;t=u[n>>2]|0;a=n+4|0;o=e+4|0;i=(u[a>>2]|0)-t|0;r=(u[o>>2]|0)+(((i|0)/-12|0)*12|0)|0;u[o>>2]=r;if((i|0)>0){iC(r|0,t|0,i|0)|0;t=o;r=u[o>>2]|0}else t=o;o=u[n>>2]|0;u[n>>2]=r;u[t>>2]=o;o=e+8|0;i=u[a>>2]|0;u[a>>2]=u[o>>2];u[o>>2]=i;o=n+8|0;a=e+12|0;n=u[o>>2]|0;u[o>>2]=u[a>>2];u[a>>2]=n;u[e>>2]=u[t>>2];return}function Ga(n){n=n|0;var e=0,r=0,t=0;e=u[n+4>>2]|0;r=n+8|0;t=u[r>>2]|0;if((t|0)!=(e|0))u[r>>2]=t+(~(((t+-12-e|0)>>>0)/12|0)*12|0);n=u[n>>2]|0;if(n|0)XE(n);return}function Ka(n){n=n|0;Qa(n);return}function Xa(n){n=n|0;Za(n+24|0);return}function Ja(n){n=n|0;return u[n>>2]|0}function Za(n){n=n|0;var e=0,r=0,t=0;r=u[n>>2]|0;t=r;if(r|0){n=n+4|0;e=u[n>>2]|0;if((e|0)!=(r|0))u[n>>2]=e+(~(((e+-12-t|0)>>>0)/12|0)*12|0);XE(r)}return}function Qa(n){n=n|0;var e=0;e=$a()|0;rf(n,2,3,e,nf()|0,0);u[n+24>>2]=0;u[n+28>>2]=0;u[n+32>>2]=0;return}function $a(){return 9228}function nf(){return 1140}function ef(n,e){n=n|0;e=e|0;var r=0,t=0,i=0,o=0;r=v;v=v+16|0;t=r+8|0;i=r;o=tf(n)|0;n=u[o+4>>2]|0;u[i>>2]=u[o>>2];u[i+4>>2]=n;u[t>>2]=u[i>>2];u[t+4>>2]=u[i+4>>2];e=uf(e,t)|0;v=r;return e|0}function rf(n,e,r,t,i,o){n=n|0;e=e|0;r=r|0;t=t|0;i=i|0;o=o|0;u[n>>2]=e;u[n+4>>2]=r;u[n+8>>2]=t;u[n+12>>2]=i;u[n+16>>2]=o;return}function tf(n){n=n|0;return(u[(Na()|0)+24>>2]|0)+(n*12|0)|0}function uf(n,e){n=n|0;e=e|0;var r=0,t=0,i=0;i=v;v=v+48|0;t=i;r=u[e>>2]|0;e=u[e+4>>2]|0;n=n+(e>>1)|0;if(e&1)r=u[(u[n>>2]|0)+r>>2]|0;pL[r&31](t,n);t=of(t)|0;v=i;return t|0}function of(n){n=n|0;var e=0,r=0,t=0,i=0;i=v;v=v+32|0;e=i+12|0;r=i;t=ff(af()|0)|0;if(!t)n=_f(n)|0;else{cf(e,t);lf(r,e);sf(n,r);n=df(e)|0}v=i;return n|0}function af(){var n=0;if(!(t[7632]|0)){Tf(9184);xn(25,9184,b|0)|0;n=7632;u[n>>2]=1;u[n+4>>2]=0}return 9184}function ff(n){n=n|0;return u[n+36>>2]|0}function cf(n,e){n=n|0;e=e|0;u[n>>2]=e;u[n+4>>2]=n;u[n+8>>2]=0;return}function lf(n,e){n=n|0;e=e|0;u[n>>2]=u[e>>2];u[n+4>>2]=u[e+4>>2];u[n+8>>2]=0;return}function sf(n,e){n=n|0;e=e|0;hf(e,n,n+8|0,n+16|0,n+24|0,n+32|0,n+40|0)|0;return}function df(n){n=n|0;return u[(u[n+4>>2]|0)+8>>2]|0}function _f(n){n=n|0;var e=0,r=0,t=0,i=0,o=0,a=0,f=0,c=0;c=v;v=v+16|0;r=c+4|0;t=c;i=Dg(8)|0;o=i;a=GE(48)|0;f=a;e=f+48|0;do{u[f>>2]=u[n>>2];f=f+4|0;n=n+4|0}while((f|0)<(e|0));e=o+4|0;u[e>>2]=a;f=GE(8)|0;a=u[e>>2]|0;u[t>>2]=0;u[r>>2]=u[t>>2];vf(f,a,r);u[i>>2]=f;v=c;return o|0}function vf(n,e,r){n=n|0;e=e|0;r=r|0;u[n>>2]=e;r=GE(16)|0;u[r+4>>2]=0;u[r+8>>2]=0;u[r>>2]=1092;u[r+12>>2]=e;u[n+4>>2]=r;return}function pf(n){n=n|0;WE(n);XE(n);return}function mf(n){n=n|0;n=u[n+12>>2]|0;if(n|0)XE(n);return}function bf(n){n=n|0;XE(n);return}function hf(n,e,r,t,i,o,a){n=n|0;e=e|0;r=r|0;t=t|0;i=i|0;o=o|0;a=a|0;o=yf(u[n>>2]|0,e,r,t,i,o,a)|0;a=n+4|0;u[(u[a>>2]|0)+8>>2]=o;return u[(u[a>>2]|0)+8>>2]|0}function yf(n,e,r,t,i,u,o){n=n|0;e=e|0;r=r|0;t=t|0;i=i|0;u=u|0;o=o|0;var a=0,f=0;a=v;v=v+16|0;f=a;gS(f);n=ko(n)|0;o=wf(n,+l[e>>3],+l[r>>3],+l[t>>3],+l[i>>3],+l[u>>3],+l[o>>3])|0;AS(f);v=a;return o|0}function wf(n,e,r,t,i,u,o){n=n|0;e=+e;r=+r;t=+t;i=+i;u=+u;o=+o;var a=0;a=Ao(Mf()|0)|0;e=+So(e);r=+So(r);t=+So(t);i=+So(i);u=+So(u);return Cn(0,a|0,n|0,+e,+r,+t,+i,+u,+ +So(o))|0}function Mf(){var n=0;if(!(t[7624]|0)){kf(9172);n=7624;u[n>>2]=1;u[n+4>>2]=0}return 9172}function kf(n){n=n|0;xo(n,gf()|0,6);return}function gf(){return 1112}function Tf(n){n=n|0;Rf(n);return}function Af(n){n=n|0;Sf(n+24|0);Ef(n+16|0);return}function Sf(n){n=n|0;Lf(n);return}function Ef(n){n=n|0;Cf(n);return}function Cf(n){n=n|0;var e=0,r=0;e=u[n>>2]|0;if(e|0)do{r=e;e=u[e>>2]|0;XE(r)}while((e|0)!=0);u[n>>2]=0;return}function Lf(n){n=n|0;var e=0,r=0;e=u[n>>2]|0;if(e|0)do{r=e;e=u[e>>2]|0;XE(r)}while((e|0)!=0);u[n>>2]=0;return}function Rf(n){n=n|0;var e=0;u[n+16>>2]=0;u[n+20>>2]=0;e=n+24|0;u[e>>2]=0;u[n+28>>2]=e;u[n+36>>2]=0;t[n+40>>0]=0;t[n+41>>0]=0;return}function Pf(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0,f=0;t=v;v=v+16|0;i=t+8|0;o=t;f=u[r>>2]|0;a=u[r+4>>2]|0;r=Ba(e)|0;u[o>>2]=f;u[o+4>>2]=a;u[i>>2]=u[o>>2];u[i+4>>2]=u[o+4>>2];Bf(n,r,i,0);v=t;return}function Bf(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;var i=0,o=0,a=0,f=0,c=0,l=0,s=0;i=v;v=v+32|0;o=i+16|0;s=i+8|0;f=i;l=u[r>>2]|0;c=u[r+4>>2]|0;a=u[n>>2]|0;n=Of()|0;u[s>>2]=l;u[s+4>>2]=c;u[o>>2]=u[s>>2];u[o+4>>2]=u[s+4>>2];r=Nf(o)|0;u[f>>2]=l;u[f+4>>2]=c;u[o>>2]=u[f>>2];u[o+4>>2]=u[f+4>>2];xa(a,e,n,r,If(o,t)|0,t);v=i;return}function Of(){var n=0,e=0;if(!(t[7640]|0)){Yf(9232);xn(26,9232,b|0)|0;e=7640;u[e>>2]=1;u[e+4>>2]=0}if(!(Ja(9232)|0)){n=9232;e=n+36|0;do{u[n>>2]=0;n=n+4|0}while((n|0)<(e|0));Yf(9232)}return 9232}function Nf(n){n=n|0;return 0}function If(n,e){n=n|0;e=e|0;var r=0,t=0,i=0,o=0,a=0,f=0,c=0,l=0,s=0,d=0;s=v;v=v+32|0;i=s+24|0;a=s+16|0;f=s;c=s+8|0;o=u[n>>2]|0;t=u[n+4>>2]|0;u[f>>2]=o;u[f+4>>2]=t;d=Of()|0;l=d+24|0;n=Wa(e,4)|0;u[c>>2]=n;e=d+28|0;r=u[e>>2]|0;if(r>>>0<(u[d+32>>2]|0)>>>0){u[a>>2]=o;u[a+4>>2]=t;u[i>>2]=u[a>>2];u[i+4>>2]=u[a+4>>2];Ff(r,i,n);n=(u[e>>2]|0)+12|0;u[e>>2]=n}else{xf(l,f,c);n=u[e>>2]|0}v=s;return((n-(u[l>>2]|0)|0)/12|0)+-1|0}function Ff(n,e,r){n=n|0;e=e|0;r=r|0;var t=0;t=u[e+4>>2]|0;u[n>>2]=u[e>>2];u[n+4>>2]=t;u[n+8>>2]=r;return}function xf(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0,f=0,c=0,l=0,s=0,d=0,_=0;l=v;v=v+48|0;t=l+32|0;a=l+24|0;f=l;c=n+4|0;i=(((u[c>>2]|0)-(u[n>>2]|0)|0)/12|0)+1|0;o=Uf(n)|0;if(o>>>0<i>>>0)DE(n);else{s=u[n>>2]|0;_=((u[n+8>>2]|0)-s|0)/12|0;d=_<<1;Hf(f,_>>>0<o>>>1>>>0?d>>>0<i>>>0?i:d:o,((u[c>>2]|0)-s|0)/12|0,n+8|0);c=f+8|0;o=u[c>>2]|0;i=u[e+4>>2]|0;r=u[r>>2]|0;u[a>>2]=u[e>>2];u[a+4>>2]=i;u[t>>2]=u[a>>2];u[t+4>>2]=u[a+4>>2];Ff(o,t,r);u[c>>2]=(u[c>>2]|0)+12;Df(n,f);Wf(f);v=l;return}}function Uf(n){n=n|0;return 357913941}function Hf(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;var i=0;u[n+12>>2]=0;u[n+16>>2]=t;do{if(e){if(e>>>0>357913941)Xn();else{i=GE(e*12|0)|0;break}}else i=0}while(0);u[n>>2]=i;t=i+(r*12|0)|0;u[n+8>>2]=t;u[n+4>>2]=t;u[n+12>>2]=i+(e*12|0);return}function Df(n,e){n=n|0;e=e|0;var r=0,t=0,i=0,o=0,a=0;t=u[n>>2]|0;a=n+4|0;o=e+4|0;i=(u[a>>2]|0)-t|0;r=(u[o>>2]|0)+(((i|0)/-12|0)*12|0)|0;u[o>>2]=r;if((i|0)>0){iC(r|0,t|0,i|0)|0;t=o;r=u[o>>2]|0}else t=o;o=u[n>>2]|0;u[n>>2]=r;u[t>>2]=o;o=e+8|0;i=u[a>>2]|0;u[a>>2]=u[o>>2];u[o>>2]=i;o=n+8|0;a=e+12|0;n=u[o>>2]|0;u[o>>2]=u[a>>2];u[a>>2]=n;u[e>>2]=u[t>>2];return}function Wf(n){n=n|0;var e=0,r=0,t=0;e=u[n+4>>2]|0;r=n+8|0;t=u[r>>2]|0;if((t|0)!=(e|0))u[r>>2]=t+(~(((t+-12-e|0)>>>0)/12|0)*12|0);n=u[n>>2]|0;if(n|0)XE(n);return}function Yf(n){n=n|0;qf(n);return}function Vf(n){n=n|0;jf(n+24|0);return}function jf(n){n=n|0;var e=0,r=0,t=0;r=u[n>>2]|0;t=r;if(r|0){n=n+4|0;e=u[n>>2]|0;if((e|0)!=(r|0))u[n>>2]=e+(~(((e+-12-t|0)>>>0)/12|0)*12|0);XE(r)}return}function qf(n){n=n|0;var e=0;e=$a()|0;rf(n,2,1,e,zf()|0,3);u[n+24>>2]=0;u[n+28>>2]=0;u[n+32>>2]=0;return}function zf(){return 1144}function Gf(n,e,r,t,i){n=n|0;e=e|0;r=+r;t=+t;i=i|0;var o=0,a=0,f=0,c=0;o=v;v=v+16|0;a=o+8|0;f=o;c=Kf(n)|0;n=u[c+4>>2]|0;u[f>>2]=u[c>>2];u[f+4>>2]=n;u[a>>2]=u[f>>2];u[a+4>>2]=u[f+4>>2];Xf(e,a,r,t,i);v=o;return}function Kf(n){n=n|0;return(u[(Of()|0)+24>>2]|0)+(n*12|0)|0}function Xf(n,e,r,t,i){n=n|0;e=e|0;r=+r;t=+t;i=i|0;var o=0,a=0,f=0,c=0,l=0;l=v;v=v+16|0;a=l+2|0;f=l+1|0;c=l;o=u[e>>2]|0;e=u[e+4>>2]|0;n=n+(e>>1)|0;if(e&1)o=u[(u[n>>2]|0)+o>>2]|0;Jf(a,r);r=+Zf(a,r);Jf(f,t);t=+Zf(f,t);Qf(c,i);c=$f(c,i)|0;bL[o&1](n,r,t,c);v=l;return}function Jf(n,e){n=n|0;e=+e;return}function Zf(n,e){n=n|0;e=+e;return+ +ec(e)}function Qf(n,e){n=n|0;e=e|0;return}function $f(n,e){n=n|0;e=e|0;return nc(e)|0}function nc(n){n=n|0;return n|0}function ec(n){n=+n;return+n}function rc(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0,f=0;t=v;v=v+16|0;i=t+8|0;o=t;f=u[r>>2]|0;a=u[r+4>>2]|0;r=Ba(e)|0;u[o>>2]=f;u[o+4>>2]=a;u[i>>2]=u[o>>2];u[i+4>>2]=u[o+4>>2];tc(n,r,i,1);v=t;return}function tc(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;var i=0,o=0,a=0,f=0,c=0,l=0,s=0;i=v;v=v+32|0;o=i+16|0;s=i+8|0;f=i;l=u[r>>2]|0;c=u[r+4>>2]|0;a=u[n>>2]|0;n=ic()|0;u[s>>2]=l;u[s+4>>2]=c;u[o>>2]=u[s>>2];u[o+4>>2]=u[s+4>>2];r=uc(o)|0;u[f>>2]=l;u[f+4>>2]=c;u[o>>2]=u[f>>2];u[o+4>>2]=u[f+4>>2];xa(a,e,n,r,oc(o,t)|0,t);v=i;return}function ic(){var n=0,e=0;if(!(t[7648]|0)){_c(9268);xn(27,9268,b|0)|0;e=7648;u[e>>2]=1;u[e+4>>2]=0}if(!(Ja(9268)|0)){n=9268;e=n+36|0;do{u[n>>2]=0;n=n+4|0}while((n|0)<(e|0));_c(9268)}return 9268}function uc(n){n=n|0;return 0}function oc(n,e){n=n|0;e=e|0;var r=0,t=0,i=0,o=0,a=0,f=0,c=0,l=0,s=0,d=0;s=v;v=v+32|0;i=s+24|0;a=s+16|0;f=s;c=s+8|0;o=u[n>>2]|0;t=u[n+4>>2]|0;u[f>>2]=o;u[f+4>>2]=t;d=ic()|0;l=d+24|0;n=Wa(e,4)|0;u[c>>2]=n;e=d+28|0;r=u[e>>2]|0;if(r>>>0<(u[d+32>>2]|0)>>>0){u[a>>2]=o;u[a+4>>2]=t;u[i>>2]=u[a>>2];u[i+4>>2]=u[a+4>>2];ac(r,i,n);n=(u[e>>2]|0)+12|0;u[e>>2]=n}else{fc(l,f,c);n=u[e>>2]|0}v=s;return((n-(u[l>>2]|0)|0)/12|0)+-1|0}function ac(n,e,r){n=n|0;e=e|0;r=r|0;var t=0;t=u[e+4>>2]|0;u[n>>2]=u[e>>2];u[n+4>>2]=t;u[n+8>>2]=r;return}function fc(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0,f=0,c=0,l=0,s=0,d=0,_=0;l=v;v=v+48|0;t=l+32|0;a=l+24|0;f=l;c=n+4|0;i=(((u[c>>2]|0)-(u[n>>2]|0)|0)/12|0)+1|0;o=cc(n)|0;if(o>>>0<i>>>0)DE(n);else{s=u[n>>2]|0;_=((u[n+8>>2]|0)-s|0)/12|0;d=_<<1;lc(f,_>>>0<o>>>1>>>0?d>>>0<i>>>0?i:d:o,((u[c>>2]|0)-s|0)/12|0,n+8|0);c=f+8|0;o=u[c>>2]|0;i=u[e+4>>2]|0;r=u[r>>2]|0;u[a>>2]=u[e>>2];u[a+4>>2]=i;u[t>>2]=u[a>>2];u[t+4>>2]=u[a+4>>2];ac(o,t,r);u[c>>2]=(u[c>>2]|0)+12;sc(n,f);dc(f);v=l;return}}function cc(n){n=n|0;return 357913941}function lc(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;var i=0;u[n+12>>2]=0;u[n+16>>2]=t;do{if(e){if(e>>>0>357913941)Xn();else{i=GE(e*12|0)|0;break}}else i=0}while(0);u[n>>2]=i;t=i+(r*12|0)|0;u[n+8>>2]=t;u[n+4>>2]=t;u[n+12>>2]=i+(e*12|0);return}function sc(n,e){n=n|0;e=e|0;var r=0,t=0,i=0,o=0,a=0;t=u[n>>2]|0;a=n+4|0;o=e+4|0;i=(u[a>>2]|0)-t|0;r=(u[o>>2]|0)+(((i|0)/-12|0)*12|0)|0;u[o>>2]=r;if((i|0)>0){iC(r|0,t|0,i|0)|0;t=o;r=u[o>>2]|0}else t=o;o=u[n>>2]|0;u[n>>2]=r;u[t>>2]=o;o=e+8|0;i=u[a>>2]|0;u[a>>2]=u[o>>2];u[o>>2]=i;o=n+8|0;a=e+12|0;n=u[o>>2]|0;u[o>>2]=u[a>>2];u[a>>2]=n;u[e>>2]=u[t>>2];return}function dc(n){n=n|0;var e=0,r=0,t=0;e=u[n+4>>2]|0;r=n+8|0;t=u[r>>2]|0;if((t|0)!=(e|0))u[r>>2]=t+(~(((t+-12-e|0)>>>0)/12|0)*12|0);n=u[n>>2]|0;if(n|0)XE(n);return}function _c(n){n=n|0;mc(n);return}function vc(n){n=n|0;pc(n+24|0);return}function pc(n){n=n|0;var e=0,r=0,t=0;r=u[n>>2]|0;t=r;if(r|0){n=n+4|0;e=u[n>>2]|0;if((e|0)!=(r|0))u[n>>2]=e+(~(((e+-12-t|0)>>>0)/12|0)*12|0);XE(r)}return}function mc(n){n=n|0;var e=0;e=$a()|0;rf(n,2,4,e,bc()|0,0);u[n+24>>2]=0;u[n+28>>2]=0;u[n+32>>2]=0;return}function bc(){return 1160}function hc(n,e){n=n|0;e=e|0;var r=0,t=0,i=0,o=0;r=v;v=v+16|0;t=r+8|0;i=r;o=yc(n)|0;n=u[o+4>>2]|0;u[i>>2]=u[o>>2];u[i+4>>2]=n;u[t>>2]=u[i>>2];u[t+4>>2]=u[i+4>>2];e=wc(e,t)|0;v=r;return e|0}function yc(n){n=n|0;return(u[(ic()|0)+24>>2]|0)+(n*12|0)|0}function wc(n,e){n=n|0;e=e|0;var r=0;r=u[e>>2]|0;e=u[e+4>>2]|0;n=n+(e>>1)|0;if(e&1)r=u[(u[n>>2]|0)+r>>2]|0;return Mc(mL[r&31](n)|0)|0}function Mc(n){n=n|0;return n&1|0}function kc(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0,f=0;t=v;v=v+16|0;i=t+8|0;o=t;f=u[r>>2]|0;a=u[r+4>>2]|0;r=Ba(e)|0;u[o>>2]=f;u[o+4>>2]=a;u[i>>2]=u[o>>2];u[i+4>>2]=u[o+4>>2];gc(n,r,i,0);v=t;return}function gc(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;var i=0,o=0,a=0,f=0,c=0,l=0,s=0;i=v;v=v+32|0;o=i+16|0;s=i+8|0;f=i;l=u[r>>2]|0;c=u[r+4>>2]|0;a=u[n>>2]|0;n=Tc()|0;u[s>>2]=l;u[s+4>>2]=c;u[o>>2]=u[s>>2];u[o+4>>2]=u[s+4>>2];r=Ac(o)|0;u[f>>2]=l;u[f+4>>2]=c;u[o>>2]=u[f>>2];u[o+4>>2]=u[f+4>>2];xa(a,e,n,r,Sc(o,t)|0,t);v=i;return}function Tc(){var n=0,e=0;if(!(t[7656]|0)){Oc(9304);xn(28,9304,b|0)|0;e=7656;u[e>>2]=1;u[e+4>>2]=0}if(!(Ja(9304)|0)){n=9304;e=n+36|0;do{u[n>>2]=0;n=n+4|0}while((n|0)<(e|0));Oc(9304)}return 9304}function Ac(n){n=n|0;return 0}function Sc(n,e){n=n|0;e=e|0;var r=0,t=0,i=0,o=0,a=0,f=0,c=0,l=0,s=0,d=0;s=v;v=v+32|0;i=s+24|0;a=s+16|0;f=s;c=s+8|0;o=u[n>>2]|0;t=u[n+4>>2]|0;u[f>>2]=o;u[f+4>>2]=t;d=Tc()|0;l=d+24|0;n=Wa(e,4)|0;u[c>>2]=n;e=d+28|0;r=u[e>>2]|0;if(r>>>0<(u[d+32>>2]|0)>>>0){u[a>>2]=o;u[a+4>>2]=t;u[i>>2]=u[a>>2];u[i+4>>2]=u[a+4>>2];Ec(r,i,n);n=(u[e>>2]|0)+12|0;u[e>>2]=n}else{Cc(l,f,c);n=u[e>>2]|0}v=s;return((n-(u[l>>2]|0)|0)/12|0)+-1|0}function Ec(n,e,r){n=n|0;e=e|0;r=r|0;var t=0;t=u[e+4>>2]|0;u[n>>2]=u[e>>2];u[n+4>>2]=t;u[n+8>>2]=r;return}function Cc(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0,f=0,c=0,l=0,s=0,d=0,_=0;l=v;v=v+48|0;t=l+32|0;a=l+24|0;f=l;c=n+4|0;i=(((u[c>>2]|0)-(u[n>>2]|0)|0)/12|0)+1|0;o=Lc(n)|0;if(o>>>0<i>>>0)DE(n);else{s=u[n>>2]|0;_=((u[n+8>>2]|0)-s|0)/12|0;d=_<<1;Rc(f,_>>>0<o>>>1>>>0?d>>>0<i>>>0?i:d:o,((u[c>>2]|0)-s|0)/12|0,n+8|0);c=f+8|0;o=u[c>>2]|0;i=u[e+4>>2]|0;r=u[r>>2]|0;u[a>>2]=u[e>>2];u[a+4>>2]=i;u[t>>2]=u[a>>2];u[t+4>>2]=u[a+4>>2];Ec(o,t,r);u[c>>2]=(u[c>>2]|0)+12;Pc(n,f);Bc(f);v=l;return}}function Lc(n){n=n|0;return 357913941}function Rc(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;var i=0;u[n+12>>2]=0;u[n+16>>2]=t;do{if(e){if(e>>>0>357913941)Xn();else{i=GE(e*12|0)|0;break}}else i=0}while(0);u[n>>2]=i;t=i+(r*12|0)|0;u[n+8>>2]=t;u[n+4>>2]=t;u[n+12>>2]=i+(e*12|0);return}function Pc(n,e){n=n|0;e=e|0;var r=0,t=0,i=0,o=0,a=0;t=u[n>>2]|0;a=n+4|0;o=e+4|0;i=(u[a>>2]|0)-t|0;r=(u[o>>2]|0)+(((i|0)/-12|0)*12|0)|0;u[o>>2]=r;if((i|0)>0){iC(r|0,t|0,i|0)|0;t=o;r=u[o>>2]|0}else t=o;o=u[n>>2]|0;u[n>>2]=r;u[t>>2]=o;o=e+8|0;i=u[a>>2]|0;u[a>>2]=u[o>>2];u[o>>2]=i;o=n+8|0;a=e+12|0;n=u[o>>2]|0;u[o>>2]=u[a>>2];u[a>>2]=n;u[e>>2]=u[t>>2];return}function Bc(n){n=n|0;var e=0,r=0,t=0;e=u[n+4>>2]|0;r=n+8|0;t=u[r>>2]|0;if((t|0)!=(e|0))u[r>>2]=t+(~(((t+-12-e|0)>>>0)/12|0)*12|0);n=u[n>>2]|0;if(n|0)XE(n);return}function Oc(n){n=n|0;Fc(n);return}function Nc(n){n=n|0;Ic(n+24|0);return}function Ic(n){n=n|0;var e=0,r=0,t=0;r=u[n>>2]|0;t=r;if(r|0){n=n+4|0;e=u[n>>2]|0;if((e|0)!=(r|0))u[n>>2]=e+(~(((e+-12-t|0)>>>0)/12|0)*12|0);XE(r)}return}function Fc(n){n=n|0;var e=0;e=$a()|0;rf(n,2,5,e,xc()|0,1);u[n+24>>2]=0;u[n+28>>2]=0;u[n+32>>2]=0;return}function xc(){return 1164}function Uc(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0;t=v;v=v+16|0;i=t+8|0;o=t;a=Hc(n)|0;n=u[a+4>>2]|0;u[o>>2]=u[a>>2];u[o+4>>2]=n;u[i>>2]=u[o>>2];u[i+4>>2]=u[o+4>>2];Dc(e,i,r);v=t;return}function Hc(n){n=n|0;return(u[(Tc()|0)+24>>2]|0)+(n*12|0)|0}function Dc(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0;o=v;v=v+16|0;i=o;t=u[e>>2]|0;e=u[e+4>>2]|0;n=n+(e>>1)|0;if(e&1)t=u[(u[n>>2]|0)+t>>2]|0;Wc(i,r);r=Yc(i,r)|0;pL[t&31](n,r);Vc(i);v=o;return}function Wc(n,e){n=n|0;e=e|0;jc(n,e);return}function Yc(n,e){n=n|0;e=e|0;return n|0}function Vc(n){n=n|0;Qi(n);return}function jc(n,e){n=n|0;e=e|0;qc(n,e);return}function qc(n,e){n=n|0;e=e|0;u[n>>2]=e;return}function zc(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0,f=0;t=v;v=v+16|0;i=t+8|0;o=t;f=u[r>>2]|0;a=u[r+4>>2]|0;r=Ba(e)|0;u[o>>2]=f;u[o+4>>2]=a;u[i>>2]=u[o>>2];u[i+4>>2]=u[o+4>>2];Gc(n,r,i,0);v=t;return}function Gc(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;var i=0,o=0,a=0,f=0,c=0,l=0,s=0;i=v;v=v+32|0;o=i+16|0;s=i+8|0;f=i;l=u[r>>2]|0;c=u[r+4>>2]|0;a=u[n>>2]|0;n=Kc()|0;u[s>>2]=l;u[s+4>>2]=c;u[o>>2]=u[s>>2];u[o+4>>2]=u[s+4>>2];r=Xc(o)|0;u[f>>2]=l;u[f+4>>2]=c;u[o>>2]=u[f>>2];u[o+4>>2]=u[f+4>>2];xa(a,e,n,r,Jc(o,t)|0,t);v=i;return}function Kc(){var n=0,e=0;if(!(t[7664]|0)){tl(9340);xn(29,9340,b|0)|0;e=7664;u[e>>2]=1;u[e+4>>2]=0}if(!(Ja(9340)|0)){n=9340;e=n+36|0;do{u[n>>2]=0;n=n+4|0}while((n|0)<(e|0));tl(9340)}return 9340}function Xc(n){n=n|0;return 0}function Jc(n,e){n=n|0;e=e|0;var r=0,t=0,i=0,o=0,a=0,f=0,c=0,l=0,s=0,d=0;s=v;v=v+32|0;i=s+24|0;a=s+16|0;f=s;c=s+8|0;o=u[n>>2]|0;t=u[n+4>>2]|0;u[f>>2]=o;u[f+4>>2]=t;d=Kc()|0;l=d+24|0;n=Wa(e,4)|0;u[c>>2]=n;e=d+28|0;r=u[e>>2]|0;if(r>>>0<(u[d+32>>2]|0)>>>0){u[a>>2]=o;u[a+4>>2]=t;u[i>>2]=u[a>>2];u[i+4>>2]=u[a+4>>2];Zc(r,i,n);n=(u[e>>2]|0)+12|0;u[e>>2]=n}else{Qc(l,f,c);n=u[e>>2]|0}v=s;return((n-(u[l>>2]|0)|0)/12|0)+-1|0}function Zc(n,e,r){n=n|0;e=e|0;r=r|0;var t=0;t=u[e+4>>2]|0;u[n>>2]=u[e>>2];u[n+4>>2]=t;u[n+8>>2]=r;return}function Qc(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0,f=0,c=0,l=0,s=0,d=0,_=0;l=v;v=v+48|0;t=l+32|0;a=l+24|0;f=l;c=n+4|0;i=(((u[c>>2]|0)-(u[n>>2]|0)|0)/12|0)+1|0;o=$c(n)|0;if(o>>>0<i>>>0)DE(n);else{s=u[n>>2]|0;_=((u[n+8>>2]|0)-s|0)/12|0;d=_<<1;nl(f,_>>>0<o>>>1>>>0?d>>>0<i>>>0?i:d:o,((u[c>>2]|0)-s|0)/12|0,n+8|0);c=f+8|0;o=u[c>>2]|0;i=u[e+4>>2]|0;r=u[r>>2]|0;u[a>>2]=u[e>>2];u[a+4>>2]=i;u[t>>2]=u[a>>2];u[t+4>>2]=u[a+4>>2];Zc(o,t,r);u[c>>2]=(u[c>>2]|0)+12;el(n,f);rl(f);v=l;return}}function $c(n){n=n|0;return 357913941}function nl(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;var i=0;u[n+12>>2]=0;u[n+16>>2]=t;do{if(e){if(e>>>0>357913941)Xn();else{i=GE(e*12|0)|0;break}}else i=0}while(0);u[n>>2]=i;t=i+(r*12|0)|0;u[n+8>>2]=t;u[n+4>>2]=t;u[n+12>>2]=i+(e*12|0);return}function el(n,e){n=n|0;e=e|0;var r=0,t=0,i=0,o=0,a=0;t=u[n>>2]|0;a=n+4|0;o=e+4|0;i=(u[a>>2]|0)-t|0;r=(u[o>>2]|0)+(((i|0)/-12|0)*12|0)|0;u[o>>2]=r;if((i|0)>0){iC(r|0,t|0,i|0)|0;t=o;r=u[o>>2]|0}else t=o;o=u[n>>2]|0;u[n>>2]=r;u[t>>2]=o;o=e+8|0;i=u[a>>2]|0;u[a>>2]=u[o>>2];u[o>>2]=i;o=n+8|0;a=e+12|0;n=u[o>>2]|0;u[o>>2]=u[a>>2];u[a>>2]=n;u[e>>2]=u[t>>2];return}function rl(n){n=n|0;var e=0,r=0,t=0;e=u[n+4>>2]|0;r=n+8|0;t=u[r>>2]|0;if((t|0)!=(e|0))u[r>>2]=t+(~(((t+-12-e|0)>>>0)/12|0)*12|0);n=u[n>>2]|0;if(n|0)XE(n);return}function tl(n){n=n|0;ol(n);return}function il(n){n=n|0;ul(n+24|0);return}function ul(n){n=n|0;var e=0,r=0,t=0;r=u[n>>2]|0;t=r;if(r|0){n=n+4|0;e=u[n>>2]|0;if((e|0)!=(r|0))u[n>>2]=e+(~(((e+-12-t|0)>>>0)/12|0)*12|0);XE(r)}return}function ol(n){n=n|0;var e=0;e=$a()|0;rf(n,2,4,e,al()|0,1);u[n+24>>2]=0;u[n+28>>2]=0;u[n+32>>2]=0;return}function al(){return 1180}function fl(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0;t=v;v=v+16|0;i=t+8|0;o=t;a=cl(n)|0;n=u[a+4>>2]|0;u[o>>2]=u[a>>2];u[o+4>>2]=n;u[i>>2]=u[o>>2];u[i+4>>2]=u[o+4>>2];r=ll(e,i,r)|0;v=t;return r|0}function cl(n){n=n|0;return(u[(Kc()|0)+24>>2]|0)+(n*12|0)|0}function ll(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0;o=v;v=v+16|0;i=o;t=u[e>>2]|0;e=u[e+4>>2]|0;n=n+(e>>1)|0;if(e&1)t=u[(u[n>>2]|0)+t>>2]|0;sl(i,r);i=dl(i,r)|0;i=_l(gL[t&15](n,i)|0)|0;v=o;return i|0}function sl(n,e){n=n|0;e=e|0;return}function dl(n,e){n=n|0;e=e|0;return vl(e)|0}function _l(n){n=n|0;return n|0}function vl(n){n=n|0;return n|0}function pl(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0,f=0;t=v;v=v+16|0;i=t+8|0;o=t;f=u[r>>2]|0;a=u[r+4>>2]|0;r=Ba(e)|0;u[o>>2]=f;u[o+4>>2]=a;u[i>>2]=u[o>>2];u[i+4>>2]=u[o+4>>2];ml(n,r,i,0);v=t;return}function ml(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;var i=0,o=0,a=0,f=0,c=0,l=0,s=0;i=v;v=v+32|0;o=i+16|0;s=i+8|0;f=i;l=u[r>>2]|0;c=u[r+4>>2]|0;a=u[n>>2]|0;n=bl()|0;u[s>>2]=l;u[s+4>>2]=c;u[o>>2]=u[s>>2];u[o+4>>2]=u[s+4>>2];r=hl(o)|0;u[f>>2]=l;u[f+4>>2]=c;u[o>>2]=u[f>>2];u[o+4>>2]=u[f+4>>2];xa(a,e,n,r,yl(o,t)|0,t);v=i;return}function bl(){var n=0,e=0;if(!(t[7672]|0)){Sl(9376);xn(30,9376,b|0)|0;e=7672;u[e>>2]=1;u[e+4>>2]=0}if(!(Ja(9376)|0)){n=9376;e=n+36|0;do{u[n>>2]=0;n=n+4|0}while((n|0)<(e|0));Sl(9376)}return 9376}function hl(n){n=n|0;return 0}function yl(n,e){n=n|0;e=e|0;var r=0,t=0,i=0,o=0,a=0,f=0,c=0,l=0,s=0,d=0;s=v;v=v+32|0;i=s+24|0;a=s+16|0;f=s;c=s+8|0;o=u[n>>2]|0;t=u[n+4>>2]|0;u[f>>2]=o;u[f+4>>2]=t;d=bl()|0;l=d+24|0;n=Wa(e,4)|0;u[c>>2]=n;e=d+28|0;r=u[e>>2]|0;if(r>>>0<(u[d+32>>2]|0)>>>0){u[a>>2]=o;u[a+4>>2]=t;u[i>>2]=u[a>>2];u[i+4>>2]=u[a+4>>2];wl(r,i,n);n=(u[e>>2]|0)+12|0;u[e>>2]=n}else{Ml(l,f,c);n=u[e>>2]|0}v=s;return((n-(u[l>>2]|0)|0)/12|0)+-1|0}function wl(n,e,r){n=n|0;e=e|0;r=r|0;var t=0;t=u[e+4>>2]|0;u[n>>2]=u[e>>2];u[n+4>>2]=t;u[n+8>>2]=r;return}function Ml(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0,f=0,c=0,l=0,s=0,d=0,_=0;l=v;v=v+48|0;t=l+32|0;a=l+24|0;f=l;c=n+4|0;i=(((u[c>>2]|0)-(u[n>>2]|0)|0)/12|0)+1|0;o=kl(n)|0;if(o>>>0<i>>>0)DE(n);else{s=u[n>>2]|0;_=((u[n+8>>2]|0)-s|0)/12|0;d=_<<1;gl(f,_>>>0<o>>>1>>>0?d>>>0<i>>>0?i:d:o,((u[c>>2]|0)-s|0)/12|0,n+8|0);c=f+8|0;o=u[c>>2]|0;i=u[e+4>>2]|0;r=u[r>>2]|0;u[a>>2]=u[e>>2];u[a+4>>2]=i;u[t>>2]=u[a>>2];u[t+4>>2]=u[a+4>>2];wl(o,t,r);u[c>>2]=(u[c>>2]|0)+12;Tl(n,f);Al(f);v=l;return}}function kl(n){n=n|0;return 357913941}function gl(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;var i=0;u[n+12>>2]=0;u[n+16>>2]=t;do{if(e){if(e>>>0>357913941)Xn();else{i=GE(e*12|0)|0;break}}else i=0}while(0);u[n>>2]=i;t=i+(r*12|0)|0;u[n+8>>2]=t;u[n+4>>2]=t;u[n+12>>2]=i+(e*12|0);return}function Tl(n,e){n=n|0;e=e|0;var r=0,t=0,i=0,o=0,a=0;t=u[n>>2]|0;a=n+4|0;o=e+4|0;i=(u[a>>2]|0)-t|0;r=(u[o>>2]|0)+(((i|0)/-12|0)*12|0)|0;u[o>>2]=r;if((i|0)>0){iC(r|0,t|0,i|0)|0;t=o;r=u[o>>2]|0}else t=o;o=u[n>>2]|0;u[n>>2]=r;u[t>>2]=o;o=e+8|0;i=u[a>>2]|0;u[a>>2]=u[o>>2];u[o>>2]=i;o=n+8|0;a=e+12|0;n=u[o>>2]|0;u[o>>2]=u[a>>2];u[a>>2]=n;u[e>>2]=u[t>>2];return}function Al(n){n=n|0;var e=0,r=0,t=0;e=u[n+4>>2]|0;r=n+8|0;t=u[r>>2]|0;if((t|0)!=(e|0))u[r>>2]=t+(~(((t+-12-e|0)>>>0)/12|0)*12|0);n=u[n>>2]|0;if(n|0)XE(n);return}function Sl(n){n=n|0;Ll(n);return}function El(n){n=n|0;Cl(n+24|0);return}function Cl(n){n=n|0;var e=0,r=0,t=0;r=u[n>>2]|0;t=r;if(r|0){n=n+4|0;e=u[n>>2]|0;if((e|0)!=(r|0))u[n>>2]=e+(~(((e+-12-t|0)>>>0)/12|0)*12|0);XE(r)}return}function Ll(n){n=n|0;var e=0;e=$a()|0;rf(n,2,5,e,Rl()|0,0);u[n+24>>2]=0;u[n+28>>2]=0;u[n+32>>2]=0;return}function Rl(){return 1196}function Pl(n,e){n=n|0;e=e|0;var r=0,t=0,i=0,o=0;r=v;v=v+16|0;t=r+8|0;i=r;o=Bl(n)|0;n=u[o+4>>2]|0;u[i>>2]=u[o>>2];u[i+4>>2]=n;u[t>>2]=u[i>>2];u[t+4>>2]=u[i+4>>2];e=Ol(e,t)|0;v=r;return e|0}function Bl(n){n=n|0;return(u[(bl()|0)+24>>2]|0)+(n*12|0)|0}function Ol(n,e){n=n|0;e=e|0;var r=0;r=u[e>>2]|0;e=u[e+4>>2]|0;n=n+(e>>1)|0;if(e&1)r=u[(u[n>>2]|0)+r>>2]|0;return _l(mL[r&31](n)|0)|0}function Nl(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0,f=0;t=v;v=v+16|0;i=t+8|0;o=t;f=u[r>>2]|0;a=u[r+4>>2]|0;r=Ba(e)|0;u[o>>2]=f;u[o+4>>2]=a;u[i>>2]=u[o>>2];u[i+4>>2]=u[o+4>>2];Il(n,r,i,1);v=t;return}function Il(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;var i=0,o=0,a=0,f=0,c=0,l=0,s=0;i=v;v=v+32|0;o=i+16|0;s=i+8|0;f=i;l=u[r>>2]|0;c=u[r+4>>2]|0;a=u[n>>2]|0;n=Fl()|0;u[s>>2]=l;u[s+4>>2]=c;u[o>>2]=u[s>>2];u[o+4>>2]=u[s+4>>2];r=xl(o)|0;u[f>>2]=l;u[f+4>>2]=c;u[o>>2]=u[f>>2];u[o+4>>2]=u[f+4>>2];xa(a,e,n,r,Ul(o,t)|0,t);v=i;return}function Fl(){var n=0,e=0;if(!(t[7680]|0)){ql(9412);xn(31,9412,b|0)|0;e=7680;u[e>>2]=1;u[e+4>>2]=0}if(!(Ja(9412)|0)){n=9412;e=n+36|0;do{u[n>>2]=0;n=n+4|0}while((n|0)<(e|0));ql(9412)}return 9412}function xl(n){n=n|0;return 0}function Ul(n,e){n=n|0;e=e|0;var r=0,t=0,i=0,o=0,a=0,f=0,c=0,l=0,s=0,d=0;s=v;v=v+32|0;i=s+24|0;a=s+16|0;f=s;c=s+8|0;o=u[n>>2]|0;t=u[n+4>>2]|0;u[f>>2]=o;u[f+4>>2]=t;d=Fl()|0;l=d+24|0;n=Wa(e,4)|0;u[c>>2]=n;e=d+28|0;r=u[e>>2]|0;if(r>>>0<(u[d+32>>2]|0)>>>0){u[a>>2]=o;u[a+4>>2]=t;u[i>>2]=u[a>>2];u[i+4>>2]=u[a+4>>2];Hl(r,i,n);n=(u[e>>2]|0)+12|0;u[e>>2]=n}else{Dl(l,f,c);n=u[e>>2]|0}v=s;return((n-(u[l>>2]|0)|0)/12|0)+-1|0}function Hl(n,e,r){n=n|0;e=e|0;r=r|0;var t=0;t=u[e+4>>2]|0;u[n>>2]=u[e>>2];u[n+4>>2]=t;u[n+8>>2]=r;return}function Dl(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0,f=0,c=0,l=0,s=0,d=0,_=0;l=v;v=v+48|0;t=l+32|0;a=l+24|0;f=l;c=n+4|0;i=(((u[c>>2]|0)-(u[n>>2]|0)|0)/12|0)+1|0;o=Wl(n)|0;if(o>>>0<i>>>0)DE(n);else{s=u[n>>2]|0;_=((u[n+8>>2]|0)-s|0)/12|0;d=_<<1;Yl(f,_>>>0<o>>>1>>>0?d>>>0<i>>>0?i:d:o,((u[c>>2]|0)-s|0)/12|0,n+8|0);c=f+8|0;o=u[c>>2]|0;i=u[e+4>>2]|0;r=u[r>>2]|0;u[a>>2]=u[e>>2];u[a+4>>2]=i;u[t>>2]=u[a>>2];u[t+4>>2]=u[a+4>>2];Hl(o,t,r);u[c>>2]=(u[c>>2]|0)+12;Vl(n,f);jl(f);v=l;return}}function Wl(n){n=n|0;return 357913941}function Yl(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;var i=0;u[n+12>>2]=0;u[n+16>>2]=t;do{if(e){if(e>>>0>357913941)Xn();else{i=GE(e*12|0)|0;break}}else i=0}while(0);u[n>>2]=i;t=i+(r*12|0)|0;u[n+8>>2]=t;u[n+4>>2]=t;u[n+12>>2]=i+(e*12|0);return}function Vl(n,e){n=n|0;e=e|0;var r=0,t=0,i=0,o=0,a=0;t=u[n>>2]|0;a=n+4|0;o=e+4|0;i=(u[a>>2]|0)-t|0;r=(u[o>>2]|0)+(((i|0)/-12|0)*12|0)|0;u[o>>2]=r;if((i|0)>0){iC(r|0,t|0,i|0)|0;t=o;r=u[o>>2]|0}else t=o;o=u[n>>2]|0;u[n>>2]=r;u[t>>2]=o;o=e+8|0;i=u[a>>2]|0;u[a>>2]=u[o>>2];u[o>>2]=i;o=n+8|0;a=e+12|0;n=u[o>>2]|0;u[o>>2]=u[a>>2];u[a>>2]=n;u[e>>2]=u[t>>2];return}function jl(n){n=n|0;var e=0,r=0,t=0;e=u[n+4>>2]|0;r=n+8|0;t=u[r>>2]|0;if((t|0)!=(e|0))u[r>>2]=t+(~(((t+-12-e|0)>>>0)/12|0)*12|0);n=u[n>>2]|0;if(n|0)XE(n);return}function ql(n){n=n|0;Kl(n);return}function zl(n){n=n|0;Gl(n+24|0);return}function Gl(n){n=n|0;var e=0,r=0,t=0;r=u[n>>2]|0;t=r;if(r|0){n=n+4|0;e=u[n>>2]|0;if((e|0)!=(r|0))u[n>>2]=e+(~(((e+-12-t|0)>>>0)/12|0)*12|0);XE(r)}return}function Kl(n){n=n|0;var e=0;e=$a()|0;rf(n,2,6,e,Xl()|0,0);u[n+24>>2]=0;u[n+28>>2]=0;u[n+32>>2]=0;return}function Xl(){return 1200}function Jl(n,e){n=n|0;e=e|0;var r=0,t=0,i=0,o=0;r=v;v=v+16|0;t=r+8|0;i=r;o=Zl(n)|0;n=u[o+4>>2]|0;u[i>>2]=u[o>>2];u[i+4>>2]=n;u[t>>2]=u[i>>2];u[t+4>>2]=u[i+4>>2];e=Ql(e,t)|0;v=r;return e|0}function Zl(n){n=n|0;return(u[(Fl()|0)+24>>2]|0)+(n*12|0)|0}function Ql(n,e){n=n|0;e=e|0;var r=0;r=u[e>>2]|0;e=u[e+4>>2]|0;n=n+(e>>1)|0;if(e&1)r=u[(u[n>>2]|0)+r>>2]|0;return $l(mL[r&31](n)|0)|0}function $l(n){n=n|0;return n|0}function ns(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0,f=0;t=v;v=v+16|0;i=t+8|0;o=t;f=u[r>>2]|0;a=u[r+4>>2]|0;r=Ba(e)|0;u[o>>2]=f;u[o+4>>2]=a;u[i>>2]=u[o>>2];u[i+4>>2]=u[o+4>>2];es(n,r,i,0);v=t;return}function es(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;var i=0,o=0,a=0,f=0,c=0,l=0,s=0;i=v;v=v+32|0;o=i+16|0;s=i+8|0;f=i;l=u[r>>2]|0;c=u[r+4>>2]|0;a=u[n>>2]|0;n=rs()|0;u[s>>2]=l;u[s+4>>2]=c;u[o>>2]=u[s>>2];u[o+4>>2]=u[s+4>>2];r=ts(o)|0;u[f>>2]=l;u[f+4>>2]=c;u[o>>2]=u[f>>2];u[o+4>>2]=u[f+4>>2];xa(a,e,n,r,is(o,t)|0,t);v=i;return}function rs(){var n=0,e=0;if(!(t[7688]|0)){ss(9448);xn(32,9448,b|0)|0;e=7688;u[e>>2]=1;u[e+4>>2]=0}if(!(Ja(9448)|0)){n=9448;e=n+36|0;do{u[n>>2]=0;n=n+4|0}while((n|0)<(e|0));ss(9448)}return 9448}function ts(n){n=n|0;return 0}function is(n,e){n=n|0;e=e|0;var r=0,t=0,i=0,o=0,a=0,f=0,c=0,l=0,s=0,d=0;s=v;v=v+32|0;i=s+24|0;a=s+16|0;f=s;c=s+8|0;o=u[n>>2]|0;t=u[n+4>>2]|0;u[f>>2]=o;u[f+4>>2]=t;d=rs()|0;l=d+24|0;n=Wa(e,4)|0;u[c>>2]=n;e=d+28|0;r=u[e>>2]|0;if(r>>>0<(u[d+32>>2]|0)>>>0){u[a>>2]=o;u[a+4>>2]=t;u[i>>2]=u[a>>2];u[i+4>>2]=u[a+4>>2];us(r,i,n);n=(u[e>>2]|0)+12|0;u[e>>2]=n}else{os(l,f,c);n=u[e>>2]|0}v=s;return((n-(u[l>>2]|0)|0)/12|0)+-1|0}function us(n,e,r){n=n|0;e=e|0;r=r|0;var t=0;t=u[e+4>>2]|0;u[n>>2]=u[e>>2];u[n+4>>2]=t;u[n+8>>2]=r;return}function os(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0,f=0,c=0,l=0,s=0,d=0,_=0;l=v;v=v+48|0;t=l+32|0;a=l+24|0;f=l;c=n+4|0;i=(((u[c>>2]|0)-(u[n>>2]|0)|0)/12|0)+1|0;o=as(n)|0;if(o>>>0<i>>>0)DE(n);else{s=u[n>>2]|0;_=((u[n+8>>2]|0)-s|0)/12|0;d=_<<1;fs(f,_>>>0<o>>>1>>>0?d>>>0<i>>>0?i:d:o,((u[c>>2]|0)-s|0)/12|0,n+8|0);c=f+8|0;o=u[c>>2]|0;i=u[e+4>>2]|0;r=u[r>>2]|0;u[a>>2]=u[e>>2];u[a+4>>2]=i;u[t>>2]=u[a>>2];u[t+4>>2]=u[a+4>>2];us(o,t,r);u[c>>2]=(u[c>>2]|0)+12;cs(n,f);ls(f);v=l;return}}function as(n){n=n|0;return 357913941}function fs(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;var i=0;u[n+12>>2]=0;u[n+16>>2]=t;do{if(e){if(e>>>0>357913941)Xn();else{i=GE(e*12|0)|0;break}}else i=0}while(0);u[n>>2]=i;t=i+(r*12|0)|0;u[n+8>>2]=t;u[n+4>>2]=t;u[n+12>>2]=i+(e*12|0);return}function cs(n,e){n=n|0;e=e|0;var r=0,t=0,i=0,o=0,a=0;t=u[n>>2]|0;a=n+4|0;o=e+4|0;i=(u[a>>2]|0)-t|0;r=(u[o>>2]|0)+(((i|0)/-12|0)*12|0)|0;u[o>>2]=r;if((i|0)>0){iC(r|0,t|0,i|0)|0;t=o;r=u[o>>2]|0}else t=o;o=u[n>>2]|0;u[n>>2]=r;u[t>>2]=o;o=e+8|0;i=u[a>>2]|0;u[a>>2]=u[o>>2];u[o>>2]=i;o=n+8|0;a=e+12|0;n=u[o>>2]|0;u[o>>2]=u[a>>2];u[a>>2]=n;u[e>>2]=u[t>>2];return}function ls(n){n=n|0;var e=0,r=0,t=0;e=u[n+4>>2]|0;r=n+8|0;t=u[r>>2]|0;if((t|0)!=(e|0))u[r>>2]=t+(~(((t+-12-e|0)>>>0)/12|0)*12|0);n=u[n>>2]|0;if(n|0)XE(n);return}function ss(n){n=n|0;vs(n);return}function ds(n){n=n|0;_s(n+24|0);return}function _s(n){n=n|0;var e=0,r=0,t=0;r=u[n>>2]|0;t=r;if(r|0){n=n+4|0;e=u[n>>2]|0;if((e|0)!=(r|0))u[n>>2]=e+(~(((e+-12-t|0)>>>0)/12|0)*12|0);XE(r)}return}function vs(n){n=n|0;var e=0;e=$a()|0;rf(n,2,6,e,ps()|0,1);u[n+24>>2]=0;u[n+28>>2]=0;u[n+32>>2]=0;return}function ps(){return 1204}function ms(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0;t=v;v=v+16|0;i=t+8|0;o=t;a=bs(n)|0;n=u[a+4>>2]|0;u[o>>2]=u[a>>2];u[o+4>>2]=n;u[i>>2]=u[o>>2];u[i+4>>2]=u[o+4>>2];hs(e,i,r);v=t;return}function bs(n){n=n|0;return(u[(rs()|0)+24>>2]|0)+(n*12|0)|0}function hs(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0;o=v;v=v+16|0;i=o;t=u[e>>2]|0;e=u[e+4>>2]|0;n=n+(e>>1)|0;if(e&1)t=u[(u[n>>2]|0)+t>>2]|0;ys(i,r);i=ws(i,r)|0;pL[t&31](n,i);v=o;return}function ys(n,e){n=n|0;e=e|0;return}function ws(n,e){n=n|0;e=e|0;return Ms(e)|0}function Ms(n){n=n|0;return n|0}function ks(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0,f=0;t=v;v=v+16|0;i=t+8|0;o=t;f=u[r>>2]|0;a=u[r+4>>2]|0;r=Ba(e)|0;u[o>>2]=f;u[o+4>>2]=a;u[i>>2]=u[o>>2];u[i+4>>2]=u[o+4>>2];gs(n,r,i,0);v=t;return}function gs(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;var i=0,o=0,a=0,f=0,c=0,l=0,s=0;i=v;v=v+32|0;o=i+16|0;s=i+8|0;f=i;l=u[r>>2]|0;c=u[r+4>>2]|0;a=u[n>>2]|0;n=Ts()|0;u[s>>2]=l;u[s+4>>2]=c;u[o>>2]=u[s>>2];u[o+4>>2]=u[s+4>>2];r=As(o)|0;u[f>>2]=l;u[f+4>>2]=c;u[o>>2]=u[f>>2];u[o+4>>2]=u[f+4>>2];xa(a,e,n,r,Ss(o,t)|0,t);v=i;return}function Ts(){var n=0,e=0;if(!(t[7696]|0)){Os(9484);xn(33,9484,b|0)|0;e=7696;u[e>>2]=1;u[e+4>>2]=0}if(!(Ja(9484)|0)){n=9484;e=n+36|0;do{u[n>>2]=0;n=n+4|0}while((n|0)<(e|0));Os(9484)}return 9484}function As(n){n=n|0;return 0}function Ss(n,e){n=n|0;e=e|0;var r=0,t=0,i=0,o=0,a=0,f=0,c=0,l=0,s=0,d=0;s=v;v=v+32|0;i=s+24|0;a=s+16|0;f=s;c=s+8|0;o=u[n>>2]|0;t=u[n+4>>2]|0;u[f>>2]=o;u[f+4>>2]=t;d=Ts()|0;l=d+24|0;n=Wa(e,4)|0;u[c>>2]=n;e=d+28|0;r=u[e>>2]|0;if(r>>>0<(u[d+32>>2]|0)>>>0){u[a>>2]=o;u[a+4>>2]=t;u[i>>2]=u[a>>2];u[i+4>>2]=u[a+4>>2];Es(r,i,n);n=(u[e>>2]|0)+12|0;u[e>>2]=n}else{Cs(l,f,c);n=u[e>>2]|0}v=s;return((n-(u[l>>2]|0)|0)/12|0)+-1|0}function Es(n,e,r){n=n|0;e=e|0;r=r|0;var t=0;t=u[e+4>>2]|0;u[n>>2]=u[e>>2];u[n+4>>2]=t;u[n+8>>2]=r;return}function Cs(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0,f=0,c=0,l=0,s=0,d=0,_=0;l=v;v=v+48|0;t=l+32|0;a=l+24|0;f=l;c=n+4|0;i=(((u[c>>2]|0)-(u[n>>2]|0)|0)/12|0)+1|0;o=Ls(n)|0;if(o>>>0<i>>>0)DE(n);else{s=u[n>>2]|0;_=((u[n+8>>2]|0)-s|0)/12|0;d=_<<1;Rs(f,_>>>0<o>>>1>>>0?d>>>0<i>>>0?i:d:o,((u[c>>2]|0)-s|0)/12|0,n+8|0);c=f+8|0;o=u[c>>2]|0;i=u[e+4>>2]|0;r=u[r>>2]|0;u[a>>2]=u[e>>2];u[a+4>>2]=i;u[t>>2]=u[a>>2];u[t+4>>2]=u[a+4>>2];Es(o,t,r);u[c>>2]=(u[c>>2]|0)+12;Ps(n,f);Bs(f);v=l;return}}function Ls(n){n=n|0;return 357913941}function Rs(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;var i=0;u[n+12>>2]=0;u[n+16>>2]=t;do{if(e){if(e>>>0>357913941)Xn();else{i=GE(e*12|0)|0;break}}else i=0}while(0);u[n>>2]=i;t=i+(r*12|0)|0;u[n+8>>2]=t;u[n+4>>2]=t;u[n+12>>2]=i+(e*12|0);return}function Ps(n,e){n=n|0;e=e|0;var r=0,t=0,i=0,o=0,a=0;t=u[n>>2]|0;a=n+4|0;o=e+4|0;i=(u[a>>2]|0)-t|0;r=(u[o>>2]|0)+(((i|0)/-12|0)*12|0)|0;u[o>>2]=r;if((i|0)>0){iC(r|0,t|0,i|0)|0;t=o;r=u[o>>2]|0}else t=o;o=u[n>>2]|0;u[n>>2]=r;u[t>>2]=o;o=e+8|0;i=u[a>>2]|0;u[a>>2]=u[o>>2];u[o>>2]=i;o=n+8|0;a=e+12|0;n=u[o>>2]|0;u[o>>2]=u[a>>2];u[a>>2]=n;u[e>>2]=u[t>>2];return}function Bs(n){n=n|0;var e=0,r=0,t=0;e=u[n+4>>2]|0;r=n+8|0;t=u[r>>2]|0;if((t|0)!=(e|0))u[r>>2]=t+(~(((t+-12-e|0)>>>0)/12|0)*12|0);n=u[n>>2]|0;if(n|0)XE(n);return}function Os(n){n=n|0;Fs(n);return}function Ns(n){n=n|0;Is(n+24|0);return}function Is(n){n=n|0;var e=0,r=0,t=0;r=u[n>>2]|0;t=r;if(r|0){n=n+4|0;e=u[n>>2]|0;if((e|0)!=(r|0))u[n>>2]=e+(~(((e+-12-t|0)>>>0)/12|0)*12|0);XE(r)}return}function Fs(n){n=n|0;var e=0;e=$a()|0;rf(n,2,1,e,xs()|0,2);u[n+24>>2]=0;u[n+28>>2]=0;u[n+32>>2]=0;return}function xs(){return 1212}function Us(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;var i=0,o=0,a=0,f=0;i=v;v=v+16|0;o=i+8|0;a=i;f=Hs(n)|0;n=u[f+4>>2]|0;u[a>>2]=u[f>>2];u[a+4>>2]=n;u[o>>2]=u[a>>2];u[o+4>>2]=u[a+4>>2];Ds(e,o,r,t);v=i;return}function Hs(n){n=n|0;return(u[(Ts()|0)+24>>2]|0)+(n*12|0)|0}function Ds(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;var i=0,o=0,a=0,f=0;f=v;v=v+16|0;o=f+1|0;a=f;i=u[e>>2]|0;e=u[e+4>>2]|0;n=n+(e>>1)|0;if(e&1)i=u[(u[n>>2]|0)+i>>2]|0;ys(o,r);o=ws(o,r)|0;sl(a,t);a=dl(a,t)|0;PL[i&15](n,o,a);v=f;return}function Ws(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0,f=0;t=v;v=v+16|0;i=t+8|0;o=t;f=u[r>>2]|0;a=u[r+4>>2]|0;r=Ba(e)|0;u[o>>2]=f;u[o+4>>2]=a;u[i>>2]=u[o>>2];u[i+4>>2]=u[o+4>>2];Ys(n,r,i,1);v=t;return}function Ys(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;var i=0,o=0,a=0,f=0,c=0,l=0,s=0;i=v;v=v+32|0;o=i+16|0;s=i+8|0;f=i;l=u[r>>2]|0;c=u[r+4>>2]|0;a=u[n>>2]|0;n=Vs()|0;u[s>>2]=l;u[s+4>>2]=c;u[o>>2]=u[s>>2];u[o+4>>2]=u[s+4>>2];r=js(o)|0;u[f>>2]=l;u[f+4>>2]=c;u[o>>2]=u[f>>2];u[o+4>>2]=u[f+4>>2];xa(a,e,n,r,qs(o,t)|0,t);v=i;return}function Vs(){var n=0,e=0;if(!(t[7704]|0)){Qs(9520);xn(34,9520,b|0)|0;e=7704;u[e>>2]=1;u[e+4>>2]=0}if(!(Ja(9520)|0)){n=9520;e=n+36|0;do{u[n>>2]=0;n=n+4|0}while((n|0)<(e|0));Qs(9520)}return 9520}function js(n){n=n|0;return 0}function qs(n,e){n=n|0;e=e|0;var r=0,t=0,i=0,o=0,a=0,f=0,c=0,l=0,s=0,d=0;s=v;v=v+32|0;i=s+24|0;a=s+16|0;f=s;c=s+8|0;o=u[n>>2]|0;t=u[n+4>>2]|0;u[f>>2]=o;u[f+4>>2]=t;d=Vs()|0;l=d+24|0;n=Wa(e,4)|0;u[c>>2]=n;e=d+28|0;r=u[e>>2]|0;if(r>>>0<(u[d+32>>2]|0)>>>0){u[a>>2]=o;u[a+4>>2]=t;u[i>>2]=u[a>>2];u[i+4>>2]=u[a+4>>2];zs(r,i,n);n=(u[e>>2]|0)+12|0;u[e>>2]=n}else{Gs(l,f,c);n=u[e>>2]|0}v=s;return((n-(u[l>>2]|0)|0)/12|0)+-1|0}function zs(n,e,r){n=n|0;e=e|0;r=r|0;var t=0;t=u[e+4>>2]|0;u[n>>2]=u[e>>2];u[n+4>>2]=t;u[n+8>>2]=r;return}function Gs(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0,f=0,c=0,l=0,s=0,d=0,_=0;l=v;v=v+48|0;t=l+32|0;a=l+24|0;f=l;c=n+4|0;i=(((u[c>>2]|0)-(u[n>>2]|0)|0)/12|0)+1|0;o=Ks(n)|0;if(o>>>0<i>>>0)DE(n);else{s=u[n>>2]|0;_=((u[n+8>>2]|0)-s|0)/12|0;d=_<<1;Xs(f,_>>>0<o>>>1>>>0?d>>>0<i>>>0?i:d:o,((u[c>>2]|0)-s|0)/12|0,n+8|0);c=f+8|0;o=u[c>>2]|0;i=u[e+4>>2]|0;r=u[r>>2]|0;u[a>>2]=u[e>>2];u[a+4>>2]=i;u[t>>2]=u[a>>2];u[t+4>>2]=u[a+4>>2];zs(o,t,r);u[c>>2]=(u[c>>2]|0)+12;Js(n,f);Zs(f);v=l;return}}function Ks(n){n=n|0;return 357913941}function Xs(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;var i=0;u[n+12>>2]=0;u[n+16>>2]=t;do{if(e){if(e>>>0>357913941)Xn();else{i=GE(e*12|0)|0;break}}else i=0}while(0);u[n>>2]=i;t=i+(r*12|0)|0;u[n+8>>2]=t;u[n+4>>2]=t;u[n+12>>2]=i+(e*12|0);return}function Js(n,e){n=n|0;e=e|0;var r=0,t=0,i=0,o=0,a=0;t=u[n>>2]|0;a=n+4|0;o=e+4|0;i=(u[a>>2]|0)-t|0;r=(u[o>>2]|0)+(((i|0)/-12|0)*12|0)|0;u[o>>2]=r;if((i|0)>0){iC(r|0,t|0,i|0)|0;t=o;r=u[o>>2]|0}else t=o;o=u[n>>2]|0;u[n>>2]=r;u[t>>2]=o;o=e+8|0;i=u[a>>2]|0;u[a>>2]=u[o>>2];u[o>>2]=i;o=n+8|0;a=e+12|0;n=u[o>>2]|0;u[o>>2]=u[a>>2];u[a>>2]=n;u[e>>2]=u[t>>2];return}function Zs(n){n=n|0;var e=0,r=0,t=0;e=u[n+4>>2]|0;r=n+8|0;t=u[r>>2]|0;if((t|0)!=(e|0))u[r>>2]=t+(~(((t+-12-e|0)>>>0)/12|0)*12|0);n=u[n>>2]|0;if(n|0)XE(n);return}function Qs(n){n=n|0;ed(n);return}function $s(n){n=n|0;nd(n+24|0);return}function nd(n){n=n|0;var e=0,r=0,t=0;r=u[n>>2]|0;t=r;if(r|0){n=n+4|0;e=u[n>>2]|0;if((e|0)!=(r|0))u[n>>2]=e+(~(((e+-12-t|0)>>>0)/12|0)*12|0);XE(r)}return}function ed(n){n=n|0;var e=0;e=$a()|0;rf(n,2,1,e,rd()|0,1);u[n+24>>2]=0;u[n+28>>2]=0;u[n+32>>2]=0;return}function rd(){return 1224}function td(n,e,r){n=n|0;e=e|0;r=r|0;var t=0.0,i=0,o=0,a=0,f=0;i=v;v=v+16|0;o=i+8|0;a=i;f=id(n)|0;n=u[f+4>>2]|0;u[a>>2]=u[f>>2];u[a+4>>2]=n;u[o>>2]=u[a>>2];u[o+4>>2]=u[a+4>>2];t=+ud(e,o,r);v=i;return+t}function id(n){n=n|0;return(u[(Vs()|0)+24>>2]|0)+(n*12|0)|0}function ud(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0.0;o=v;v=v+16|0;i=o;t=u[e>>2]|0;e=u[e+4>>2]|0;n=n+(e>>1)|0;if(e&1)t=u[(u[n>>2]|0)+t>>2]|0;Qf(i,r);i=$f(i,r)|0;a=+No(+SL[t&7](n,i));v=o;return+a}function od(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0,f=0;t=v;v=v+16|0;i=t+8|0;o=t;f=u[r>>2]|0;a=u[r+4>>2]|0;r=Ba(e)|0;u[o>>2]=f;u[o+4>>2]=a;u[i>>2]=u[o>>2];u[i+4>>2]=u[o+4>>2];ad(n,r,i,1);v=t;return}function ad(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;var i=0,o=0,a=0,f=0,c=0,l=0,s=0;i=v;v=v+32|0;o=i+16|0;s=i+8|0;f=i;l=u[r>>2]|0;c=u[r+4>>2]|0;a=u[n>>2]|0;n=fd()|0;u[s>>2]=l;u[s+4>>2]=c;u[o>>2]=u[s>>2];u[o+4>>2]=u[s+4>>2];r=cd(o)|0;u[f>>2]=l;u[f+4>>2]=c;u[o>>2]=u[f>>2];u[o+4>>2]=u[f+4>>2];xa(a,e,n,r,ld(o,t)|0,t);v=i;return}function fd(){var n=0,e=0;if(!(t[7712]|0)){bd(9556);xn(35,9556,b|0)|0;e=7712;u[e>>2]=1;u[e+4>>2]=0}if(!(Ja(9556)|0)){n=9556;e=n+36|0;do{u[n>>2]=0;n=n+4|0}while((n|0)<(e|0));bd(9556)}return 9556}function cd(n){n=n|0;return 0}function ld(n,e){n=n|0;e=e|0;var r=0,t=0,i=0,o=0,a=0,f=0,c=0,l=0,s=0,d=0;s=v;v=v+32|0;i=s+24|0;a=s+16|0;f=s;c=s+8|0;o=u[n>>2]|0;t=u[n+4>>2]|0;u[f>>2]=o;u[f+4>>2]=t;d=fd()|0;l=d+24|0;n=Wa(e,4)|0;u[c>>2]=n;e=d+28|0;r=u[e>>2]|0;if(r>>>0<(u[d+32>>2]|0)>>>0){u[a>>2]=o;u[a+4>>2]=t;u[i>>2]=u[a>>2];u[i+4>>2]=u[a+4>>2];sd(r,i,n);n=(u[e>>2]|0)+12|0;u[e>>2]=n}else{dd(l,f,c);n=u[e>>2]|0}v=s;return((n-(u[l>>2]|0)|0)/12|0)+-1|0}function sd(n,e,r){n=n|0;e=e|0;r=r|0;var t=0;t=u[e+4>>2]|0;u[n>>2]=u[e>>2];u[n+4>>2]=t;u[n+8>>2]=r;return}function dd(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0,f=0,c=0,l=0,s=0,d=0,_=0;l=v;v=v+48|0;t=l+32|0;a=l+24|0;f=l;c=n+4|0;i=(((u[c>>2]|0)-(u[n>>2]|0)|0)/12|0)+1|0;o=_d(n)|0;if(o>>>0<i>>>0)DE(n);else{s=u[n>>2]|0;_=((u[n+8>>2]|0)-s|0)/12|0;d=_<<1;vd(f,_>>>0<o>>>1>>>0?d>>>0<i>>>0?i:d:o,((u[c>>2]|0)-s|0)/12|0,n+8|0);c=f+8|0;o=u[c>>2]|0;i=u[e+4>>2]|0;r=u[r>>2]|0;u[a>>2]=u[e>>2];u[a+4>>2]=i;u[t>>2]=u[a>>2];u[t+4>>2]=u[a+4>>2];sd(o,t,r);u[c>>2]=(u[c>>2]|0)+12;pd(n,f);md(f);v=l;return}}function _d(n){n=n|0;return 357913941}function vd(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;var i=0;u[n+12>>2]=0;u[n+16>>2]=t;do{if(e){if(e>>>0>357913941)Xn();else{i=GE(e*12|0)|0;break}}else i=0}while(0);u[n>>2]=i;t=i+(r*12|0)|0;u[n+8>>2]=t;u[n+4>>2]=t;u[n+12>>2]=i+(e*12|0);return}function pd(n,e){n=n|0;e=e|0;var r=0,t=0,i=0,o=0,a=0;t=u[n>>2]|0;a=n+4|0;o=e+4|0;i=(u[a>>2]|0)-t|0;r=(u[o>>2]|0)+(((i|0)/-12|0)*12|0)|0;u[o>>2]=r;if((i|0)>0){iC(r|0,t|0,i|0)|0;t=o;r=u[o>>2]|0}else t=o;o=u[n>>2]|0;u[n>>2]=r;u[t>>2]=o;o=e+8|0;i=u[a>>2]|0;u[a>>2]=u[o>>2];u[o>>2]=i;o=n+8|0;a=e+12|0;n=u[o>>2]|0;u[o>>2]=u[a>>2];u[a>>2]=n;u[e>>2]=u[t>>2];return}function md(n){n=n|0;var e=0,r=0,t=0;e=u[n+4>>2]|0;r=n+8|0;t=u[r>>2]|0;if((t|0)!=(e|0))u[r>>2]=t+(~(((t+-12-e|0)>>>0)/12|0)*12|0);n=u[n>>2]|0;if(n|0)XE(n);return}function bd(n){n=n|0;wd(n);return}function hd(n){n=n|0;yd(n+24|0);return}function yd(n){n=n|0;var e=0,r=0,t=0;r=u[n>>2]|0;t=r;if(r|0){n=n+4|0;e=u[n>>2]|0;if((e|0)!=(r|0))u[n>>2]=e+(~(((e+-12-t|0)>>>0)/12|0)*12|0);XE(r)}return}function wd(n){n=n|0;var e=0;e=$a()|0;rf(n,2,5,e,Md()|0,0);u[n+24>>2]=0;u[n+28>>2]=0;u[n+32>>2]=0;return}function Md(){return 1232}function kd(n,e){n=n|0;e=e|0;var r=0.0,t=0,i=0,o=0,a=0;t=v;v=v+16|0;i=t+8|0;o=t;a=gd(n)|0;n=u[a+4>>2]|0;u[o>>2]=u[a>>2];u[o+4>>2]=n;u[i>>2]=u[o>>2];u[i+4>>2]=u[o+4>>2];r=+Td(e,i);v=t;return+r}function gd(n){n=n|0;return(u[(fd()|0)+24>>2]|0)+(n*12|0)|0}function Td(n,e){n=n|0;e=e|0;var r=0;r=u[e>>2]|0;e=u[e+4>>2]|0;n=n+(e>>1)|0;if(e&1)r=u[(u[n>>2]|0)+r>>2]|0;return+ +No(+ML[r&15](n))}function Ad(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0,f=0;t=v;v=v+16|0;i=t+8|0;o=t;f=u[r>>2]|0;a=u[r+4>>2]|0;r=Ba(e)|0;u[o>>2]=f;u[o+4>>2]=a;u[i>>2]=u[o>>2];u[i+4>>2]=u[o+4>>2];Sd(n,r,i,1);v=t;return}function Sd(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;var i=0,o=0,a=0,f=0,c=0,l=0,s=0;i=v;v=v+32|0;o=i+16|0;s=i+8|0;f=i;l=u[r>>2]|0;c=u[r+4>>2]|0;a=u[n>>2]|0;n=Ed()|0;u[s>>2]=l;u[s+4>>2]=c;u[o>>2]=u[s>>2];u[o+4>>2]=u[s+4>>2];r=Cd(o)|0;u[f>>2]=l;u[f+4>>2]=c;u[o>>2]=u[f>>2];u[o+4>>2]=u[f+4>>2];xa(a,e,n,r,Ld(o,t)|0,t);v=i;return}function Ed(){var n=0,e=0;if(!(t[7720]|0)){Fd(9592);xn(36,9592,b|0)|0;e=7720;u[e>>2]=1;u[e+4>>2]=0}if(!(Ja(9592)|0)){n=9592;e=n+36|0;do{u[n>>2]=0;n=n+4|0}while((n|0)<(e|0));Fd(9592)}return 9592}function Cd(n){n=n|0;return 0}function Ld(n,e){n=n|0;e=e|0;var r=0,t=0,i=0,o=0,a=0,f=0,c=0,l=0,s=0,d=0;s=v;v=v+32|0;i=s+24|0;a=s+16|0;f=s;c=s+8|0;o=u[n>>2]|0;t=u[n+4>>2]|0;u[f>>2]=o;u[f+4>>2]=t;d=Ed()|0;l=d+24|0;n=Wa(e,4)|0;u[c>>2]=n;e=d+28|0;r=u[e>>2]|0;if(r>>>0<(u[d+32>>2]|0)>>>0){u[a>>2]=o;u[a+4>>2]=t;u[i>>2]=u[a>>2];u[i+4>>2]=u[a+4>>2];Rd(r,i,n);n=(u[e>>2]|0)+12|0;u[e>>2]=n}else{Pd(l,f,c);n=u[e>>2]|0}v=s;return((n-(u[l>>2]|0)|0)/12|0)+-1|0}function Rd(n,e,r){n=n|0;e=e|0;r=r|0;var t=0;t=u[e+4>>2]|0;u[n>>2]=u[e>>2];u[n+4>>2]=t;u[n+8>>2]=r;return}function Pd(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0,f=0,c=0,l=0,s=0,d=0,_=0;l=v;v=v+48|0;t=l+32|0;a=l+24|0;f=l;c=n+4|0;i=(((u[c>>2]|0)-(u[n>>2]|0)|0)/12|0)+1|0;o=Bd(n)|0;if(o>>>0<i>>>0)DE(n);else{s=u[n>>2]|0;_=((u[n+8>>2]|0)-s|0)/12|0;d=_<<1;Od(f,_>>>0<o>>>1>>>0?d>>>0<i>>>0?i:d:o,((u[c>>2]|0)-s|0)/12|0,n+8|0);c=f+8|0;o=u[c>>2]|0;i=u[e+4>>2]|0;r=u[r>>2]|0;u[a>>2]=u[e>>2];u[a+4>>2]=i;u[t>>2]=u[a>>2];u[t+4>>2]=u[a+4>>2];Rd(o,t,r);u[c>>2]=(u[c>>2]|0)+12;Nd(n,f);Id(f);v=l;return}}function Bd(n){n=n|0;return 357913941}function Od(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;var i=0;u[n+12>>2]=0;u[n+16>>2]=t;do{if(e){if(e>>>0>357913941)Xn();else{i=GE(e*12|0)|0;break}}else i=0}while(0);u[n>>2]=i;t=i+(r*12|0)|0;u[n+8>>2]=t;u[n+4>>2]=t;u[n+12>>2]=i+(e*12|0);return}function Nd(n,e){n=n|0;e=e|0;var r=0,t=0,i=0,o=0,a=0;t=u[n>>2]|0;a=n+4|0;o=e+4|0;i=(u[a>>2]|0)-t|0;r=(u[o>>2]|0)+(((i|0)/-12|0)*12|0)|0;u[o>>2]=r;if((i|0)>0){iC(r|0,t|0,i|0)|0;t=o;r=u[o>>2]|0}else t=o;o=u[n>>2]|0;u[n>>2]=r;u[t>>2]=o;o=e+8|0;i=u[a>>2]|0;u[a>>2]=u[o>>2];u[o>>2]=i;o=n+8|0;a=e+12|0;n=u[o>>2]|0;u[o>>2]=u[a>>2];u[a>>2]=n;u[e>>2]=u[t>>2];return}function Id(n){n=n|0;var e=0,r=0,t=0;e=u[n+4>>2]|0;r=n+8|0;t=u[r>>2]|0;if((t|0)!=(e|0))u[r>>2]=t+(~(((t+-12-e|0)>>>0)/12|0)*12|0);n=u[n>>2]|0;if(n|0)XE(n);return}function Fd(n){n=n|0;Hd(n);return}function xd(n){n=n|0;Ud(n+24|0);return}function Ud(n){n=n|0;var e=0,r=0,t=0;r=u[n>>2]|0;t=r;if(r|0){n=n+4|0;e=u[n>>2]|0;if((e|0)!=(r|0))u[n>>2]=e+(~(((e+-12-t|0)>>>0)/12|0)*12|0);XE(r)}return}function Hd(n){n=n|0;var e=0;e=$a()|0;rf(n,2,7,e,Dd()|0,0);u[n+24>>2]=0;u[n+28>>2]=0;u[n+32>>2]=0;return}function Dd(){return 1276}function Wd(n,e){n=n|0;e=e|0;var r=0,t=0,i=0,o=0;r=v;v=v+16|0;t=r+8|0;i=r;o=Yd(n)|0;n=u[o+4>>2]|0;u[i>>2]=u[o>>2];u[i+4>>2]=n;u[t>>2]=u[i>>2];u[t+4>>2]=u[i+4>>2];e=Vd(e,t)|0;v=r;return e|0}function Yd(n){n=n|0;return(u[(Ed()|0)+24>>2]|0)+(n*12|0)|0}function Vd(n,e){n=n|0;e=e|0;var r=0,t=0,i=0;i=v;v=v+16|0;t=i;r=u[e>>2]|0;e=u[e+4>>2]|0;n=n+(e>>1)|0;if(e&1)r=u[(u[n>>2]|0)+r>>2]|0;pL[r&31](t,n);t=jd(t)|0;v=i;return t|0}function jd(n){n=n|0;var e=0,r=0,t=0,i=0;i=v;v=v+32|0;e=i+12|0;r=i;t=ff(qd()|0)|0;if(!t)n=Gd(n)|0;else{cf(e,t);lf(r,e);zd(n,r);n=df(e)|0}v=i;return n|0}function qd(){var n=0;if(!(t[7736]|0)){i_(9640);xn(25,9640,b|0)|0;n=7736;u[n>>2]=1;u[n+4>>2]=0}return 9640}function zd(n,e){n=n|0;e=e|0;Qd(e,n,n+8|0)|0;return}function Gd(n){n=n|0;var e=0,r=0,t=0,i=0,o=0,a=0,f=0;r=v;v=v+16|0;i=r+4|0;a=r;t=Dg(8)|0;e=t;f=GE(16)|0;u[f>>2]=u[n>>2];u[f+4>>2]=u[n+4>>2];u[f+8>>2]=u[n+8>>2];u[f+12>>2]=u[n+12>>2];o=e+4|0;u[o>>2]=f;n=GE(8)|0;o=u[o>>2]|0;u[a>>2]=0;u[i>>2]=u[a>>2];Kd(n,o,i);u[t>>2]=n;v=r;return e|0}function Kd(n,e,r){n=n|0;e=e|0;r=r|0;u[n>>2]=e;r=GE(16)|0;u[r+4>>2]=0;u[r+8>>2]=0;u[r>>2]=1244;u[r+12>>2]=e;u[n+4>>2]=r;return}function Xd(n){n=n|0;WE(n);XE(n);return}function Jd(n){n=n|0;n=u[n+12>>2]|0;if(n|0)XE(n);return}function Zd(n){n=n|0;XE(n);return}function Qd(n,e,r){n=n|0;e=e|0;r=r|0;e=$d(u[n>>2]|0,e,r)|0;r=n+4|0;u[(u[r>>2]|0)+8>>2]=e;return u[(u[r>>2]|0)+8>>2]|0}function $d(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0;t=v;v=v+16|0;i=t;gS(i);n=ko(n)|0;r=n_(n,u[e>>2]|0,+l[r>>3])|0;AS(i);v=t;return r|0}function n_(n,e,r){n=n|0;e=e|0;r=+r;var t=0;t=Ao(e_()|0)|0;e=Eo(e)|0;return Ln(0,t|0,n|0,e|0,+ +So(r))|0}function e_(){var n=0;if(!(t[7728]|0)){r_(9628);n=7728;u[n>>2]=1;u[n+4>>2]=0}return 9628}function r_(n){n=n|0;xo(n,t_()|0,2);return}function t_(){return 1264}function i_(n){n=n|0;Rf(n);return}function u_(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0,f=0;t=v;v=v+16|0;i=t+8|0;o=t;f=u[r>>2]|0;a=u[r+4>>2]|0;r=Ba(e)|0;u[o>>2]=f;u[o+4>>2]=a;u[i>>2]=u[o>>2];u[i+4>>2]=u[o+4>>2];o_(n,r,i,1);v=t;return}function o_(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;var i=0,o=0,a=0,f=0,c=0,l=0,s=0;i=v;v=v+32|0;o=i+16|0;s=i+8|0;f=i;l=u[r>>2]|0;c=u[r+4>>2]|0;a=u[n>>2]|0;n=a_()|0;u[s>>2]=l;u[s+4>>2]=c;u[o>>2]=u[s>>2];u[o+4>>2]=u[s+4>>2];r=f_(o)|0;u[f>>2]=l;u[f+4>>2]=c;u[o>>2]=u[f>>2];u[o+4>>2]=u[f+4>>2];xa(a,e,n,r,c_(o,t)|0,t);v=i;return}function a_(){var n=0,e=0;if(!(t[7744]|0)){m_(9684);xn(37,9684,b|0)|0;e=7744;u[e>>2]=1;u[e+4>>2]=0}if(!(Ja(9684)|0)){n=9684;e=n+36|0;do{u[n>>2]=0;n=n+4|0}while((n|0)<(e|0));m_(9684)}return 9684}function f_(n){n=n|0;return 0}function c_(n,e){n=n|0;e=e|0;var r=0,t=0,i=0,o=0,a=0,f=0,c=0,l=0,s=0,d=0;s=v;v=v+32|0;i=s+24|0;a=s+16|0;f=s;c=s+8|0;o=u[n>>2]|0;t=u[n+4>>2]|0;u[f>>2]=o;u[f+4>>2]=t;d=a_()|0;l=d+24|0;n=Wa(e,4)|0;u[c>>2]=n;e=d+28|0;r=u[e>>2]|0;if(r>>>0<(u[d+32>>2]|0)>>>0){u[a>>2]=o;u[a+4>>2]=t;u[i>>2]=u[a>>2];u[i+4>>2]=u[a+4>>2];l_(r,i,n);n=(u[e>>2]|0)+12|0;u[e>>2]=n}else{s_(l,f,c);n=u[e>>2]|0}v=s;return((n-(u[l>>2]|0)|0)/12|0)+-1|0}function l_(n,e,r){n=n|0;e=e|0;r=r|0;var t=0;t=u[e+4>>2]|0;u[n>>2]=u[e>>2];u[n+4>>2]=t;u[n+8>>2]=r;return}function s_(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0,f=0,c=0,l=0,s=0,d=0,_=0;l=v;v=v+48|0;t=l+32|0;a=l+24|0;f=l;c=n+4|0;i=(((u[c>>2]|0)-(u[n>>2]|0)|0)/12|0)+1|0;o=d_(n)|0;if(o>>>0<i>>>0)DE(n);else{s=u[n>>2]|0;_=((u[n+8>>2]|0)-s|0)/12|0;d=_<<1;__(f,_>>>0<o>>>1>>>0?d>>>0<i>>>0?i:d:o,((u[c>>2]|0)-s|0)/12|0,n+8|0);c=f+8|0;o=u[c>>2]|0;i=u[e+4>>2]|0;r=u[r>>2]|0;u[a>>2]=u[e>>2];u[a+4>>2]=i;u[t>>2]=u[a>>2];u[t+4>>2]=u[a+4>>2];l_(o,t,r);u[c>>2]=(u[c>>2]|0)+12;v_(n,f);p_(f);v=l;return}}function d_(n){n=n|0;return 357913941}function __(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;var i=0;u[n+12>>2]=0;u[n+16>>2]=t;do{if(e){if(e>>>0>357913941)Xn();else{i=GE(e*12|0)|0;break}}else i=0}while(0);u[n>>2]=i;t=i+(r*12|0)|0;u[n+8>>2]=t;u[n+4>>2]=t;u[n+12>>2]=i+(e*12|0);return}function v_(n,e){n=n|0;e=e|0;var r=0,t=0,i=0,o=0,a=0;t=u[n>>2]|0;a=n+4|0;o=e+4|0;i=(u[a>>2]|0)-t|0;r=(u[o>>2]|0)+(((i|0)/-12|0)*12|0)|0;u[o>>2]=r;if((i|0)>0){iC(r|0,t|0,i|0)|0;t=o;r=u[o>>2]|0}else t=o;o=u[n>>2]|0;u[n>>2]=r;u[t>>2]=o;o=e+8|0;i=u[a>>2]|0;u[a>>2]=u[o>>2];u[o>>2]=i;o=n+8|0;a=e+12|0;n=u[o>>2]|0;u[o>>2]=u[a>>2];u[a>>2]=n;u[e>>2]=u[t>>2];return}function p_(n){n=n|0;var e=0,r=0,t=0;e=u[n+4>>2]|0;r=n+8|0;t=u[r>>2]|0;if((t|0)!=(e|0))u[r>>2]=t+(~(((t+-12-e|0)>>>0)/12|0)*12|0);n=u[n>>2]|0;if(n|0)XE(n);return}function m_(n){n=n|0;y_(n);return}function b_(n){n=n|0;h_(n+24|0);return}function h_(n){n=n|0;var e=0,r=0,t=0;r=u[n>>2]|0;t=r;if(r|0){n=n+4|0;e=u[n>>2]|0;if((e|0)!=(r|0))u[n>>2]=e+(~(((e+-12-t|0)>>>0)/12|0)*12|0);XE(r)}return}function y_(n){n=n|0;var e=0;e=$a()|0;rf(n,2,5,e,w_()|0,1);u[n+24>>2]=0;u[n+28>>2]=0;u[n+32>>2]=0;return}function w_(){return 1280}function M_(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0;t=v;v=v+16|0;i=t+8|0;o=t;a=k_(n)|0;n=u[a+4>>2]|0;u[o>>2]=u[a>>2];u[o+4>>2]=n;u[i>>2]=u[o>>2];u[i+4>>2]=u[o+4>>2];r=g_(e,i,r)|0;v=t;return r|0}function k_(n){n=n|0;return(u[(a_()|0)+24>>2]|0)+(n*12|0)|0}function g_(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0;a=v;v=v+32|0;i=a;o=a+16|0;t=u[e>>2]|0;e=u[e+4>>2]|0;n=n+(e>>1)|0;if(e&1)t=u[(u[n>>2]|0)+t>>2]|0;Qf(o,r);o=$f(o,r)|0;PL[t&15](i,n,o);o=jd(i)|0;v=a;return o|0}function T_(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0,f=0;t=v;v=v+16|0;i=t+8|0;o=t;f=u[r>>2]|0;a=u[r+4>>2]|0;r=Ba(e)|0;u[o>>2]=f;u[o+4>>2]=a;u[i>>2]=u[o>>2];u[i+4>>2]=u[o+4>>2];A_(n,r,i,1);v=t;return}function A_(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;var i=0,o=0,a=0,f=0,c=0,l=0,s=0;i=v;v=v+32|0;o=i+16|0;s=i+8|0;f=i;l=u[r>>2]|0;c=u[r+4>>2]|0;a=u[n>>2]|0;n=S_()|0;u[s>>2]=l;u[s+4>>2]=c;u[o>>2]=u[s>>2];u[o+4>>2]=u[s+4>>2];r=E_(o)|0;u[f>>2]=l;u[f+4>>2]=c;u[o>>2]=u[f>>2];u[o+4>>2]=u[f+4>>2];xa(a,e,n,r,C_(o,t)|0,t);v=i;return}function S_(){var n=0,e=0;if(!(t[7752]|0)){I_(9720);xn(38,9720,b|0)|0;e=7752;u[e>>2]=1;u[e+4>>2]=0}if(!(Ja(9720)|0)){n=9720;e=n+36|0;do{u[n>>2]=0;n=n+4|0}while((n|0)<(e|0));I_(9720)}return 9720}function E_(n){n=n|0;return 0}function C_(n,e){n=n|0;e=e|0;var r=0,t=0,i=0,o=0,a=0,f=0,c=0,l=0,s=0,d=0;s=v;v=v+32|0;i=s+24|0;a=s+16|0;f=s;c=s+8|0;o=u[n>>2]|0;t=u[n+4>>2]|0;u[f>>2]=o;u[f+4>>2]=t;d=S_()|0;l=d+24|0;n=Wa(e,4)|0;u[c>>2]=n;e=d+28|0;r=u[e>>2]|0;if(r>>>0<(u[d+32>>2]|0)>>>0){u[a>>2]=o;u[a+4>>2]=t;u[i>>2]=u[a>>2];u[i+4>>2]=u[a+4>>2];L_(r,i,n);n=(u[e>>2]|0)+12|0;u[e>>2]=n}else{R_(l,f,c);n=u[e>>2]|0}v=s;return((n-(u[l>>2]|0)|0)/12|0)+-1|0}function L_(n,e,r){n=n|0;e=e|0;r=r|0;var t=0;t=u[e+4>>2]|0;u[n>>2]=u[e>>2];u[n+4>>2]=t;u[n+8>>2]=r;return}function R_(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0,f=0,c=0,l=0,s=0,d=0,_=0;l=v;v=v+48|0;t=l+32|0;a=l+24|0;f=l;c=n+4|0;i=(((u[c>>2]|0)-(u[n>>2]|0)|0)/12|0)+1|0;o=P_(n)|0;if(o>>>0<i>>>0)DE(n);else{s=u[n>>2]|0;_=((u[n+8>>2]|0)-s|0)/12|0;d=_<<1;B_(f,_>>>0<o>>>1>>>0?d>>>0<i>>>0?i:d:o,((u[c>>2]|0)-s|0)/12|0,n+8|0);c=f+8|0;o=u[c>>2]|0;i=u[e+4>>2]|0;r=u[r>>2]|0;u[a>>2]=u[e>>2];u[a+4>>2]=i;u[t>>2]=u[a>>2];u[t+4>>2]=u[a+4>>2];L_(o,t,r);u[c>>2]=(u[c>>2]|0)+12;O_(n,f);N_(f);v=l;return}}function P_(n){n=n|0;return 357913941}function B_(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;var i=0;u[n+12>>2]=0;u[n+16>>2]=t;do{if(e){if(e>>>0>357913941)Xn();else{i=GE(e*12|0)|0;break}}else i=0}while(0);u[n>>2]=i;t=i+(r*12|0)|0;u[n+8>>2]=t;u[n+4>>2]=t;u[n+12>>2]=i+(e*12|0);return}function O_(n,e){n=n|0;e=e|0;var r=0,t=0,i=0,o=0,a=0;t=u[n>>2]|0;a=n+4|0;o=e+4|0;i=(u[a>>2]|0)-t|0;r=(u[o>>2]|0)+(((i|0)/-12|0)*12|0)|0;u[o>>2]=r;if((i|0)>0){iC(r|0,t|0,i|0)|0;t=o;r=u[o>>2]|0}else t=o;o=u[n>>2]|0;u[n>>2]=r;u[t>>2]=o;o=e+8|0;i=u[a>>2]|0;u[a>>2]=u[o>>2];u[o>>2]=i;o=n+8|0;a=e+12|0;n=u[o>>2]|0;u[o>>2]=u[a>>2];u[a>>2]=n;u[e>>2]=u[t>>2];return}function N_(n){n=n|0;var e=0,r=0,t=0;e=u[n+4>>2]|0;r=n+8|0;t=u[r>>2]|0;if((t|0)!=(e|0))u[r>>2]=t+(~(((t+-12-e|0)>>>0)/12|0)*12|0);n=u[n>>2]|0;if(n|0)XE(n);return}function I_(n){n=n|0;U_(n);return}function F_(n){n=n|0;x_(n+24|0);return}function x_(n){n=n|0;var e=0,r=0,t=0;r=u[n>>2]|0;t=r;if(r|0){n=n+4|0;e=u[n>>2]|0;if((e|0)!=(r|0))u[n>>2]=e+(~(((e+-12-t|0)>>>0)/12|0)*12|0);XE(r)}return}function U_(n){n=n|0;var e=0;e=$a()|0;rf(n,2,8,e,H_()|0,0);u[n+24>>2]=0;u[n+28>>2]=0;u[n+32>>2]=0;return}function H_(){return 1288}function D_(n,e){n=n|0;e=e|0;var r=0,t=0,i=0,o=0;r=v;v=v+16|0;t=r+8|0;i=r;o=W_(n)|0;n=u[o+4>>2]|0;u[i>>2]=u[o>>2];u[i+4>>2]=n;u[t>>2]=u[i>>2];u[t+4>>2]=u[i+4>>2];e=Y_(e,t)|0;v=r;return e|0}function W_(n){n=n|0;return(u[(S_()|0)+24>>2]|0)+(n*12|0)|0}function Y_(n,e){n=n|0;e=e|0;var r=0;r=u[e>>2]|0;e=u[e+4>>2]|0;n=n+(e>>1)|0;if(e&1)r=u[(u[n>>2]|0)+r>>2]|0;return Oo(mL[r&31](n)|0)|0}function V_(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0,f=0;t=v;v=v+16|0;i=t+8|0;o=t;f=u[r>>2]|0;a=u[r+4>>2]|0;r=Ba(e)|0;u[o>>2]=f;u[o+4>>2]=a;u[i>>2]=u[o>>2];u[i+4>>2]=u[o+4>>2];j_(n,r,i,0);v=t;return}function j_(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;var i=0,o=0,a=0,f=0,c=0,l=0,s=0;i=v;v=v+32|0;o=i+16|0;s=i+8|0;f=i;l=u[r>>2]|0;c=u[r+4>>2]|0;a=u[n>>2]|0;n=q_()|0;u[s>>2]=l;u[s+4>>2]=c;u[o>>2]=u[s>>2];u[o+4>>2]=u[s+4>>2];r=z_(o)|0;u[f>>2]=l;u[f+4>>2]=c;u[o>>2]=u[f>>2];u[o+4>>2]=u[f+4>>2];xa(a,e,n,r,G_(o,t)|0,t);v=i;return}function q_(){var n=0,e=0;if(!(t[7760]|0)){nv(9756);xn(39,9756,b|0)|0;e=7760;u[e>>2]=1;u[e+4>>2]=0}if(!(Ja(9756)|0)){n=9756;e=n+36|0;do{u[n>>2]=0;n=n+4|0}while((n|0)<(e|0));nv(9756)}return 9756}function z_(n){n=n|0;return 0}function G_(n,e){n=n|0;e=e|0;var r=0,t=0,i=0,o=0,a=0,f=0,c=0,l=0,s=0,d=0;s=v;v=v+32|0;i=s+24|0;a=s+16|0;f=s;c=s+8|0;o=u[n>>2]|0;t=u[n+4>>2]|0;u[f>>2]=o;u[f+4>>2]=t;d=q_()|0;l=d+24|0;n=Wa(e,4)|0;u[c>>2]=n;e=d+28|0;r=u[e>>2]|0;if(r>>>0<(u[d+32>>2]|0)>>>0){u[a>>2]=o;u[a+4>>2]=t;u[i>>2]=u[a>>2];u[i+4>>2]=u[a+4>>2];K_(r,i,n);n=(u[e>>2]|0)+12|0;u[e>>2]=n}else{X_(l,f,c);n=u[e>>2]|0}v=s;return((n-(u[l>>2]|0)|0)/12|0)+-1|0}function K_(n,e,r){n=n|0;e=e|0;r=r|0;var t=0;t=u[e+4>>2]|0;u[n>>2]=u[e>>2];u[n+4>>2]=t;u[n+8>>2]=r;return}function X_(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0,f=0,c=0,l=0,s=0,d=0,_=0;l=v;v=v+48|0;t=l+32|0;a=l+24|0;f=l;c=n+4|0;i=(((u[c>>2]|0)-(u[n>>2]|0)|0)/12|0)+1|0;o=J_(n)|0;if(o>>>0<i>>>0)DE(n);else{s=u[n>>2]|0;_=((u[n+8>>2]|0)-s|0)/12|0;d=_<<1;Z_(f,_>>>0<o>>>1>>>0?d>>>0<i>>>0?i:d:o,((u[c>>2]|0)-s|0)/12|0,n+8|0);c=f+8|0;o=u[c>>2]|0;i=u[e+4>>2]|0;r=u[r>>2]|0;u[a>>2]=u[e>>2];u[a+4>>2]=i;u[t>>2]=u[a>>2];u[t+4>>2]=u[a+4>>2];K_(o,t,r);u[c>>2]=(u[c>>2]|0)+12;Q_(n,f);$_(f);v=l;return}}function J_(n){n=n|0;return 357913941}function Z_(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;var i=0;u[n+12>>2]=0;u[n+16>>2]=t;do{if(e){if(e>>>0>357913941)Xn();else{i=GE(e*12|0)|0;break}}else i=0}while(0);u[n>>2]=i;t=i+(r*12|0)|0;u[n+8>>2]=t;u[n+4>>2]=t;u[n+12>>2]=i+(e*12|0);return}function Q_(n,e){n=n|0;e=e|0;var r=0,t=0,i=0,o=0,a=0;t=u[n>>2]|0;a=n+4|0;o=e+4|0;i=(u[a>>2]|0)-t|0;r=(u[o>>2]|0)+(((i|0)/-12|0)*12|0)|0;u[o>>2]=r;if((i|0)>0){iC(r|0,t|0,i|0)|0;t=o;r=u[o>>2]|0}else t=o;o=u[n>>2]|0;u[n>>2]=r;u[t>>2]=o;o=e+8|0;i=u[a>>2]|0;u[a>>2]=u[o>>2];u[o>>2]=i;o=n+8|0;a=e+12|0;n=u[o>>2]|0;u[o>>2]=u[a>>2];u[a>>2]=n;u[e>>2]=u[t>>2];return}function $_(n){n=n|0;var e=0,r=0,t=0;e=u[n+4>>2]|0;r=n+8|0;t=u[r>>2]|0;if((t|0)!=(e|0))u[r>>2]=t+(~(((t+-12-e|0)>>>0)/12|0)*12|0);n=u[n>>2]|0;if(n|0)XE(n);return}function nv(n){n=n|0;tv(n);return}function ev(n){n=n|0;rv(n+24|0);return}function rv(n){n=n|0;var e=0,r=0,t=0;r=u[n>>2]|0;t=r;if(r|0){n=n+4|0;e=u[n>>2]|0;if((e|0)!=(r|0))u[n>>2]=e+(~(((e+-12-t|0)>>>0)/12|0)*12|0);XE(r)}return}function tv(n){n=n|0;var e=0;e=$a()|0;rf(n,2,8,e,iv()|0,1);u[n+24>>2]=0;u[n+28>>2]=0;u[n+32>>2]=0;return}function iv(){return 1292}function uv(n,e,r){n=n|0;e=e|0;r=+r;var t=0,i=0,o=0,a=0;t=v;v=v+16|0;i=t+8|0;o=t;a=ov(n)|0;n=u[a+4>>2]|0;u[o>>2]=u[a>>2];u[o+4>>2]=n;u[i>>2]=u[o>>2];u[i+4>>2]=u[o+4>>2];av(e,i,r);v=t;return}function ov(n){n=n|0;return(u[(q_()|0)+24>>2]|0)+(n*12|0)|0}function av(n,e,r){n=n|0;e=e|0;r=+r;var t=0,i=0,o=0;o=v;v=v+16|0;i=o;t=u[e>>2]|0;e=u[e+4>>2]|0;n=n+(e>>1)|0;if(e&1)t=u[(u[n>>2]|0)+t>>2]|0;Jf(i,r);r=+Zf(i,r);dL[t&31](n,r);v=o;return}function fv(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0,f=0;t=v;v=v+16|0;i=t+8|0;o=t;f=u[r>>2]|0;a=u[r+4>>2]|0;r=Ba(e)|0;u[o>>2]=f;u[o+4>>2]=a;u[i>>2]=u[o>>2];u[i+4>>2]=u[o+4>>2];cv(n,r,i,0);v=t;return}function cv(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;var i=0,o=0,a=0,f=0,c=0,l=0,s=0;i=v;v=v+32|0;o=i+16|0;s=i+8|0;f=i;l=u[r>>2]|0;c=u[r+4>>2]|0;a=u[n>>2]|0;n=lv()|0;u[s>>2]=l;u[s+4>>2]=c;u[o>>2]=u[s>>2];u[o+4>>2]=u[s+4>>2];r=sv(o)|0;u[f>>2]=l;u[f+4>>2]=c;u[o>>2]=u[f>>2];u[o+4>>2]=u[f+4>>2];xa(a,e,n,r,dv(o,t)|0,t);v=i;return}function lv(){var n=0,e=0;if(!(t[7768]|0)){yv(9792);xn(40,9792,b|0)|0;e=7768;u[e>>2]=1;u[e+4>>2]=0}if(!(Ja(9792)|0)){n=9792;e=n+36|0;do{u[n>>2]=0;n=n+4|0}while((n|0)<(e|0));yv(9792)}return 9792}function sv(n){n=n|0;return 0}function dv(n,e){n=n|0;e=e|0;var r=0,t=0,i=0,o=0,a=0,f=0,c=0,l=0,s=0,d=0;s=v;v=v+32|0;i=s+24|0;a=s+16|0;f=s;c=s+8|0;o=u[n>>2]|0;t=u[n+4>>2]|0;u[f>>2]=o;u[f+4>>2]=t;d=lv()|0;l=d+24|0;n=Wa(e,4)|0;u[c>>2]=n;e=d+28|0;r=u[e>>2]|0;if(r>>>0<(u[d+32>>2]|0)>>>0){u[a>>2]=o;u[a+4>>2]=t;u[i>>2]=u[a>>2];u[i+4>>2]=u[a+4>>2];_v(r,i,n);n=(u[e>>2]|0)+12|0;u[e>>2]=n}else{vv(l,f,c);n=u[e>>2]|0}v=s;return((n-(u[l>>2]|0)|0)/12|0)+-1|0}function _v(n,e,r){n=n|0;e=e|0;r=r|0;var t=0;t=u[e+4>>2]|0;u[n>>2]=u[e>>2];u[n+4>>2]=t;u[n+8>>2]=r;return}function vv(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0,f=0,c=0,l=0,s=0,d=0,_=0;l=v;v=v+48|0;t=l+32|0;a=l+24|0;f=l;c=n+4|0;i=(((u[c>>2]|0)-(u[n>>2]|0)|0)/12|0)+1|0;o=pv(n)|0;if(o>>>0<i>>>0)DE(n);else{s=u[n>>2]|0;_=((u[n+8>>2]|0)-s|0)/12|0;d=_<<1;mv(f,_>>>0<o>>>1>>>0?d>>>0<i>>>0?i:d:o,((u[c>>2]|0)-s|0)/12|0,n+8|0);c=f+8|0;o=u[c>>2]|0;i=u[e+4>>2]|0;r=u[r>>2]|0;u[a>>2]=u[e>>2];u[a+4>>2]=i;u[t>>2]=u[a>>2];u[t+4>>2]=u[a+4>>2];_v(o,t,r);u[c>>2]=(u[c>>2]|0)+12;bv(n,f);hv(f);v=l;return}}function pv(n){n=n|0;return 357913941}function mv(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;var i=0;u[n+12>>2]=0;u[n+16>>2]=t;do{if(e){if(e>>>0>357913941)Xn();else{i=GE(e*12|0)|0;break}}else i=0}while(0);u[n>>2]=i;t=i+(r*12|0)|0;u[n+8>>2]=t;u[n+4>>2]=t;u[n+12>>2]=i+(e*12|0);return}function bv(n,e){n=n|0;e=e|0;var r=0,t=0,i=0,o=0,a=0;t=u[n>>2]|0;a=n+4|0;o=e+4|0;i=(u[a>>2]|0)-t|0;r=(u[o>>2]|0)+(((i|0)/-12|0)*12|0)|0;u[o>>2]=r;if((i|0)>0){iC(r|0,t|0,i|0)|0;t=o;r=u[o>>2]|0}else t=o;o=u[n>>2]|0;u[n>>2]=r;u[t>>2]=o;o=e+8|0;i=u[a>>2]|0;u[a>>2]=u[o>>2];u[o>>2]=i;o=n+8|0;a=e+12|0;n=u[o>>2]|0;u[o>>2]=u[a>>2];u[a>>2]=n;u[e>>2]=u[t>>2];return}function hv(n){n=n|0;var e=0,r=0,t=0;e=u[n+4>>2]|0;r=n+8|0;t=u[r>>2]|0;if((t|0)!=(e|0))u[r>>2]=t+(~(((t+-12-e|0)>>>0)/12|0)*12|0);n=u[n>>2]|0;if(n|0)XE(n);return}function yv(n){n=n|0;kv(n);return}function wv(n){n=n|0;Mv(n+24|0);return}function Mv(n){n=n|0;var e=0,r=0,t=0;r=u[n>>2]|0;t=r;if(r|0){n=n+4|0;e=u[n>>2]|0;if((e|0)!=(r|0))u[n>>2]=e+(~(((e+-12-t|0)>>>0)/12|0)*12|0);XE(r)}return}function kv(n){n=n|0;var e=0;e=$a()|0;rf(n,2,1,e,gv()|0,2);u[n+24>>2]=0;u[n+28>>2]=0;u[n+32>>2]=0;return}function gv(){return 1300}function Tv(n,e,r,t){n=n|0;e=e|0;r=r|0;t=+t;var i=0,o=0,a=0,f=0;i=v;v=v+16|0;o=i+8|0;a=i;f=Av(n)|0;n=u[f+4>>2]|0;u[a>>2]=u[f>>2];u[a+4>>2]=n;u[o>>2]=u[a>>2];u[o+4>>2]=u[a+4>>2];Sv(e,o,r,t);v=i;return}function Av(n){n=n|0;return(u[(lv()|0)+24>>2]|0)+(n*12|0)|0}function Sv(n,e,r,t){n=n|0;e=e|0;r=r|0;t=+t;var i=0,o=0,a=0,f=0;f=v;v=v+16|0;o=f+1|0;a=f;i=u[e>>2]|0;e=u[e+4>>2]|0;n=n+(e>>1)|0;if(e&1)i=u[(u[n>>2]|0)+i>>2]|0;Qf(o,r);o=$f(o,r)|0;Jf(a,t);t=+Zf(a,t);OL[i&15](n,o,t);v=f;return}function Ev(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0,f=0;t=v;v=v+16|0;i=t+8|0;o=t;f=u[r>>2]|0;a=u[r+4>>2]|0;r=Ba(e)|0;u[o>>2]=f;u[o+4>>2]=a;u[i>>2]=u[o>>2];u[i+4>>2]=u[o+4>>2];Cv(n,r,i,0);v=t;return}function Cv(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;var i=0,o=0,a=0,f=0,c=0,l=0,s=0;i=v;v=v+32|0;o=i+16|0;s=i+8|0;f=i;l=u[r>>2]|0;c=u[r+4>>2]|0;a=u[n>>2]|0;n=Lv()|0;u[s>>2]=l;u[s+4>>2]=c;u[o>>2]=u[s>>2];u[o+4>>2]=u[s+4>>2];r=Rv(o)|0;u[f>>2]=l;u[f+4>>2]=c;u[o>>2]=u[f>>2];u[o+4>>2]=u[f+4>>2];xa(a,e,n,r,Pv(o,t)|0,t);v=i;return}function Lv(){var n=0,e=0;if(!(t[7776]|0)){Uv(9828);xn(41,9828,b|0)|0;e=7776;u[e>>2]=1;u[e+4>>2]=0}if(!(Ja(9828)|0)){n=9828;e=n+36|0;do{u[n>>2]=0;n=n+4|0}while((n|0)<(e|0));Uv(9828)}return 9828}function Rv(n){n=n|0;return 0}function Pv(n,e){n=n|0;e=e|0;var r=0,t=0,i=0,o=0,a=0,f=0,c=0,l=0,s=0,d=0;s=v;v=v+32|0;i=s+24|0;a=s+16|0;f=s;c=s+8|0;o=u[n>>2]|0;t=u[n+4>>2]|0;u[f>>2]=o;u[f+4>>2]=t;d=Lv()|0;l=d+24|0;n=Wa(e,4)|0;u[c>>2]=n;e=d+28|0;r=u[e>>2]|0;if(r>>>0<(u[d+32>>2]|0)>>>0){u[a>>2]=o;u[a+4>>2]=t;u[i>>2]=u[a>>2];u[i+4>>2]=u[a+4>>2];Bv(r,i,n);n=(u[e>>2]|0)+12|0;u[e>>2]=n}else{Ov(l,f,c);n=u[e>>2]|0}v=s;return((n-(u[l>>2]|0)|0)/12|0)+-1|0}function Bv(n,e,r){n=n|0;e=e|0;r=r|0;var t=0;t=u[e+4>>2]|0;u[n>>2]=u[e>>2];u[n+4>>2]=t;u[n+8>>2]=r;return}function Ov(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0,f=0,c=0,l=0,s=0,d=0,_=0;l=v;v=v+48|0;t=l+32|0;a=l+24|0;f=l;c=n+4|0;i=(((u[c>>2]|0)-(u[n>>2]|0)|0)/12|0)+1|0;o=Nv(n)|0;if(o>>>0<i>>>0)DE(n);else{s=u[n>>2]|0;_=((u[n+8>>2]|0)-s|0)/12|0;d=_<<1;Iv(f,_>>>0<o>>>1>>>0?d>>>0<i>>>0?i:d:o,((u[c>>2]|0)-s|0)/12|0,n+8|0);c=f+8|0;o=u[c>>2]|0;i=u[e+4>>2]|0;r=u[r>>2]|0;u[a>>2]=u[e>>2];u[a+4>>2]=i;u[t>>2]=u[a>>2];u[t+4>>2]=u[a+4>>2];Bv(o,t,r);u[c>>2]=(u[c>>2]|0)+12;Fv(n,f);xv(f);v=l;return}}function Nv(n){n=n|0;return 357913941}function Iv(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;var i=0;u[n+12>>2]=0;u[n+16>>2]=t;do{if(e){if(e>>>0>357913941)Xn();else{i=GE(e*12|0)|0;break}}else i=0}while(0);u[n>>2]=i;t=i+(r*12|0)|0;u[n+8>>2]=t;u[n+4>>2]=t;u[n+12>>2]=i+(e*12|0);return}function Fv(n,e){n=n|0;e=e|0;var r=0,t=0,i=0,o=0,a=0;t=u[n>>2]|0;a=n+4|0;o=e+4|0;i=(u[a>>2]|0)-t|0;r=(u[o>>2]|0)+(((i|0)/-12|0)*12|0)|0;u[o>>2]=r;if((i|0)>0){iC(r|0,t|0,i|0)|0;t=o;r=u[o>>2]|0}else t=o;o=u[n>>2]|0;u[n>>2]=r;u[t>>2]=o;o=e+8|0;i=u[a>>2]|0;u[a>>2]=u[o>>2];u[o>>2]=i;o=n+8|0;a=e+12|0;n=u[o>>2]|0;u[o>>2]=u[a>>2];u[a>>2]=n;u[e>>2]=u[t>>2];return}function xv(n){n=n|0;var e=0,r=0,t=0;e=u[n+4>>2]|0;r=n+8|0;t=u[r>>2]|0;if((t|0)!=(e|0))u[r>>2]=t+(~(((t+-12-e|0)>>>0)/12|0)*12|0);n=u[n>>2]|0;if(n|0)XE(n);return}function Uv(n){n=n|0;Wv(n);return}function Hv(n){n=n|0;Dv(n+24|0);return}function Dv(n){n=n|0;var e=0,r=0,t=0;r=u[n>>2]|0;t=r;if(r|0){n=n+4|0;e=u[n>>2]|0;if((e|0)!=(r|0))u[n>>2]=e+(~(((e+-12-t|0)>>>0)/12|0)*12|0);XE(r)}return}function Wv(n){n=n|0;var e=0;e=$a()|0;rf(n,2,7,e,Yv()|0,1);u[n+24>>2]=0;u[n+28>>2]=0;u[n+32>>2]=0;return}function Yv(){return 1312}function Vv(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0;t=v;v=v+16|0;i=t+8|0;o=t;a=jv(n)|0;n=u[a+4>>2]|0;u[o>>2]=u[a>>2];u[o+4>>2]=n;u[i>>2]=u[o>>2];u[i+4>>2]=u[o+4>>2];qv(e,i,r);v=t;return}function jv(n){n=n|0;return(u[(Lv()|0)+24>>2]|0)+(n*12|0)|0}function qv(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0;o=v;v=v+16|0;i=o;t=u[e>>2]|0;e=u[e+4>>2]|0;n=n+(e>>1)|0;if(e&1)t=u[(u[n>>2]|0)+t>>2]|0;Qf(i,r);i=$f(i,r)|0;pL[t&31](n,i);v=o;return}function zv(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0,f=0;t=v;v=v+16|0;i=t+8|0;o=t;f=u[r>>2]|0;a=u[r+4>>2]|0;r=Ba(e)|0;u[o>>2]=f;u[o+4>>2]=a;u[i>>2]=u[o>>2];u[i+4>>2]=u[o+4>>2];Gv(n,r,i,0);v=t;return}function Gv(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;var i=0,o=0,a=0,f=0,c=0,l=0,s=0;i=v;v=v+32|0;o=i+16|0;s=i+8|0;f=i;l=u[r>>2]|0;c=u[r+4>>2]|0;a=u[n>>2]|0;n=Kv()|0;u[s>>2]=l;u[s+4>>2]=c;u[o>>2]=u[s>>2];u[o+4>>2]=u[s+4>>2];r=Xv(o)|0;u[f>>2]=l;u[f+4>>2]=c;u[o>>2]=u[f>>2];u[o+4>>2]=u[f+4>>2];xa(a,e,n,r,Jv(o,t)|0,t);v=i;return}function Kv(){var n=0,e=0;if(!(t[7784]|0)){tp(9864);xn(42,9864,b|0)|0;e=7784;u[e>>2]=1;u[e+4>>2]=0}if(!(Ja(9864)|0)){n=9864;e=n+36|0;do{u[n>>2]=0;n=n+4|0}while((n|0)<(e|0));tp(9864)}return 9864}function Xv(n){n=n|0;return 0}function Jv(n,e){n=n|0;e=e|0;var r=0,t=0,i=0,o=0,a=0,f=0,c=0,l=0,s=0,d=0;s=v;v=v+32|0;i=s+24|0;a=s+16|0;f=s;c=s+8|0;o=u[n>>2]|0;t=u[n+4>>2]|0;u[f>>2]=o;u[f+4>>2]=t;d=Kv()|0;l=d+24|0;n=Wa(e,4)|0;u[c>>2]=n;e=d+28|0;r=u[e>>2]|0;if(r>>>0<(u[d+32>>2]|0)>>>0){u[a>>2]=o;u[a+4>>2]=t;u[i>>2]=u[a>>2];u[i+4>>2]=u[a+4>>2];Zv(r,i,n);n=(u[e>>2]|0)+12|0;u[e>>2]=n}else{Qv(l,f,c);n=u[e>>2]|0}v=s;return((n-(u[l>>2]|0)|0)/12|0)+-1|0}function Zv(n,e,r){n=n|0;e=e|0;r=r|0;var t=0;t=u[e+4>>2]|0;u[n>>2]=u[e>>2];u[n+4>>2]=t;u[n+8>>2]=r;return}function Qv(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0,f=0,c=0,l=0,s=0,d=0,_=0;l=v;v=v+48|0;t=l+32|0;a=l+24|0;f=l;c=n+4|0;i=(((u[c>>2]|0)-(u[n>>2]|0)|0)/12|0)+1|0;o=$v(n)|0;if(o>>>0<i>>>0)DE(n);else{s=u[n>>2]|0;_=((u[n+8>>2]|0)-s|0)/12|0;d=_<<1;np(f,_>>>0<o>>>1>>>0?d>>>0<i>>>0?i:d:o,((u[c>>2]|0)-s|0)/12|0,n+8|0);c=f+8|0;o=u[c>>2]|0;i=u[e+4>>2]|0;r=u[r>>2]|0;u[a>>2]=u[e>>2];u[a+4>>2]=i;u[t>>2]=u[a>>2];u[t+4>>2]=u[a+4>>2];Zv(o,t,r);u[c>>2]=(u[c>>2]|0)+12;ep(n,f);rp(f);v=l;return}}function $v(n){n=n|0;return 357913941}function np(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;var i=0;u[n+12>>2]=0;u[n+16>>2]=t;do{if(e){if(e>>>0>357913941)Xn();else{i=GE(e*12|0)|0;break}}else i=0}while(0);u[n>>2]=i;t=i+(r*12|0)|0;u[n+8>>2]=t;u[n+4>>2]=t;u[n+12>>2]=i+(e*12|0);return}function ep(n,e){n=n|0;e=e|0;var r=0,t=0,i=0,o=0,a=0;t=u[n>>2]|0;a=n+4|0;o=e+4|0;i=(u[a>>2]|0)-t|0;r=(u[o>>2]|0)+(((i|0)/-12|0)*12|0)|0;u[o>>2]=r;if((i|0)>0){iC(r|0,t|0,i|0)|0;t=o;r=u[o>>2]|0}else t=o;o=u[n>>2]|0;u[n>>2]=r;u[t>>2]=o;o=e+8|0;i=u[a>>2]|0;u[a>>2]=u[o>>2];u[o>>2]=i;o=n+8|0;a=e+12|0;n=u[o>>2]|0;u[o>>2]=u[a>>2];u[a>>2]=n;u[e>>2]=u[t>>2];return}function rp(n){n=n|0;var e=0,r=0,t=0;e=u[n+4>>2]|0;r=n+8|0;t=u[r>>2]|0;if((t|0)!=(e|0))u[r>>2]=t+(~(((t+-12-e|0)>>>0)/12|0)*12|0);n=u[n>>2]|0;if(n|0)XE(n);return}function tp(n){n=n|0;op(n);return}function ip(n){n=n|0;up(n+24|0);return}function up(n){n=n|0;var e=0,r=0,t=0;r=u[n>>2]|0;t=r;if(r|0){n=n+4|0;e=u[n>>2]|0;if((e|0)!=(r|0))u[n>>2]=e+(~(((e+-12-t|0)>>>0)/12|0)*12|0);XE(r)}return}function op(n){n=n|0;var e=0;e=$a()|0;rf(n,2,8,e,ap()|0,1);u[n+24>>2]=0;u[n+28>>2]=0;u[n+32>>2]=0;return}function ap(){return 1320}function fp(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0;t=v;v=v+16|0;i=t+8|0;o=t;a=cp(n)|0;n=u[a+4>>2]|0;u[o>>2]=u[a>>2];u[o+4>>2]=n;u[i>>2]=u[o>>2];u[i+4>>2]=u[o+4>>2];lp(e,i,r);v=t;return}function cp(n){n=n|0;return(u[(Kv()|0)+24>>2]|0)+(n*12|0)|0}function lp(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0;o=v;v=v+16|0;i=o;t=u[e>>2]|0;e=u[e+4>>2]|0;n=n+(e>>1)|0;if(e&1)t=u[(u[n>>2]|0)+t>>2]|0;sp(i,r);i=dp(i,r)|0;pL[t&31](n,i);v=o;return}function sp(n,e){n=n|0;e=e|0;return}function dp(n,e){n=n|0;e=e|0;return _p(e)|0}function _p(n){n=n|0;return n|0}function vp(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0,f=0;t=v;v=v+16|0;i=t+8|0;o=t;f=u[r>>2]|0;a=u[r+4>>2]|0;r=Ba(e)|0;u[o>>2]=f;u[o+4>>2]=a;u[i>>2]=u[o>>2];u[i+4>>2]=u[o+4>>2];pp(n,r,i,0);v=t;return}function pp(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;var i=0,o=0,a=0,f=0,c=0,l=0,s=0;i=v;v=v+32|0;o=i+16|0;s=i+8|0;f=i;l=u[r>>2]|0;c=u[r+4>>2]|0;a=u[n>>2]|0;n=mp()|0;u[s>>2]=l;u[s+4>>2]=c;u[o>>2]=u[s>>2];u[o+4>>2]=u[s+4>>2];r=bp(o)|0;u[f>>2]=l;u[f+4>>2]=c;u[o>>2]=u[f>>2];u[o+4>>2]=u[f+4>>2];xa(a,e,n,r,hp(o,t)|0,t);v=i;return}function mp(){var n=0,e=0;if(!(t[7792]|0)){Ap(9900);xn(43,9900,b|0)|0;e=7792;u[e>>2]=1;u[e+4>>2]=0}if(!(Ja(9900)|0)){n=9900;e=n+36|0;do{u[n>>2]=0;n=n+4|0}while((n|0)<(e|0));Ap(9900)}return 9900}function bp(n){n=n|0;return 0}function hp(n,e){n=n|0;e=e|0;var r=0,t=0,i=0,o=0,a=0,f=0,c=0,l=0,s=0,d=0;s=v;v=v+32|0;i=s+24|0;a=s+16|0;f=s;c=s+8|0;o=u[n>>2]|0;t=u[n+4>>2]|0;u[f>>2]=o;u[f+4>>2]=t;d=mp()|0;l=d+24|0;n=Wa(e,4)|0;u[c>>2]=n;e=d+28|0;r=u[e>>2]|0;if(r>>>0<(u[d+32>>2]|0)>>>0){u[a>>2]=o;u[a+4>>2]=t;u[i>>2]=u[a>>2];u[i+4>>2]=u[a+4>>2];yp(r,i,n);n=(u[e>>2]|0)+12|0;u[e>>2]=n}else{wp(l,f,c);n=u[e>>2]|0}v=s;return((n-(u[l>>2]|0)|0)/12|0)+-1|0}function yp(n,e,r){n=n|0;e=e|0;r=r|0;var t=0;t=u[e+4>>2]|0;u[n>>2]=u[e>>2];u[n+4>>2]=t;u[n+8>>2]=r;return}function wp(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0,f=0,c=0,l=0,s=0,d=0,_=0;l=v;v=v+48|0;t=l+32|0;a=l+24|0;f=l;c=n+4|0;i=(((u[c>>2]|0)-(u[n>>2]|0)|0)/12|0)+1|0;o=Mp(n)|0;if(o>>>0<i>>>0)DE(n);else{s=u[n>>2]|0;_=((u[n+8>>2]|0)-s|0)/12|0;d=_<<1;kp(f,_>>>0<o>>>1>>>0?d>>>0<i>>>0?i:d:o,((u[c>>2]|0)-s|0)/12|0,n+8|0);c=f+8|0;o=u[c>>2]|0;i=u[e+4>>2]|0;r=u[r>>2]|0;u[a>>2]=u[e>>2];u[a+4>>2]=i;u[t>>2]=u[a>>2];u[t+4>>2]=u[a+4>>2];yp(o,t,r);u[c>>2]=(u[c>>2]|0)+12;gp(n,f);Tp(f);v=l;return}}function Mp(n){n=n|0;return 357913941}function kp(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;var i=0;u[n+12>>2]=0;u[n+16>>2]=t;do{if(e){if(e>>>0>357913941)Xn();else{i=GE(e*12|0)|0;break}}else i=0}while(0);u[n>>2]=i;t=i+(r*12|0)|0;u[n+8>>2]=t;u[n+4>>2]=t;u[n+12>>2]=i+(e*12|0);return}function gp(n,e){n=n|0;e=e|0;var r=0,t=0,i=0,o=0,a=0;t=u[n>>2]|0;a=n+4|0;o=e+4|0;i=(u[a>>2]|0)-t|0;r=(u[o>>2]|0)+(((i|0)/-12|0)*12|0)|0;u[o>>2]=r;if((i|0)>0){iC(r|0,t|0,i|0)|0;t=o;r=u[o>>2]|0}else t=o;o=u[n>>2]|0;u[n>>2]=r;u[t>>2]=o;o=e+8|0;i=u[a>>2]|0;u[a>>2]=u[o>>2];u[o>>2]=i;o=n+8|0;a=e+12|0;n=u[o>>2]|0;u[o>>2]=u[a>>2];u[a>>2]=n;u[e>>2]=u[t>>2];return}function Tp(n){n=n|0;var e=0,r=0,t=0;e=u[n+4>>2]|0;r=n+8|0;t=u[r>>2]|0;if((t|0)!=(e|0))u[r>>2]=t+(~(((t+-12-e|0)>>>0)/12|0)*12|0);n=u[n>>2]|0;if(n|0)XE(n);return}function Ap(n){n=n|0;Cp(n);return}function Sp(n){n=n|0;Ep(n+24|0);return}function Ep(n){n=n|0;var e=0,r=0,t=0;r=u[n>>2]|0;t=r;if(r|0){n=n+4|0;e=u[n>>2]|0;if((e|0)!=(r|0))u[n>>2]=e+(~(((e+-12-t|0)>>>0)/12|0)*12|0);XE(r)}return}function Cp(n){n=n|0;var e=0;e=$a()|0;rf(n,2,22,e,Lp()|0,0);u[n+24>>2]=0;u[n+28>>2]=0;u[n+32>>2]=0;return}function Lp(){return 1344}function Rp(n,e){n=n|0;e=e|0;var r=0,t=0,i=0,o=0;r=v;v=v+16|0;t=r+8|0;i=r;o=Pp(n)|0;n=u[o+4>>2]|0;u[i>>2]=u[o>>2];u[i+4>>2]=n;u[t>>2]=u[i>>2];u[t+4>>2]=u[i+4>>2];Bp(e,t);v=r;return}function Pp(n){n=n|0;return(u[(mp()|0)+24>>2]|0)+(n*12|0)|0}function Bp(n,e){n=n|0;e=e|0;var r=0;r=u[e>>2]|0;e=u[e+4>>2]|0;n=n+(e>>1)|0;if(e&1)r=u[(u[n>>2]|0)+r>>2]|0;vL[r&127](n);return}function Op(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;var i=0,o=0;o=u[n>>2]|0;i=Np()|0;n=Ip(r)|0;xa(o,e,i,n,Fp(r,t)|0,t);return}function Np(){var n=0,e=0;if(!(t[7800]|0)){Vp(9936);xn(44,9936,b|0)|0;e=7800;u[e>>2]=1;u[e+4>>2]=0}if(!(Ja(9936)|0)){n=9936;e=n+36|0;do{u[n>>2]=0;n=n+4|0}while((n|0)<(e|0));Vp(9936)}return 9936}function Ip(n){n=n|0;return n|0}function Fp(n,e){n=n|0;e=e|0;var r=0,t=0,i=0,o=0,a=0,f=0,c=0;f=v;v=v+16|0;i=f;o=f+4|0;u[i>>2]=n;c=Np()|0;a=c+24|0;e=Wa(e,4)|0;u[o>>2]=e;r=c+28|0;t=u[r>>2]|0;if(t>>>0<(u[c+32>>2]|0)>>>0){xp(t,n,e);e=(u[r>>2]|0)+8|0;u[r>>2]=e}else{Up(a,i,o);e=u[r>>2]|0}v=f;return(e-(u[a>>2]|0)>>3)+-1|0}function xp(n,e,r){n=n|0;e=e|0;r=r|0;u[n>>2]=e;u[n+4>>2]=r;return}function Up(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0,f=0,c=0,l=0,s=0;f=v;v=v+32|0;i=f;o=n+4|0;a=((u[o>>2]|0)-(u[n>>2]|0)>>3)+1|0;t=Hp(n)|0;if(t>>>0<a>>>0)DE(n);else{c=u[n>>2]|0;s=(u[n+8>>2]|0)-c|0;l=s>>2;Dp(i,s>>3>>>0<t>>>1>>>0?l>>>0<a>>>0?a:l:t,(u[o>>2]|0)-c>>3,n+8|0);a=i+8|0;xp(u[a>>2]|0,u[e>>2]|0,u[r>>2]|0);u[a>>2]=(u[a>>2]|0)+8;Wp(n,i);Yp(i);v=f;return}}function Hp(n){n=n|0;return 536870911}function Dp(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;var i=0;u[n+12>>2]=0;u[n+16>>2]=t;do{if(e){if(e>>>0>536870911)Xn();else{i=GE(e<<3)|0;break}}else i=0}while(0);u[n>>2]=i;t=i+(r<<3)|0;u[n+8>>2]=t;u[n+4>>2]=t;u[n+12>>2]=i+(e<<3);return}function Wp(n,e){n=n|0;e=e|0;var r=0,t=0,i=0,o=0,a=0;t=u[n>>2]|0;a=n+4|0;o=e+4|0;i=(u[a>>2]|0)-t|0;r=(u[o>>2]|0)+(0-(i>>3)<<3)|0;u[o>>2]=r;if((i|0)>0){iC(r|0,t|0,i|0)|0;t=o;r=u[o>>2]|0}else t=o;o=u[n>>2]|0;u[n>>2]=r;u[t>>2]=o;o=e+8|0;i=u[a>>2]|0;u[a>>2]=u[o>>2];u[o>>2]=i;o=n+8|0;a=e+12|0;n=u[o>>2]|0;u[o>>2]=u[a>>2];u[a>>2]=n;u[e>>2]=u[t>>2];return}function Yp(n){n=n|0;var e=0,r=0,t=0;e=u[n+4>>2]|0;r=n+8|0;t=u[r>>2]|0;if((t|0)!=(e|0))u[r>>2]=t+(~((t+-8-e|0)>>>3)<<3);n=u[n>>2]|0;if(n|0)XE(n);return}function Vp(n){n=n|0;zp(n);return}function jp(n){n=n|0;qp(n+24|0);return}function qp(n){n=n|0;var e=0,r=0,t=0;r=u[n>>2]|0;t=r;if(r|0){n=n+4|0;e=u[n>>2]|0;if((e|0)!=(r|0))u[n>>2]=e+(~((e+-8-t|0)>>>3)<<3);XE(r)}return}function zp(n){n=n|0;var e=0;e=$a()|0;rf(n,1,23,e,ps()|0,1);u[n+24>>2]=0;u[n+28>>2]=0;u[n+32>>2]=0;return}function Gp(n,e){n=n|0;e=e|0;Xp(u[(Kp(n)|0)>>2]|0,e);return}function Kp(n){n=n|0;return(u[(Np()|0)+24>>2]|0)+(n<<3)|0}function Xp(n,e){n=n|0;e=e|0;var r=0,t=0;r=v;v=v+16|0;t=r;ys(t,e);e=ws(t,e)|0;vL[n&127](e);v=r;return}function Jp(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;var i=0,o=0;o=u[n>>2]|0;i=Zp()|0;n=Qp(r)|0;xa(o,e,i,n,$p(r,t)|0,t);return}function Zp(){var n=0,e=0;if(!(t[7808]|0)){om(9972);xn(45,9972,b|0)|0;e=7808;u[e>>2]=1;u[e+4>>2]=0}if(!(Ja(9972)|0)){n=9972;e=n+36|0;do{u[n>>2]=0;n=n+4|0}while((n|0)<(e|0));om(9972)}return 9972}function Qp(n){n=n|0;return n|0}function $p(n,e){n=n|0;e=e|0;var r=0,t=0,i=0,o=0,a=0,f=0,c=0;f=v;v=v+16|0;i=f;o=f+4|0;u[i>>2]=n;c=Zp()|0;a=c+24|0;e=Wa(e,4)|0;u[o>>2]=e;r=c+28|0;t=u[r>>2]|0;if(t>>>0<(u[c+32>>2]|0)>>>0){nm(t,n,e);e=(u[r>>2]|0)+8|0;u[r>>2]=e}else{em(a,i,o);e=u[r>>2]|0}v=f;return(e-(u[a>>2]|0)>>3)+-1|0}function nm(n,e,r){n=n|0;e=e|0;r=r|0;u[n>>2]=e;u[n+4>>2]=r;return}function em(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0,f=0,c=0,l=0,s=0;f=v;v=v+32|0;i=f;o=n+4|0;a=((u[o>>2]|0)-(u[n>>2]|0)>>3)+1|0;t=rm(n)|0;if(t>>>0<a>>>0)DE(n);else{c=u[n>>2]|0;s=(u[n+8>>2]|0)-c|0;l=s>>2;tm(i,s>>3>>>0<t>>>1>>>0?l>>>0<a>>>0?a:l:t,(u[o>>2]|0)-c>>3,n+8|0);a=i+8|0;nm(u[a>>2]|0,u[e>>2]|0,u[r>>2]|0);u[a>>2]=(u[a>>2]|0)+8;im(n,i);um(i);v=f;return}}function rm(n){n=n|0;return 536870911}function tm(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;var i=0;u[n+12>>2]=0;u[n+16>>2]=t;do{if(e){if(e>>>0>536870911)Xn();else{i=GE(e<<3)|0;break}}else i=0}while(0);u[n>>2]=i;t=i+(r<<3)|0;u[n+8>>2]=t;u[n+4>>2]=t;u[n+12>>2]=i+(e<<3);return}function im(n,e){n=n|0;e=e|0;var r=0,t=0,i=0,o=0,a=0;t=u[n>>2]|0;a=n+4|0;o=e+4|0;i=(u[a>>2]|0)-t|0;r=(u[o>>2]|0)+(0-(i>>3)<<3)|0;u[o>>2]=r;if((i|0)>0){iC(r|0,t|0,i|0)|0;t=o;r=u[o>>2]|0}else t=o;o=u[n>>2]|0;u[n>>2]=r;u[t>>2]=o;o=e+8|0;i=u[a>>2]|0;u[a>>2]=u[o>>2];u[o>>2]=i;o=n+8|0;a=e+12|0;n=u[o>>2]|0;u[o>>2]=u[a>>2];u[a>>2]=n;u[e>>2]=u[t>>2];return}function um(n){n=n|0;var e=0,r=0,t=0;e=u[n+4>>2]|0;r=n+8|0;t=u[r>>2]|0;if((t|0)!=(e|0))u[r>>2]=t+(~((t+-8-e|0)>>>3)<<3);n=u[n>>2]|0;if(n|0)XE(n);return}function om(n){n=n|0;cm(n);return}function am(n){n=n|0;fm(n+24|0);return}function fm(n){n=n|0;var e=0,r=0,t=0;r=u[n>>2]|0;t=r;if(r|0){n=n+4|0;e=u[n>>2]|0;if((e|0)!=(r|0))u[n>>2]=e+(~((e+-8-t|0)>>>3)<<3);XE(r)}return}function cm(n){n=n|0;var e=0;e=$a()|0;rf(n,1,9,e,lm()|0,1);u[n+24>>2]=0;u[n+28>>2]=0;u[n+32>>2]=0;return}function lm(){return 1348}function sm(n,e){n=n|0;e=e|0;return _m(u[(dm(n)|0)>>2]|0,e)|0}function dm(n){n=n|0;return(u[(Zp()|0)+24>>2]|0)+(n<<3)|0}function _m(n,e){n=n|0;e=e|0;var r=0,t=0;r=v;v=v+16|0;t=r;vm(t,e);e=pm(t,e)|0;e=_l(mL[n&31](e)|0)|0;v=r;return e|0}function vm(n,e){n=n|0;e=e|0;return}function pm(n,e){n=n|0;e=e|0;return mm(e)|0}function mm(n){n=n|0;return n|0}function bm(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;var i=0,o=0;o=u[n>>2]|0;i=hm()|0;n=ym(r)|0;xa(o,e,i,n,wm(r,t)|0,t);return}function hm(){var n=0,e=0;if(!(t[7816]|0)){Em(10008);xn(46,10008,b|0)|0;e=7816;u[e>>2]=1;u[e+4>>2]=0}if(!(Ja(10008)|0)){n=10008;e=n+36|0;do{u[n>>2]=0;n=n+4|0}while((n|0)<(e|0));Em(10008)}return 10008}function ym(n){n=n|0;return n|0}function wm(n,e){n=n|0;e=e|0;var r=0,t=0,i=0,o=0,a=0,f=0,c=0;f=v;v=v+16|0;i=f;o=f+4|0;u[i>>2]=n;c=hm()|0;a=c+24|0;e=Wa(e,4)|0;u[o>>2]=e;r=c+28|0;t=u[r>>2]|0;if(t>>>0<(u[c+32>>2]|0)>>>0){Mm(t,n,e);e=(u[r>>2]|0)+8|0;u[r>>2]=e}else{km(a,i,o);e=u[r>>2]|0}v=f;return(e-(u[a>>2]|0)>>3)+-1|0}function Mm(n,e,r){n=n|0;e=e|0;r=r|0;u[n>>2]=e;u[n+4>>2]=r;return}function km(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0,f=0,c=0,l=0,s=0;f=v;v=v+32|0;i=f;o=n+4|0;a=((u[o>>2]|0)-(u[n>>2]|0)>>3)+1|0;t=gm(n)|0;if(t>>>0<a>>>0)DE(n);else{c=u[n>>2]|0;s=(u[n+8>>2]|0)-c|0;l=s>>2;Tm(i,s>>3>>>0<t>>>1>>>0?l>>>0<a>>>0?a:l:t,(u[o>>2]|0)-c>>3,n+8|0);a=i+8|0;Mm(u[a>>2]|0,u[e>>2]|0,u[r>>2]|0);u[a>>2]=(u[a>>2]|0)+8;Am(n,i);Sm(i);v=f;return}}function gm(n){n=n|0;return 536870911}function Tm(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;var i=0;u[n+12>>2]=0;u[n+16>>2]=t;do{if(e){if(e>>>0>536870911)Xn();else{i=GE(e<<3)|0;break}}else i=0}while(0);u[n>>2]=i;t=i+(r<<3)|0;u[n+8>>2]=t;u[n+4>>2]=t;u[n+12>>2]=i+(e<<3);return}function Am(n,e){n=n|0;e=e|0;var r=0,t=0,i=0,o=0,a=0;t=u[n>>2]|0;a=n+4|0;o=e+4|0;i=(u[a>>2]|0)-t|0;r=(u[o>>2]|0)+(0-(i>>3)<<3)|0;u[o>>2]=r;if((i|0)>0){iC(r|0,t|0,i|0)|0;t=o;r=u[o>>2]|0}else t=o;o=u[n>>2]|0;u[n>>2]=r;u[t>>2]=o;o=e+8|0;i=u[a>>2]|0;u[a>>2]=u[o>>2];u[o>>2]=i;o=n+8|0;a=e+12|0;n=u[o>>2]|0;u[o>>2]=u[a>>2];u[a>>2]=n;u[e>>2]=u[t>>2];return}function Sm(n){n=n|0;var e=0,r=0,t=0;e=u[n+4>>2]|0;r=n+8|0;t=u[r>>2]|0;if((t|0)!=(e|0))u[r>>2]=t+(~((t+-8-e|0)>>>3)<<3);n=u[n>>2]|0;if(n|0)XE(n);return}function Em(n){n=n|0;Rm(n);return}function Cm(n){n=n|0;Lm(n+24|0);return}function Lm(n){n=n|0;var e=0,r=0,t=0;r=u[n>>2]|0;t=r;if(r|0){n=n+4|0;e=u[n>>2]|0;if((e|0)!=(r|0))u[n>>2]=e+(~((e+-8-t|0)>>>3)<<3);XE(r)}return}function Rm(n){n=n|0;var e=0;e=$a()|0;rf(n,1,15,e,Rl()|0,0);u[n+24>>2]=0;u[n+28>>2]=0;u[n+32>>2]=0;return}function Pm(n){n=n|0;return Om(u[(Bm(n)|0)>>2]|0)|0}function Bm(n){n=n|0;return(u[(hm()|0)+24>>2]|0)+(n<<3)|0}function Om(n){n=n|0;return _l(EL[n&7]()|0)|0}function Nm(){var n=0;if(!(t[7832]|0)){jm(10052);xn(25,10052,b|0)|0;n=7832;u[n>>2]=1;u[n+4>>2]=0}return 10052}function Im(n,e){n=n|0;e=e|0;u[n>>2]=Fm()|0;u[n+4>>2]=xm()|0;u[n+12>>2]=e;u[n+8>>2]=Um()|0;u[n+32>>2]=2;return}function Fm(){return 11709}function xm(){return 1188}function Um(){return Ym()|0}function Hm(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;if((Dm(t,896)|0)==512){if(r|0){Wm(r);XE(r)}}else if(e|0){Zi(e);XE(e)}return}function Dm(n,e){n=n|0;e=e|0;return e&n|0}function Wm(n){n=n|0;n=u[n+4>>2]|0;if(n|0)qE(n);return}function Ym(){var n=0;if(!(t[7824]|0)){u[2511]=Vm()|0;u[2512]=0;n=7824;u[n>>2]=1;u[n+4>>2]=0}return 10044}function Vm(){return 0}function jm(n){n=n|0;Rf(n);return}function qm(n){n=n|0;var e=0,r=0,t=0,i=0,o=0;e=v;v=v+32|0;r=e+24|0;o=e+16|0;i=e+8|0;t=e;zm(n,4827);Gm(n,4834,3)|0;Km(n,3682,47)|0;u[o>>2]=9;u[o+4>>2]=0;u[r>>2]=u[o>>2];u[r+4>>2]=u[o+4>>2];Xm(n,4841,r)|0;u[i>>2]=1;u[i+4>>2]=0;u[r>>2]=u[i>>2];u[r+4>>2]=u[i+4>>2];Jm(n,4871,r)|0;u[t>>2]=10;u[t+4>>2]=0;u[r>>2]=u[t>>2];u[r+4>>2]=u[t+4>>2];Zm(n,4891,r)|0;v=e;return}function zm(n,e){n=n|0;e=e|0;var r=0;r=jh()|0;u[n>>2]=r;qh(r,e);lM(u[n>>2]|0);return}function Gm(n,e,r){n=n|0;e=e|0;r=r|0;Ah(n,Ba(e)|0,r,0);return n|0}function Km(n,e,r){n=n|0;e=e|0;r=r|0;ah(n,Ba(e)|0,r,0);return n|0}function Xm(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0;t=v;v=v+16|0;i=t+8|0;o=t;a=u[r+4>>2]|0;u[o>>2]=u[r>>2];u[o+4>>2]=a;u[i>>2]=u[o>>2];u[i+4>>2]=u[o+4>>2];Hb(n,e,i);v=t;return n|0}function Jm(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0;t=v;v=v+16|0;i=t+8|0;o=t;a=u[r+4>>2]|0;u[o>>2]=u[r>>2];u[o+4>>2]=a;u[i>>2]=u[o>>2];u[i+4>>2]=u[o+4>>2];bb(n,e,i);v=t;return n|0}function Zm(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0;t=v;v=v+16|0;i=t+8|0;o=t;a=u[r+4>>2]|0;u[o>>2]=u[r>>2];u[o+4>>2]=a;u[i>>2]=u[o>>2];u[i+4>>2]=u[o+4>>2];Qm(n,e,i);v=t;return n|0}function Qm(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0,f=0;t=v;v=v+16|0;i=t+8|0;o=t;f=u[r>>2]|0;a=u[r+4>>2]|0;r=Ba(e)|0;u[o>>2]=f;u[o+4>>2]=a;u[i>>2]=u[o>>2];u[i+4>>2]=u[o+4>>2];$m(n,r,i,1);v=t;return}function $m(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;var i=0,o=0,a=0,f=0,c=0,l=0,s=0;i=v;v=v+32|0;o=i+16|0;s=i+8|0;f=i;l=u[r>>2]|0;c=u[r+4>>2]|0;a=u[n>>2]|0;n=nb()|0;u[s>>2]=l;u[s+4>>2]=c;u[o>>2]=u[s>>2];u[o+4>>2]=u[s+4>>2];r=eb(o)|0;u[f>>2]=l;u[f+4>>2]=c;u[o>>2]=u[f>>2];u[o+4>>2]=u[f+4>>2];xa(a,e,n,r,rb(o,t)|0,t);v=i;return}function nb(){var n=0,e=0;if(!(t[7840]|0)){cb(10100);xn(48,10100,b|0)|0;e=7840;u[e>>2]=1;u[e+4>>2]=0}if(!(Ja(10100)|0)){n=10100;e=n+36|0;do{u[n>>2]=0;n=n+4|0}while((n|0)<(e|0));cb(10100)}return 10100}function eb(n){n=n|0;return 0}function rb(n,e){n=n|0;e=e|0;var r=0,t=0,i=0,o=0,a=0,f=0,c=0,l=0,s=0,d=0;s=v;v=v+32|0;i=s+24|0;a=s+16|0;f=s;c=s+8|0;o=u[n>>2]|0;t=u[n+4>>2]|0;u[f>>2]=o;u[f+4>>2]=t;d=nb()|0;l=d+24|0;n=Wa(e,4)|0;u[c>>2]=n;e=d+28|0;r=u[e>>2]|0;if(r>>>0<(u[d+32>>2]|0)>>>0){u[a>>2]=o;u[a+4>>2]=t;u[i>>2]=u[a>>2];u[i+4>>2]=u[a+4>>2];tb(r,i,n);n=(u[e>>2]|0)+12|0;u[e>>2]=n}else{ib(l,f,c);n=u[e>>2]|0}v=s;return((n-(u[l>>2]|0)|0)/12|0)+-1|0}function tb(n,e,r){n=n|0;e=e|0;r=r|0;var t=0;t=u[e+4>>2]|0;u[n>>2]=u[e>>2];u[n+4>>2]=t;u[n+8>>2]=r;return}function ib(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0,f=0,c=0,l=0,s=0,d=0,_=0;l=v;v=v+48|0;t=l+32|0;a=l+24|0;f=l;c=n+4|0;i=(((u[c>>2]|0)-(u[n>>2]|0)|0)/12|0)+1|0;o=ub(n)|0;if(o>>>0<i>>>0)DE(n);else{s=u[n>>2]|0;_=((u[n+8>>2]|0)-s|0)/12|0;d=_<<1;ob(f,_>>>0<o>>>1>>>0?d>>>0<i>>>0?i:d:o,((u[c>>2]|0)-s|0)/12|0,n+8|0);c=f+8|0;o=u[c>>2]|0;i=u[e+4>>2]|0;r=u[r>>2]|0;u[a>>2]=u[e>>2];u[a+4>>2]=i;u[t>>2]=u[a>>2];u[t+4>>2]=u[a+4>>2];tb(o,t,r);u[c>>2]=(u[c>>2]|0)+12;ab(n,f);fb(f);v=l;return}}function ub(n){n=n|0;return 357913941}function ob(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;var i=0;u[n+12>>2]=0;u[n+16>>2]=t;do{if(e){if(e>>>0>357913941)Xn();else{i=GE(e*12|0)|0;break}}else i=0}while(0);u[n>>2]=i;t=i+(r*12|0)|0;u[n+8>>2]=t;u[n+4>>2]=t;u[n+12>>2]=i+(e*12|0);return}function ab(n,e){n=n|0;e=e|0;var r=0,t=0,i=0,o=0,a=0;t=u[n>>2]|0;a=n+4|0;o=e+4|0;i=(u[a>>2]|0)-t|0;r=(u[o>>2]|0)+(((i|0)/-12|0)*12|0)|0;u[o>>2]=r;if((i|0)>0){iC(r|0,t|0,i|0)|0;t=o;r=u[o>>2]|0}else t=o;o=u[n>>2]|0;u[n>>2]=r;u[t>>2]=o;o=e+8|0;i=u[a>>2]|0;u[a>>2]=u[o>>2];u[o>>2]=i;o=n+8|0;a=e+12|0;n=u[o>>2]|0;u[o>>2]=u[a>>2];u[a>>2]=n;u[e>>2]=u[t>>2];return}function fb(n){n=n|0;var e=0,r=0,t=0;e=u[n+4>>2]|0;r=n+8|0;t=u[r>>2]|0;if((t|0)!=(e|0))u[r>>2]=t+(~(((t+-12-e|0)>>>0)/12|0)*12|0);n=u[n>>2]|0;if(n|0)XE(n);return}function cb(n){n=n|0;db(n);return}function lb(n){n=n|0;sb(n+24|0);return}function sb(n){n=n|0;var e=0,r=0,t=0;r=u[n>>2]|0;t=r;if(r|0){n=n+4|0;e=u[n>>2]|0;if((e|0)!=(r|0))u[n>>2]=e+(~(((e+-12-t|0)>>>0)/12|0)*12|0);XE(r)}return}function db(n){n=n|0;var e=0;e=$a()|0;rf(n,2,6,e,_b()|0,1);u[n+24>>2]=0;u[n+28>>2]=0;u[n+32>>2]=0;return}function _b(){return 1364}function vb(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0;t=v;v=v+16|0;i=t+8|0;o=t;a=pb(n)|0;n=u[a+4>>2]|0;u[o>>2]=u[a>>2];u[o+4>>2]=n;u[i>>2]=u[o>>2];u[i+4>>2]=u[o+4>>2];r=mb(e,i,r)|0;v=t;return r|0}function pb(n){n=n|0;return(u[(nb()|0)+24>>2]|0)+(n*12|0)|0}function mb(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0;o=v;v=v+16|0;i=o;t=u[e>>2]|0;e=u[e+4>>2]|0;n=n+(e>>1)|0;if(e&1)t=u[(u[n>>2]|0)+t>>2]|0;Qf(i,r);i=$f(i,r)|0;i=Mc(gL[t&15](n,i)|0)|0;v=o;return i|0}function bb(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0,f=0;t=v;v=v+16|0;i=t+8|0;o=t;f=u[r>>2]|0;a=u[r+4>>2]|0;r=Ba(e)|0;u[o>>2]=f;u[o+4>>2]=a;u[i>>2]=u[o>>2];u[i+4>>2]=u[o+4>>2];hb(n,r,i,0);v=t;return}function hb(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;var i=0,o=0,a=0,f=0,c=0,l=0,s=0;i=v;v=v+32|0;o=i+16|0;s=i+8|0;f=i;l=u[r>>2]|0;c=u[r+4>>2]|0;a=u[n>>2]|0;n=yb()|0;u[s>>2]=l;u[s+4>>2]=c;u[o>>2]=u[s>>2];u[o+4>>2]=u[s+4>>2];r=wb(o)|0;u[f>>2]=l;u[f+4>>2]=c;u[o>>2]=u[f>>2];u[o+4>>2]=u[f+4>>2];xa(a,e,n,r,Mb(o,t)|0,t);v=i;return}function yb(){var n=0,e=0;if(!(t[7848]|0)){Cb(10136);xn(49,10136,b|0)|0;e=7848;u[e>>2]=1;u[e+4>>2]=0}if(!(Ja(10136)|0)){n=10136;e=n+36|0;do{u[n>>2]=0;n=n+4|0}while((n|0)<(e|0));Cb(10136)}return 10136}function wb(n){n=n|0;return 0}function Mb(n,e){n=n|0;e=e|0;var r=0,t=0,i=0,o=0,a=0,f=0,c=0,l=0,s=0,d=0;s=v;v=v+32|0;i=s+24|0;a=s+16|0;f=s;c=s+8|0;o=u[n>>2]|0;t=u[n+4>>2]|0;u[f>>2]=o;u[f+4>>2]=t;d=yb()|0;l=d+24|0;n=Wa(e,4)|0;u[c>>2]=n;e=d+28|0;r=u[e>>2]|0;if(r>>>0<(u[d+32>>2]|0)>>>0){u[a>>2]=o;u[a+4>>2]=t;u[i>>2]=u[a>>2];u[i+4>>2]=u[a+4>>2];kb(r,i,n);n=(u[e>>2]|0)+12|0;u[e>>2]=n}else{gb(l,f,c);n=u[e>>2]|0}v=s;return((n-(u[l>>2]|0)|0)/12|0)+-1|0}function kb(n,e,r){n=n|0;e=e|0;r=r|0;var t=0;t=u[e+4>>2]|0;u[n>>2]=u[e>>2];u[n+4>>2]=t;u[n+8>>2]=r;return}function gb(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0,f=0,c=0,l=0,s=0,d=0,_=0;l=v;v=v+48|0;t=l+32|0;a=l+24|0;f=l;c=n+4|0;i=(((u[c>>2]|0)-(u[n>>2]|0)|0)/12|0)+1|0;o=Tb(n)|0;if(o>>>0<i>>>0)DE(n);else{s=u[n>>2]|0;_=((u[n+8>>2]|0)-s|0)/12|0;d=_<<1;Ab(f,_>>>0<o>>>1>>>0?d>>>0<i>>>0?i:d:o,((u[c>>2]|0)-s|0)/12|0,n+8|0);c=f+8|0;o=u[c>>2]|0;i=u[e+4>>2]|0;r=u[r>>2]|0;u[a>>2]=u[e>>2];u[a+4>>2]=i;u[t>>2]=u[a>>2];u[t+4>>2]=u[a+4>>2];kb(o,t,r);u[c>>2]=(u[c>>2]|0)+12;Sb(n,f);Eb(f);v=l;return}}function Tb(n){n=n|0;return 357913941}function Ab(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;var i=0;u[n+12>>2]=0;u[n+16>>2]=t;do{if(e){if(e>>>0>357913941)Xn();else{i=GE(e*12|0)|0;break}}else i=0}while(0);u[n>>2]=i;t=i+(r*12|0)|0;u[n+8>>2]=t;u[n+4>>2]=t;u[n+12>>2]=i+(e*12|0);return}function Sb(n,e){n=n|0;e=e|0;var r=0,t=0,i=0,o=0,a=0;t=u[n>>2]|0;a=n+4|0;o=e+4|0;i=(u[a>>2]|0)-t|0;r=(u[o>>2]|0)+(((i|0)/-12|0)*12|0)|0;u[o>>2]=r;if((i|0)>0){iC(r|0,t|0,i|0)|0;t=o;r=u[o>>2]|0}else t=o;o=u[n>>2]|0;u[n>>2]=r;u[t>>2]=o;o=e+8|0;i=u[a>>2]|0;u[a>>2]=u[o>>2];u[o>>2]=i;o=n+8|0;a=e+12|0;n=u[o>>2]|0;u[o>>2]=u[a>>2];u[a>>2]=n;u[e>>2]=u[t>>2];return}function Eb(n){n=n|0;var e=0,r=0,t=0;e=u[n+4>>2]|0;r=n+8|0;t=u[r>>2]|0;if((t|0)!=(e|0))u[r>>2]=t+(~(((t+-12-e|0)>>>0)/12|0)*12|0);n=u[n>>2]|0;if(n|0)XE(n);return}function Cb(n){n=n|0;Pb(n);return}function Lb(n){n=n|0;Rb(n+24|0);return}function Rb(n){n=n|0;var e=0,r=0,t=0;r=u[n>>2]|0;t=r;if(r|0){n=n+4|0;e=u[n>>2]|0;if((e|0)!=(r|0))u[n>>2]=e+(~(((e+-12-t|0)>>>0)/12|0)*12|0);XE(r)}return}function Pb(n){n=n|0;var e=0;e=$a()|0;rf(n,2,9,e,Bb()|0,1);u[n+24>>2]=0;u[n+28>>2]=0;u[n+32>>2]=0;return}function Bb(){return 1372}function Ob(n,e,r){n=n|0;e=e|0;r=+r;var t=0,i=0,o=0,a=0;t=v;v=v+16|0;i=t+8|0;o=t;a=Nb(n)|0;n=u[a+4>>2]|0;u[o>>2]=u[a>>2];u[o+4>>2]=n;u[i>>2]=u[o>>2];u[i+4>>2]=u[o+4>>2];Ib(e,i,r);v=t;return}function Nb(n){n=n|0;return(u[(yb()|0)+24>>2]|0)+(n*12|0)|0}function Ib(n,e,r){n=n|0;e=e|0;r=+r;var t=0,i=0,o=0,a=de;o=v;v=v+16|0;i=o;t=u[e>>2]|0;e=u[e+4>>2]|0;n=n+(e>>1)|0;if(e&1)t=u[(u[n>>2]|0)+t>>2]|0;Fb(i,r);a=K(xb(i,r));sL[t&1](n,a);v=o;return}function Fb(n,e){n=n|0;e=+e;return}function xb(n,e){n=n|0;e=+e;return K(Ub(e))}function Ub(n){n=+n;return K(n)}function Hb(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0,f=0;t=v;v=v+16|0;i=t+8|0;o=t;f=u[r>>2]|0;a=u[r+4>>2]|0;r=Ba(e)|0;u[o>>2]=f;u[o+4>>2]=a;u[i>>2]=u[o>>2];u[i+4>>2]=u[o+4>>2];Db(n,r,i,0);v=t;return}function Db(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;var i=0,o=0,a=0,f=0,c=0,l=0,s=0;i=v;v=v+32|0;o=i+16|0;s=i+8|0;f=i;l=u[r>>2]|0;c=u[r+4>>2]|0;a=u[n>>2]|0;n=Wb()|0;u[s>>2]=l;u[s+4>>2]=c;u[o>>2]=u[s>>2];u[o+4>>2]=u[s+4>>2];r=Yb(o)|0;u[f>>2]=l;u[f+4>>2]=c;u[o>>2]=u[f>>2];u[o+4>>2]=u[f+4>>2];xa(a,e,n,r,Vb(o,t)|0,t);v=i;return}function Wb(){var n=0,e=0;if(!(t[7856]|0)){Jb(10172);xn(50,10172,b|0)|0;e=7856;u[e>>2]=1;u[e+4>>2]=0}if(!(Ja(10172)|0)){n=10172;e=n+36|0;do{u[n>>2]=0;n=n+4|0}while((n|0)<(e|0));Jb(10172)}return 10172}function Yb(n){n=n|0;return 0}function Vb(n,e){n=n|0;e=e|0;var r=0,t=0,i=0,o=0,a=0,f=0,c=0,l=0,s=0,d=0;s=v;v=v+32|0;i=s+24|0;a=s+16|0;f=s;c=s+8|0;o=u[n>>2]|0;t=u[n+4>>2]|0;u[f>>2]=o;u[f+4>>2]=t;d=Wb()|0;l=d+24|0;n=Wa(e,4)|0;u[c>>2]=n;e=d+28|0;r=u[e>>2]|0;if(r>>>0<(u[d+32>>2]|0)>>>0){u[a>>2]=o;u[a+4>>2]=t;u[i>>2]=u[a>>2];u[i+4>>2]=u[a+4>>2];jb(r,i,n);n=(u[e>>2]|0)+12|0;u[e>>2]=n}else{qb(l,f,c);n=u[e>>2]|0}v=s;return((n-(u[l>>2]|0)|0)/12|0)+-1|0}function jb(n,e,r){n=n|0;e=e|0;r=r|0;var t=0;t=u[e+4>>2]|0;u[n>>2]=u[e>>2];u[n+4>>2]=t;u[n+8>>2]=r;return}function qb(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0,f=0,c=0,l=0,s=0,d=0,_=0;l=v;v=v+48|0;t=l+32|0;a=l+24|0;f=l;c=n+4|0;i=(((u[c>>2]|0)-(u[n>>2]|0)|0)/12|0)+1|0;o=zb(n)|0;if(o>>>0<i>>>0)DE(n);else{s=u[n>>2]|0;_=((u[n+8>>2]|0)-s|0)/12|0;d=_<<1;Gb(f,_>>>0<o>>>1>>>0?d>>>0<i>>>0?i:d:o,((u[c>>2]|0)-s|0)/12|0,n+8|0);c=f+8|0;o=u[c>>2]|0;i=u[e+4>>2]|0;r=u[r>>2]|0;u[a>>2]=u[e>>2];u[a+4>>2]=i;u[t>>2]=u[a>>2];u[t+4>>2]=u[a+4>>2];jb(o,t,r);u[c>>2]=(u[c>>2]|0)+12;Kb(n,f);Xb(f);v=l;return}}function zb(n){n=n|0;return 357913941}function Gb(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;var i=0;u[n+12>>2]=0;u[n+16>>2]=t;do{if(e){if(e>>>0>357913941)Xn();else{i=GE(e*12|0)|0;break}}else i=0}while(0);u[n>>2]=i;t=i+(r*12|0)|0;u[n+8>>2]=t;u[n+4>>2]=t;u[n+12>>2]=i+(e*12|0);return}function Kb(n,e){n=n|0;e=e|0;var r=0,t=0,i=0,o=0,a=0;t=u[n>>2]|0;a=n+4|0;o=e+4|0;i=(u[a>>2]|0)-t|0;r=(u[o>>2]|0)+(((i|0)/-12|0)*12|0)|0;u[o>>2]=r;if((i|0)>0){iC(r|0,t|0,i|0)|0;t=o;r=u[o>>2]|0}else t=o;o=u[n>>2]|0;u[n>>2]=r;u[t>>2]=o;o=e+8|0;i=u[a>>2]|0;u[a>>2]=u[o>>2];u[o>>2]=i;o=n+8|0;a=e+12|0;n=u[o>>2]|0;u[o>>2]=u[a>>2];u[a>>2]=n;u[e>>2]=u[t>>2];return}function Xb(n){n=n|0;var e=0,r=0,t=0;e=u[n+4>>2]|0;r=n+8|0;t=u[r>>2]|0;if((t|0)!=(e|0))u[r>>2]=t+(~(((t+-12-e|0)>>>0)/12|0)*12|0);n=u[n>>2]|0;if(n|0)XE(n);return}function Jb(n){n=n|0;$b(n);return}function Zb(n){n=n|0;Qb(n+24|0);return}function Qb(n){n=n|0;var e=0,r=0,t=0;r=u[n>>2]|0;t=r;if(r|0){n=n+4|0;e=u[n>>2]|0;if((e|0)!=(r|0))u[n>>2]=e+(~(((e+-12-t|0)>>>0)/12|0)*12|0);XE(r)}return}function $b(n){n=n|0;var e=0;e=$a()|0;rf(n,2,3,e,nh()|0,2);u[n+24>>2]=0;u[n+28>>2]=0;u[n+32>>2]=0;return}function nh(){return 1380}function eh(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;var i=0,o=0,a=0,f=0;i=v;v=v+16|0;o=i+8|0;a=i;f=rh(n)|0;n=u[f+4>>2]|0;u[a>>2]=u[f>>2];u[a+4>>2]=n;u[o>>2]=u[a>>2];u[o+4>>2]=u[a+4>>2];th(e,o,r,t);v=i;return}function rh(n){n=n|0;return(u[(Wb()|0)+24>>2]|0)+(n*12|0)|0}function th(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;var i=0,o=0,a=0,f=0;f=v;v=v+16|0;o=f+1|0;a=f;i=u[e>>2]|0;e=u[e+4>>2]|0;n=n+(e>>1)|0;if(e&1)i=u[(u[n>>2]|0)+i>>2]|0;Qf(o,r);o=$f(o,r)|0;ih(a,t);a=uh(a,t)|0;PL[i&15](n,o,a);v=f;return}function ih(n,e){n=n|0;e=e|0;return}function uh(n,e){n=n|0;e=e|0;return oh(e)|0}function oh(n){n=n|0;return(n|0)!=0|0}function ah(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;var i=0,o=0;o=u[n>>2]|0;i=fh()|0;n=ch(r)|0;xa(o,e,i,n,lh(r,t)|0,t);return}function fh(){var n=0,e=0;if(!(t[7864]|0)){bh(10208);xn(51,10208,b|0)|0;e=7864;u[e>>2]=1;u[e+4>>2]=0}if(!(Ja(10208)|0)){n=10208;e=n+36|0;do{u[n>>2]=0;n=n+4|0}while((n|0)<(e|0));bh(10208)}return 10208}function ch(n){n=n|0;return n|0}function lh(n,e){n=n|0;e=e|0;var r=0,t=0,i=0,o=0,a=0,f=0,c=0;f=v;v=v+16|0;i=f;o=f+4|0;u[i>>2]=n;c=fh()|0;a=c+24|0;e=Wa(e,4)|0;u[o>>2]=e;r=c+28|0;t=u[r>>2]|0;if(t>>>0<(u[c+32>>2]|0)>>>0){sh(t,n,e);e=(u[r>>2]|0)+8|0;u[r>>2]=e}else{dh(a,i,o);e=u[r>>2]|0}v=f;return(e-(u[a>>2]|0)>>3)+-1|0}function sh(n,e,r){n=n|0;e=e|0;r=r|0;u[n>>2]=e;u[n+4>>2]=r;return}function dh(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0,f=0,c=0,l=0,s=0;f=v;v=v+32|0;i=f;o=n+4|0;a=((u[o>>2]|0)-(u[n>>2]|0)>>3)+1|0;t=_h(n)|0;if(t>>>0<a>>>0)DE(n);else{c=u[n>>2]|0;s=(u[n+8>>2]|0)-c|0;l=s>>2;vh(i,s>>3>>>0<t>>>1>>>0?l>>>0<a>>>0?a:l:t,(u[o>>2]|0)-c>>3,n+8|0);a=i+8|0;sh(u[a>>2]|0,u[e>>2]|0,u[r>>2]|0);u[a>>2]=(u[a>>2]|0)+8;ph(n,i);mh(i);v=f;return}}function _h(n){n=n|0;return 536870911}function vh(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;var i=0;u[n+12>>2]=0;u[n+16>>2]=t;do{if(e){if(e>>>0>536870911)Xn();else{i=GE(e<<3)|0;break}}else i=0}while(0);u[n>>2]=i;t=i+(r<<3)|0;u[n+8>>2]=t;u[n+4>>2]=t;u[n+12>>2]=i+(e<<3);return}function ph(n,e){n=n|0;e=e|0;var r=0,t=0,i=0,o=0,a=0;t=u[n>>2]|0;a=n+4|0;o=e+4|0;i=(u[a>>2]|0)-t|0;r=(u[o>>2]|0)+(0-(i>>3)<<3)|0;u[o>>2]=r;if((i|0)>0){iC(r|0,t|0,i|0)|0;t=o;r=u[o>>2]|0}else t=o;o=u[n>>2]|0;u[n>>2]=r;u[t>>2]=o;o=e+8|0;i=u[a>>2]|0;u[a>>2]=u[o>>2];u[o>>2]=i;o=n+8|0;a=e+12|0;n=u[o>>2]|0;u[o>>2]=u[a>>2];u[a>>2]=n;u[e>>2]=u[t>>2];return}function mh(n){n=n|0;var e=0,r=0,t=0;e=u[n+4>>2]|0;r=n+8|0;t=u[r>>2]|0;if((t|0)!=(e|0))u[r>>2]=t+(~((t+-8-e|0)>>>3)<<3);n=u[n>>2]|0;if(n|0)XE(n);return}function bh(n){n=n|0;wh(n);return}function hh(n){n=n|0;yh(n+24|0);return}function yh(n){n=n|0;var e=0,r=0,t=0;r=u[n>>2]|0;t=r;if(r|0){n=n+4|0;e=u[n>>2]|0;if((e|0)!=(r|0))u[n>>2]=e+(~((e+-8-t|0)>>>3)<<3);XE(r)}return}function wh(n){n=n|0;var e=0;e=$a()|0;rf(n,1,24,e,Mh()|0,1);u[n+24>>2]=0;u[n+28>>2]=0;u[n+32>>2]=0;return}function Mh(){return 1392}function kh(n,e){n=n|0;e=e|0;Th(u[(gh(n)|0)>>2]|0,e);return}function gh(n){n=n|0;return(u[(fh()|0)+24>>2]|0)+(n<<3)|0}function Th(n,e){n=n|0;e=e|0;var r=0,t=0;r=v;v=v+16|0;t=r;vm(t,e);e=pm(t,e)|0;vL[n&127](e);v=r;return}function Ah(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;var i=0,o=0;o=u[n>>2]|0;i=Sh()|0;n=Eh(r)|0;xa(o,e,i,n,Ch(r,t)|0,t);return}function Sh(){var n=0,e=0;if(!(t[7872]|0)){Ih(10244);xn(52,10244,b|0)|0;e=7872;u[e>>2]=1;u[e+4>>2]=0}if(!(Ja(10244)|0)){n=10244;e=n+36|0;do{u[n>>2]=0;n=n+4|0}while((n|0)<(e|0));Ih(10244)}return 10244}function Eh(n){n=n|0;return n|0}function Ch(n,e){n=n|0;e=e|0;var r=0,t=0,i=0,o=0,a=0,f=0,c=0;f=v;v=v+16|0;i=f;o=f+4|0;u[i>>2]=n;c=Sh()|0;a=c+24|0;e=Wa(e,4)|0;u[o>>2]=e;r=c+28|0;t=u[r>>2]|0;if(t>>>0<(u[c+32>>2]|0)>>>0){Lh(t,n,e);e=(u[r>>2]|0)+8|0;u[r>>2]=e}else{Rh(a,i,o);e=u[r>>2]|0}v=f;return(e-(u[a>>2]|0)>>3)+-1|0}function Lh(n,e,r){n=n|0;e=e|0;r=r|0;u[n>>2]=e;u[n+4>>2]=r;return}function Rh(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0,f=0,c=0,l=0,s=0;f=v;v=v+32|0;i=f;o=n+4|0;a=((u[o>>2]|0)-(u[n>>2]|0)>>3)+1|0;t=Ph(n)|0;if(t>>>0<a>>>0)DE(n);else{c=u[n>>2]|0;s=(u[n+8>>2]|0)-c|0;l=s>>2;Bh(i,s>>3>>>0<t>>>1>>>0?l>>>0<a>>>0?a:l:t,(u[o>>2]|0)-c>>3,n+8|0);a=i+8|0;Lh(u[a>>2]|0,u[e>>2]|0,u[r>>2]|0);u[a>>2]=(u[a>>2]|0)+8;Oh(n,i);Nh(i);v=f;return}}function Ph(n){n=n|0;return 536870911}function Bh(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;var i=0;u[n+12>>2]=0;u[n+16>>2]=t;do{if(e){if(e>>>0>536870911)Xn();else{i=GE(e<<3)|0;break}}else i=0}while(0);u[n>>2]=i;t=i+(r<<3)|0;u[n+8>>2]=t;u[n+4>>2]=t;u[n+12>>2]=i+(e<<3);return}function Oh(n,e){n=n|0;e=e|0;var r=0,t=0,i=0,o=0,a=0;t=u[n>>2]|0;a=n+4|0;o=e+4|0;i=(u[a>>2]|0)-t|0;r=(u[o>>2]|0)+(0-(i>>3)<<3)|0;u[o>>2]=r;if((i|0)>0){iC(r|0,t|0,i|0)|0;t=o;r=u[o>>2]|0}else t=o;o=u[n>>2]|0;u[n>>2]=r;u[t>>2]=o;o=e+8|0;i=u[a>>2]|0;u[a>>2]=u[o>>2];u[o>>2]=i;o=n+8|0;a=e+12|0;n=u[o>>2]|0;u[o>>2]=u[a>>2];u[a>>2]=n;u[e>>2]=u[t>>2];return}function Nh(n){n=n|0;var e=0,r=0,t=0;e=u[n+4>>2]|0;r=n+8|0;t=u[r>>2]|0;if((t|0)!=(e|0))u[r>>2]=t+(~((t+-8-e|0)>>>3)<<3);n=u[n>>2]|0;if(n|0)XE(n);return}function Ih(n){n=n|0;Uh(n);return}function Fh(n){n=n|0;xh(n+24|0);return}function xh(n){n=n|0;var e=0,r=0,t=0;r=u[n>>2]|0;t=r;if(r|0){n=n+4|0;e=u[n>>2]|0;if((e|0)!=(r|0))u[n>>2]=e+(~((e+-8-t|0)>>>3)<<3);XE(r)}return}function Uh(n){n=n|0;var e=0;e=$a()|0;rf(n,1,16,e,Hh()|0,0);u[n+24>>2]=0;u[n+28>>2]=0;u[n+32>>2]=0;return}function Hh(){return 1400}function Dh(n){n=n|0;return Yh(u[(Wh(n)|0)>>2]|0)|0}function Wh(n){n=n|0;return(u[(Sh()|0)+24>>2]|0)+(n<<3)|0}function Yh(n){n=n|0;return Vh(EL[n&7]()|0)|0}function Vh(n){n=n|0;return n|0}function jh(){var n=0;if(!(t[7880]|0)){Zh(10280);xn(25,10280,b|0)|0;n=7880;u[n>>2]=1;u[n+4>>2]=0}return 10280}function qh(n,e){n=n|0;e=e|0;u[n>>2]=zh()|0;u[n+4>>2]=Gh()|0;u[n+12>>2]=e;u[n+8>>2]=Kh()|0;u[n+32>>2]=4;return}function zh(){return 11711}function Gh(){return 1356}function Kh(){return Ym()|0}function Xh(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;if((Dm(t,896)|0)==512){if(r|0){Jh(r);XE(r)}}else if(e|0){Vi(e);XE(e)}return}function Jh(n){n=n|0;n=u[n+4>>2]|0;if(n|0)qE(n);return}function Zh(n){n=n|0;Rf(n);return}function Qh(n){n=n|0;$h(n,4920);ny(n)|0;ey(n)|0;return}function $h(n,e){n=n|0;e=e|0;var r=0;r=qd()|0;u[n>>2]=r;Ey(r,e);lM(u[n>>2]|0);return}function ny(n){n=n|0;var e=0;e=u[n>>2]|0;ty(e,py()|0);return n|0}function ey(n){n=n|0;var e=0;e=u[n>>2]|0;ty(e,ry()|0);return n|0}function ry(){var n=0;if(!(t[7888]|0)){iy(10328);xn(53,10328,b|0)|0;n=7888;u[n>>2]=1;u[n+4>>2]=0}if(!(Ja(10328)|0))iy(10328);return 10328}function ty(n,e){n=n|0;e=e|0;xa(n,0,e,0,0,0);return}function iy(n){n=n|0;ay(n);cy(n,10);return}function uy(n){n=n|0;oy(n+24|0);return}function oy(n){n=n|0;var e=0,r=0,t=0;r=u[n>>2]|0;t=r;if(r|0){n=n+4|0;e=u[n>>2]|0;if((e|0)!=(r|0))u[n>>2]=e+(~((e+-8-t|0)>>>3)<<3);XE(r)}return}function ay(n){n=n|0;var e=0;e=$a()|0;rf(n,5,1,e,dy()|0,2);u[n+24>>2]=0;u[n+28>>2]=0;u[n+32>>2]=0;return}function fy(n,e,r){n=n|0;e=e|0;r=+r;ly(n,e,r);return}function cy(n,e){n=n|0;e=e|0;u[n+20>>2]=e;return}function ly(n,e,r){n=n|0;e=e|0;r=+r;var t=0,i=0,o=0,a=0,f=0;t=v;v=v+16|0;o=t+8|0;f=t+13|0;i=t;a=t+12|0;Qf(f,e);u[o>>2]=$f(f,e)|0;Jf(a,r);l[i>>3]=+Zf(a,r);sy(n,o,i);v=t;return}function sy(n,e,r){n=n|0;e=e|0;r=r|0;Vu(n+8|0,u[e>>2]|0,+l[r>>3]);t[n+24>>0]=1;return}function dy(){return 1404}function _y(n,e){n=n|0;e=+e;return vy(n,e)|0}function vy(n,e){n=n|0;e=+e;var r=0,t=0,i=0,o=0,a=0,f=0,c=0;t=v;v=v+16|0;o=t+4|0;a=t+8|0;f=t;i=Dg(8)|0;r=i;c=GE(16)|0;Qf(o,n);n=$f(o,n)|0;Jf(a,e);Vu(c,n,+Zf(a,e));a=r+4|0;u[a>>2]=c;n=GE(8)|0;a=u[a>>2]|0;u[f>>2]=0;u[o>>2]=u[f>>2];Kd(n,a,o);u[i>>2]=n;v=t;return r|0}function py(){var n=0;if(!(t[7896]|0)){my(10364);xn(54,10364,b|0)|0;n=7896;u[n>>2]=1;u[n+4>>2]=0}if(!(Ja(10364)|0))my(10364);return 10364}function my(n){n=n|0;yy(n);cy(n,55);return}function by(n){n=n|0;hy(n+24|0);return}function hy(n){n=n|0;var e=0,r=0,t=0;r=u[n>>2]|0;t=r;if(r|0){n=n+4|0;e=u[n>>2]|0;if((e|0)!=(r|0))u[n>>2]=e+(~((e+-8-t|0)>>>3)<<3);XE(r)}return}function yy(n){n=n|0;var e=0;e=$a()|0;rf(n,5,4,e,Ty()|0,0);u[n+24>>2]=0;u[n+28>>2]=0;u[n+32>>2]=0;return}function wy(n){n=n|0;My(n);return}function My(n){n=n|0;ky(n);return}function ky(n){n=n|0;gy(n+8|0);t[n+24>>0]=1;return}function gy(n){n=n|0;u[n>>2]=0;l[n+8>>3]=0.0;return}function Ty(){return 1424}function Ay(){return Sy()|0}function Sy(){var n=0,e=0,r=0,t=0,i=0,o=0,a=0;e=v;v=v+16|0;i=e+4|0;a=e;r=Dg(8)|0;n=r;t=GE(16)|0;gy(t);o=n+4|0;u[o>>2]=t;t=GE(8)|0;o=u[o>>2]|0;u[a>>2]=0;u[i>>2]=u[a>>2];Kd(t,o,i);u[r>>2]=t;v=e;return n|0}function Ey(n,e){n=n|0;e=e|0;u[n>>2]=Cy()|0;u[n+4>>2]=Ly()|0;u[n+12>>2]=e;u[n+8>>2]=Ry()|0;u[n+32>>2]=5;return}function Cy(){return 11710}function Ly(){return 1416}function Ry(){return Oy()|0}function Py(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;if((Dm(t,896)|0)==512){if(r|0){By(r);XE(r)}}else if(e|0)XE(e);return}function By(n){n=n|0;n=u[n+4>>2]|0;if(n|0)qE(n);return}function Oy(){var n=0;if(!(t[7904]|0)){u[2600]=Ny()|0;u[2601]=0;n=7904;u[n>>2]=1;u[n+4>>2]=0}return 10400}function Ny(){return u[357]|0}function Iy(n){n=n|0;Fy(n,4926);xy(n)|0;return}function Fy(n,e){n=n|0;e=e|0;var r=0;r=af()|0;u[n>>2]=r;Xy(r,e);lM(u[n>>2]|0);return}function xy(n){n=n|0;var e=0;e=u[n>>2]|0;ty(e,Uy()|0);return n|0}function Uy(){var n=0;if(!(t[7912]|0)){Hy(10412);xn(56,10412,b|0)|0;n=7912;u[n>>2]=1;u[n+4>>2]=0}if(!(Ja(10412)|0))Hy(10412);return 10412}function Hy(n){n=n|0;Yy(n);cy(n,57);return}function Dy(n){n=n|0;Wy(n+24|0);return}function Wy(n){n=n|0;var e=0,r=0,t=0;r=u[n>>2]|0;t=r;if(r|0){n=n+4|0;e=u[n>>2]|0;if((e|0)!=(r|0))u[n>>2]=e+(~((e+-8-t|0)>>>3)<<3);XE(r)}return}function Yy(n){n=n|0;var e=0;e=$a()|0;rf(n,5,5,e,zy()|0,0);u[n+24>>2]=0;u[n+28>>2]=0;u[n+32>>2]=0;return}function Vy(n){n=n|0;jy(n);return}function jy(n){n=n|0;qy(n);return}function qy(n){n=n|0;var e=0,r=0;e=n+8|0;r=e+48|0;do{u[e>>2]=0;e=e+4|0}while((e|0)<(r|0));t[n+56>>0]=1;return}function zy(){return 1432}function Gy(){return Ky()|0}function Ky(){var n=0,e=0,r=0,t=0,i=0,o=0,a=0,f=0;a=v;v=v+16|0;n=a+4|0;e=a;r=Dg(8)|0;t=r;i=GE(48)|0;o=i;f=o+48|0;do{u[o>>2]=0;o=o+4|0}while((o|0)<(f|0));o=t+4|0;u[o>>2]=i;f=GE(8)|0;o=u[o>>2]|0;u[e>>2]=0;u[n>>2]=u[e>>2];vf(f,o,n);u[r>>2]=f;v=a;return t|0}function Xy(n,e){n=n|0;e=e|0;u[n>>2]=Jy()|0;u[n+4>>2]=Zy()|0;u[n+12>>2]=e;u[n+8>>2]=Qy()|0;u[n+32>>2]=6;return}function Jy(){return 11704}function Zy(){return 1436}function Qy(){return Oy()|0}function $y(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;if((Dm(t,896)|0)==512){if(r|0){nw(r);XE(r)}}else if(e|0)XE(e);return}function nw(n){n=n|0;n=u[n+4>>2]|0;if(n|0)qE(n);return}function ew(n){n=n|0;rw(n,4933);tw(n)|0;iw(n)|0;return}function rw(n,e){n=n|0;e=e|0;var r=0;r=Ow()|0;u[n>>2]=r;Nw(r,e);lM(u[n>>2]|0);return}function tw(n){n=n|0;var e=0;e=u[n>>2]|0;ty(e,Mw()|0);return n|0}function iw(n){n=n|0;var e=0;e=u[n>>2]|0;ty(e,uw()|0);return n|0}function uw(){var n=0;if(!(t[7920]|0)){ow(10452);xn(58,10452,b|0)|0;n=7920;u[n>>2]=1;u[n+4>>2]=0}if(!(Ja(10452)|0))ow(10452);return 10452}function ow(n){n=n|0;cw(n);cy(n,1);return}function aw(n){n=n|0;fw(n+24|0);return}function fw(n){n=n|0;var e=0,r=0,t=0;r=u[n>>2]|0;t=r;if(r|0){n=n+4|0;e=u[n>>2]|0;if((e|0)!=(r|0))u[n>>2]=e+(~((e+-8-t|0)>>>3)<<3);XE(r)}return}function cw(n){n=n|0;var e=0;e=$a()|0;rf(n,5,1,e,vw()|0,2);u[n+24>>2]=0;u[n+28>>2]=0;u[n+32>>2]=0;return}function lw(n,e,r){n=n|0;e=+e;r=+r;sw(n,e,r);return}function sw(n,e,r){n=n|0;e=+e;r=+r;var t=0,i=0,u=0,o=0,a=0;t=v;v=v+32|0;u=t+8|0;a=t+17|0;i=t;o=t+16|0;Jf(a,e);l[u>>3]=+Zf(a,e);Jf(o,r);l[i>>3]=+Zf(o,r);dw(n,u,i);v=t;return}function dw(n,e,r){n=n|0;e=e|0;r=r|0;_w(n+8|0,+l[e>>3],+l[r>>3]);t[n+24>>0]=1;return}function _w(n,e,r){n=n|0;e=+e;r=+r;l[n>>3]=e;l[n+8>>3]=r;return}function vw(){return 1472}function pw(n,e){n=+n;e=+e;return mw(n,e)|0}function mw(n,e){n=+n;e=+e;var r=0,t=0,i=0,o=0,a=0,f=0,c=0;t=v;v=v+16|0;a=t+4|0;f=t+8|0;c=t;i=Dg(8)|0;r=i;o=GE(16)|0;Jf(a,n);n=+Zf(a,n);Jf(f,e);_w(o,n,+Zf(f,e));f=r+4|0;u[f>>2]=o;o=GE(8)|0;f=u[f>>2]|0;u[c>>2]=0;u[a>>2]=u[c>>2];bw(o,f,a);u[i>>2]=o;v=t;return r|0}function bw(n,e,r){n=n|0;e=e|0;r=r|0;u[n>>2]=e;r=GE(16)|0;u[r+4>>2]=0;u[r+8>>2]=0;u[r>>2]=1452;u[r+12>>2]=e;u[n+4>>2]=r;return}function hw(n){n=n|0;WE(n);XE(n);return}function yw(n){n=n|0;n=u[n+12>>2]|0;if(n|0)XE(n);return}function ww(n){n=n|0;XE(n);return}function Mw(){var n=0;if(!(t[7928]|0)){kw(10488);xn(59,10488,b|0)|0;n=7928;u[n>>2]=1;u[n+4>>2]=0}if(!(Ja(10488)|0))kw(10488);return 10488}function kw(n){n=n|0;Aw(n);cy(n,60);return}function gw(n){n=n|0;Tw(n+24|0);return}function Tw(n){n=n|0;var e=0,r=0,t=0;r=u[n>>2]|0;t=r;if(r|0){n=n+4|0;e=u[n>>2]|0;if((e|0)!=(r|0))u[n>>2]=e+(~((e+-8-t|0)>>>3)<<3);XE(r)}return}function Aw(n){n=n|0;var e=0;e=$a()|0;rf(n,5,6,e,Rw()|0,0);u[n+24>>2]=0;u[n+28>>2]=0;u[n+32>>2]=0;return}function Sw(n){n=n|0;Ew(n);return}function Ew(n){n=n|0;Cw(n);return}function Cw(n){n=n|0;Lw(n+8|0);t[n+24>>0]=1;return}function Lw(n){n=n|0;u[n>>2]=0;u[n+4>>2]=0;u[n+8>>2]=0;u[n+12>>2]=0;return}function Rw(){return 1492}function Pw(){return Bw()|0}function Bw(){var n=0,e=0,r=0,t=0,i=0,o=0,a=0;e=v;v=v+16|0;i=e+4|0;a=e;r=Dg(8)|0;n=r;t=GE(16)|0;Lw(t);o=n+4|0;u[o>>2]=t;t=GE(8)|0;o=u[o>>2]|0;u[a>>2]=0;u[i>>2]=u[a>>2];bw(t,o,i);u[r>>2]=t;v=e;return n|0}function Ow(){var n=0;if(!(t[7936]|0)){Dw(10524);xn(25,10524,b|0)|0;n=7936;u[n>>2]=1;u[n+4>>2]=0}return 10524}function Nw(n,e){n=n|0;e=e|0;u[n>>2]=Iw()|0;u[n+4>>2]=Fw()|0;u[n+12>>2]=e;u[n+8>>2]=xw()|0;u[n+32>>2]=7;return}function Iw(){return 11700}function Fw(){return 1484}function xw(){return Oy()|0}function Uw(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;if((Dm(t,896)|0)==512){if(r|0){Hw(r);XE(r)}}else if(e|0)XE(e);return}function Hw(n){n=n|0;n=u[n+4>>2]|0;if(n|0)qE(n);return}function Dw(n){n=n|0;Rf(n);return}function Ww(n,e,r){n=n|0;e=e|0;r=r|0;n=Ba(e)|0;e=Yw(r)|0;r=Vw(r,0)|0;CM(n,e,r,jw()|0,0);return}function Yw(n){n=n|0;return n|0}function Vw(n,e){n=n|0;e=e|0;var r=0,t=0,i=0,o=0,a=0,f=0,c=0;f=v;v=v+16|0;i=f;o=f+4|0;u[i>>2]=n;c=jw()|0;a=c+24|0;e=Wa(e,4)|0;u[o>>2]=e;r=c+28|0;t=u[r>>2]|0;if(t>>>0<(u[c+32>>2]|0)>>>0){Qw(t,n,e);e=(u[r>>2]|0)+8|0;u[r>>2]=e}else{$w(a,i,o);e=u[r>>2]|0}v=f;return(e-(u[a>>2]|0)>>3)+-1|0}function jw(){var n=0,e=0;if(!(t[7944]|0)){qw(10568);xn(61,10568,b|0)|0;e=7944;u[e>>2]=1;u[e+4>>2]=0}if(!(Ja(10568)|0)){n=10568;e=n+36|0;do{u[n>>2]=0;n=n+4|0}while((n|0)<(e|0));qw(10568)}return 10568}function qw(n){n=n|0;Kw(n);return}function zw(n){n=n|0;Gw(n+24|0);return}function Gw(n){n=n|0;var e=0,r=0,t=0;r=u[n>>2]|0;t=r;if(r|0){n=n+4|0;e=u[n>>2]|0;if((e|0)!=(r|0))u[n>>2]=e+(~((e+-8-t|0)>>>3)<<3);XE(r)}return}function Kw(n){n=n|0;var e=0;e=$a()|0;rf(n,1,17,e,Xl()|0,0);u[n+24>>2]=0;u[n+28>>2]=0;u[n+32>>2]=0;return}function Xw(n){n=n|0;return Zw(u[(Jw(n)|0)>>2]|0)|0}function Jw(n){n=n|0;return(u[(jw()|0)+24>>2]|0)+(n<<3)|0}function Zw(n){n=n|0;return $l(EL[n&7]()|0)|0}function Qw(n,e,r){n=n|0;e=e|0;r=r|0;u[n>>2]=e;u[n+4>>2]=r;return}function $w(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0,f=0,c=0,l=0,s=0;f=v;v=v+32|0;i=f;o=n+4|0;a=((u[o>>2]|0)-(u[n>>2]|0)>>3)+1|0;t=nM(n)|0;if(t>>>0<a>>>0)DE(n);else{c=u[n>>2]|0;s=(u[n+8>>2]|0)-c|0;l=s>>2;eM(i,s>>3>>>0<t>>>1>>>0?l>>>0<a>>>0?a:l:t,(u[o>>2]|0)-c>>3,n+8|0);a=i+8|0;Qw(u[a>>2]|0,u[e>>2]|0,u[r>>2]|0);u[a>>2]=(u[a>>2]|0)+8;rM(n,i);tM(i);v=f;return}}function nM(n){n=n|0;return 536870911}function eM(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;var i=0;u[n+12>>2]=0;u[n+16>>2]=t;do{if(e){if(e>>>0>536870911)Xn();else{i=GE(e<<3)|0;break}}else i=0}while(0);u[n>>2]=i;t=i+(r<<3)|0;u[n+8>>2]=t;u[n+4>>2]=t;u[n+12>>2]=i+(e<<3);return}function rM(n,e){n=n|0;e=e|0;var r=0,t=0,i=0,o=0,a=0;t=u[n>>2]|0;a=n+4|0;o=e+4|0;i=(u[a>>2]|0)-t|0;r=(u[o>>2]|0)+(0-(i>>3)<<3)|0;u[o>>2]=r;if((i|0)>0){iC(r|0,t|0,i|0)|0;t=o;r=u[o>>2]|0}else t=o;o=u[n>>2]|0;u[n>>2]=r;u[t>>2]=o;o=e+8|0;i=u[a>>2]|0;u[a>>2]=u[o>>2];u[o>>2]=i;o=n+8|0;a=e+12|0;n=u[o>>2]|0;u[o>>2]=u[a>>2];u[a>>2]=n;u[e>>2]=u[t>>2];return}function tM(n){n=n|0;var e=0,r=0,t=0;e=u[n+4>>2]|0;r=n+8|0;t=u[r>>2]|0;if((t|0)!=(e|0))u[r>>2]=t+(~((t+-8-e|0)>>>3)<<3);n=u[n>>2]|0;if(n|0)XE(n);return}function iM(){uM();return}function uM(){oM(10604);return}function oM(n){n=n|0;aM(n,4955);return}function aM(n,e){n=n|0;e=e|0;var r=0;r=fM()|0;u[n>>2]=r;cM(r,e);lM(u[n>>2]|0);return}function fM(){var n=0;if(!(t[7952]|0)){wM(10612);xn(25,10612,b|0)|0;n=7952;u[n>>2]=1;u[n+4>>2]=0}return 10612}function cM(n,e){n=n|0;e=e|0;u[n>>2]=pM()|0;u[n+4>>2]=mM()|0;u[n+12>>2]=e;u[n+8>>2]=bM()|0;u[n+32>>2]=8;return}function lM(n){n=n|0;var e=0,r=0;e=v;v=v+16|0;r=e;sM()|0;u[r>>2]=n;dM(10608,r);v=e;return}function sM(){if(!(t[11714]|0)){u[2652]=0;xn(62,10608,b|0)|0;t[11714]=1}return 10608}function dM(n,e){n=n|0;e=e|0;var r=0;r=GE(8)|0;u[r+4>>2]=u[e>>2];u[r>>2]=u[n>>2];u[n>>2]=r;return}function _M(n){n=n|0;vM(n);return}function vM(n){n=n|0;var e=0,r=0;e=u[n>>2]|0;if(e|0)do{r=e;e=u[e>>2]|0;XE(r)}while((e|0)!=0);u[n>>2]=0;return}function pM(){return 11715}function mM(){return 1496}function bM(){return Ym()|0}function hM(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;if((Dm(t,896)|0)==512){if(r|0){yM(r);XE(r)}}else if(e|0)XE(e);return}function yM(n){n=n|0;n=u[n+4>>2]|0;if(n|0)qE(n);return}function wM(n){n=n|0;Rf(n);return}function MM(n,e){n=n|0;e=e|0;var r=0,t=0;sM()|0;r=u[2652]|0;n:do{if(r|0){while(1){t=u[r+4>>2]|0;if(t|0?(tE(kM(t)|0,n)|0)==0:0)break;r=u[r>>2]|0;if(!r)break n}gM(t,e)}}while(0);return}function kM(n){n=n|0;return u[n+12>>2]|0}function gM(n,e){n=n|0;e=e|0;var r=0;n=n+36|0;r=u[n>>2]|0;if(r|0){Qi(r);XE(r)}r=GE(4)|0;ho(r,e);u[n>>2]=r;return}function TM(){if(!(t[11716]|0)){u[2664]=0;xn(63,10656,b|0)|0;t[11716]=1}return 10656}function AM(){var n=0;if(!(t[11717]|0)){SM();u[2665]=1504;t[11717]=1;n=1504}else n=u[2665]|0;return n|0}function SM(){if(!(t[11740]|0)){t[11718]=Wa(Wa(8,0)|0,0)|0;t[11719]=Wa(Wa(0,0)|0,0)|0;t[11720]=Wa(Wa(0,16)|0,0)|0;t[11721]=Wa(Wa(8,0)|0,0)|0;t[11722]=Wa(Wa(0,0)|0,0)|0;t[11723]=Wa(Wa(8,0)|0,0)|0;t[11724]=Wa(Wa(0,0)|0,0)|0;t[11725]=Wa(Wa(8,0)|0,0)|0;t[11726]=Wa(Wa(0,0)|0,0)|0;t[11727]=Wa(Wa(8,0)|0,0)|0;t[11728]=Wa(Wa(0,0)|0,0)|0;t[11729]=Wa(Wa(0,0)|0,32)|0;t[11730]=Wa(Wa(0,0)|0,32)|0;t[11740]=1}return}function EM(){return 1572}function CM(n,e,r,t,i){n=n|0;e=e|0;r=r|0;t=t|0;i=i|0;var o=0,a=0,f=0,c=0,l=0,s=0;o=v;v=v+32|0;s=o+16|0;l=o+12|0;c=o+8|0;f=o+4|0;a=o;u[s>>2]=n;u[l>>2]=e;u[c>>2]=r;u[f>>2]=t;u[a>>2]=i;TM()|0;LM(10656,s,l,c,f,a);v=o;return}function LM(n,e,r,t,i,o){n=n|0;e=e|0;r=r|0;t=t|0;i=i|0;o=o|0;var a=0;a=GE(24)|0;Da(a+4|0,u[e>>2]|0,u[r>>2]|0,u[t>>2]|0,u[i>>2]|0,u[o>>2]|0);u[a>>2]=u[n>>2];u[n>>2]=a;return}function RM(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0,f=0,c=0,l=0,s=0,d=0,_=0,p=0,m=0,b=0,h=0,y=0,w=0;w=v;v=v+32|0;m=w+20|0;b=w+8|0;h=w+4|0;y=w;e=u[e>>2]|0;if(e|0){p=m+4|0;c=m+8|0;l=b+4|0;s=b+8|0;d=b+8|0;_=m+8|0;do{a=e+4|0;f=PM(a)|0;if(f|0){i=BM(f)|0;u[m>>2]=0;u[p>>2]=0;u[c>>2]=0;t=(OM(f)|0)+1|0;NM(m,t);if(t|0)while(1){t=t+-1|0;bS(b,u[i>>2]|0);o=u[p>>2]|0;if(o>>>0<(u[_>>2]|0)>>>0){u[o>>2]=u[b>>2];u[p>>2]=(u[p>>2]|0)+4}else IM(m,b);if(!t)break;else i=i+4|0}t=FM(f)|0;u[b>>2]=0;u[l>>2]=0;u[s>>2]=0;n:do{if(u[t>>2]|0){i=0;o=0;while(1){if((i|0)==(o|0))xM(b,t);else{u[i>>2]=u[t>>2];u[l>>2]=(u[l>>2]|0)+4}t=t+4|0;if(!(u[t>>2]|0))break n;i=u[l>>2]|0;o=u[d>>2]|0}}}while(0);u[h>>2]=UM(a)|0;u[y>>2]=Ja(f)|0;HM(r,n,h,y,m,b);DM(b);WM(m)}e=u[e>>2]|0}while((e|0)!=0)}v=w;return}function PM(n){n=n|0;return u[n+12>>2]|0}function BM(n){n=n|0;return u[n+12>>2]|0}function OM(n){n=n|0;return u[n+16>>2]|0}function NM(n,e){n=n|0;e=e|0;var r=0,t=0,i=0;i=v;v=v+32|0;r=i;t=u[n>>2]|0;if((u[n+8>>2]|0)-t>>2>>>0<e>>>0){wk(r,e,(u[n+4>>2]|0)-t>>2,n+8|0);Mk(n,r);kk(r)}v=i;return}function IM(n,e){n=n|0;e=e|0;var r=0,t=0,i=0,o=0,a=0,f=0,c=0,l=0;a=v;v=v+32|0;r=a;t=n+4|0;i=((u[t>>2]|0)-(u[n>>2]|0)>>2)+1|0;o=mk(n)|0;if(o>>>0<i>>>0)DE(n);else{f=u[n>>2]|0;l=(u[n+8>>2]|0)-f|0;c=l>>1;wk(r,l>>2>>>0<o>>>1>>>0?c>>>0<i>>>0?i:c:o,(u[t>>2]|0)-f>>2,n+8|0);o=r+8|0;u[u[o>>2]>>2]=u[e>>2];u[o>>2]=(u[o>>2]|0)+4;Mk(n,r);kk(r);v=a;return}}function FM(n){n=n|0;return u[n+8>>2]|0}function xM(n,e){n=n|0;e=e|0;var r=0,t=0,i=0,o=0,a=0,f=0,c=0,l=0;a=v;v=v+32|0;r=a;t=n+4|0;i=((u[t>>2]|0)-(u[n>>2]|0)>>2)+1|0;o=_k(n)|0;if(o>>>0<i>>>0)DE(n);else{f=u[n>>2]|0;l=(u[n+8>>2]|0)-f|0;c=l>>1;bk(r,l>>2>>>0<o>>>1>>>0?c>>>0<i>>>0?i:c:o,(u[t>>2]|0)-f>>2,n+8|0);o=r+8|0;u[u[o>>2]>>2]=u[e>>2];u[o>>2]=(u[o>>2]|0)+4;hk(n,r);yk(r);v=a;return}}function UM(n){n=n|0;return u[n>>2]|0}function HM(n,e,r,t,i,u){n=n|0;e=e|0;r=r|0;t=t|0;i=i|0;u=u|0;YM(n,e,r,t,i,u);return}function DM(n){n=n|0;var e=0,r=0,t=0;r=u[n>>2]|0;t=r;if(r|0){n=n+4|0;e=u[n>>2]|0;if((e|0)!=(r|0))u[n>>2]=e+(~((e+-4-t|0)>>>2)<<2);XE(r)}return}function WM(n){n=n|0;var e=0,r=0,t=0;r=u[n>>2]|0;t=r;if(r|0){n=n+4|0;e=u[n>>2]|0;if((e|0)!=(r|0))u[n>>2]=e+(~((e+-4-t|0)>>>2)<<2);XE(r)}return}function YM(n,e,r,t,i,o){n=n|0;e=e|0;r=r|0;t=t|0;i=i|0;o=o|0;var a=0,f=0,c=0,l=0,s=0,d=0;a=v;v=v+48|0;s=a+40|0;f=a+32|0;d=a+24|0;c=a+12|0;l=a;gS(f);n=ko(n)|0;u[d>>2]=u[e>>2];r=u[r>>2]|0;t=u[t>>2]|0;VM(c,i);jM(l,o);u[s>>2]=u[d>>2];qM(n,s,r,t,c,l);DM(l);WM(c);AS(f);v=a;return}function VM(n,e){n=n|0;e=e|0;var r=0,t=0;u[n>>2]=0;u[n+4>>2]=0;u[n+8>>2]=0;r=e+4|0;t=(u[r>>2]|0)-(u[e>>2]|0)>>2;if(t|0){vk(n,t);pk(n,u[e>>2]|0,u[r>>2]|0,t)}return}function jM(n,e){n=n|0;e=e|0;var r=0,t=0;u[n>>2]=0;u[n+4>>2]=0;u[n+8>>2]=0;r=e+4|0;t=(u[r>>2]|0)-(u[e>>2]|0)>>2;if(t|0){sk(n,t);dk(n,u[e>>2]|0,u[r>>2]|0,t)}return}function qM(n,e,r,t,i,o){n=n|0;e=e|0;r=r|0;t=t|0;i=i|0;o=o|0;var a=0,f=0,c=0,l=0,s=0,d=0;a=v;v=v+32|0;s=a+28|0;d=a+24|0;f=a+12|0;c=a;l=Ao(zM()|0)|0;u[d>>2]=u[e>>2];u[s>>2]=u[d>>2];e=GM(s)|0;r=KM(r)|0;t=XM(t)|0;u[f>>2]=u[i>>2];s=i+4|0;u[f+4>>2]=u[s>>2];d=i+8|0;u[f+8>>2]=u[d>>2];u[d>>2]=0;u[s>>2]=0;u[i>>2]=0;i=JM(f)|0;u[c>>2]=u[o>>2];s=o+4|0;u[c+4>>2]=u[s>>2];d=o+8|0;u[c+8>>2]=u[d>>2];u[d>>2]=0;u[s>>2]=0;u[o>>2]=0;Pn(0,l|0,n|0,e|0,r|0,t|0,i|0,ZM(c)|0)|0;DM(c);WM(f);v=a;return}function zM(){var n=0;if(!(t[7968]|0)){ck(10708);n=7968;u[n>>2]=1;u[n+4>>2]=0}return 10708}function GM(n){n=n|0;return ek(n)|0}function KM(n){n=n|0;return $M(n)|0}function XM(n){n=n|0;return $l(n)|0}function JM(n){n=n|0;return nk(n)|0}function ZM(n){n=n|0;return QM(n)|0}function QM(n){n=n|0;var e=0,r=0,t=0;t=(u[n+4>>2]|0)-(u[n>>2]|0)|0;r=t>>2;t=Dg(t+4|0)|0;u[t>>2]=r;if(r|0){e=0;do{u[t+4+(e<<2)>>2]=$M(u[(u[n>>2]|0)+(e<<2)>>2]|0)|0;e=e+1|0}while((e|0)!=(r|0))}return t|0}function $M(n){n=n|0;return n|0}function nk(n){n=n|0;var e=0,r=0,t=0;t=(u[n+4>>2]|0)-(u[n>>2]|0)|0;r=t>>2;t=Dg(t+4|0)|0;u[t>>2]=r;if(r|0){e=0;do{u[t+4+(e<<2)>>2]=ek((u[n>>2]|0)+(e<<2)|0)|0;e=e+1|0}while((e|0)!=(r|0))}return t|0}function ek(n){n=n|0;var e=0,r=0,t=0,i=0;i=v;v=v+32|0;e=i+12|0;r=i;t=ff(rk()|0)|0;if(!t)n=tk(n)|0;else{cf(e,t);lf(r,e);wS(n,r);n=df(e)|0}v=i;return n|0}function rk(){var n=0;if(!(t[7960]|0)){fk(10664);xn(25,10664,b|0)|0;n=7960;u[n>>2]=1;u[n+4>>2]=0}return 10664}function tk(n){n=n|0;var e=0,r=0,t=0,i=0,o=0,a=0,f=0;r=v;v=v+16|0;i=r+4|0;a=r;t=Dg(8)|0;e=t;f=GE(4)|0;u[f>>2]=u[n>>2];o=e+4|0;u[o>>2]=f;n=GE(8)|0;o=u[o>>2]|0;u[a>>2]=0;u[i>>2]=u[a>>2];ik(n,o,i);u[t>>2]=n;v=r;return e|0}function ik(n,e,r){n=n|0;e=e|0;r=r|0;u[n>>2]=e;r=GE(16)|0;u[r+4>>2]=0;u[r+8>>2]=0;u[r>>2]=1656;u[r+12>>2]=e;u[n+4>>2]=r;return}function uk(n){n=n|0;WE(n);XE(n);return}function ok(n){n=n|0;n=u[n+12>>2]|0;if(n|0)XE(n);return}function ak(n){n=n|0;XE(n);return}function fk(n){n=n|0;Rf(n);return}function ck(n){n=n|0;xo(n,lk()|0,5);return}function lk(){return 1676}function sk(n,e){n=n|0;e=e|0;var r=0;if((_k(n)|0)>>>0<e>>>0)DE(n);if(e>>>0>1073741823)Xn();else{r=GE(e<<2)|0;u[n+4>>2]=r;u[n>>2]=r;u[n+8>>2]=r+(e<<2);return}}function dk(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;t=n+4|0;n=r-e|0;if((n|0)>0){iC(u[t>>2]|0,e|0,n|0)|0;u[t>>2]=(u[t>>2]|0)+(n>>>2<<2)}return}function _k(n){n=n|0;return 1073741823}function vk(n,e){n=n|0;e=e|0;var r=0;if((mk(n)|0)>>>0<e>>>0)DE(n);if(e>>>0>1073741823)Xn();else{r=GE(e<<2)|0;u[n+4>>2]=r;u[n>>2]=r;u[n+8>>2]=r+(e<<2);return}}function pk(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;t=n+4|0;n=r-e|0;if((n|0)>0){iC(u[t>>2]|0,e|0,n|0)|0;u[t>>2]=(u[t>>2]|0)+(n>>>2<<2)}return}function mk(n){n=n|0;return 1073741823}function bk(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;var i=0;u[n+12>>2]=0;u[n+16>>2]=t;do{if(e){if(e>>>0>1073741823)Xn();else{i=GE(e<<2)|0;break}}else i=0}while(0);u[n>>2]=i;t=i+(r<<2)|0;u[n+8>>2]=t;u[n+4>>2]=t;u[n+12>>2]=i+(e<<2);return}function hk(n,e){n=n|0;e=e|0;var r=0,t=0,i=0,o=0,a=0;t=u[n>>2]|0;a=n+4|0;o=e+4|0;i=(u[a>>2]|0)-t|0;r=(u[o>>2]|0)+(0-(i>>2)<<2)|0;u[o>>2]=r;if((i|0)>0){iC(r|0,t|0,i|0)|0;t=o;r=u[o>>2]|0}else t=o;o=u[n>>2]|0;u[n>>2]=r;u[t>>2]=o;o=e+8|0;i=u[a>>2]|0;u[a>>2]=u[o>>2];u[o>>2]=i;o=n+8|0;a=e+12|0;n=u[o>>2]|0;u[o>>2]=u[a>>2];u[a>>2]=n;u[e>>2]=u[t>>2];return}function yk(n){n=n|0;var e=0,r=0,t=0;e=u[n+4>>2]|0;r=n+8|0;t=u[r>>2]|0;if((t|0)!=(e|0))u[r>>2]=t+(~((t+-4-e|0)>>>2)<<2);n=u[n>>2]|0;if(n|0)XE(n);return}function wk(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;var i=0;u[n+12>>2]=0;u[n+16>>2]=t;do{if(e){if(e>>>0>1073741823)Xn();else{i=GE(e<<2)|0;break}}else i=0}while(0);u[n>>2]=i;t=i+(r<<2)|0;u[n+8>>2]=t;u[n+4>>2]=t;u[n+12>>2]=i+(e<<2);return}function Mk(n,e){n=n|0;e=e|0;var r=0,t=0,i=0,o=0,a=0;t=u[n>>2]|0;a=n+4|0;o=e+4|0;i=(u[a>>2]|0)-t|0;r=(u[o>>2]|0)+(0-(i>>2)<<2)|0;u[o>>2]=r;if((i|0)>0){iC(r|0,t|0,i|0)|0;t=o;r=u[o>>2]|0}else t=o;o=u[n>>2]|0;u[n>>2]=r;u[t>>2]=o;o=e+8|0;i=u[a>>2]|0;u[a>>2]=u[o>>2];u[o>>2]=i;o=n+8|0;a=e+12|0;n=u[o>>2]|0;u[o>>2]=u[a>>2];u[a>>2]=n;u[e>>2]=u[t>>2];return}function kk(n){n=n|0;var e=0,r=0,t=0;e=u[n+4>>2]|0;r=n+8|0;t=u[r>>2]|0;if((t|0)!=(e|0))u[r>>2]=t+(~((t+-4-e|0)>>>2)<<2);n=u[n>>2]|0;if(n|0)XE(n);return}function gk(n,e,r,t,i){n=n|0;e=e|0;r=r|0;t=t|0;i=i|0;var o=0,a=0,f=0,c=0,l=0,s=0,d=0,_=0,p=0,m=0,b=0;b=v;v=v+32|0;s=b+20|0;d=b+12|0;l=b+16|0;_=b+4|0;p=b;m=b+8|0;f=AM()|0;o=u[f>>2]|0;a=u[o>>2]|0;if(a|0){c=u[f+8>>2]|0;f=u[f+4>>2]|0;while(1){bS(s,a);Tk(n,s,f,c);o=o+4|0;a=u[o>>2]|0;if(!a)break;else{c=c+1|0;f=f+1|0}}}o=EM()|0;a=u[o>>2]|0;if(a|0)do{bS(s,a);u[d>>2]=u[o+4>>2];Ak(e,s,d);o=o+8|0;a=u[o>>2]|0}while((a|0)!=0);o=u[(sM()|0)>>2]|0;if(o|0)do{e=u[o+4>>2]|0;bS(s,u[(Sk(e)|0)>>2]|0);u[d>>2]=kM(e)|0;Ek(r,s,d);o=u[o>>2]|0}while((o|0)!=0);bS(l,0);o=TM()|0;u[s>>2]=u[l>>2];RM(s,o,i);o=u[(sM()|0)>>2]|0;if(o|0){n=s+4|0;e=s+8|0;r=s+8|0;do{c=u[o+4>>2]|0;bS(d,u[(Sk(c)|0)>>2]|0);Lk(_,Ck(c)|0);a=u[_>>2]|0;if(a|0){u[s>>2]=0;u[n>>2]=0;u[e>>2]=0;do{bS(p,u[(Sk(u[a+4>>2]|0)|0)>>2]|0);f=u[n>>2]|0;if(f>>>0<(u[r>>2]|0)>>>0){u[f>>2]=u[p>>2];u[n>>2]=(u[n>>2]|0)+4}else IM(s,p);a=u[a>>2]|0}while((a|0)!=0);Rk(t,d,s);WM(s)}u[m>>2]=u[d>>2];l=Pk(c)|0;u[s>>2]=u[m>>2];RM(s,l,i);Ef(_);o=u[o>>2]|0}while((o|0)!=0)}v=b;return}function Tk(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;qk(n,e,r,t);return}function Ak(n,e,r){n=n|0;e=e|0;r=r|0;jk(n,e,r);return}function Sk(n){n=n|0;return n|0}function Ek(n,e,r){n=n|0;e=e|0;r=r|0;Hk(n,e,r);return}function Ck(n){n=n|0;return n+16|0}function Lk(n,e){n=n|0;e=e|0;var r=0,t=0,i=0,o=0,a=0,f=0,c=0;o=v;v=v+16|0;i=o+8|0;r=o;u[n>>2]=0;t=u[e>>2]|0;u[i>>2]=t;u[r>>2]=n;r=xk(r)|0;if(t|0){t=GE(12)|0;a=(Uk(i)|0)+4|0;n=u[a+4>>2]|0;e=t+4|0;u[e>>2]=u[a>>2];u[e+4>>2]=n;e=u[u[i>>2]>>2]|0;u[i>>2]=e;if(!e)n=t;else{e=t;while(1){n=GE(12)|0;c=(Uk(i)|0)+4|0;f=u[c+4>>2]|0;a=n+4|0;u[a>>2]=u[c>>2];u[a+4>>2]=f;u[e>>2]=n;a=u[u[i>>2]>>2]|0;u[i>>2]=a;if(!a)break;else e=n}}u[n>>2]=u[r>>2];u[r>>2]=t}v=o;return}function Rk(n,e,r){n=n|0;e=e|0;r=r|0;Bk(n,e,r);return}function Pk(n){n=n|0;return n+24|0}function Bk(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0,f=0;t=v;v=v+32|0;a=t+24|0;i=t+16|0;f=t+12|0;o=t;gS(i);n=ko(n)|0;u[f>>2]=u[e>>2];VM(o,r);u[a>>2]=u[f>>2];Ok(n,a,o);WM(o);AS(i);v=t;return}function Ok(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0,f=0;t=v;v=v+32|0;a=t+16|0;f=t+12|0;i=t;o=Ao(Nk()|0)|0;u[f>>2]=u[e>>2];u[a>>2]=u[f>>2];e=GM(a)|0;u[i>>2]=u[r>>2];a=r+4|0;u[i+4>>2]=u[a>>2];f=r+8|0;u[i+8>>2]=u[f>>2];u[f>>2]=0;u[a>>2]=0;u[r>>2]=0;En(0,o|0,n|0,e|0,JM(i)|0)|0;WM(i);v=t;return}function Nk(){var n=0;if(!(t[7976]|0)){Ik(10720);n=7976;u[n>>2]=1;u[n+4>>2]=0}return 10720}function Ik(n){n=n|0;xo(n,Fk()|0,2);return}function Fk(){return 1732}function xk(n){n=n|0;return u[n>>2]|0}function Uk(n){n=n|0;return u[n>>2]|0}function Hk(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0;t=v;v=v+32|0;o=t+16|0;i=t+8|0;a=t;gS(i);n=ko(n)|0;u[a>>2]=u[e>>2];r=u[r>>2]|0;u[o>>2]=u[a>>2];Dk(n,o,r);AS(i);v=t;return}function Dk(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0;t=v;v=v+16|0;o=t+4|0;a=t;i=Ao(Wk()|0)|0;u[a>>2]=u[e>>2];u[o>>2]=u[a>>2];e=GM(o)|0;En(0,i|0,n|0,e|0,KM(r)|0)|0;v=t;return}function Wk(){var n=0;if(!(t[7984]|0)){Yk(10732);n=7984;u[n>>2]=1;u[n+4>>2]=0}return 10732}function Yk(n){n=n|0;xo(n,Vk()|0,2);return}function Vk(){return 1744}function jk(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0;t=v;v=v+32|0;o=t+16|0;i=t+8|0;a=t;gS(i);n=ko(n)|0;u[a>>2]=u[e>>2];r=u[r>>2]|0;u[o>>2]=u[a>>2];Dk(n,o,r);AS(i);v=t;return}function qk(n,e,r,i){n=n|0;e=e|0;r=r|0;i=i|0;var o=0,a=0,f=0,c=0;o=v;v=v+32|0;f=o+16|0;a=o+8|0;c=o;gS(a);n=ko(n)|0;u[c>>2]=u[e>>2];r=t[r>>0]|0;i=t[i>>0]|0;u[f>>2]=u[c>>2];zk(n,f,r,i);AS(a);v=o;return}function zk(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;var i=0,o=0,a=0,f=0;i=v;v=v+16|0;a=i+4|0;f=i;o=Ao(Gk()|0)|0;u[f>>2]=u[e>>2];u[a>>2]=u[f>>2];e=GM(a)|0;r=Kk(r)|0;te(0,o|0,n|0,e|0,r|0,Kk(t)|0)|0;v=i;return}function Gk(){var n=0;if(!(t[7992]|0)){Jk(10744);n=7992;u[n>>2]=1;u[n+4>>2]=0}return 10744}function Kk(n){n=n|0;return Xk(n)|0}function Xk(n){n=n|0;return n&255|0}function Jk(n){n=n|0;xo(n,Zk()|0,3);return}function Zk(){return 1756}function Qk(n,e,r){n=n|0;e=e|0;r=r|0;var i=0,o=0,a=0,f=0,c=0,l=0,s=0,d=0,_=0,p=0;p=v;v=v+32|0;c=p+8|0;l=p+4|0;s=p+20|0;d=p;qc(n,0);i=yS(e)|0;u[c>>2]=0;_=c+4|0;u[_>>2]=0;u[c+8>>2]=0;switch(i<<24>>24){case 0:{t[s>>0]=0;$k(l,r,s);ng(n,l)|0;$i(l);break}case 8:{_=hS(e)|0;t[s>>0]=8;bS(d,u[_+4>>2]|0);eg(l,r,s,d,_+8|0);ng(n,l)|0;$i(l);break}case 9:{a=hS(e)|0;e=u[a+4>>2]|0;if(e|0){f=c+8|0;o=a+12|0;while(1){e=e+-1|0;bS(l,u[o>>2]|0);i=u[_>>2]|0;if(i>>>0<(u[f>>2]|0)>>>0){u[i>>2]=u[l>>2];u[_>>2]=(u[_>>2]|0)+4}else IM(c,l);if(!e)break;else o=o+4|0}}t[s>>0]=9;bS(d,u[a+8>>2]|0);rg(l,r,s,d,c);ng(n,l)|0;$i(l);break}default:{_=hS(e)|0;t[s>>0]=i;bS(d,u[_+4>>2]|0);tg(l,r,s,d);ng(n,l)|0;$i(l)}}WM(c);v=p;return}function $k(n,e,r){n=n|0;e=e|0;r=r|0;var i=0,u=0;i=v;v=v+16|0;u=i;gS(u);e=ko(e)|0;bg(n,e,t[r>>0]|0);AS(u);v=i;return}function ng(n,e){n=n|0;e=e|0;var r=0;r=u[n>>2]|0;if(r|0)ie(r|0);u[n>>2]=u[e>>2];u[e>>2]=0;return n|0}function eg(n,e,r,i,o){n=n|0;e=e|0;r=r|0;i=i|0;o=o|0;var a=0,f=0,c=0,l=0;a=v;v=v+32|0;c=a+16|0;f=a+8|0;l=a;gS(f);e=ko(e)|0;r=t[r>>0]|0;u[l>>2]=u[i>>2];o=u[o>>2]|0;u[c>>2]=u[l>>2];_g(n,e,r,c,o);AS(f);v=a;return}function rg(n,e,r,i,o){n=n|0;e=e|0;r=r|0;i=i|0;o=o|0;var a=0,f=0,c=0,l=0,s=0;a=v;v=v+32|0;l=a+24|0;f=a+16|0;s=a+12|0;c=a;gS(f);e=ko(e)|0;r=t[r>>0]|0;u[s>>2]=u[i>>2];VM(c,o);u[l>>2]=u[s>>2];cg(n,e,r,l,c);WM(c);AS(f);v=a;return}function tg(n,e,r,i){n=n|0;e=e|0;r=r|0;i=i|0;var o=0,a=0,f=0,c=0;o=v;v=v+32|0;f=o+16|0;a=o+8|0;c=o;gS(a);e=ko(e)|0;r=t[r>>0]|0;u[c>>2]=u[i>>2];u[f>>2]=u[c>>2];ig(n,e,r,f);AS(a);v=o;return}function ig(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;var i=0,o=0,a=0,f=0;i=v;v=v+16|0;o=i+4|0;f=i;a=Ao(ug()|0)|0;r=Kk(r)|0;u[f>>2]=u[t>>2];u[o>>2]=u[f>>2];og(n,En(0,a|0,e|0,r|0,GM(o)|0)|0);v=i;return}function ug(){var n=0;if(!(t[8e3]|0)){ag(10756);n=8e3;u[n>>2]=1;u[n+4>>2]=0}return 10756}function og(n,e){n=n|0;e=e|0;qc(n,e);return}function ag(n){n=n|0;xo(n,fg()|0,2);return}function fg(){return 1772}function cg(n,e,r,t,i){n=n|0;e=e|0;r=r|0;t=t|0;i=i|0;var o=0,a=0,f=0,c=0,l=0;o=v;v=v+32|0;c=o+16|0;l=o+12|0;a=o;f=Ao(lg()|0)|0;r=Kk(r)|0;u[l>>2]=u[t>>2];u[c>>2]=u[l>>2];t=GM(c)|0;u[a>>2]=u[i>>2];c=i+4|0;u[a+4>>2]=u[c>>2];l=i+8|0;u[a+8>>2]=u[l>>2];u[l>>2]=0;u[c>>2]=0;u[i>>2]=0;og(n,te(0,f|0,e|0,r|0,t|0,JM(a)|0)|0);WM(a);v=o;return}function lg(){var n=0;if(!(t[8008]|0)){sg(10768);n=8008;u[n>>2]=1;u[n+4>>2]=0}return 10768}function sg(n){n=n|0;xo(n,dg()|0,3);return}function dg(){return 1784}function _g(n,e,r,t,i){n=n|0;e=e|0;r=r|0;t=t|0;i=i|0;var o=0,a=0,f=0,c=0;o=v;v=v+16|0;f=o+4|0;c=o;a=Ao(vg()|0)|0;r=Kk(r)|0;u[c>>2]=u[t>>2];u[f>>2]=u[c>>2];t=GM(f)|0;og(n,te(0,a|0,e|0,r|0,t|0,XM(i)|0)|0);v=o;return}function vg(){var n=0;if(!(t[8016]|0)){pg(10780);n=8016;u[n>>2]=1;u[n+4>>2]=0}return 10780}function pg(n){n=n|0;xo(n,mg()|0,3);return}function mg(){return 1800}function bg(n,e,r){n=n|0;e=e|0;r=r|0;var t=0;t=Ao(hg()|0)|0;og(n,ue(0,t|0,e|0,Kk(r)|0)|0);return}function hg(){var n=0;if(!(t[8024]|0)){yg(10792);n=8024;u[n>>2]=1;u[n+4>>2]=0}return 10792}function yg(n){n=n|0;xo(n,wg()|0,1);return}function wg(){return 1816}function Mg(){kg();gg();Tg();return}function kg(){u[2702]=KE(65536)|0;return}function gg(){Gg(10856);return}function Tg(){Ag(10816);return}function Ag(n){n=n|0;Sg(n,5044);Eg(n)|0;return}function Sg(n,e){n=n|0;e=e|0;var r=0;r=rk()|0;u[n>>2]=r;Wg(r,e);lM(u[n>>2]|0);return}function Eg(n){n=n|0;var e=0;e=u[n>>2]|0;ty(e,Cg()|0);return n|0}function Cg(){var n=0;if(!(t[8032]|0)){Lg(10820);xn(64,10820,b|0)|0;n=8032;u[n>>2]=1;u[n+4>>2]=0}if(!(Ja(10820)|0))Lg(10820);return 10820}function Lg(n){n=n|0;Bg(n);cy(n,25);return}function Rg(n){n=n|0;Pg(n+24|0);return}function Pg(n){n=n|0;var e=0,r=0,t=0;r=u[n>>2]|0;t=r;if(r|0){n=n+4|0;e=u[n>>2]|0;if((e|0)!=(r|0))u[n>>2]=e+(~((e+-8-t|0)>>>3)<<3);XE(r)}return}function Bg(n){n=n|0;var e=0;e=$a()|0;rf(n,5,18,e,xg()|0,1);u[n+24>>2]=0;u[n+28>>2]=0;u[n+32>>2]=0;return}function Og(n,e){n=n|0;e=e|0;Ng(n,e);return}function Ng(n,e){n=n|0;e=e|0;var r=0,t=0,i=0;r=v;v=v+16|0;t=r;i=r+4|0;sl(i,e);u[t>>2]=dl(i,e)|0;Ig(n,t);v=r;return}function Ig(n,e){n=n|0;e=e|0;Fg(n+4|0,u[e>>2]|0);t[n+8>>0]=1;return}function Fg(n,e){n=n|0;e=e|0;u[n>>2]=e;return}function xg(){return 1824}function Ug(n){n=n|0;return Hg(n)|0}function Hg(n){n=n|0;var e=0,r=0,t=0,i=0,o=0,a=0,f=0;r=v;v=v+16|0;i=r+4|0;a=r;t=Dg(8)|0;e=t;f=GE(4)|0;sl(i,n);Fg(f,dl(i,n)|0);o=e+4|0;u[o>>2]=f;n=GE(8)|0;o=u[o>>2]|0;u[a>>2]=0;u[i>>2]=u[a>>2];ik(n,o,i);u[t>>2]=n;v=r;return e|0}function Dg(n){n=n|0;var e=0,r=0;n=n+7&-8;if(n>>>0<=32768?(e=u[2701]|0,n>>>0<=(65536-e|0)>>>0):0){r=(u[2702]|0)+e|0;u[2701]=e+n;n=r}else{n=KE(n+8|0)|0;u[n>>2]=u[2703];u[2703]=n;n=n+8|0}return n|0}function Wg(n,e){n=n|0;e=e|0;u[n>>2]=Yg()|0;u[n+4>>2]=Vg()|0;u[n+12>>2]=e;u[n+8>>2]=jg()|0;u[n+32>>2]=9;return}function Yg(){return 11744}function Vg(){return 1832}function jg(){return Oy()|0}function qg(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;if((Dm(t,896)|0)==512){if(r|0){zg(r);XE(r)}}else if(e|0)XE(e);return}function zg(n){n=n|0;n=u[n+4>>2]|0;if(n|0)qE(n);return}function Gg(n){n=n|0;Kg(n,5052);Xg(n)|0;Jg(n,5058,26)|0;Zg(n,5069,1)|0;Qg(n,5077,10)|0;$g(n,5087,19)|0;eT(n,5094,27)|0;return}function Kg(n,e){n=n|0;e=e|0;var r=0;r=cS()|0;u[n>>2]=r;lS(r,e);lM(u[n>>2]|0);return}function Xg(n){n=n|0;var e=0;e=u[n>>2]|0;ty(e,KA()|0);return n|0}function Jg(n,e,r){n=n|0;e=e|0;r=r|0;EA(n,Ba(e)|0,r,0);return n|0}function Zg(n,e,r){n=n|0;e=e|0;r=r|0;cA(n,Ba(e)|0,r,0);return n|0}function Qg(n,e,r){n=n|0;e=e|0;r=r|0;UT(n,Ba(e)|0,r,0);return n|0}function $g(n,e,r){n=n|0;e=e|0;r=r|0;wT(n,Ba(e)|0,r,0);return n|0}function nT(n,e){n=n|0;e=e|0;var r=0,t=0;n:while(1){r=u[2703]|0;while(1){if((r|0)==(e|0))break n;t=u[r>>2]|0;u[2703]=t;if(!r)r=t;else break}XE(r)}u[2701]=n;return}function eT(n,e,r){n=n|0;e=e|0;r=r|0;rT(n,Ba(e)|0,r,0);return n|0}function rT(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;var i=0,o=0;o=u[n>>2]|0;i=tT()|0;n=iT(r)|0;xa(o,e,i,n,uT(r,t)|0,t);return}function tT(){var n=0,e=0;if(!(t[8040]|0)){dT(10860);xn(65,10860,b|0)|0;e=8040;u[e>>2]=1;u[e+4>>2]=0}if(!(Ja(10860)|0)){n=10860;e=n+36|0;do{u[n>>2]=0;n=n+4|0}while((n|0)<(e|0));dT(10860)}return 10860}function iT(n){n=n|0;return n|0}function uT(n,e){n=n|0;e=e|0;var r=0,t=0,i=0,o=0,a=0,f=0,c=0;f=v;v=v+16|0;i=f;o=f+4|0;u[i>>2]=n;c=tT()|0;a=c+24|0;e=Wa(e,4)|0;u[o>>2]=e;r=c+28|0;t=u[r>>2]|0;if(t>>>0<(u[c+32>>2]|0)>>>0){oT(t,n,e);e=(u[r>>2]|0)+8|0;u[r>>2]=e}else{aT(a,i,o);e=u[r>>2]|0}v=f;return(e-(u[a>>2]|0)>>3)+-1|0}function oT(n,e,r){n=n|0;e=e|0;r=r|0;u[n>>2]=e;u[n+4>>2]=r;return}function aT(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0,f=0,c=0,l=0,s=0;f=v;v=v+32|0;i=f;o=n+4|0;a=((u[o>>2]|0)-(u[n>>2]|0)>>3)+1|0;t=fT(n)|0;if(t>>>0<a>>>0)DE(n);else{c=u[n>>2]|0;s=(u[n+8>>2]|0)-c|0;l=s>>2;cT(i,s>>3>>>0<t>>>1>>>0?l>>>0<a>>>0?a:l:t,(u[o>>2]|0)-c>>3,n+8|0);a=i+8|0;oT(u[a>>2]|0,u[e>>2]|0,u[r>>2]|0);u[a>>2]=(u[a>>2]|0)+8;lT(n,i);sT(i);v=f;return}}function fT(n){n=n|0;return 536870911}function cT(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;var i=0;u[n+12>>2]=0;u[n+16>>2]=t;do{if(e){if(e>>>0>536870911)Xn();else{i=GE(e<<3)|0;break}}else i=0}while(0);u[n>>2]=i;t=i+(r<<3)|0;u[n+8>>2]=t;u[n+4>>2]=t;u[n+12>>2]=i+(e<<3);return}function lT(n,e){n=n|0;e=e|0;var r=0,t=0,i=0,o=0,a=0;t=u[n>>2]|0;a=n+4|0;o=e+4|0;i=(u[a>>2]|0)-t|0;r=(u[o>>2]|0)+(0-(i>>3)<<3)|0;u[o>>2]=r;if((i|0)>0){iC(r|0,t|0,i|0)|0;t=o;r=u[o>>2]|0}else t=o;o=u[n>>2]|0;u[n>>2]=r;u[t>>2]=o;o=e+8|0;i=u[a>>2]|0;u[a>>2]=u[o>>2];u[o>>2]=i;o=n+8|0;a=e+12|0;n=u[o>>2]|0;u[o>>2]=u[a>>2];u[a>>2]=n;u[e>>2]=u[t>>2];return}function sT(n){n=n|0;var e=0,r=0,t=0;e=u[n+4>>2]|0;r=n+8|0;t=u[r>>2]|0;if((t|0)!=(e|0))u[r>>2]=t+(~((t+-8-e|0)>>>3)<<3);n=u[n>>2]|0;if(n|0)XE(n);return}function dT(n){n=n|0;pT(n);return}function _T(n){n=n|0;vT(n+24|0);return}function vT(n){n=n|0;var e=0,r=0,t=0;r=u[n>>2]|0;t=r;if(r|0){n=n+4|0;e=u[n>>2]|0;if((e|0)!=(r|0))u[n>>2]=e+(~((e+-8-t|0)>>>3)<<3);XE(r)}return}function pT(n){n=n|0;var e=0;e=$a()|0;rf(n,1,11,e,mT()|0,2);u[n+24>>2]=0;u[n+28>>2]=0;u[n+32>>2]=0;return}function mT(){return 1840}function bT(n,e,r){n=n|0;e=e|0;r=r|0;yT(u[(hT(n)|0)>>2]|0,e,r);return}function hT(n){n=n|0;return(u[(tT()|0)+24>>2]|0)+(n<<3)|0}function yT(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,u=0;t=v;v=v+16|0;u=t+1|0;i=t;sl(u,e);e=dl(u,e)|0;sl(i,r);r=dl(i,r)|0;pL[n&31](e,r);v=t;return}function wT(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;var i=0,o=0;o=u[n>>2]|0;i=MT()|0;n=kT(r)|0;xa(o,e,i,n,gT(r,t)|0,t);return}function MT(){var n=0,e=0;if(!(t[8048]|0)){RT(10896);xn(66,10896,b|0)|0;e=8048;u[e>>2]=1;u[e+4>>2]=0}if(!(Ja(10896)|0)){n=10896;e=n+36|0;do{u[n>>2]=0;n=n+4|0}while((n|0)<(e|0));RT(10896)}return 10896}function kT(n){n=n|0;return n|0}function gT(n,e){n=n|0;e=e|0;var r=0,t=0,i=0,o=0,a=0,f=0,c=0;f=v;v=v+16|0;i=f;o=f+4|0;u[i>>2]=n;c=MT()|0;a=c+24|0;e=Wa(e,4)|0;u[o>>2]=e;r=c+28|0;t=u[r>>2]|0;if(t>>>0<(u[c+32>>2]|0)>>>0){TT(t,n,e);e=(u[r>>2]|0)+8|0;u[r>>2]=e}else{AT(a,i,o);e=u[r>>2]|0}v=f;return(e-(u[a>>2]|0)>>3)+-1|0}function TT(n,e,r){n=n|0;e=e|0;r=r|0;u[n>>2]=e;u[n+4>>2]=r;return}function AT(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0,f=0,c=0,l=0,s=0;f=v;v=v+32|0;i=f;o=n+4|0;a=((u[o>>2]|0)-(u[n>>2]|0)>>3)+1|0;t=ST(n)|0;if(t>>>0<a>>>0)DE(n);else{c=u[n>>2]|0;s=(u[n+8>>2]|0)-c|0;l=s>>2;ET(i,s>>3>>>0<t>>>1>>>0?l>>>0<a>>>0?a:l:t,(u[o>>2]|0)-c>>3,n+8|0);a=i+8|0;TT(u[a>>2]|0,u[e>>2]|0,u[r>>2]|0);u[a>>2]=(u[a>>2]|0)+8;CT(n,i);LT(i);v=f;return}}function ST(n){n=n|0;return 536870911}function ET(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;var i=0;u[n+12>>2]=0;u[n+16>>2]=t;do{if(e){if(e>>>0>536870911)Xn();else{i=GE(e<<3)|0;break}}else i=0}while(0);u[n>>2]=i;t=i+(r<<3)|0;u[n+8>>2]=t;u[n+4>>2]=t;u[n+12>>2]=i+(e<<3);return}function CT(n,e){n=n|0;e=e|0;var r=0,t=0,i=0,o=0,a=0;t=u[n>>2]|0;a=n+4|0;o=e+4|0;i=(u[a>>2]|0)-t|0;r=(u[o>>2]|0)+(0-(i>>3)<<3)|0;u[o>>2]=r;if((i|0)>0){iC(r|0,t|0,i|0)|0;t=o;r=u[o>>2]|0}else t=o;o=u[n>>2]|0;u[n>>2]=r;u[t>>2]=o;o=e+8|0;i=u[a>>2]|0;u[a>>2]=u[o>>2];u[o>>2]=i;o=n+8|0;a=e+12|0;n=u[o>>2]|0;u[o>>2]=u[a>>2];u[a>>2]=n;u[e>>2]=u[t>>2];return}function LT(n){n=n|0;var e=0,r=0,t=0;e=u[n+4>>2]|0;r=n+8|0;t=u[r>>2]|0;if((t|0)!=(e|0))u[r>>2]=t+(~((t+-8-e|0)>>>3)<<3);n=u[n>>2]|0;if(n|0)XE(n);return}function RT(n){n=n|0;OT(n);return}function PT(n){n=n|0;BT(n+24|0);return}function BT(n){n=n|0;var e=0,r=0,t=0;r=u[n>>2]|0;t=r;if(r|0){n=n+4|0;e=u[n>>2]|0;if((e|0)!=(r|0))u[n>>2]=e+(~((e+-8-t|0)>>>3)<<3);XE(r)}return}function OT(n){n=n|0;var e=0;e=$a()|0;rf(n,1,11,e,NT()|0,1);u[n+24>>2]=0;u[n+28>>2]=0;u[n+32>>2]=0;return}function NT(){return 1852}function IT(n,e){n=n|0;e=e|0;return xT(u[(FT(n)|0)>>2]|0,e)|0}function FT(n){n=n|0;return(u[(MT()|0)+24>>2]|0)+(n<<3)|0}function xT(n,e){n=n|0;e=e|0;var r=0,t=0;r=v;v=v+16|0;t=r;sl(t,e);e=dl(t,e)|0;e=$l(mL[n&31](e)|0)|0;v=r;return e|0}function UT(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;var i=0,o=0;o=u[n>>2]|0;i=HT()|0;n=DT(r)|0;xa(o,e,i,n,WT(r,t)|0,t);return}function HT(){var n=0,e=0;if(!(t[8056]|0)){KT(10932);xn(67,10932,b|0)|0;e=8056;u[e>>2]=1;u[e+4>>2]=0}if(!(Ja(10932)|0)){n=10932;e=n+36|0;do{u[n>>2]=0;n=n+4|0}while((n|0)<(e|0));KT(10932)}return 10932}function DT(n){n=n|0;return n|0}function WT(n,e){n=n|0;e=e|0;var r=0,t=0,i=0,o=0,a=0,f=0,c=0;f=v;v=v+16|0;i=f;o=f+4|0;u[i>>2]=n;c=HT()|0;a=c+24|0;e=Wa(e,4)|0;u[o>>2]=e;r=c+28|0;t=u[r>>2]|0;if(t>>>0<(u[c+32>>2]|0)>>>0){YT(t,n,e);e=(u[r>>2]|0)+8|0;u[r>>2]=e}else{VT(a,i,o);e=u[r>>2]|0}v=f;return(e-(u[a>>2]|0)>>3)+-1|0}function YT(n,e,r){n=n|0;e=e|0;r=r|0;u[n>>2]=e;u[n+4>>2]=r;return}function VT(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0,f=0,c=0,l=0,s=0;f=v;v=v+32|0;i=f;o=n+4|0;a=((u[o>>2]|0)-(u[n>>2]|0)>>3)+1|0;t=jT(n)|0;if(t>>>0<a>>>0)DE(n);else{c=u[n>>2]|0;s=(u[n+8>>2]|0)-c|0;l=s>>2;qT(i,s>>3>>>0<t>>>1>>>0?l>>>0<a>>>0?a:l:t,(u[o>>2]|0)-c>>3,n+8|0);a=i+8|0;YT(u[a>>2]|0,u[e>>2]|0,u[r>>2]|0);u[a>>2]=(u[a>>2]|0)+8;zT(n,i);GT(i);v=f;return}}function jT(n){n=n|0;return 536870911}function qT(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;var i=0;u[n+12>>2]=0;u[n+16>>2]=t;do{if(e){if(e>>>0>536870911)Xn();else{i=GE(e<<3)|0;break}}else i=0}while(0);u[n>>2]=i;t=i+(r<<3)|0;u[n+8>>2]=t;u[n+4>>2]=t;u[n+12>>2]=i+(e<<3);return}function zT(n,e){n=n|0;e=e|0;var r=0,t=0,i=0,o=0,a=0;t=u[n>>2]|0;a=n+4|0;o=e+4|0;i=(u[a>>2]|0)-t|0;r=(u[o>>2]|0)+(0-(i>>3)<<3)|0;u[o>>2]=r;if((i|0)>0){iC(r|0,t|0,i|0)|0;t=o;r=u[o>>2]|0}else t=o;o=u[n>>2]|0;u[n>>2]=r;u[t>>2]=o;o=e+8|0;i=u[a>>2]|0;u[a>>2]=u[o>>2];u[o>>2]=i;o=n+8|0;a=e+12|0;n=u[o>>2]|0;u[o>>2]=u[a>>2];u[a>>2]=n;u[e>>2]=u[t>>2];return}function GT(n){n=n|0;var e=0,r=0,t=0;e=u[n+4>>2]|0;r=n+8|0;t=u[r>>2]|0;if((t|0)!=(e|0))u[r>>2]=t+(~((t+-8-e|0)>>>3)<<3);n=u[n>>2]|0;if(n|0)XE(n);return}function KT(n){n=n|0;ZT(n);return}function XT(n){n=n|0;JT(n+24|0);return}function JT(n){n=n|0;var e=0,r=0,t=0;r=u[n>>2]|0;t=r;if(r|0){n=n+4|0;e=u[n>>2]|0;if((e|0)!=(r|0))u[n>>2]=e+(~((e+-8-t|0)>>>3)<<3);XE(r)}return}function ZT(n){n=n|0;var e=0;e=$a()|0;rf(n,1,7,e,QT()|0,2);u[n+24>>2]=0;u[n+28>>2]=0;u[n+32>>2]=0;return}function QT(){return 1860}function $T(n,e,r){n=n|0;e=e|0;r=r|0;return eA(u[(nA(n)|0)>>2]|0,e,r)|0}function nA(n){n=n|0;return(u[(HT()|0)+24>>2]|0)+(n<<3)|0}function eA(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0,f=0,c=0;t=v;v=v+32|0;a=t+12|0;o=t+8|0;f=t;c=t+16|0;i=t+4|0;rA(c,e);tA(f,c,e);Wc(i,r);r=Yc(i,r)|0;u[a>>2]=u[f>>2];PL[n&15](o,a,r);r=iA(o)|0;$i(o);Vc(i);v=t;return r|0}function rA(n,e){n=n|0;e=e|0;return}function tA(n,e,r){n=n|0;e=e|0;r=r|0;uA(n,r);return}function iA(n){n=n|0;return ko(n)|0}function uA(n,e){n=n|0;e=e|0;var r=0,t=0,i=0;i=v;v=v+16|0;r=i;t=e;if(!(t&1))u[n>>2]=u[e>>2];else{oA(r,0);Hn(t|0,r|0)|0;aA(n,r);fA(r)}v=i;return}function oA(n,e){n=n|0;e=e|0;Bo(n,e);u[n+4>>2]=0;t[n+8>>0]=0;return}function aA(n,e){n=n|0;e=e|0;u[n>>2]=u[e+4>>2];return}function fA(n){n=n|0;t[n+8>>0]=0;return}function cA(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;var i=0,o=0;o=u[n>>2]|0;i=lA()|0;n=sA(r)|0;xa(o,e,i,n,dA(r,t)|0,t);return}function lA(){var n=0,e=0;if(!(t[8064]|0)){yA(10968);xn(68,10968,b|0)|0;e=8064;u[e>>2]=1;u[e+4>>2]=0}if(!(Ja(10968)|0)){n=10968;e=n+36|0;do{u[n>>2]=0;n=n+4|0}while((n|0)<(e|0));yA(10968)}return 10968}function sA(n){n=n|0;return n|0}function dA(n,e){n=n|0;e=e|0;var r=0,t=0,i=0,o=0,a=0,f=0,c=0;f=v;v=v+16|0;i=f;o=f+4|0;u[i>>2]=n;c=lA()|0;a=c+24|0;e=Wa(e,4)|0;u[o>>2]=e;r=c+28|0;t=u[r>>2]|0;if(t>>>0<(u[c+32>>2]|0)>>>0){_A(t,n,e);e=(u[r>>2]|0)+8|0;u[r>>2]=e}else{vA(a,i,o);e=u[r>>2]|0}v=f;return(e-(u[a>>2]|0)>>3)+-1|0}function _A(n,e,r){n=n|0;e=e|0;r=r|0;u[n>>2]=e;u[n+4>>2]=r;return}function vA(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0,f=0,c=0,l=0,s=0;f=v;v=v+32|0;i=f;o=n+4|0;a=((u[o>>2]|0)-(u[n>>2]|0)>>3)+1|0;t=pA(n)|0;if(t>>>0<a>>>0)DE(n);else{c=u[n>>2]|0;s=(u[n+8>>2]|0)-c|0;l=s>>2;mA(i,s>>3>>>0<t>>>1>>>0?l>>>0<a>>>0?a:l:t,(u[o>>2]|0)-c>>3,n+8|0);a=i+8|0;_A(u[a>>2]|0,u[e>>2]|0,u[r>>2]|0);u[a>>2]=(u[a>>2]|0)+8;bA(n,i);hA(i);v=f;return}}function pA(n){n=n|0;return 536870911}function mA(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;var i=0;u[n+12>>2]=0;u[n+16>>2]=t;do{if(e){if(e>>>0>536870911)Xn();else{i=GE(e<<3)|0;break}}else i=0}while(0);u[n>>2]=i;t=i+(r<<3)|0;u[n+8>>2]=t;u[n+4>>2]=t;u[n+12>>2]=i+(e<<3);return}function bA(n,e){n=n|0;e=e|0;var r=0,t=0,i=0,o=0,a=0;t=u[n>>2]|0;a=n+4|0;o=e+4|0;i=(u[a>>2]|0)-t|0;r=(u[o>>2]|0)+(0-(i>>3)<<3)|0;u[o>>2]=r;if((i|0)>0){iC(r|0,t|0,i|0)|0;t=o;r=u[o>>2]|0}else t=o;o=u[n>>2]|0;u[n>>2]=r;u[t>>2]=o;o=e+8|0;i=u[a>>2]|0;u[a>>2]=u[o>>2];u[o>>2]=i;o=n+8|0;a=e+12|0;n=u[o>>2]|0;u[o>>2]=u[a>>2];u[a>>2]=n;u[e>>2]=u[t>>2];return}function hA(n){n=n|0;var e=0,r=0,t=0;e=u[n+4>>2]|0;r=n+8|0;t=u[r>>2]|0;if((t|0)!=(e|0))u[r>>2]=t+(~((t+-8-e|0)>>>3)<<3);n=u[n>>2]|0;if(n|0)XE(n);return}function yA(n){n=n|0;kA(n);return}function wA(n){n=n|0;MA(n+24|0);return}function MA(n){n=n|0;var e=0,r=0,t=0;r=u[n>>2]|0;t=r;if(r|0){n=n+4|0;e=u[n>>2]|0;if((e|0)!=(r|0))u[n>>2]=e+(~((e+-8-t|0)>>>3)<<3);XE(r)}return}function kA(n){n=n|0;var e=0;e=$a()|0;rf(n,1,1,e,gA()|0,5);u[n+24>>2]=0;u[n+28>>2]=0;u[n+32>>2]=0;return}function gA(){return 1872}function TA(n,e,r,t,i,o){n=n|0;e=e|0;r=r|0;t=t|0;i=i|0;o=o|0;SA(u[(AA(n)|0)>>2]|0,e,r,t,i,o);return}function AA(n){n=n|0;return(u[(lA()|0)+24>>2]|0)+(n<<3)|0}function SA(n,e,r,t,i,u){n=n|0;e=e|0;r=r|0;t=t|0;i=i|0;u=u|0;var o=0,a=0,f=0,c=0,l=0,s=0;o=v;v=v+32|0;a=o+16|0;f=o+12|0;c=o+8|0;l=o+4|0;s=o;Wc(a,e);e=Yc(a,e)|0;Wc(f,r);r=Yc(f,r)|0;Wc(c,t);t=Yc(c,t)|0;Wc(l,i);i=Yc(l,i)|0;Wc(s,u);u=Yc(s,u)|0;lL[n&1](e,r,t,i,u);Vc(s);Vc(l);Vc(c);Vc(f);Vc(a);v=o;return}function EA(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;var i=0,o=0;o=u[n>>2]|0;i=CA()|0;n=LA(r)|0;xa(o,e,i,n,RA(r,t)|0,t);return}function CA(){var n=0,e=0;if(!(t[8072]|0)){xA(11004);xn(69,11004,b|0)|0;e=8072;u[e>>2]=1;u[e+4>>2]=0}if(!(Ja(11004)|0)){n=11004;e=n+36|0;do{u[n>>2]=0;n=n+4|0}while((n|0)<(e|0));xA(11004)}return 11004}function LA(n){n=n|0;return n|0}function RA(n,e){n=n|0;e=e|0;var r=0,t=0,i=0,o=0,a=0,f=0,c=0;f=v;v=v+16|0;i=f;o=f+4|0;u[i>>2]=n;c=CA()|0;a=c+24|0;e=Wa(e,4)|0;u[o>>2]=e;r=c+28|0;t=u[r>>2]|0;if(t>>>0<(u[c+32>>2]|0)>>>0){PA(t,n,e);e=(u[r>>2]|0)+8|0;u[r>>2]=e}else{BA(a,i,o);e=u[r>>2]|0}v=f;return(e-(u[a>>2]|0)>>3)+-1|0}function PA(n,e,r){n=n|0;e=e|0;r=r|0;u[n>>2]=e;u[n+4>>2]=r;return}function BA(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0,f=0,c=0,l=0,s=0;f=v;v=v+32|0;i=f;o=n+4|0;a=((u[o>>2]|0)-(u[n>>2]|0)>>3)+1|0;t=OA(n)|0;if(t>>>0<a>>>0)DE(n);else{c=u[n>>2]|0;s=(u[n+8>>2]|0)-c|0;l=s>>2;NA(i,s>>3>>>0<t>>>1>>>0?l>>>0<a>>>0?a:l:t,(u[o>>2]|0)-c>>3,n+8|0);a=i+8|0;PA(u[a>>2]|0,u[e>>2]|0,u[r>>2]|0);u[a>>2]=(u[a>>2]|0)+8;IA(n,i);FA(i);v=f;return}}function OA(n){n=n|0;return 536870911}function NA(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;var i=0;u[n+12>>2]=0;u[n+16>>2]=t;do{if(e){if(e>>>0>536870911)Xn();else{i=GE(e<<3)|0;break}}else i=0}while(0);u[n>>2]=i;t=i+(r<<3)|0;u[n+8>>2]=t;u[n+4>>2]=t;u[n+12>>2]=i+(e<<3);return}function IA(n,e){n=n|0;e=e|0;var r=0,t=0,i=0,o=0,a=0;t=u[n>>2]|0;a=n+4|0;o=e+4|0;i=(u[a>>2]|0)-t|0;r=(u[o>>2]|0)+(0-(i>>3)<<3)|0;u[o>>2]=r;if((i|0)>0){iC(r|0,t|0,i|0)|0;t=o;r=u[o>>2]|0}else t=o;o=u[n>>2]|0;u[n>>2]=r;u[t>>2]=o;o=e+8|0;i=u[a>>2]|0;u[a>>2]=u[o>>2];u[o>>2]=i;o=n+8|0;a=e+12|0;n=u[o>>2]|0;u[o>>2]=u[a>>2];u[a>>2]=n;u[e>>2]=u[t>>2];return}function FA(n){n=n|0;var e=0,r=0,t=0;e=u[n+4>>2]|0;r=n+8|0;t=u[r>>2]|0;if((t|0)!=(e|0))u[r>>2]=t+(~((t+-8-e|0)>>>3)<<3);n=u[n>>2]|0;if(n|0)XE(n);return}function xA(n){n=n|0;DA(n);return}function UA(n){n=n|0;HA(n+24|0);return}function HA(n){n=n|0;var e=0,r=0,t=0;r=u[n>>2]|0;t=r;if(r|0){n=n+4|0;e=u[n>>2]|0;if((e|0)!=(r|0))u[n>>2]=e+(~((e+-8-t|0)>>>3)<<3);XE(r)}return}function DA(n){n=n|0;var e=0;e=$a()|0;rf(n,1,12,e,WA()|0,2);u[n+24>>2]=0;u[n+28>>2]=0;u[n+32>>2]=0;return}function WA(){return 1896}function YA(n,e,r){n=n|0;e=e|0;r=r|0;jA(u[(VA(n)|0)>>2]|0,e,r);return}function VA(n){n=n|0;return(u[(CA()|0)+24>>2]|0)+(n<<3)|0}function jA(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,u=0;t=v;v=v+16|0;u=t+4|0;i=t;qA(u,e);e=zA(u,e)|0;Wc(i,r);r=Yc(i,r)|0;pL[n&31](e,r);Vc(i);v=t;return}function qA(n,e){n=n|0;e=e|0;return}function zA(n,e){n=n|0;e=e|0;return GA(e)|0}function GA(n){n=n|0;return n|0}function KA(){var n=0;if(!(t[8080]|0)){XA(11040);xn(70,11040,b|0)|0;n=8080;u[n>>2]=1;u[n+4>>2]=0}if(!(Ja(11040)|0))XA(11040);return 11040}function XA(n){n=n|0;QA(n);cy(n,71);return}function JA(n){n=n|0;ZA(n+24|0);return}function ZA(n){n=n|0;var e=0,r=0,t=0;r=u[n>>2]|0;t=r;if(r|0){n=n+4|0;e=u[n>>2]|0;if((e|0)!=(r|0))u[n>>2]=e+(~((e+-8-t|0)>>>3)<<3);XE(r)}return}function QA(n){n=n|0;var e=0;e=$a()|0;rf(n,5,7,e,rS()|0,0);u[n+24>>2]=0;u[n+28>>2]=0;u[n+32>>2]=0;return}function $A(n){n=n|0;nS(n);return}function nS(n){n=n|0;eS(n);return}function eS(n){n=n|0;t[n+8>>0]=1;return}function rS(){return 1936}function tS(){return iS()|0}function iS(){var n=0,e=0,r=0,t=0,i=0,o=0,a=0;e=v;v=v+16|0;i=e+4|0;a=e;r=Dg(8)|0;n=r;o=n+4|0;u[o>>2]=GE(1)|0;t=GE(8)|0;o=u[o>>2]|0;u[a>>2]=0;u[i>>2]=u[a>>2];uS(t,o,i);u[r>>2]=t;v=e;return n|0}function uS(n,e,r){n=n|0;e=e|0;r=r|0;u[n>>2]=e;r=GE(16)|0;u[r+4>>2]=0;u[r+8>>2]=0;u[r>>2]=1916;u[r+12>>2]=e;u[n+4>>2]=r;return}function oS(n){n=n|0;WE(n);XE(n);return}function aS(n){n=n|0;n=u[n+12>>2]|0;if(n|0)XE(n);return}function fS(n){n=n|0;XE(n);return}function cS(){var n=0;if(!(t[8088]|0)){mS(11076);xn(25,11076,b|0)|0;n=8088;u[n>>2]=1;u[n+4>>2]=0}return 11076}function lS(n,e){n=n|0;e=e|0;u[n>>2]=sS()|0;u[n+4>>2]=dS()|0;u[n+12>>2]=e;u[n+8>>2]=_S()|0;u[n+32>>2]=10;return}function sS(){return 11745}function dS(){return 1940}function _S(){return Ym()|0}function vS(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;if((Dm(t,896)|0)==512){if(r|0){pS(r);XE(r)}}else if(e|0)XE(e);return}function pS(n){n=n|0;n=u[n+4>>2]|0;if(n|0)qE(n);return}function mS(n){n=n|0;Rf(n);return}function bS(n,e){n=n|0;e=e|0;u[n>>2]=e;return}function hS(n){n=n|0;return u[n>>2]|0}function yS(n){n=n|0;return t[u[n>>2]>>0]|0}function wS(n,e){n=n|0;e=e|0;var r=0,t=0;r=v;v=v+16|0;t=r;u[t>>2]=u[n>>2];MS(e,t)|0;v=r;return}function MS(n,e){n=n|0;e=e|0;var r=0;r=kS(u[n>>2]|0,e)|0;e=n+4|0;u[(u[e>>2]|0)+8>>2]=r;return u[(u[e>>2]|0)+8>>2]|0}function kS(n,e){n=n|0;e=e|0;var r=0,t=0;r=v;v=v+16|0;t=r;gS(t);n=ko(n)|0;e=TS(n,u[e>>2]|0)|0;AS(t);v=r;return e|0}function gS(n){n=n|0;u[n>>2]=u[2701];u[n+4>>2]=u[2703];return}function TS(n,e){n=n|0;e=e|0;var r=0;r=Ao(SS()|0)|0;return ue(0,r|0,n|0,XM(e)|0)|0}function AS(n){n=n|0;nT(u[n>>2]|0,u[n+4>>2]|0);return}function SS(){var n=0;if(!(t[8096]|0)){ES(11120);n=8096;u[n>>2]=1;u[n+4>>2]=0}return 11120}function ES(n){n=n|0;xo(n,CS()|0,1);return}function CS(){return 1948}function LS(){RS();return}function RS(){var n=0,e=0,r=0,i=0,a=0,f=0,c=0,l=0,s=0,d=0,_=0,p=0,m=0,b=0,h=0,y=0;h=v;v=v+16|0;_=h+4|0;p=h;Nn(65536,10804,u[2702]|0,10812);r=AM()|0;e=u[r>>2]|0;n=u[e>>2]|0;if(n|0){i=u[r+8>>2]|0;r=u[r+4>>2]|0;while(1){Yn(n|0,o[r>>0]|0|0,t[i>>0]|0);e=e+4|0;n=u[e>>2]|0;if(!n)break;else{i=i+1|0;r=r+1|0}}}n=EM()|0;e=u[n>>2]|0;if(e|0)do{Vn(e|0,u[n+4>>2]|0);n=n+8|0;e=u[n>>2]|0}while((e|0)!=0);Vn(PS()|0,5167);d=sM()|0;n=u[d>>2]|0;n:do{if(n|0){do{BS(u[n+4>>2]|0);n=u[n>>2]|0}while((n|0)!=0);n=u[d>>2]|0;if(n|0){s=d;do{while(1){a=n;n=u[n>>2]|0;a=u[a+4>>2]|0;if(!(OS(a)|0))break;u[p>>2]=s;u[_>>2]=u[p>>2];NS(d,_)|0;if(!n)break n}IS(a);s=u[s>>2]|0;e=FS(a)|0;f=Zn()|0;c=v;v=v+((1*(e<<2)|0)+15&-16)|0;l=v;v=v+((1*(e<<2)|0)+15&-16)|0;e=u[(Ck(a)|0)>>2]|0;if(e|0){r=c;i=l;while(1){u[r>>2]=u[(Sk(u[e+4>>2]|0)|0)>>2];u[i>>2]=u[e+8>>2];e=u[e>>2]|0;if(!e)break;else{r=r+4|0;i=i+4|0}}}y=Sk(a)|0;e=xS(a)|0;r=FS(a)|0;i=US(a)|0;Gn(y|0,e|0,c|0,l|0,r|0,i|0,kM(a)|0);Fn(f|0)}while((n|0)!=0)}}}while(0);n=u[(TM()|0)>>2]|0;if(n|0)do{y=n+4|0;d=PM(y)|0;a=FM(d)|0;f=BM(d)|0;c=(OM(d)|0)+1|0;l=HS(d)|0;s=DS(y)|0;d=Ja(d)|0;_=UM(y)|0;p=WS(y)|0;qn(0,a|0,f|0,c|0,l|0,s|0,d|0,_|0,p|0,YS(y)|0);n=u[n>>2]|0}while((n|0)!=0);n=u[(sM()|0)>>2]|0;n:do{if(n|0){e:while(1){e=u[n+4>>2]|0;if(e|0?(m=u[(Sk(e)|0)>>2]|0,b=u[(Pk(e)|0)>>2]|0,b|0):0){r=b;do{e=r+4|0;i=PM(e)|0;r:do{if(i|0)switch(Ja(i)|0){case 0:break e;case 4:case 3:case 2:{l=FM(i)|0;s=BM(i)|0;d=(OM(i)|0)+1|0;_=HS(i)|0;p=Ja(i)|0;y=UM(e)|0;qn(m|0,l|0,s|0,d|0,_|0,0,p|0,y|0,WS(e)|0,YS(e)|0);break r}case 1:{c=FM(i)|0;l=BM(i)|0;s=(OM(i)|0)+1|0;d=HS(i)|0;_=DS(e)|0;p=Ja(i)|0;y=UM(e)|0;qn(m|0,c|0,l|0,s|0,d|0,_|0,p|0,y|0,WS(e)|0,YS(e)|0);break r}case 5:{d=FM(i)|0;_=BM(i)|0;p=(OM(i)|0)+1|0;y=HS(i)|0;qn(m|0,d|0,_|0,p|0,y|0,VS(i)|0,Ja(i)|0,0,0,0);break r}default:break r}}while(0);r=u[r>>2]|0}while((r|0)!=0)}n=u[n>>2]|0;if(!n)break n}Xn()}}while(0);Kn();v=h;return}function PS(){return 11703}function BS(n){n=n|0;t[n+40>>0]=0;return}function OS(n){n=n|0;return(t[n+40>>0]|0)!=0|0}function NS(n,e){n=n|0;e=e|0;e=jS(e)|0;n=u[e>>2]|0;u[e>>2]=u[n>>2];XE(n);return u[e>>2]|0}function IS(n){n=n|0;t[n+40>>0]=1;return}function FS(n){n=n|0;return u[n+20>>2]|0}function xS(n){n=n|0;return u[n+8>>2]|0}function US(n){n=n|0;return u[n+32>>2]|0}function HS(n){n=n|0;return u[n+4>>2]|0}function DS(n){n=n|0;return u[n+4>>2]|0}function WS(n){n=n|0;return u[n+8>>2]|0}function YS(n){n=n|0;return u[n+16>>2]|0}function VS(n){n=n|0;return u[n+20>>2]|0}function jS(n){n=n|0;return u[n>>2]|0}function qS(n){n=n|0;var e=0,r=0,t=0,i=0,o=0,a=0,f=0,c=0,l=0,s=0,d=0,_=0,p=0,m=0,b=0,h=0,y=0,w=0,M=0,k=0,g=0;g=v;v=v+16|0;_=g;do{if(n>>>0<245){l=n>>>0<11?16:n+11&-8;n=l>>>3;d=u[2783]|0;r=d>>>n;if(r&3|0){e=(r&1^1)+n|0;n=11172+(e<<1<<2)|0;r=n+8|0;t=u[r>>2]|0;i=t+8|0;o=u[i>>2]|0;if((n|0)==(o|0))u[2783]=d&~(1<<e);else{u[o+12>>2]=n;u[r>>2]=o}k=e<<3;u[t+4>>2]=k|3;k=t+k+4|0;u[k>>2]=u[k>>2]|1;k=i;v=g;return k|0}s=u[2785]|0;if(l>>>0>s>>>0){if(r|0){e=2<<n;e=r<<n&(e|0-e);e=(e&0-e)+-1|0;a=e>>>12&16;e=e>>>a;r=e>>>5&8;e=e>>>r;i=e>>>2&4;e=e>>>i;n=e>>>1&2;e=e>>>n;t=e>>>1&1;t=(r|a|i|n|t)+(e>>>t)|0;e=11172+(t<<1<<2)|0;n=e+8|0;i=u[n>>2]|0;a=i+8|0;r=u[a>>2]|0;if((e|0)==(r|0)){n=d&~(1<<t);u[2783]=n}else{u[r+12>>2]=e;u[n>>2]=r;n=d}o=(t<<3)-l|0;u[i+4>>2]=l|3;t=i+l|0;u[t+4>>2]=o|1;u[t+o>>2]=o;if(s|0){i=u[2788]|0;e=s>>>3;r=11172+(e<<1<<2)|0;e=1<<e;if(!(n&e)){u[2783]=n|e;e=r;n=r+8|0}else{n=r+8|0;e=u[n>>2]|0}u[n>>2]=i;u[e+12>>2]=i;u[i+8>>2]=e;u[i+12>>2]=r}u[2785]=o;u[2788]=t;k=a;v=g;return k|0}f=u[2784]|0;if(f){r=(f&0-f)+-1|0;a=r>>>12&16;r=r>>>a;o=r>>>5&8;r=r>>>o;c=r>>>2&4;r=r>>>c;t=r>>>1&2;r=r>>>t;n=r>>>1&1;n=u[11436+((o|a|c|t|n)+(r>>>n)<<2)>>2]|0;r=(u[n+4>>2]&-8)-l|0;t=u[n+16+(((u[n+16>>2]|0)==0&1)<<2)>>2]|0;if(!t){c=n;o=r}else{do{a=(u[t+4>>2]&-8)-l|0;c=a>>>0<r>>>0;r=c?a:r;n=c?t:n;t=u[t+16+(((u[t+16>>2]|0)==0&1)<<2)>>2]|0}while((t|0)!=0);c=n;o=r}a=c+l|0;if(c>>>0<a>>>0){i=u[c+24>>2]|0;e=u[c+12>>2]|0;do{if((e|0)==(c|0)){n=c+20|0;e=u[n>>2]|0;if(!e){n=c+16|0;e=u[n>>2]|0;if(!e){r=0;break}}while(1){r=e+20|0;t=u[r>>2]|0;if(t|0){e=t;n=r;continue}r=e+16|0;t=u[r>>2]|0;if(!t)break;else{e=t;n=r}}u[n>>2]=0;r=e}else{r=u[c+8>>2]|0;u[r+12>>2]=e;u[e+8>>2]=r;r=e}}while(0);do{if(i|0){e=u[c+28>>2]|0;n=11436+(e<<2)|0;if((c|0)==(u[n>>2]|0)){u[n>>2]=r;if(!r){u[2784]=f&~(1<<e);break}}else{u[i+16+(((u[i+16>>2]|0)!=(c|0)&1)<<2)>>2]=r;if(!r)break}u[r+24>>2]=i;e=u[c+16>>2]|0;if(e|0){u[r+16>>2]=e;u[e+24>>2]=r}e=u[c+20>>2]|0;if(e|0){u[r+20>>2]=e;u[e+24>>2]=r}}}while(0);if(o>>>0<16){k=o+l|0;u[c+4>>2]=k|3;k=c+k+4|0;u[k>>2]=u[k>>2]|1}else{u[c+4>>2]=l|3;u[a+4>>2]=o|1;u[a+o>>2]=o;if(s|0){t=u[2788]|0;e=s>>>3;r=11172+(e<<1<<2)|0;e=1<<e;if(!(d&e)){u[2783]=d|e;e=r;n=r+8|0}else{n=r+8|0;e=u[n>>2]|0}u[n>>2]=t;u[e+12>>2]=t;u[t+8>>2]=e;u[t+12>>2]=r}u[2785]=o;u[2788]=a}k=c+8|0;v=g;return k|0}else d=l}else d=l}else d=l}else if(n>>>0<=4294967231){n=n+11|0;l=n&-8;c=u[2784]|0;if(c){t=0-l|0;n=n>>>8;if(n){if(l>>>0>16777215)f=31;else{d=(n+1048320|0)>>>16&8;M=n<<d;s=(M+520192|0)>>>16&4;M=M<<s;f=(M+245760|0)>>>16&2;f=14-(s|d|f)+(M<<f>>>15)|0;f=l>>>(f+7|0)&1|f<<1}}else f=0;r=u[11436+(f<<2)>>2]|0;n:do{if(!r){r=0;n=0;M=57}else{n=0;a=l<<((f|0)==31?0:25-(f>>>1)|0);o=0;while(1){i=(u[r+4>>2]&-8)-l|0;if(i>>>0<t>>>0)if(!i){n=r;t=0;i=r;M=61;break n}else{n=r;t=i}i=u[r+20>>2]|0;r=u[r+16+(a>>>31<<2)>>2]|0;o=(i|0)==0|(i|0)==(r|0)?o:i;i=(r|0)==0;if(i){r=o;M=57;break}else a=a<<((i^1)&1)}}}while(0);if((M|0)==57){if((r|0)==0&(n|0)==0){n=2<<f;n=c&(n|0-n);if(!n){d=l;break}d=(n&0-n)+-1|0;a=d>>>12&16;d=d>>>a;o=d>>>5&8;d=d>>>o;f=d>>>2&4;d=d>>>f;s=d>>>1&2;d=d>>>s;r=d>>>1&1;n=0;r=u[11436+((o|a|f|s|r)+(d>>>r)<<2)>>2]|0}if(!r){f=n;a=t}else{i=r;M=61}}if((M|0)==61)while(1){M=0;r=(u[i+4>>2]&-8)-l|0;d=r>>>0<t>>>0;r=d?r:t;n=d?i:n;i=u[i+16+(((u[i+16>>2]|0)==0&1)<<2)>>2]|0;if(!i){f=n;a=r;break}else{t=r;M=61}}if((f|0)!=0?a>>>0<((u[2785]|0)-l|0)>>>0:0){o=f+l|0;if(f>>>0>=o>>>0){k=0;v=g;return k|0}i=u[f+24>>2]|0;e=u[f+12>>2]|0;do{if((e|0)==(f|0)){n=f+20|0;e=u[n>>2]|0;if(!e){n=f+16|0;e=u[n>>2]|0;if(!e){e=0;break}}while(1){r=e+20|0;t=u[r>>2]|0;if(t|0){e=t;n=r;continue}r=e+16|0;t=u[r>>2]|0;if(!t)break;else{e=t;n=r}}u[n>>2]=0}else{k=u[f+8>>2]|0;u[k+12>>2]=e;u[e+8>>2]=k}}while(0);do{if(i){n=u[f+28>>2]|0;r=11436+(n<<2)|0;if((f|0)==(u[r>>2]|0)){u[r>>2]=e;if(!e){t=c&~(1<<n);u[2784]=t;break}}else{u[i+16+(((u[i+16>>2]|0)!=(f|0)&1)<<2)>>2]=e;if(!e){t=c;break}}u[e+24>>2]=i;n=u[f+16>>2]|0;if(n|0){u[e+16>>2]=n;u[n+24>>2]=e}n=u[f+20>>2]|0;if(n){u[e+20>>2]=n;u[n+24>>2]=e;t=c}else t=c}else t=c}while(0);do{if(a>>>0>=16){u[f+4>>2]=l|3;u[o+4>>2]=a|1;u[o+a>>2]=a;e=a>>>3;if(a>>>0<256){r=11172+(e<<1<<2)|0;n=u[2783]|0;e=1<<e;if(!(n&e)){u[2783]=n|e;e=r;n=r+8|0}else{n=r+8|0;e=u[n>>2]|0}u[n>>2]=o;u[e+12>>2]=o;u[o+8>>2]=e;u[o+12>>2]=r;break}e=a>>>8;if(e){if(a>>>0>16777215)e=31;else{M=(e+1048320|0)>>>16&8;k=e<<M;w=(k+520192|0)>>>16&4;k=k<<w;e=(k+245760|0)>>>16&2;e=14-(w|M|e)+(k<<e>>>15)|0;e=a>>>(e+7|0)&1|e<<1}}else e=0;r=11436+(e<<2)|0;u[o+28>>2]=e;n=o+16|0;u[n+4>>2]=0;u[n>>2]=0;n=1<<e;if(!(t&n)){u[2784]=t|n;u[r>>2]=o;u[o+24>>2]=r;u[o+12>>2]=o;u[o+8>>2]=o;break}n=a<<((e|0)==31?0:25-(e>>>1)|0);r=u[r>>2]|0;while(1){if((u[r+4>>2]&-8|0)==(a|0)){M=97;break}t=r+16+(n>>>31<<2)|0;e=u[t>>2]|0;if(!e){M=96;break}else{n=n<<1;r=e}}if((M|0)==96){u[t>>2]=o;u[o+24>>2]=r;u[o+12>>2]=o;u[o+8>>2]=o;break}else if((M|0)==97){M=r+8|0;k=u[M>>2]|0;u[k+12>>2]=o;u[M>>2]=o;u[o+8>>2]=k;u[o+12>>2]=r;u[o+24>>2]=0;break}}else{k=a+l|0;u[f+4>>2]=k|3;k=f+k+4|0;u[k>>2]=u[k>>2]|1}}while(0);k=f+8|0;v=g;return k|0}else d=l}else d=l}else d=-1}while(0);r=u[2785]|0;if(r>>>0>=d>>>0){e=r-d|0;n=u[2788]|0;if(e>>>0>15){k=n+d|0;u[2788]=k;u[2785]=e;u[k+4>>2]=e|1;u[k+e>>2]=e;u[n+4>>2]=d|3}else{u[2785]=0;u[2788]=0;u[n+4>>2]=r|3;k=n+r+4|0;u[k>>2]=u[k>>2]|1}k=n+8|0;v=g;return k|0}a=u[2786]|0;if(a>>>0>d>>>0){w=a-d|0;u[2786]=w;k=u[2789]|0;M=k+d|0;u[2789]=M;u[M+4>>2]=w|1;u[k+4>>2]=d|3;k=k+8|0;v=g;return k|0}if(!(u[2901]|0)){u[2903]=4096;u[2902]=4096;u[2904]=-1;u[2905]=-1;u[2906]=0;u[2894]=0;n=_&-16^1431655768;u[_>>2]=n;u[2901]=n;n=4096}else n=u[2903]|0;f=d+48|0;c=d+47|0;o=n+c|0;i=0-n|0;l=o&i;if(l>>>0<=d>>>0){k=0;v=g;return k|0}n=u[2893]|0;if(n|0?(s=u[2891]|0,_=s+l|0,_>>>0<=s>>>0|_>>>0>n>>>0):0){k=0;v=g;return k|0}n:do{if(!(u[2894]&4)){r=u[2789]|0;e:do{if(r){t=11580;while(1){n=u[t>>2]|0;if(n>>>0<=r>>>0?(b=t+4|0,(n+(u[b>>2]|0)|0)>>>0>r>>>0):0)break;n=u[t+8>>2]|0;if(!n){M=118;break e}else t=n}e=o-a&i;if(e>>>0<2147483647){n=fC(e|0)|0;if((n|0)==((u[t>>2]|0)+(u[b>>2]|0)|0)){if((n|0)!=(-1|0)){a=e;o=n;M=135;break n}}else{t=n;M=126}}else e=0}else M=118}while(0);do{if((M|0)==118){r=fC(0)|0;if((r|0)!=(-1|0)?(e=r,p=u[2902]|0,m=p+-1|0,e=((m&e|0)==0?0:(m+e&0-p)-e|0)+l|0,p=u[2891]|0,m=e+p|0,e>>>0>d>>>0&e>>>0<2147483647):0){b=u[2893]|0;if(b|0?m>>>0<=p>>>0|m>>>0>b>>>0:0){e=0;break}n=fC(e|0)|0;if((n|0)==(r|0)){a=e;o=r;M=135;break n}else{t=n;M=126}}else e=0}}while(0);do{if((M|0)==126){r=0-e|0;if(!(f>>>0>e>>>0&(e>>>0<2147483647&(t|0)!=(-1|0))))if((t|0)==(-1|0)){e=0;break}else{a=e;o=t;M=135;break n}n=u[2903]|0;n=c-e+n&0-n;if(n>>>0>=2147483647){a=e;o=t;M=135;break n}if((fC(n|0)|0)==(-1|0)){fC(r|0)|0;e=0;break}else{a=n+e|0;o=t;M=135;break n}}}while(0);u[2894]=u[2894]|4;M=133}else{e=0;M=133}}while(0);if(((M|0)==133?l>>>0<2147483647:0)?(w=fC(l|0)|0,b=fC(0)|0,h=b-w|0,y=h>>>0>(d+40|0)>>>0,!((w|0)==(-1|0)|y^1|w>>>0<b>>>0&((w|0)!=(-1|0)&(b|0)!=(-1|0))^1)):0){a=y?h:e;o=w;M=135}if((M|0)==135){e=(u[2891]|0)+a|0;u[2891]=e;if(e>>>0>(u[2892]|0)>>>0)u[2892]=e;c=u[2789]|0;do{if(c){e=11580;while(1){n=u[e>>2]|0;r=e+4|0;t=u[r>>2]|0;if((o|0)==(n+t|0)){M=145;break}i=u[e+8>>2]|0;if(!i)break;else e=i}if(((M|0)==145?(u[e+12>>2]&8|0)==0:0)?c>>>0<o>>>0&c>>>0>=n>>>0:0){u[r>>2]=t+a;k=c+8|0;k=(k&7|0)==0?0:0-k&7;M=c+k|0;k=(u[2786]|0)+(a-k)|0;u[2789]=M;u[2786]=k;u[M+4>>2]=k|1;u[M+k+4>>2]=40;u[2790]=u[2905];break}if(o>>>0<(u[2787]|0)>>>0)u[2787]=o;r=o+a|0;e=11580;while(1){if((u[e>>2]|0)==(r|0)){M=153;break}n=u[e+8>>2]|0;if(!n)break;else e=n}if((M|0)==153?(u[e+12>>2]&8|0)==0:0){u[e>>2]=o;s=e+4|0;u[s>>2]=(u[s>>2]|0)+a;s=o+8|0;s=o+((s&7|0)==0?0:0-s&7)|0;e=r+8|0;e=r+((e&7|0)==0?0:0-e&7)|0;l=s+d|0;f=e-s-d|0;u[s+4>>2]=d|3;do{if((e|0)!=(c|0)){if((e|0)==(u[2788]|0)){k=(u[2785]|0)+f|0;u[2785]=k;u[2788]=l;u[l+4>>2]=k|1;u[l+k>>2]=k;break}n=u[e+4>>2]|0;if((n&3|0)==1){a=n&-8;t=n>>>3;n:do{if(n>>>0<256){n=u[e+8>>2]|0;r=u[e+12>>2]|0;if((r|0)==(n|0)){u[2783]=u[2783]&~(1<<t);break}else{u[n+12>>2]=r;u[r+8>>2]=n;break}}else{o=u[e+24>>2]|0;n=u[e+12>>2]|0;do{if((n|0)==(e|0)){t=e+16|0;r=t+4|0;n=u[r>>2]|0;if(!n){n=u[t>>2]|0;if(!n){n=0;break}else r=t}while(1){t=n+20|0;i=u[t>>2]|0;if(i|0){n=i;r=t;continue}t=n+16|0;i=u[t>>2]|0;if(!i)break;else{n=i;r=t}}u[r>>2]=0}else{k=u[e+8>>2]|0;u[k+12>>2]=n;u[n+8>>2]=k}}while(0);if(!o)break;r=u[e+28>>2]|0;t=11436+(r<<2)|0;do{if((e|0)!=(u[t>>2]|0)){u[o+16+(((u[o+16>>2]|0)!=(e|0)&1)<<2)>>2]=n;if(!n)break n}else{u[t>>2]=n;if(n|0)break;u[2784]=u[2784]&~(1<<r);break n}}while(0);u[n+24>>2]=o;r=e+16|0;t=u[r>>2]|0;if(t|0){u[n+16>>2]=t;u[t+24>>2]=n}r=u[r+4>>2]|0;if(!r)break;u[n+20>>2]=r;u[r+24>>2]=n}}while(0);e=e+a|0;i=a+f|0}else i=f;e=e+4|0;u[e>>2]=u[e>>2]&-2;u[l+4>>2]=i|1;u[l+i>>2]=i;e=i>>>3;if(i>>>0<256){r=11172+(e<<1<<2)|0;n=u[2783]|0;e=1<<e;if(!(n&e)){u[2783]=n|e;e=r;n=r+8|0}else{n=r+8|0;e=u[n>>2]|0}u[n>>2]=l;u[e+12>>2]=l;u[l+8>>2]=e;u[l+12>>2]=r;break}e=i>>>8;do{if(!e)e=0;else{if(i>>>0>16777215){e=31;break}M=(e+1048320|0)>>>16&8;k=e<<M;w=(k+520192|0)>>>16&4;k=k<<w;e=(k+245760|0)>>>16&2;e=14-(w|M|e)+(k<<e>>>15)|0;e=i>>>(e+7|0)&1|e<<1}}while(0);t=11436+(e<<2)|0;u[l+28>>2]=e;n=l+16|0;u[n+4>>2]=0;u[n>>2]=0;n=u[2784]|0;r=1<<e;if(!(n&r)){u[2784]=n|r;u[t>>2]=l;u[l+24>>2]=t;u[l+12>>2]=l;u[l+8>>2]=l;break}n=i<<((e|0)==31?0:25-(e>>>1)|0);r=u[t>>2]|0;while(1){if((u[r+4>>2]&-8|0)==(i|0)){M=194;break}t=r+16+(n>>>31<<2)|0;e=u[t>>2]|0;if(!e){M=193;break}else{n=n<<1;r=e}}if((M|0)==193){u[t>>2]=l;u[l+24>>2]=r;u[l+12>>2]=l;u[l+8>>2]=l;break}else if((M|0)==194){M=r+8|0;k=u[M>>2]|0;u[k+12>>2]=l;u[M>>2]=l;u[l+8>>2]=k;u[l+12>>2]=r;u[l+24>>2]=0;break}}else{k=(u[2786]|0)+f|0;u[2786]=k;u[2789]=l;u[l+4>>2]=k|1}}while(0);k=s+8|0;v=g;return k|0}e=11580;while(1){n=u[e>>2]|0;if(n>>>0<=c>>>0?(k=n+(u[e+4>>2]|0)|0,k>>>0>c>>>0):0)break;e=u[e+8>>2]|0}i=k+-47|0;n=i+8|0;n=i+((n&7|0)==0?0:0-n&7)|0;i=c+16|0;n=n>>>0<i>>>0?c:n;e=n+8|0;r=o+8|0;r=(r&7|0)==0?0:0-r&7;M=o+r|0;r=a+-40-r|0;u[2789]=M;u[2786]=r;u[M+4>>2]=r|1;u[M+r+4>>2]=40;u[2790]=u[2905];r=n+4|0;u[r>>2]=27;u[e>>2]=u[2895];u[e+4>>2]=u[2896];u[e+8>>2]=u[2897];u[e+12>>2]=u[2898];u[2895]=o;u[2896]=a;u[2898]=0;u[2897]=e;e=n+24|0;do{M=e;e=e+4|0;u[e>>2]=7}while((M+8|0)>>>0<k>>>0);if((n|0)!=(c|0)){o=n-c|0;u[r>>2]=u[r>>2]&-2;u[c+4>>2]=o|1;u[n>>2]=o;e=o>>>3;if(o>>>0<256){r=11172+(e<<1<<2)|0;n=u[2783]|0;e=1<<e;if(!(n&e)){u[2783]=n|e;e=r;n=r+8|0}else{n=r+8|0;e=u[n>>2]|0}u[n>>2]=c;u[e+12>>2]=c;u[c+8>>2]=e;u[c+12>>2]=r;break}e=o>>>8;if(e){if(o>>>0>16777215)r=31;else{M=(e+1048320|0)>>>16&8;k=e<<M;w=(k+520192|0)>>>16&4;k=k<<w;r=(k+245760|0)>>>16&2;r=14-(w|M|r)+(k<<r>>>15)|0;r=o>>>(r+7|0)&1|r<<1}}else r=0;t=11436+(r<<2)|0;u[c+28>>2]=r;u[c+20>>2]=0;u[i>>2]=0;e=u[2784]|0;n=1<<r;if(!(e&n)){u[2784]=e|n;u[t>>2]=c;u[c+24>>2]=t;u[c+12>>2]=c;u[c+8>>2]=c;break}n=o<<((r|0)==31?0:25-(r>>>1)|0);r=u[t>>2]|0;while(1){if((u[r+4>>2]&-8|0)==(o|0)){M=216;break}t=r+16+(n>>>31<<2)|0;e=u[t>>2]|0;if(!e){M=215;break}else{n=n<<1;r=e}}if((M|0)==215){u[t>>2]=c;u[c+24>>2]=r;u[c+12>>2]=c;u[c+8>>2]=c;break}else if((M|0)==216){M=r+8|0;k=u[M>>2]|0;u[k+12>>2]=c;u[M>>2]=c;u[c+8>>2]=k;u[c+12>>2]=r;u[c+24>>2]=0;break}}}else{k=u[2787]|0;if((k|0)==0|o>>>0<k>>>0)u[2787]=o;u[2895]=o;u[2896]=a;u[2898]=0;u[2792]=u[2901];u[2791]=-1;e=0;do{k=11172+(e<<1<<2)|0;u[k+12>>2]=k;u[k+8>>2]=k;e=e+1|0}while((e|0)!=32);k=o+8|0;k=(k&7|0)==0?0:0-k&7;M=o+k|0;k=a+-40-k|0;u[2789]=M;u[2786]=k;u[M+4>>2]=k|1;u[M+k+4>>2]=40;u[2790]=u[2905]}}while(0);e=u[2786]|0;if(e>>>0>d>>>0){w=e-d|0;u[2786]=w;k=u[2789]|0;M=k+d|0;u[2789]=M;u[M+4>>2]=w|1;u[k+4>>2]=d|3;k=k+8|0;v=g;return k|0}}u[(QS()|0)>>2]=12;k=0;v=g;return k|0}function zS(n){n=n|0;var e=0,r=0,t=0,i=0,o=0,a=0,f=0,c=0;if(!n)return;r=n+-8|0;i=u[2787]|0;n=u[n+-4>>2]|0;e=n&-8;c=r+e|0;do{if(!(n&1)){t=u[r>>2]|0;if(!(n&3))return;a=r+(0-t)|0;o=t+e|0;if(a>>>0<i>>>0)return;if((a|0)==(u[2788]|0)){n=c+4|0;e=u[n>>2]|0;if((e&3|0)!=3){f=a;e=o;break}u[2785]=o;u[n>>2]=e&-2;u[a+4>>2]=o|1;u[a+o>>2]=o;return}r=t>>>3;if(t>>>0<256){n=u[a+8>>2]|0;e=u[a+12>>2]|0;if((e|0)==(n|0)){u[2783]=u[2783]&~(1<<r);f=a;e=o;break}else{u[n+12>>2]=e;u[e+8>>2]=n;f=a;e=o;break}}i=u[a+24>>2]|0;n=u[a+12>>2]|0;do{if((n|0)==(a|0)){r=a+16|0;e=r+4|0;n=u[e>>2]|0;if(!n){n=u[r>>2]|0;if(!n){n=0;break}else e=r}while(1){r=n+20|0;t=u[r>>2]|0;if(t|0){n=t;e=r;continue}r=n+16|0;t=u[r>>2]|0;if(!t)break;else{n=t;e=r}}u[e>>2]=0}else{f=u[a+8>>2]|0;u[f+12>>2]=n;u[n+8>>2]=f}}while(0);if(i){e=u[a+28>>2]|0;r=11436+(e<<2)|0;if((a|0)==(u[r>>2]|0)){u[r>>2]=n;if(!n){u[2784]=u[2784]&~(1<<e);f=a;e=o;break}}else{u[i+16+(((u[i+16>>2]|0)!=(a|0)&1)<<2)>>2]=n;if(!n){f=a;e=o;break}}u[n+24>>2]=i;e=a+16|0;r=u[e>>2]|0;if(r|0){u[n+16>>2]=r;u[r+24>>2]=n}e=u[e+4>>2]|0;if(e){u[n+20>>2]=e;u[e+24>>2]=n;f=a;e=o}else{f=a;e=o}}else{f=a;e=o}}else{f=r;a=r}}while(0);if(a>>>0>=c>>>0)return;n=c+4|0;t=u[n>>2]|0;if(!(t&1))return;if(!(t&2)){n=u[2788]|0;if((c|0)==(u[2789]|0)){c=(u[2786]|0)+e|0;u[2786]=c;u[2789]=f;u[f+4>>2]=c|1;if((f|0)!=(n|0))return;u[2788]=0;u[2785]=0;return}if((c|0)==(n|0)){c=(u[2785]|0)+e|0;u[2785]=c;u[2788]=a;u[f+4>>2]=c|1;u[a+c>>2]=c;return}i=(t&-8)+e|0;r=t>>>3;do{if(t>>>0<256){e=u[c+8>>2]|0;n=u[c+12>>2]|0;if((n|0)==(e|0)){u[2783]=u[2783]&~(1<<r);break}else{u[e+12>>2]=n;u[n+8>>2]=e;break}}else{o=u[c+24>>2]|0;n=u[c+12>>2]|0;do{if((n|0)==(c|0)){r=c+16|0;e=r+4|0;n=u[e>>2]|0;if(!n){n=u[r>>2]|0;if(!n){r=0;break}else e=r}while(1){r=n+20|0;t=u[r>>2]|0;if(t|0){n=t;e=r;continue}r=n+16|0;t=u[r>>2]|0;if(!t)break;else{n=t;e=r}}u[e>>2]=0;r=n}else{r=u[c+8>>2]|0;u[r+12>>2]=n;u[n+8>>2]=r;r=n}}while(0);if(o|0){n=u[c+28>>2]|0;e=11436+(n<<2)|0;if((c|0)==(u[e>>2]|0)){u[e>>2]=r;if(!r){u[2784]=u[2784]&~(1<<n);break}}else{u[o+16+(((u[o+16>>2]|0)!=(c|0)&1)<<2)>>2]=r;if(!r)break}u[r+24>>2]=o;n=c+16|0;e=u[n>>2]|0;if(e|0){u[r+16>>2]=e;u[e+24>>2]=r}n=u[n+4>>2]|0;if(n|0){u[r+20>>2]=n;u[n+24>>2]=r}}}}while(0);u[f+4>>2]=i|1;u[a+i>>2]=i;if((f|0)==(u[2788]|0)){u[2785]=i;return}}else{u[n>>2]=t&-2;u[f+4>>2]=e|1;u[a+e>>2]=e;i=e}n=i>>>3;if(i>>>0<256){r=11172+(n<<1<<2)|0;e=u[2783]|0;n=1<<n;if(!(e&n)){u[2783]=e|n;n=r;e=r+8|0}else{e=r+8|0;n=u[e>>2]|0}u[e>>2]=f;u[n+12>>2]=f;u[f+8>>2]=n;u[f+12>>2]=r;return}n=i>>>8;if(n){if(i>>>0>16777215)n=31;else{a=(n+1048320|0)>>>16&8;c=n<<a;o=(c+520192|0)>>>16&4;c=c<<o;n=(c+245760|0)>>>16&2;n=14-(o|a|n)+(c<<n>>>15)|0;n=i>>>(n+7|0)&1|n<<1}}else n=0;t=11436+(n<<2)|0;u[f+28>>2]=n;u[f+20>>2]=0;u[f+16>>2]=0;e=u[2784]|0;r=1<<n;do{if(e&r){e=i<<((n|0)==31?0:25-(n>>>1)|0);r=u[t>>2]|0;while(1){if((u[r+4>>2]&-8|0)==(i|0)){n=73;break}t=r+16+(e>>>31<<2)|0;n=u[t>>2]|0;if(!n){n=72;break}else{e=e<<1;r=n}}if((n|0)==72){u[t>>2]=f;u[f+24>>2]=r;u[f+12>>2]=f;u[f+8>>2]=f;break}else if((n|0)==73){a=r+8|0;c=u[a>>2]|0;u[c+12>>2]=f;u[a>>2]=f;u[f+8>>2]=c;u[f+12>>2]=r;u[f+24>>2]=0;break}}else{u[2784]=e|r;u[t>>2]=f;u[f+24>>2]=t;u[f+12>>2]=f;u[f+8>>2]=f}}while(0);c=(u[2791]|0)+-1|0;u[2791]=c;if(!c)n=11588;else return;while(1){n=u[n>>2]|0;if(!n)break;else n=n+8|0}u[2791]=-1;return}function GS(){return 11628}function KS(n){n=n|0;var e=0,r=0;e=v;v=v+16|0;r=e;u[r>>2]=eE(u[n+60>>2]|0)|0;n=ZS(ae(6,r|0)|0)|0;v=e;return n|0}function XS(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0,a=0,f=0,c=0,l=0,s=0,d=0,_=0,p=0;d=v;v=v+48|0;l=d+16|0;o=d;i=d+32|0;f=n+28|0;t=u[f>>2]|0;u[i>>2]=t;c=n+20|0;t=(u[c>>2]|0)-t|0;u[i+4>>2]=t;u[i+8>>2]=e;u[i+12>>2]=r;t=t+r|0;a=n+60|0;u[o>>2]=u[a>>2];u[o+4>>2]=i;u[o+8>>2]=2;o=ZS(le(146,o|0)|0)|0;n:do{if((t|0)!=(o|0)){e=2;while(1){if((o|0)<0)break;t=t-o|0;p=u[i+4>>2]|0;_=o>>>0>p>>>0;i=_?i+8|0:i;e=(_<<31>>31)+e|0;p=o-(_?p:0)|0;u[i>>2]=(u[i>>2]|0)+p;_=i+4|0;u[_>>2]=(u[_>>2]|0)-p;u[l>>2]=u[a>>2];u[l+4>>2]=i;u[l+8>>2]=e;o=ZS(le(146,l|0)|0)|0;if((t|0)==(o|0)){s=3;break n}}u[n+16>>2]=0;u[f>>2]=0;u[c>>2]=0;u[n>>2]=u[n>>2]|32;if((e|0)==2)r=0;else r=r-(u[i+4>>2]|0)|0}else s=3}while(0);if((s|0)==3){p=u[n+44>>2]|0;u[n+16>>2]=p+(u[n+48>>2]|0);u[f>>2]=p;u[c>>2]=p}v=d;return r|0}function JS(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0;i=v;v=v+32|0;o=i;t=i+20|0;u[o>>2]=u[n+60>>2];u[o+4>>2]=0;u[o+8>>2]=e;u[o+12>>2]=t;u[o+16>>2]=r;if((ZS(ce(140,o|0)|0)|0)<0){u[t>>2]=-1;n=-1}else n=u[t>>2]|0;v=i;return n|0}function ZS(n){n=n|0;if(n>>>0>4294963200){u[(QS()|0)>>2]=0-n;n=-1}return n|0}function QS(){return($S()|0)+64|0}function $S(){return nE()|0}function nE(){return 2084}function eE(n){n=n|0;return n|0}function rE(n,e,r){n=n|0;e=e|0;r=r|0;var i=0,o=0;o=v;v=v+32|0;i=o;u[n+36>>2]=1;if((u[n>>2]&64|0)==0?(u[i>>2]=u[n+60>>2],u[i+4>>2]=21523,u[i+8>>2]=o+16,Qn(54,i|0)|0):0)t[n+75>>0]=-1;i=XS(n,e,r)|0;v=o;return i|0}function tE(n,e){n=n|0;e=e|0;var r=0,i=0;r=t[n>>0]|0;i=t[e>>0]|0;if(r<<24>>24==0?1:r<<24>>24!=i<<24>>24)n=i;else{do{n=n+1|0;e=e+1|0;r=t[n>>0]|0;i=t[e>>0]|0}while(!(r<<24>>24==0?1:r<<24>>24!=i<<24>>24));n=i}return(r&255)-(n&255)|0}function iE(n,e,r){n=n|0;e=e|0;r=r|0;var i=0,u=0;n:do{if(!r)n=0;else{while(1){i=t[n>>0]|0;u=t[e>>0]|0;if(i<<24>>24!=u<<24>>24)break;r=r+-1|0;if(!r){n=0;break n}else{n=n+1|0;e=e+1|0}}n=(i&255)-(u&255)|0}}while(0);return n|0}function uE(n,e,r){n=n|0;e=e|0;r=r|0;var i=0,o=0,a=0,f=0,c=0,l=0,s=0,d=0,_=0,p=0,m=0,b=0,h=0;h=v;v=v+224|0;d=h+120|0;_=h+80|0;m=h;b=h+136|0;i=_;o=i+40|0;do{u[i>>2]=0;i=i+4|0}while((i|0)<(o|0));u[d>>2]=u[r>>2];if((oE(0,e,d,m,_)|0)<0)r=-1;else{if((u[n+76>>2]|0)>-1)p=aE(n)|0;else p=0;r=u[n>>2]|0;s=r&32;if((t[n+74>>0]|0)<1)u[n>>2]=r&-33;i=n+48|0;if(!(u[i>>2]|0)){o=n+44|0;a=u[o>>2]|0;u[o>>2]=b;f=n+28|0;u[f>>2]=b;c=n+20|0;u[c>>2]=b;u[i>>2]=80;l=n+16|0;u[l>>2]=b+80;r=oE(n,e,d,m,_)|0;if(a){yL[u[n+36>>2]&7](n,0,0)|0;r=(u[c>>2]|0)==0?-1:r;u[o>>2]=a;u[i>>2]=0;u[l>>2]=0;u[f>>2]=0;u[c>>2]=0}}else r=oE(n,e,d,m,_)|0;i=u[n>>2]|0;u[n>>2]=i|s;if(p|0)fE(n);r=(i&32|0)==0?r:-1}v=h;return r|0}function oE(n,e,r,o,a){n=n|0;e=e|0;r=r|0;o=o|0;a=a|0;var f=0,c=0,s=0,d=0,_=0,p=0,m=0,b=0,h=0,y=0,w=0,M=0,k=0,g=0,T=0,A=0,S=0,E=0,C=0,R=0,P=0,B=0,O=0;O=v;v=v+64|0;C=O+16|0;R=O;S=O+24|0;P=O+8|0;B=O+20|0;u[C>>2]=e;g=(n|0)!=0;T=S+40|0;A=T;S=S+39|0;E=P+4|0;c=0;f=0;p=0;n:while(1){do{if((f|0)>-1)if((c|0)>(2147483647-f|0)){u[(QS()|0)>>2]=75;f=-1;break}else{f=c+f|0;break}}while(0);c=t[e>>0]|0;if(!(c<<24>>24)){k=87;break}else s=e;e:while(1){switch(c<<24>>24){case 37:{c=s;k=9;break e}case 0:{c=s;break e}default:{}}M=s+1|0;u[C>>2]=M;c=t[M>>0]|0;s=M}e:do{if((k|0)==9)while(1){k=0;if((t[s+1>>0]|0)!=37)break e;c=c+1|0;s=s+2|0;u[C>>2]=s;if((t[s>>0]|0)==37)k=9;else break}}while(0);c=c-e|0;if(g)cE(n,e,c);if(c|0){e=s;continue}d=s+1|0;c=(t[d>>0]|0)+-48|0;if(c>>>0<10){M=(t[s+2>>0]|0)==36;w=M?c:-1;p=M?1:p;d=M?s+3|0:d}else w=-1;u[C>>2]=d;c=t[d>>0]|0;s=(c<<24>>24)+-32|0;e:do{if(s>>>0<32){_=0;m=c;while(1){c=1<<s;if(!(c&75913)){c=m;break e}_=c|_;d=d+1|0;u[C>>2]=d;c=t[d>>0]|0;s=(c<<24>>24)+-32|0;if(s>>>0>=32)break;else m=c}}else _=0}while(0);if(c<<24>>24==42){s=d+1|0;c=(t[s>>0]|0)+-48|0;if(c>>>0<10?(t[d+2>>0]|0)==36:0){u[a+(c<<2)>>2]=10;c=u[o+((t[s>>0]|0)+-48<<3)>>2]|0;p=1;d=d+3|0}else{if(p|0){f=-1;break}if(g){p=(u[r>>2]|0)+(4-1)&~(4-1);c=u[p>>2]|0;u[r>>2]=p+4;p=0;d=s}else{c=0;p=0;d=s}}u[C>>2]=d;M=(c|0)<0;c=M?0-c|0:c;_=M?_|8192:_}else{c=lE(C)|0;if((c|0)<0){f=-1;break}d=u[C>>2]|0}do{if((t[d>>0]|0)==46){if((t[d+1>>0]|0)!=42){u[C>>2]=d+1;s=lE(C)|0;d=u[C>>2]|0;break}m=d+2|0;s=(t[m>>0]|0)+-48|0;if(s>>>0<10?(t[d+3>>0]|0)==36:0){u[a+(s<<2)>>2]=10;s=u[o+((t[m>>0]|0)+-48<<3)>>2]|0;d=d+4|0;u[C>>2]=d;break}if(p|0){f=-1;break n}if(g){M=(u[r>>2]|0)+(4-1)&~(4-1);s=u[M>>2]|0;u[r>>2]=M+4}else s=0;u[C>>2]=m;d=m}else s=-1}while(0);y=0;while(1){if(((t[d>>0]|0)+-65|0)>>>0>57){f=-1;break n}M=d+1|0;u[C>>2]=M;m=t[(t[d>>0]|0)+-65+(5178+(y*58|0))>>0]|0;b=m&255;if((b+-1|0)>>>0<8){y=b;d=M}else break}if(!(m<<24>>24)){f=-1;break}h=(w|0)>-1;do{if(m<<24>>24==19){if(h){f=-1;break n}else k=49}else{if(h){u[a+(w<<2)>>2]=b;h=o+(w<<3)|0;w=u[h+4>>2]|0;k=R;u[k>>2]=u[h>>2];u[k+4>>2]=w;k=49;break}if(!g){f=0;break n}sE(R,b,r)}}while(0);if((k|0)==49?(k=0,!g):0){c=0;e=M;continue}d=t[d>>0]|0;d=(y|0)!=0&(d&15|0)==3?d&-33:d;h=_&-65537;w=(_&8192|0)==0?_:h;e:do{switch(d|0){case 110:switch((y&255)<<24>>24){case 0:{u[u[R>>2]>>2]=f;c=0;e=M;continue n}case 1:{u[u[R>>2]>>2]=f;c=0;e=M;continue n}case 2:{c=u[R>>2]|0;u[c>>2]=f;u[c+4>>2]=((f|0)<0)<<31>>31;c=0;e=M;continue n}case 3:{i[u[R>>2]>>1]=f;c=0;e=M;continue n}case 4:{t[u[R>>2]>>0]=f;c=0;e=M;continue n}case 6:{u[u[R>>2]>>2]=f;c=0;e=M;continue n}case 7:{c=u[R>>2]|0;u[c>>2]=f;u[c+4>>2]=((f|0)<0)<<31>>31;c=0;e=M;continue n}default:{c=0;e=M;continue n}}case 112:{d=120;s=s>>>0>8?s:8;e=w|8;k=61;break}case 88:case 120:{e=w;k=61;break}case 111:{d=R;e=u[d>>2]|0;d=u[d+4>>2]|0;b=_E(e,d,T)|0;h=A-b|0;_=0;m=5642;s=(w&8|0)==0|(s|0)>(h|0)?s:h+1|0;h=w;k=67;break}case 105:case 100:{d=R;e=u[d>>2]|0;d=u[d+4>>2]|0;if((d|0)<0){e=$E(0,0,e|0,d|0)|0;d=L;_=R;u[_>>2]=e;u[_+4>>2]=d;_=1;m=5642;k=66;break e}else{_=(w&2049|0)!=0&1;m=(w&2048|0)==0?(w&1|0)==0?5642:5644:5643;k=66;break e}}case 117:{d=R;_=0;m=5642;e=u[d>>2]|0;d=u[d+4>>2]|0;k=66;break}case 99:{t[S>>0]=u[R>>2];e=S;_=0;m=5642;b=T;d=1;s=h;break}case 109:{d=pE(u[(QS()|0)>>2]|0)|0;k=71;break}case 115:{d=u[R>>2]|0;d=d|0?d:5652;k=71;break}case 67:{u[P>>2]=u[R>>2];u[E>>2]=0;u[R>>2]=P;b=-1;d=P;k=75;break}case 83:{e=u[R>>2]|0;if(!s){bE(n,32,c,0,w);e=0;k=84}else{b=s;d=e;k=75}break}case 65:case 71:case 70:case 69:case 97:case 103:case 102:case 101:{c=yE(n,+l[R>>3],c,s,w,d)|0;e=M;continue n}default:{_=0;m=5642;b=T;d=s;s=w}}}while(0);e:do{if((k|0)==61){w=R;y=u[w>>2]|0;w=u[w+4>>2]|0;b=dE(y,w,T,d&32)|0;m=(e&8|0)==0|(y|0)==0&(w|0)==0;_=m?0:2;m=m?5642:5642+(d>>4)|0;h=e;e=y;d=w;k=67}else if((k|0)==66){b=vE(e,d,T)|0;h=w;k=67}else if((k|0)==71){k=0;w=mE(d,0,s)|0;y=(w|0)==0;e=d;_=0;m=5642;b=y?d+s|0:w;d=y?s:w-d|0;s=h}else if((k|0)==75){k=0;m=d;e=0;s=0;while(1){_=u[m>>2]|0;if(!_)break;s=hE(B,_)|0;if((s|0)<0|s>>>0>(b-e|0)>>>0)break;e=s+e|0;if(b>>>0>e>>>0)m=m+4|0;else break}if((s|0)<0){f=-1;break n}bE(n,32,c,e,w);if(!e){e=0;k=84}else{_=0;while(1){s=u[d>>2]|0;if(!s){k=84;break e}s=hE(B,s)|0;_=s+_|0;if((_|0)>(e|0)){k=84;break e}cE(n,B,s);if(_>>>0>=e>>>0){k=84;break}else d=d+4|0}}}}while(0);if((k|0)==67){k=0;d=(e|0)!=0|(d|0)!=0;w=(s|0)!=0|d;d=((d^1)&1)+(A-b)|0;e=w?b:T;b=T;d=w?(s|0)>(d|0)?s:d:s;s=(s|0)>-1?h&-65537:h}else if((k|0)==84){k=0;bE(n,32,c,e,w^8192);c=(c|0)>(e|0)?c:e;e=M;continue}y=b-e|0;h=(d|0)<(y|0)?y:d;w=h+_|0;c=(c|0)<(w|0)?w:c;bE(n,32,c,w,s);cE(n,m,_);bE(n,48,c,w,s^65536);bE(n,48,h,y,0);cE(n,e,y);bE(n,32,c,w,s^8192);e=M}n:do{if((k|0)==87)if(!n)if(!p)f=0;else{f=1;while(1){e=u[a+(f<<2)>>2]|0;if(!e)break;sE(o+(f<<3)|0,e,r);f=f+1|0;if((f|0)>=10){f=1;break n}}while(1){if(u[a+(f<<2)>>2]|0){f=-1;break n}f=f+1|0;if((f|0)>=10){f=1;break}}}}while(0);v=O;return f|0}function aE(n){n=n|0;return 0}function fE(n){n=n|0;return}function cE(n,e,r){n=n|0;e=e|0;r=r|0;if(!(u[n>>2]&32))PE(e,r,n)|0;return}function lE(n){n=n|0;var e=0,r=0,i=0;r=u[n>>2]|0;i=(t[r>>0]|0)+-48|0;if(i>>>0<10){e=0;do{e=i+(e*10|0)|0;r=r+1|0;u[n>>2]=r;i=(t[r>>0]|0)+-48|0}while(i>>>0<10)}else e=0;return e|0}function sE(n,e,r){n=n|0;e=e|0;r=r|0;var t=0,i=0,o=0.0;n:do{if(e>>>0<=20)do{switch(e|0){case 9:{t=(u[r>>2]|0)+(4-1)&~(4-1);e=u[t>>2]|0;u[r>>2]=t+4;u[n>>2]=e;break n}case 10:{t=(u[r>>2]|0)+(4-1)&~(4-1);e=u[t>>2]|0;u[r>>2]=t+4;t=n;u[t>>2]=e;u[t+4>>2]=((e|0)<0)<<31>>31;break n}case 11:{t=(u[r>>2]|0)+(4-1)&~(4-1);e=u[t>>2]|0;u[r>>2]=t+4;t=n;u[t>>2]=e;u[t+4>>2]=0;break n}case 12:{t=(u[r>>2]|0)+(8-1)&~(8-1);e=t;i=u[e>>2]|0;e=u[e+4>>2]|0;u[r>>2]=t+8;t=n;u[t>>2]=i;u[t+4>>2]=e;break n}case 13:{i=(u[r>>2]|0)+(4-1)&~(4-1);t=u[i>>2]|0;u[r>>2]=i+4;t=(t&65535)<<16>>16;i=n;u[i>>2]=t;u[i+4>>2]=((t|0)<0)<<31>>31;break n}case 14:{i=(u[r>>2]|0)+(4-1)&~(4-1);t=u[i>>2]|0;u[r>>2]=i+4;i=n;u[i>>2]=t&65535;u[i+4>>2]=0;break n}case 15:{i=(u[r>>2]|0)+(4-1)&~(4-1);t=u[i>>2]|0;u[r>>2]=i+4;t=(t&255)<<24>>24;i=n;u[i>>2]=t;u[i+4>>2]=((t|0)<0)<<31>>31;break n}case 16:{i=(u[r>>2]|0)+(4-1)&~(4-1);t=u[i>>2]|0;u[r>>2]=i+4;i=n;u[i>>2]=t&255;u[i+4>>2]=0;break n}case 17:{i=(u[r>>2]|0)+(8-1)&~(8-1);o=+l[i>>3];u[r>>2]=i+8;l[n>>3]=o;break n}case 18:{i=(u[r>>2]|0)+(8-1)&~(8-1);o=+l[i>>3];u[r>>2]=i+8;l[n>>3]=o;break n}default:break n}}while(0)}while(0);return}function dE(n,e,r,i){n=n|0;e=e|0;r=r|0;i=i|0;if(!((n|0)==0&(e|0)==0))do{r=r+-1|0;t[r>>0]=o[5694+(n&15)>>0]|0|i;n=tC(n|0,e|0,4)|0;e=L}while(!((n|0)==0&(e|0)==0));return r|0}function _E(n,e,r){n=n|0;e=e|0;r=r|0;if(!((n|0)==0&(e|0)==0))do{r=r+-1|0;t[r>>0]=n&7|48;n=tC(n|0,e|0,3)|0;e=L}while(!((n|0)==0&(e|0)==0));return r|0}function vE(n,e,r){n=n|0;e=e|0;r=r|0;var i=0;if(e>>>0>0|(e|0)==0&n>>>0>4294967295){while(1){i=lC(n|0,e|0,10,0)|0;r=r+-1|0;t[r>>0]=i&255|48;i=n;n=aC(n|0,e|0,10,0)|0;if(!(e>>>0>9|(e|0)==9&i>>>0>4294967295))break;else e=L}e=n}else e=n;if(e)while(1){r=r+-1|0;t[r>>0]=(e>>>0)%10|0|48;if(e>>>0<10)break;else e=(e>>>0)/10|0}return r|0}function pE(n){n=n|0;return SE(n,u[(AE()|0)+188>>2]|0)|0}function mE(n,e,r){n=n|0;e=e|0;r=r|0;var i=0,o=0,a=0,f=0;a=e&255;i=(r|0)!=0;n:do{if(i&(n&3|0)!=0){o=e&255;while(1){if((t[n>>0]|0)==o<<24>>24){f=6;break n}n=n+1|0;r=r+-1|0;i=(r|0)!=0;if(!(i&(n&3|0)!=0)){f=5;break}}}else f=5}while(0);if((f|0)==5)if(i)f=6;else r=0;n:do{if((f|0)==6){o=e&255;if((t[n>>0]|0)!=o<<24>>24){i=j(a,16843009)|0;e:do{if(r>>>0>3)while(1){a=u[n>>2]^i;if((a&-2139062144^-2139062144)&a+-16843009|0)break;n=n+4|0;r=r+-4|0;if(r>>>0<=3){f=11;break e}}else f=11}while(0);if((f|0)==11)if(!r){r=0;break}while(1){if((t[n>>0]|0)==o<<24>>24)break n;n=n+1|0;r=r+-1|0;if(!r){r=0;break}}}}}while(0);return(r|0?n:0)|0}function bE(n,e,r,t,i){n=n|0;e=e|0;r=r|0;t=t|0;i=i|0;var u=0,o=0;o=v;v=v+256|0;u=o;if((r|0)>(t|0)&(i&73728|0)==0){i=r-t|0;eC(u|0,e|0,(i>>>0<256?i:256)|0)|0;if(i>>>0>255){e=r-t|0;do{cE(n,u,256);i=i+-256|0}while(i>>>0>255);i=e&255}cE(n,u,i)}v=o;return}function hE(n,e){n=n|0;e=e|0;if(!n)n=0;else n=gE(n,e,0)|0;return n|0}function yE(n,e,r,i,a,f){n=n|0;e=+e;r=r|0;i=i|0;a=a|0;f=f|0;var c=0,l=0,s=0,d=0,_=0,p=0,m=0,b=0.0,h=0,y=0,w=0,M=0,k=0,g=0,T=0,A=0,S=0,E=0,C=0,R=0,P=0,B=0,O=0;O=v;v=v+560|0;s=O+8|0;w=O;B=O+524|0;P=B;d=O+512|0;u[w>>2]=0;R=d+12|0;wE(e)|0;if((L|0)<0){e=-e;E=1;S=5659}else{E=(a&2049|0)!=0&1;S=(a&2048|0)==0?(a&1|0)==0?5660:5665:5662}wE(e)|0;C=L&2146435072;do{if(C>>>0<2146435072|(C|0)==2146435072&0<0){b=+ME(e,w)*2.0;c=b!=0.0;if(c)u[w>>2]=(u[w>>2]|0)+-1;k=f|32;if((k|0)==97){h=f&32;m=(h|0)==0?S:S+9|0;p=E|2;c=12-i|0;do{if(!(i>>>0>11|(c|0)==0)){e=8.0;do{c=c+-1|0;e=e*16.0}while((c|0)!=0);if((t[m>>0]|0)==45){e=-(e+(-b-e));break}else{e=b+e-e;break}}else e=b}while(0);l=u[w>>2]|0;c=(l|0)<0?0-l|0:l;c=vE(c,((c|0)<0)<<31>>31,R)|0;if((c|0)==(R|0)){c=d+11|0;t[c>>0]=48}t[c+-1>>0]=(l>>31&2)+43;_=c+-2|0;t[_>>0]=f+15;d=(i|0)<1;s=(a&8|0)==0;c=B;do{C=~~e;l=c+1|0;t[c>>0]=o[5694+C>>0]|h;e=(e-+(C|0))*16.0;if((l-P|0)==1?!(s&(d&e==0.0)):0){t[l>>0]=46;c=c+2|0}else c=l}while(e!=0.0);C=c-P|0;P=R-_|0;R=(i|0)!=0&(C+-2|0)<(i|0)?i+2|0:C;c=P+p+R|0;bE(n,32,r,c,a);cE(n,m,p);bE(n,48,r,c,a^65536);cE(n,B,C);bE(n,48,R-C|0,0,0);cE(n,_,P);bE(n,32,r,c,a^8192);break}l=(i|0)<0?6:i;if(c){c=(u[w>>2]|0)+-28|0;u[w>>2]=c;e=b*268435456.0}else{e=b;c=u[w>>2]|0}C=(c|0)<0?s:s+288|0;s=C;do{T=~~e>>>0;u[s>>2]=T;s=s+4|0;e=(e-+(T>>>0))*1.0e9}while(e!=0.0);if((c|0)>0){d=C;p=s;while(1){_=(c|0)<29?c:29;c=p+-4|0;if(c>>>0>=d>>>0){s=0;do{g=rC(u[c>>2]|0,0,_|0)|0;g=nC(g|0,L|0,s|0,0)|0;T=L;M=lC(g|0,T|0,1e9,0)|0;u[c>>2]=M;s=aC(g|0,T|0,1e9,0)|0;c=c+-4|0}while(c>>>0>=d>>>0);if(s){d=d+-4|0;u[d>>2]=s}}s=p;while(1){if(s>>>0<=d>>>0)break;c=s+-4|0;if(!(u[c>>2]|0))s=c;else break}c=(u[w>>2]|0)-_|0;u[w>>2]=c;if((c|0)>0)p=s;else break}}else d=C;if((c|0)<0){i=((l+25|0)/9|0)+1|0;y=(k|0)==102;do{h=0-c|0;h=(h|0)<9?h:9;if(d>>>0<s>>>0){_=(1<<h)+-1|0;p=1e9>>>h;m=0;c=d;do{T=u[c>>2]|0;u[c>>2]=(T>>>h)+m;m=j(T&_,p)|0;c=c+4|0}while(c>>>0<s>>>0);c=(u[d>>2]|0)==0?d+4|0:d;if(!m){d=c;c=s}else{u[s>>2]=m;d=c;c=s+4|0}}else{d=(u[d>>2]|0)==0?d+4|0:d;c=s}s=y?C:d;s=(c-s>>2|0)>(i|0)?s+(i<<2)|0:c;c=(u[w>>2]|0)+h|0;u[w>>2]=c}while((c|0)<0);c=d;i=s}else{c=d;i=s}T=C;if(c>>>0<i>>>0){s=(T-c>>2)*9|0;_=u[c>>2]|0;if(_>>>0>=10){d=10;do{d=d*10|0;s=s+1|0}while(_>>>0>=d>>>0)}}else s=0;y=(k|0)==103;M=(l|0)!=0;d=l-((k|0)!=102?s:0)+((M&y)<<31>>31)|0;if((d|0)<(((i-T>>2)*9|0)+-9|0)){d=d+9216|0;h=C+4+(((d|0)/9|0)+-1024<<2)|0;d=((d|0)%9|0)+1|0;if((d|0)<9){_=10;do{_=_*10|0;d=d+1|0}while((d|0)!=9)}else _=10;p=u[h>>2]|0;m=(p>>>0)%(_>>>0)|0;d=(h+4|0)==(i|0);if(!(d&(m|0)==0)){b=(((p>>>0)/(_>>>0)|0)&1|0)==0?9007199254740992.0:9007199254740994.0;g=(_|0)/2|0;e=m>>>0<g>>>0?.5:d&(m|0)==(g|0)?1.0:1.5;if(E){g=(t[S>>0]|0)==45;e=g?-e:e;b=g?-b:b}d=p-m|0;u[h>>2]=d;if(b+e!=b){g=d+_|0;u[h>>2]=g;if(g>>>0>999999999){s=h;while(1){d=s+-4|0;u[s>>2]=0;if(d>>>0<c>>>0){c=c+-4|0;u[c>>2]=0}g=(u[d>>2]|0)+1|0;u[d>>2]=g;if(g>>>0>999999999)s=d;else break}}else d=h;s=(T-c>>2)*9|0;p=u[c>>2]|0;if(p>>>0>=10){_=10;do{_=_*10|0;s=s+1|0}while(p>>>0>=_>>>0)}}else d=h}else d=h;d=d+4|0;d=i>>>0>d>>>0?d:i;g=c}else{d=i;g=c}k=d;while(1){if(k>>>0<=g>>>0){w=0;break}c=k+-4|0;if(!(u[c>>2]|0))k=c;else{w=1;break}}i=0-s|0;do{if(y){c=((M^1)&1)+l|0;if((c|0)>(s|0)&(s|0)>-5){_=f+-1|0;l=c+-1-s|0}else{_=f+-2|0;l=c+-1|0}c=a&8;if(!c){if(w?(A=u[k+-4>>2]|0,(A|0)!=0):0){if(!((A>>>0)%10|0)){d=0;c=10;do{c=c*10|0;d=d+1|0}while(!((A>>>0)%(c>>>0)|0|0))}else d=0}else d=9;c=((k-T>>2)*9|0)+-9|0;if((_|32|0)==102){h=c-d|0;h=(h|0)>0?h:0;l=(l|0)<(h|0)?l:h;h=0;break}else{h=c+s-d|0;h=(h|0)>0?h:0;l=(l|0)<(h|0)?l:h;h=0;break}}else h=c}else{_=f;h=a&8}}while(0);y=l|h;p=(y|0)!=0&1;m=(_|32|0)==102;if(m){M=0;c=(s|0)>0?s:0}else{c=(s|0)<0?i:s;c=vE(c,((c|0)<0)<<31>>31,R)|0;d=R;if((d-c|0)<2)do{c=c+-1|0;t[c>>0]=48}while((d-c|0)<2);t[c+-1>>0]=(s>>31&2)+43;c=c+-2|0;t[c>>0]=_;M=c;c=d-c|0}c=E+1+l+p+c|0;bE(n,32,r,c,a);cE(n,S,E);bE(n,48,r,c,a^65536);if(m){_=g>>>0>C>>>0?C:g;h=B+9|0;p=h;m=B+8|0;d=_;do{s=vE(u[d>>2]|0,0,h)|0;if((d|0)==(_|0)){if((s|0)==(h|0)){t[m>>0]=48;s=m}}else if(s>>>0>B>>>0){eC(B|0,48,s-P|0)|0;do{s=s+-1|0}while(s>>>0>B>>>0)}cE(n,s,p-s|0);d=d+4|0}while(d>>>0<=C>>>0);if(y|0)cE(n,5710,1);if(d>>>0<k>>>0&(l|0)>0)while(1){s=vE(u[d>>2]|0,0,h)|0;if(s>>>0>B>>>0){eC(B|0,48,s-P|0)|0;do{s=s+-1|0}while(s>>>0>B>>>0)}cE(n,s,(l|0)<9?l:9);d=d+4|0;s=l+-9|0;if(!(d>>>0<k>>>0&(l|0)>9)){l=s;break}else l=s}bE(n,48,l+9|0,9,0)}else{y=w?k:g+4|0;if((l|0)>-1){w=B+9|0;h=(h|0)==0;i=w;p=0-P|0;m=B+8|0;_=g;do{s=vE(u[_>>2]|0,0,w)|0;if((s|0)==(w|0)){t[m>>0]=48;s=m}do{if((_|0)==(g|0)){d=s+1|0;cE(n,s,1);if(h&(l|0)<1){s=d;break}cE(n,5710,1);s=d}else{if(s>>>0<=B>>>0)break;eC(B|0,48,s+p|0)|0;do{s=s+-1|0}while(s>>>0>B>>>0)}}while(0);P=i-s|0;cE(n,s,(l|0)>(P|0)?P:l);l=l-P|0;_=_+4|0}while(_>>>0<y>>>0&(l|0)>-1)}bE(n,48,l+18|0,18,0);cE(n,M,R-M|0)}bE(n,32,r,c,a^8192)}else{B=(f&32|0)!=0;c=E+3|0;bE(n,32,r,c,a&-65537);cE(n,S,E);cE(n,e!=e|0.0!=0.0?B?5686:5690:B?5678:5682,3);bE(n,32,r,c,a^8192)}}while(0);v=O;return((c|0)<(r|0)?r:c)|0}function wE(n){n=+n;var e=0;l[d>>3]=n;e=u[d>>2]|0;L=u[d+4>>2]|0;return e|0}function ME(n,e){n=+n;e=e|0;return+ +kE(n,e)}function kE(n,e){n=+n;e=e|0;var r=0,t=0,i=0;l[d>>3]=n;r=u[d>>2]|0;t=u[d+4>>2]|0;i=tC(r|0,t|0,52)|0;switch(i&2047){case 0:{if(n!=0.0){n=+kE(n*18446744073709551616.0,e);r=(u[e>>2]|0)+-64|0}else r=0;u[e>>2]=r;break}case 2047:break;default:{u[e>>2]=(i&2047)+-1022;u[d>>2]=r;u[d+4>>2]=t&-2146435073|1071644672;n=+l[d>>3]}}return+n}function gE(n,e,r){n=n|0;e=e|0;r=r|0;do{if(n){if(e>>>0<128){t[n>>0]=e;n=1;break}if(!(u[u[(TE()|0)+188>>2]>>2]|0))if((e&-128|0)==57216){t[n>>0]=e;n=1;break}else{u[(QS()|0)>>2]=84;n=-1;break}if(e>>>0<2048){t[n>>0]=e>>>6|192;t[n+1>>0]=e&63|128;n=2;break}if(e>>>0<55296|(e&-8192|0)==57344){t[n>>0]=e>>>12|224;t[n+1>>0]=e>>>6&63|128;t[n+2>>0]=e&63|128;n=3;break}if((e+-65536|0)>>>0<1048576){t[n>>0]=e>>>18|240;t[n+1>>0]=e>>>12&63|128;t[n+2>>0]=e>>>6&63|128;t[n+3>>0]=e&63|128;n=4;break}else{u[(QS()|0)>>2]=84;n=-1;break}}else n=1}while(0);return n|0}function TE(){return nE()|0}function AE(){return nE()|0}function SE(n,e){n=n|0;e=e|0;var r=0,i=0;i=0;while(1){if((o[5712+i>>0]|0)==(n|0)){n=2;break}r=i+1|0;if((r|0)==87){r=5800;i=87;n=5;break}else i=r}if((n|0)==2)if(!i)r=5800;else{r=5800;n=5}if((n|0)==5)while(1){do{n=r;r=r+1|0}while((t[n>>0]|0)!=0);i=i+-1|0;if(!i)break;else n=5}return EE(r,u[e+20>>2]|0)|0}function EE(n,e){n=n|0;e=e|0;return CE(n,e)|0}function CE(n,e){n=n|0;e=e|0;if(!e)e=0;else e=LE(u[e>>2]|0,u[e+4>>2]|0,n)|0;return(e|0?e:n)|0}function LE(n,e,r){n=n|0;e=e|0;r=r|0;var i=0,o=0,a=0,f=0,c=0,l=0,s=0,d=0,_=0,v=0;v=(u[n>>2]|0)+1794895138|0;a=RE(u[n+8>>2]|0,v)|0;i=RE(u[n+12>>2]|0,v)|0;o=RE(u[n+16>>2]|0,v)|0;n:do{if((a>>>0<e>>>2>>>0?(_=e-(a<<2)|0,i>>>0<_>>>0&o>>>0<_>>>0):0)?((o|i)&3|0)==0:0){_=i>>>2;d=o>>>2;s=0;while(1){c=a>>>1;l=s+c|0;f=l<<1;o=f+_|0;i=RE(u[n+(o<<2)>>2]|0,v)|0;o=RE(u[n+(o+1<<2)>>2]|0,v)|0;if(!(o>>>0<e>>>0&i>>>0<(e-o|0)>>>0)){i=0;break n}if(t[n+(o+i)>>0]|0){i=0;break n}i=tE(r,n+o|0)|0;if(!i)break;i=(i|0)<0;if((a|0)==1){i=0;break n}else{s=i?s:l;a=i?c:a-c|0}}i=f+d|0;o=RE(u[n+(i<<2)>>2]|0,v)|0;i=RE(u[n+(i+1<<2)>>2]|0,v)|0;if(i>>>0<e>>>0&o>>>0<(e-i|0)>>>0)i=(t[n+(i+o)>>0]|0)==0?n+i|0:0;else i=0}else i=0}while(0);return i|0}function RE(n,e){n=n|0;e=e|0;var r=0;r=sC(n|0)|0;return((e|0)==0?n:r)|0}function PE(n,e,r){n=n|0;e=e|0;r=r|0;var i=0,o=0,a=0,f=0,c=0;i=r+16|0;o=u[i>>2]|0;if(!o){if(!(BE(r)|0)){o=u[i>>2]|0;a=5}else i=0}else a=5;n:do{if((a|0)==5){c=r+20|0;f=u[c>>2]|0;i=f;if((o-f|0)>>>0<e>>>0){i=yL[u[r+36>>2]&7](r,n,e)|0;break}e:do{if((t[r+75>>0]|0)>-1){f=e;while(1){if(!f){a=0;o=n;break e}o=f+-1|0;if((t[n+o>>0]|0)==10)break;else f=o}i=yL[u[r+36>>2]&7](r,n,f)|0;if(i>>>0<f>>>0)break n;a=f;o=n+f|0;e=e-f|0;i=u[c>>2]|0}else{a=0;o=n}}while(0);iC(i|0,o|0,e|0)|0;u[c>>2]=(u[c>>2]|0)+e;i=a+e|0}}while(0);return i|0}function BE(n){n=n|0;var e=0,r=0;e=n+74|0;r=t[e>>0]|0;t[e>>0]=r+255|r;e=u[n>>2]|0;if(!(e&8)){u[n+8>>2]=0;u[n+4>>2]=0;r=u[n+44>>2]|0;u[n+28>>2]=r;u[n+20>>2]=r;u[n+16>>2]=r+(u[n+48>>2]|0);n=0}else{u[n>>2]=e|32;n=-1}return n|0}function OE(n,e){n=K(n);e=K(e);var r=0,t=0;r=NE(n)|0;do{if((r&2147483647)>>>0<=2139095040){t=NE(e)|0;if((t&2147483647)>>>0<=2139095040)if((t^r|0)<0){n=(r|0)<0?e:n;break}else{n=n<e?e:n;break}}else n=e}while(0);return K(n)}function NE(n){n=K(n);return(c[d>>2]=n,u[d>>2]|0)|0}function IE(n,e){n=K(n);e=K(e);var r=0,t=0;r=FE(n)|0;do{if((r&2147483647)>>>0<=2139095040){t=FE(e)|0;if((t&2147483647)>>>0<=2139095040)if((t^r|0)<0){n=(r|0)<0?n:e;break}else{n=n<e?n:e;break}}else n=e}while(0);return K(n)}function FE(n){n=K(n);return(c[d>>2]=n,u[d>>2]|0)|0}function xE(n,e){n=K(n);e=K(e);var r=0,t=0,i=0,o=0,a=0,f=0,l=0,s=0;o=(c[d>>2]=n,u[d>>2]|0);f=(c[d>>2]=e,u[d>>2]|0);r=o>>>23&255;a=f>>>23&255;l=o&-2147483648;i=f<<1;n:do{if((i|0)!=0?!((r|0)==255|((UE(e)|0)&2147483647)>>>0>2139095040):0){t=o<<1;if(t>>>0<=i>>>0){e=K(n*K(0.0));return K((t|0)==(i|0)?e:n)}if(!r){r=o<<9;if((r|0)>-1){t=r;r=0;do{r=r+-1|0;t=t<<1}while((t|0)>-1)}else r=0;t=o<<1-r}else t=o&8388607|8388608;if(!a){o=f<<9;if((o|0)>-1){i=0;do{i=i+-1|0;o=o<<1}while((o|0)>-1)}else i=0;a=i;f=f<<1-i}else f=f&8388607|8388608;i=t-f|0;o=(i|0)>-1;e:do{if((r|0)>(a|0)){while(1){if(o)if(!i)break;else t=i;t=t<<1;r=r+-1|0;i=t-f|0;o=(i|0)>-1;if((r|0)<=(a|0))break e}e=K(n*K(0.0));break n}}while(0);if(o)if(!i){e=K(n*K(0.0));break}else t=i;if(t>>>0<8388608)do{t=t<<1;r=r+-1|0}while(t>>>0<8388608);if((r|0)>0)r=t+-8388608|r<<23;else r=t>>>(1-r|0);e=(u[d>>2]=r|l,K(c[d>>2]))}else s=3}while(0);if((s|0)==3){e=K(n*e);e=K(e/e)}return K(e)}function UE(n){n=K(n);return(c[d>>2]=n,u[d>>2]|0)|0}function HE(n,e){n=n|0;e=e|0;return uE(u[582]|0,n,e)|0}function DE(n){n=n|0;Xn()}function WE(n){n=n|0;return}function YE(n,e){n=n|0;e=e|0;return 0}function VE(n){n=n|0;if((jE(n+4|0)|0)==-1){vL[u[(u[n>>2]|0)+8>>2]&127](n);n=1}else n=0;return n|0}function jE(n){n=n|0;var e=0;e=u[n>>2]|0;u[n>>2]=e+-1;return e+-1|0}function qE(n){n=n|0;if(VE(n)|0)zE(n);return}function zE(n){n=n|0;var e=0;e=n+8|0;if(!((u[e>>2]|0)!=0?(jE(e)|0)!=-1:0))vL[u[(u[n>>2]|0)+16>>2]&127](n);return}function GE(n){n=n|0;var e=0;e=(n|0)==0?1:n;while(1){n=qS(e)|0;if(n|0)break;n=ZE()|0;if(!n){n=0;break}BL[n&0]()}return n|0}function KE(n){n=n|0;return GE(n)|0}function XE(n){n=n|0;zS(n);return}function JE(n){n=n|0;if((t[n+11>>0]|0)<0)XE(u[n>>2]|0);return}function ZE(){var n=0;n=u[2923]|0;u[2923]=n+0;return n|0}function QE(){}function $E(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;t=e-t-(r>>>0>n>>>0|0)>>>0;return(L=t,n-r>>>0|0)|0}function nC(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;r=n+r>>>0;return(L=e+t+(r>>>0<n>>>0|0)>>>0,r|0)|0}function eC(n,e,r){n=n|0;e=e|0;r=r|0;var i=0,o=0,a=0,f=0;a=n+r|0;e=e&255;if((r|0)>=67){while(n&3){t[n>>0]=e;n=n+1|0}i=a&-4|0;o=i-64|0;f=e|e<<8|e<<16|e<<24;while((n|0)<=(o|0)){u[n>>2]=f;u[n+4>>2]=f;u[n+8>>2]=f;u[n+12>>2]=f;u[n+16>>2]=f;u[n+20>>2]=f;u[n+24>>2]=f;u[n+28>>2]=f;u[n+32>>2]=f;u[n+36>>2]=f;u[n+40>>2]=f;u[n+44>>2]=f;u[n+48>>2]=f;u[n+52>>2]=f;u[n+56>>2]=f;u[n+60>>2]=f;n=n+64|0}while((n|0)<(i|0)){u[n>>2]=f;n=n+4|0}}while((n|0)<(a|0)){t[n>>0]=e;n=n+1|0}return a-r|0}function rC(n,e,r){n=n|0;e=e|0;r=r|0;if((r|0)<32){L=e<<r|(n&(1<<r)-1<<32-r)>>>32-r;return n<<r}L=n<<r-32;return 0}function tC(n,e,r){n=n|0;e=e|0;r=r|0;if((r|0)<32){L=e>>>r;return n>>>r|(e&(1<<r)-1)<<32-r}L=0;return e>>>r-32|0}function iC(n,e,r){n=n|0;e=e|0;r=r|0;var i=0,o=0,a=0;if((r|0)>=8192)return jn(n|0,e|0,r|0)|0;a=n|0;o=n+r|0;if((n&3)==(e&3)){while(n&3){if(!r)return a|0;t[n>>0]=t[e>>0]|0;n=n+1|0;e=e+1|0;r=r-1|0}r=o&-4|0;i=r-64|0;while((n|0)<=(i|0)){u[n>>2]=u[e>>2];u[n+4>>2]=u[e+4>>2];u[n+8>>2]=u[e+8>>2];u[n+12>>2]=u[e+12>>2];u[n+16>>2]=u[e+16>>2];u[n+20>>2]=u[e+20>>2];u[n+24>>2]=u[e+24>>2];u[n+28>>2]=u[e+28>>2];u[n+32>>2]=u[e+32>>2];u[n+36>>2]=u[e+36>>2];u[n+40>>2]=u[e+40>>2];u[n+44>>2]=u[e+44>>2];u[n+48>>2]=u[e+48>>2];u[n+52>>2]=u[e+52>>2];u[n+56>>2]=u[e+56>>2];u[n+60>>2]=u[e+60>>2];n=n+64|0;e=e+64|0}while((n|0)<(r|0)){u[n>>2]=u[e>>2];n=n+4|0;e=e+4|0}}else{r=o-4|0;while((n|0)<(r|0)){t[n>>0]=t[e>>0]|0;t[n+1>>0]=t[e+1>>0]|0;t[n+2>>0]=t[e+2>>0]|0;t[n+3>>0]=t[e+3>>0]|0;n=n+4|0;e=e+4|0}}while((n|0)<(o|0)){t[n>>0]=t[e>>0]|0;n=n+1|0;e=e+1|0}return a|0}function uC(n){n=n|0;var e=0;e=t[m+(n&255)>>0]|0;if((e|0)<8)return e|0;e=t[m+(n>>8&255)>>0]|0;if((e|0)<8)return e+8|0;e=t[m+(n>>16&255)>>0]|0;if((e|0)<8)return e+16|0;return(t[m+(n>>>24)>>0]|0)+24|0}function oC(n,e,r,t,i){n=n|0;e=e|0;r=r|0;t=t|0;i=i|0;var o=0,a=0,f=0,c=0,l=0,s=0,d=0,_=0,v=0,p=0;s=n;c=e;l=c;a=r;_=t;f=_;if(!l){o=(i|0)!=0;if(!f){if(o){u[i>>2]=(s>>>0)%(a>>>0);u[i+4>>2]=0}_=0;i=(s>>>0)/(a>>>0)>>>0;return(L=_,i)|0}else{if(!o){_=0;i=0;return(L=_,i)|0}u[i>>2]=n|0;u[i+4>>2]=e&0;_=0;i=0;return(L=_,i)|0}}o=(f|0)==0;do{if(a){if(!o){o=(G(f|0)|0)-(G(l|0)|0)|0;if(o>>>0<=31){d=o+1|0;f=31-o|0;e=o-31>>31;a=d;n=s>>>(d>>>0)&e|l<<f;e=l>>>(d>>>0)&e;o=0;f=s<<f;break}if(!i){_=0;i=0;return(L=_,i)|0}u[i>>2]=n|0;u[i+4>>2]=c|e&0;_=0;i=0;return(L=_,i)|0}o=a-1|0;if(o&a|0){f=(G(a|0)|0)+33-(G(l|0)|0)|0;p=64-f|0;d=32-f|0;c=d>>31;v=f-32|0;e=v>>31;a=f;n=d-1>>31&l>>>(v>>>0)|(l<<d|s>>>(f>>>0))&e;e=e&l>>>(f>>>0);o=s<<p&c;f=(l<<p|s>>>(v>>>0))&c|s<<d&f-33>>31;break}if(i|0){u[i>>2]=o&s;u[i+4>>2]=0}if((a|0)==1){v=c|e&0;p=n|0|0;return(L=v,p)|0}else{p=uC(a|0)|0;v=l>>>(p>>>0)|0;p=l<<32-p|s>>>(p>>>0)|0;return(L=v,p)|0}}else{if(o){if(i|0){u[i>>2]=(l>>>0)%(a>>>0);u[i+4>>2]=0}v=0;p=(l>>>0)/(a>>>0)>>>0;return(L=v,p)|0}if(!s){if(i|0){u[i>>2]=0;u[i+4>>2]=(l>>>0)%(f>>>0)}v=0;p=(l>>>0)/(f>>>0)>>>0;return(L=v,p)|0}o=f-1|0;if(!(o&f)){if(i|0){u[i>>2]=n|0;u[i+4>>2]=o&l|e&0}v=0;p=l>>>((uC(f|0)|0)>>>0);return(L=v,p)|0}o=(G(f|0)|0)-(G(l|0)|0)|0;if(o>>>0<=30){e=o+1|0;f=31-o|0;a=e;n=l<<f|s>>>(e>>>0);e=l>>>(e>>>0);o=0;f=s<<f;break}if(!i){v=0;p=0;return(L=v,p)|0}u[i>>2]=n|0;u[i+4>>2]=c|e&0;v=0;p=0;return(L=v,p)|0}}while(0);if(!a){l=f;c=0;f=0}else{d=r|0|0;s=_|t&0;l=nC(d|0,s|0,-1,-1)|0;r=L;c=f;f=0;do{t=c;c=o>>>31|c<<1;o=f|o<<1;t=n<<1|t>>>31|0;_=n>>>31|e<<1|0;$E(l|0,r|0,t|0,_|0)|0;p=L;v=p>>31|((p|0)<0?-1:0)<<1;f=v&1;n=$E(t|0,_|0,v&d|0,(((p|0)<0?-1:0)>>31|((p|0)<0?-1:0)<<1)&s|0)|0;e=L;a=a-1|0}while((a|0)!=0);l=c;c=0}a=0;if(i|0){u[i>>2]=n;u[i+4>>2]=e}v=(o|0)>>>31|(l|a)<<1|(a<<1|o>>>31)&0|c;p=(o<<1|0>>>31)&-2|f;return(L=v,p)|0}function aC(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;return oC(n,e,r,t,0)|0}function fC(n){n=n|0;var e=0,r=0;r=n+15&-16|0;e=u[s>>2]|0;n=e+r|0;if((r|0)>0&(n|0)<(e|0)|(n|0)<0){$()|0;zn(12);return-1}u[s>>2]=n;if((n|0)>(Q()|0)?(Z()|0)==0:0){u[s>>2]=e;zn(12);return-1}return e|0}function cC(n,e,r){n=n|0;e=e|0;r=r|0;var i=0;if((e|0)<(n|0)&(n|0)<(e+r|0)){i=n;e=e+r|0;n=n+r|0;while((r|0)>0){n=n-1|0;e=e-1|0;r=r-1|0;t[n>>0]=t[e>>0]|0}n=i}else iC(n,e,r)|0;return n|0}function lC(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;var i=0,o=0;o=v;v=v+16|0;i=o|0;oC(n,e,r,t,i)|0;v=o;return(L=u[i+4>>2]|0,u[i>>2]|0)|0}function sC(n){n=n|0;return(n&255)<<24|(n>>8&255)<<16|(n>>16&255)<<8|n>>>24|0}function dC(n,e,r,t,i,u){n=n|0;e=e|0;r=r|0;t=t|0;i=i|0;u=u|0;lL[n&1](e|0,r|0,t|0,i|0,u|0)}function _C(n,e,r){n=n|0;e=e|0;r=K(r);sL[n&1](e|0,K(r))}function vC(n,e,r){n=n|0;e=e|0;r=+r;dL[n&31](e|0,+r)}function pC(n,e,r,t){n=n|0;e=e|0;r=K(r);t=K(t);return K(_L[n&0](e|0,K(r),K(t)))}function mC(n,e){n=n|0;e=e|0;vL[n&127](e|0)}function bC(n,e,r){n=n|0;e=e|0;r=r|0;pL[n&31](e|0,r|0)}function hC(n,e){n=n|0;e=e|0;return mL[n&31](e|0)|0}function yC(n,e,r,t,i){n=n|0;e=e|0;r=+r;t=+t;i=i|0;bL[n&1](e|0,+r,+t,i|0)}function wC(n,e,r,t){n=n|0;e=e|0;r=+r;t=+t;hL[n&1](e|0,+r,+t)}function MC(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;return yL[n&7](e|0,r|0,t|0)|0}function kC(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;return+wL[n&1](e|0,r|0,t|0)}function gC(n,e){n=n|0;e=e|0;return+ML[n&15](e|0)}function TC(n,e,r){n=n|0;e=e|0;r=+r;return kL[n&1](e|0,+r)|0}function AC(n,e,r){n=n|0;e=e|0;r=r|0;return gL[n&15](e|0,r|0)|0}function SC(n,e,r,t,i,u){n=n|0;e=e|0;r=r|0;t=+t;i=+i;u=u|0;TL[n&1](e|0,r|0,+t,+i,u|0)}function EC(n,e,r,t,i,u,o){n=n|0;e=e|0;r=r|0;t=t|0;i=i|0;u=u|0;o=o|0;AL[n&1](e|0,r|0,t|0,i|0,u|0,o|0)}function CC(n,e,r){n=n|0;e=e|0;r=r|0;return+SL[n&7](e|0,r|0)}function LC(n){n=n|0;return EL[n&7]()|0}function RC(n,e,r,t,i,u){n=n|0;e=e|0;r=r|0;t=t|0;i=i|0;u=u|0;return CL[n&1](e|0,r|0,t|0,i|0,u|0)|0}function PC(n,e,r,t,i){n=n|0;e=e|0;r=r|0;t=t|0;i=+i;LL[n&1](e|0,r|0,t|0,+i)}function BC(n,e,r,t,i,u,o){n=n|0;e=e|0;r=r|0;t=K(t);i=i|0;u=K(u);o=o|0;RL[n&1](e|0,r|0,K(t),i|0,K(u),o|0)}function OC(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;PL[n&15](e|0,r|0,t|0)}function NC(n){n=n|0;BL[n&0]()}function IC(n,e,r,t){n=n|0;e=e|0;r=r|0;t=+t;OL[n&15](e|0,r|0,+t)}function FC(n,e,r){n=n|0;e=+e;r=+r;return NL[n&1](+e,+r)|0}function xC(n,e,r,t,i){n=n|0;e=e|0;r=r|0;t=t|0;i=i|0;IL[n&15](e|0,r|0,t|0,i|0)}function UC(n,e,r,t,i){n=n|0;e=e|0;r=r|0;t=t|0;i=i|0;X(0)}function HC(n,e){n=n|0;e=K(e);X(1)}function DC(n,e){n=n|0;e=+e;X(2)}function WC(n,e,r){n=n|0;e=K(e);r=K(r);X(3);return de}function YC(n){n=n|0;X(4)}function VC(n,e){n=n|0;e=e|0;X(5)}function jC(n){n=n|0;X(6);return 0}function qC(n,e,r,t){n=n|0;e=+e;r=+r;t=t|0;X(7)}function zC(n,e,r){n=n|0;e=+e;r=+r;X(8)}function GC(n,e,r){n=n|0;e=e|0;r=r|0;X(9);return 0}function KC(n,e,r){n=n|0;e=e|0;r=r|0;X(10);return 0.0}function XC(n){n=n|0;X(11);return 0.0}function JC(n,e){n=n|0;e=+e;X(12);return 0}function ZC(n,e){n=n|0;e=e|0;X(13);return 0}function QC(n,e,r,t,i){n=n|0;e=e|0;r=+r;t=+t;i=i|0;X(14)}function $C(n,e,r,t,i,u){n=n|0;e=e|0;r=r|0;t=t|0;i=i|0;u=u|0;X(15)}function nL(n,e){n=n|0;e=e|0;X(16);return 0.0}function eL(){X(17);return 0}function rL(n,e,r,t,i){n=n|0;e=e|0;r=r|0;t=t|0;i=i|0;X(18);return 0}function tL(n,e,r,t){n=n|0;e=e|0;r=r|0;t=+t;X(19)}function iL(n,e,r,t,i,u){n=n|0;e=e|0;r=K(r);t=t|0;i=K(i);u=u|0;X(20)}function uL(n,e,r){n=n|0;e=e|0;r=r|0;X(21)}function oL(){X(22)}function aL(n,e,r){n=n|0;e=e|0;r=+r;X(23)}function fL(n,e){n=+n;e=+e;X(24);return 0}function cL(n,e,r,t){n=n|0;e=e|0;r=r|0;t=t|0;X(25)}var lL=[UC,gk];var sL=[HC,qi];var dL=[DC,bu,hu,yu,wu,Mu,ku,gu,Au,Su,Cu,Lu,Ru,Pu,Bu,Ou,Nu,Iu,Fu,DC,DC,DC,DC,DC,DC,DC,DC,DC,DC,DC,DC,DC];var _L=[WC];var vL=[YC,WE,pf,mf,bf,Xd,Jd,Zd,hw,yw,ww,uk,ok,ak,oS,aS,fS,Me,Ji,eu,Tu,Eu,Ho,Do,Xa,Af,Vf,vc,Nc,il,El,zl,ds,Ns,$s,hd,xd,b_,F_,ev,wv,Hv,ip,Sp,jp,am,Cm,Yi,lb,Lb,Zb,hh,Fh,uy,by,wy,Dy,Vy,aw,gw,Sw,zw,_M,Sf,Rg,_T,PT,XT,wA,UA,JA,$A,YC,YC,YC,YC,YC,YC,YC,YC,YC,YC,YC,YC,YC,YC,YC,YC,YC,YC,YC,YC,YC,YC,YC,YC,YC,YC,YC,YC,YC,YC,YC,YC,YC,YC,YC,YC,YC,YC,YC,YC,YC,YC,YC,YC,YC,YC,YC,YC,YC,YC,YC,YC,YC,YC,YC,YC];var pL=[VC,ru,tu,ou,au,fu,cu,lu,su,vu,pu,mu,$u,ro,to,io,uo,oo,ao,_o,bo,Xo,Rp,Gp,kh,Og,MM,nT,VC,VC,VC,VC];var mL=[jC,KS,Xi,Du,ju,qu,zu,Gu,Ku,Xu,Zu,Qu,vo,po,Wo,Pm,Dh,Xw,Ug,Dg,jC,jC,jC,jC,jC,jC,jC,jC,jC,jC,jC,jC];var bL=[qC,Yo];var hL=[zC,lw];var yL=[GC,XS,JS,rE,fl,M_,vb,$T];var wL=[KC,td];var ML=[XC,no,eo,fo,Vo,jo,qo,zo,Go,Ko,XC,XC,XC,XC,XC,XC];var kL=[JC,_y];var gL=[ZC,YE,mo,ef,hc,Pl,Jl,Wd,D_,sm,zi,IT,ZC,ZC,ZC,ZC];var TL=[QC,Gf];var AL=[$C,TA];var SL=[nL,co,Jo,Zo,Qo,kd,nL,nL];var EL=[eL,$o,Gi,Di,Ay,Gy,Pw,tS];var CL=[rL,Ft];var LL=[tL,Tv];var RL=[iL,yo];var PL=[uL,Wu,Ju,lo,so,Uc,ms,Vv,fp,ji,Qk,bT,YA,uL,uL,uL];var BL=[oL];var OL=[aL,iu,uu,du,_u,xu,Uu,Hu,uv,Ob,fy,aL,aL,aL,aL,aL];var NL=[fL,pw];var IL=[cL,Us,Hm,eh,Xh,Py,$y,Uw,hM,qg,vS,cL,cL,cL,cL,cL];return{_llvm_bswap_i32:sC,dynCall_idd:FC,dynCall_i:LC,_i64Subtract:$E,___udivdi3:aC,dynCall_vif:_C,setThrew:be,dynCall_viii:OC,_bitshift64Lshr:tC,_bitshift64Shl:rC,dynCall_vi:mC,dynCall_viiddi:SC,dynCall_diii:kC,dynCall_iii:AC,_memset:eC,_sbrk:fC,_memcpy:iC,__GLOBAL__sub_I_Yoga_cpp:Hi,dynCall_vii:bC,___uremdi3:lC,dynCall_vid:vC,stackAlloc:_e,_nbind_init:LS,getTempRet0:ye,dynCall_di:gC,dynCall_iid:TC,setTempRet0:he,_i64Add:nC,dynCall_fiff:pC,dynCall_iiii:MC,_emscripten_get_global_libc:GS,dynCall_viid:IC,dynCall_viiid:PC,dynCall_viififi:BC,dynCall_ii:hC,__GLOBAL__sub_I_Binding_cc:Mg,dynCall_viiii:xC,dynCall_iiiiii:RC,stackSave:ve,dynCall_viiiii:dC,__GLOBAL__sub_I_nbind_cc:na,dynCall_vidd:wC,_free:zS,runPostSets:QE,dynCall_viiiiii:EC,establishStackSpace:me,_memmove:cC,stackRestore:pe,_malloc:qS,__GLOBAL__sub_I_common_cc:iM,dynCall_viddi:yC,dynCall_dii:CC,dynCall_v:NC}}(Module.asmGlobalArg,Module.asmLibraryArg,buffer),_llvm_bswap_i32=Module._llvm_bswap_i32=asm._llvm_bswap_i32,getTempRet0=Module.getTempRet0=asm.getTempRet0,___udivdi3=Module.___udivdi3=asm.___udivdi3,setThrew=Module.setThrew=asm.setThrew,_bitshift64Lshr=Module._bitshift64Lshr=asm._bitshift64Lshr,_bitshift64Shl=Module._bitshift64Shl=asm._bitshift64Shl,_memset=Module._memset=asm._memset,_sbrk=Module._sbrk=asm._sbrk,_memcpy=Module._memcpy=asm._memcpy,stackAlloc=Module.stackAlloc=asm.stackAlloc,___uremdi3=Module.___uremdi3=asm.___uremdi3,_nbind_init=Module._nbind_init=asm._nbind_init,_i64Subtract=Module._i64Subtract=asm._i64Subtract,setTempRet0=Module.setTempRet0=asm.setTempRet0,_i64Add=Module._i64Add=asm._i64Add,_emscripten_get_global_libc=Module._emscripten_get_global_libc=asm._emscripten_get_global_libc,__GLOBAL__sub_I_Yoga_cpp=Module.__GLOBAL__sub_I_Yoga_cpp=asm.__GLOBAL__sub_I_Yoga_cpp,__GLOBAL__sub_I_Binding_cc=Module.__GLOBAL__sub_I_Binding_cc=asm.__GLOBAL__sub_I_Binding_cc,stackSave=Module.stackSave=asm.stackSave,__GLOBAL__sub_I_nbind_cc=Module.__GLOBAL__sub_I_nbind_cc=asm.__GLOBAL__sub_I_nbind_cc,_free=Module._free=asm._free,runPostSets=Module.runPostSets=asm.runPostSets,establishStackSpace=Module.establishStackSpace=asm.establishStackSpace,_memmove=Module._memmove=asm._memmove,stackRestore=Module.stackRestore=asm.stackRestore,_malloc=Module._malloc=asm._malloc,__GLOBAL__sub_I_common_cc=Module.__GLOBAL__sub_I_common_cc=asm.__GLOBAL__sub_I_common_cc,dynCall_viiiii=Module.dynCall_viiiii=asm.dynCall_viiiii,dynCall_vif=Module.dynCall_vif=asm.dynCall_vif,dynCall_vid=Module.dynCall_vid=asm.dynCall_vid,dynCall_fiff=Module.dynCall_fiff=asm.dynCall_fiff,dynCall_vi=Module.dynCall_vi=asm.dynCall_vi,dynCall_vii=Module.dynCall_vii=asm.dynCall_vii,dynCall_ii=Module.dynCall_ii=asm.dynCall_ii,dynCall_viddi=Module.dynCall_viddi=asm.dynCall_viddi,dynCall_vidd=Module.dynCall_vidd=asm.dynCall_vidd,dynCall_iiii=Module.dynCall_iiii=asm.dynCall_iiii,dynCall_diii=Module.dynCall_diii=asm.dynCall_diii,dynCall_di=Module.dynCall_di=asm.dynCall_di,dynCall_iid=Module.dynCall_iid=asm.dynCall_iid,dynCall_iii=Module.dynCall_iii=asm.dynCall_iii,dynCall_viiddi=Module.dynCall_viiddi=asm.dynCall_viiddi,dynCall_viiiiii=Module.dynCall_viiiiii=asm.dynCall_viiiiii,dynCall_dii=Module.dynCall_dii=asm.dynCall_dii,dynCall_i=Module.dynCall_i=asm.dynCall_i,dynCall_iiiiii=Module.dynCall_iiiiii=asm.dynCall_iiiiii,dynCall_viiid=Module.dynCall_viiid=asm.dynCall_viiid,dynCall_viififi=Module.dynCall_viififi=asm.dynCall_viififi,dynCall_viii=Module.dynCall_viii=asm.dynCall_viii,dynCall_v=Module.dynCall_v=asm.dynCall_v,dynCall_viid=Module.dynCall_viid=asm.dynCall_viid,dynCall_idd=Module.dynCall_idd=asm.dynCall_idd,dynCall_viiii=Module.dynCall_viiii=asm.dynCall_viiii,initialStackTop;function ExitStatus(n){this.name="ExitStatus",this.message="Program terminated with exit("+n+")",this.status=n}Runtime.stackAlloc=Module.stackAlloc,Runtime.stackSave=Module.stackSave,Runtime.stackRestore=Module.stackRestore,Runtime.establishStackSpace=Module.establishStackSpace,Runtime.setTempRet0=Module.setTempRet0,Runtime.getTempRet0=Module.getTempRet0,Module.asm=asm,ExitStatus.prototype=new Error,ExitStatus.prototype.constructor=ExitStatus;var preloadStartTime=null,calledMain=!1;function run(n){function e(){Module.calledRun||(Module.calledRun=!0,ABORT||(ensureInitRuntime(),preMain(),Module.onRuntimeInitialized&&Module.onRuntimeInitialized(),Module._main&&shouldRunNow&&Module.callMain(n),postRun()))}n=n||Module.arguments,null===preloadStartTime&&(preloadStartTime=Date.now()),runDependencies>0||(preRun(),runDependencies>0||Module.calledRun||(Module.setStatus?(Module.setStatus("Running..."),setTimeout((function(){setTimeout((function(){Module.setStatus("")}),1),e()}),1)):e()))}function exit(n,e){e&&Module.noExitRuntime||(Module.noExitRuntime||(ABORT=!0,EXITSTATUS=n,STACKTOP=initialStackTop,exitRuntime(),Module.onExit&&Module.onExit(n)),ENVIRONMENT_IS_NODE&&process.exit(n),Module.quit(n,new ExitStatus(n)))}dependenciesFulfilled=function n(){Module.calledRun||run(),Module.calledRun||(dependenciesFulfilled=n)},Module.callMain=Module.callMain=function(n){n=n||[],ensureInitRuntime();var e=n.length+1;function r(){for(var n=0;n<3;n++)t.push(0)}var t=[allocate(intArrayFromString(Module.thisProgram),"i8",ALLOC_NORMAL)];r();for(var i=0;i<e-1;i+=1)t.push(allocate(intArrayFromString(n[i]),"i8",ALLOC_NORMAL)),r();t.push(0),t=allocate(t,"i32",ALLOC_NORMAL);try{exit(Module._main(e,t,0),!0)}catch(n){if(n instanceof ExitStatus)return;if("SimulateInfiniteLoop"==n)return void(Module.noExitRuntime=!0);var u=n;n&&"object"==typeof n&&n.stack&&(u=[n,n.stack]),Module.printErr("exception thrown: "+u),Module.quit(1,n)}finally{calledMain=!0}},Module.run=Module.run=run,Module.exit=Module.exit=exit;var abortDecorators=[];function abort(n){Module.onAbort&&Module.onAbort(n),void 0!==n?(Module.print(n),Module.printErr(n),n=JSON.stringify(n)):n="",ABORT=!0,EXITSTATUS=1;var e="abort("+n+") at "+stackTrace()+"\\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.";throw abortDecorators&&abortDecorators.forEach((function(r){e=r(e,n)})),e}if(Module.abort=Module.abort=abort,Module.preInit)for("function"==typeof Module.preInit&&(Module.preInit=[Module.preInit]);Module.preInit.length>0;)Module.preInit.pop()();var shouldRunNow=!0;Module.noInitialRun&&(shouldRunNow=!1),run()}));`))($module);
              var nbind = $module.exports;

  /**
   * Copyright (c) 2014-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * 
   * @format
   */




  var ran = false;
  var ret = null;

  nbind({}, function (err, result) {
    if (ran) {
      return;
    }

    ran = true;

    if (err) {
      throw err;
    }

    ret = result;
  });

  if (!ran) {
    throw new Error("Failed to load the yoga module - it needed to be loaded synchronously, but didn't");
  }

  // $FlowFixMe ret will not be null here
  var entryBrowser = entryCommon(ret.bind, ret.lib);

  return entryBrowser;

}());


  return Yoga
}

/**
 * Main entry point. This issues a request to the web worker to perform flexbox layout
 * on the given `styleTree`, calling the `callback` function with the results when finished.
 *
 * @param {FlexLayoutStyleNode} styleTree
 * @param {function(FlexLayoutResult)} callback
 */
function requestFlexLayout(styleTree, callback) {
  flexLayoutProcessorWorkerModule(styleTree).then(callback);
}

/**
 * @typedef {object<FlexLayoutResultNode>} FlexLayoutResult
 * Mapping of node ids to layout results.
 */

/**
 * @typedef {object} FlexLayoutResultNode - layout result for a single flex node.
 * @property {number} left - the node's computed left position
 * @property {number} top - the node's computed top position
 * @property {number} width - the node's computed width
 * @property {number} height - the node's computed height
 */


/**
 * @typedef {object} MeasureFunctionParams - Parameters for the `measureFunction`.
 * @property {string} text
 * @property {string} font
 * @property {number} fontSize
 * @property {number} lineHeight
 * @property {number} letterSpacing
 * @property {string} whiteSpace
 * @property {string} overflowWrap
 * @property {number} maxWidth
 */

/**
 * Factory for the flex layout processing function. This is injected into a web worker so it
 * must be entirely self-contained other than specific dependencies passed in as arguments.
 * @param {object} Yoga - The yoga-layout implementation object.
 * @param {function(fontUrl:string, callback:function)} loadFontFn - A function that
 *        loads a given font URL, invoking a callback when complete.
 * @param {function(MeasureFunctionParams):{width:number}} measureFunction - A function that
 *        measures the intrinsic dimensions for a block of text with given styles and
 *        constraints. The measurement must occur synchronously.
 * @return {function(FlexLayoutStyleNode):FlexLayoutResult}
 */
function createFlexLayoutProcessor(Yoga, loadFontFn, measureFunction) {

  const YOGA_VALUE_MAPPINGS = {
    align: {
      'auto': 'ALIGN_AUTO',
      'baseline': 'ALIGN_BASELINE',
      'center': 'ALIGN_CENTER',
      'flex-end': 'ALIGN_FLEX_END',
      'flex-start': 'ALIGN_FLEX_START',
      'stretch': 'ALIGN_STRETCH'
    },
    direction: {
      'column': 'FLEX_DIRECTION_COLUMN',
      'column-reverse': 'FLEX_DIRECTION_COLUMN_REVERSE',
      'row': 'FLEX_DIRECTION_ROW',
      'row-reverse': 'FLEX_DIRECTION_ROW_REVERSE'
    },
    edge: {
      top: 'EDGE_TOP',
      right: 'EDGE_RIGHT',
      bottom: 'EDGE_BOTTOM',
      left: 'EDGE_LEFT',
    },
    justify: {
      'center': 'JUSTIFY_CENTER',
      'flex-end': 'JUSTIFY_FLEX_END',
      'flex-start': 'JUSTIFY_FLEX_START',
      'space-around': 'JUSTIFY_SPACE_AROUND',
      'space-between': 'JUSTIFY_SPACE_BETWEEN'
    },
    position: {
      'absolute': 'POSITION_TYPE_ABSOLUTE',
      'relative': 'POSITION_TYPE_RELATIVE'
    },
    wrap: {
      'nowrap': 'WRAP_NO_WRAP',
      'wrap': 'WRAP_WRAP'
    }
  };

  const sides = ['Top', 'Right', 'Bottom', 'Left'];

  // Create functions for setting each supported style property on a Yoga node
  const YOGA_SETTERS = Object.create(null)
  // Simple properties
  ;[
    'width',
    'height',
    'minWidth',
    'minHeight',
    'maxWidth',
    'maxHeight',
    'aspectRatio',
    ['flexDirection', YOGA_VALUE_MAPPINGS.direction],
    'flex',
    ['flexWrap', YOGA_VALUE_MAPPINGS.wrap],
    'flexBasis',
    'flexGrow',
    'flexShrink',
    ['alignContent', YOGA_VALUE_MAPPINGS.align],
    ['alignItems', YOGA_VALUE_MAPPINGS.align],
    ['alignSelf', YOGA_VALUE_MAPPINGS.align],
    ['justifyContent', YOGA_VALUE_MAPPINGS.justify]
  ].forEach(styleProp => {
    let mapping = null;
    if (Array.isArray(styleProp)) {
      mapping = styleProp[1];
      styleProp = styleProp[0];
    }
    const setter = `set${styleProp.charAt(0).toUpperCase()}${styleProp.substr(1)}`;
    YOGA_SETTERS[styleProp] = mapping ?
      (yogaNode, value) => {
        if (mapping.hasOwnProperty(value)) {
          value = Yoga[mapping[value]];
          yogaNode[setter](value);
        }
      } :
      (yogaNode, value) => {
        yogaNode[setter](value);
      };
  });

  // Position-related properties
  YOGA_SETTERS.position = (yogaNode, value) => {
    yogaNode.setPositionType(Yoga[YOGA_VALUE_MAPPINGS.position[value]]);
  };
  sides.forEach(side => {
    const edgeConst = YOGA_VALUE_MAPPINGS.edge[side.toLowerCase()];
    YOGA_SETTERS[side.toLowerCase()] = (yogaNode, value) => {
      yogaNode.setPosition(Yoga[edgeConst], value);
    };
  })

  // Multi-side properties
  ;[
    'margin',
    'padding',
    'border'
  ].forEach(styleProp => {
    sides.forEach(side => {
      const edgeConst = YOGA_VALUE_MAPPINGS.edge[side.toLowerCase()];
      const setter = `set${styleProp.charAt(0).toUpperCase()}${styleProp.substr(1)}`;
      YOGA_SETTERS[`${styleProp}${side}`] = (yogaNode, value) => {
        yogaNode[setter](Yoga[edgeConst], value);
      };
    });
  });



  function ensureAllFontsLoaded(styleTree, callback) {
    const fonts = [];
    let loadedCount = 0;
    walkStyleTree(styleTree, node => {
      if (node.text) fonts.push(node.font); //may be undef
    });
    if (fonts.length) {
      for (let i = 0; i < fonts.length; i++) {
        loadFontFn(fonts[i], () => {
          loadedCount++;
          if (loadedCount === fonts.length) {
            callback();
          }
        });
      }
    } else {
      callback();
    }
  }

  function walkStyleTree(styleTree, callback) {
    callback(styleTree);
    if (styleTree.children) {
      for (let i = 0, len = styleTree.children.length; i < len; i++) {
        walkStyleTree(styleTree.children[i], callback);
      }
    }
  }

  function process(styleTree, callback) {
    // Init common node config
    const yogaConfig = Yoga.Config.create();
    yogaConfig.setPointScaleFactor(0); //disable value rounding

    // Ensure all fonts required for measuring text nodes within this layout are pre-loaded,
    // so that all text measurement calls can happen synchronously
    ensureAllFontsLoaded(styleTree, () => {
      // TODO for now, just to keep things simple, we'll rebuild the entire Yoga tree on every
      // call, but we should look into persisting it across calls for more efficient updates

      function populateNode(yogaNode, styleNode) {
        if (!styleNode) {
          throw new Error('Style node with no id')
        }

        for (let prop in styleNode) {
          if (styleNode.hasOwnProperty(prop)) {
            // Look for a style setter, and invoke it
            const setter = YOGA_SETTERS[prop];
            if (setter) {
              setter(yogaNode, styleNode[prop]);
            }
            // If the node has text, set up its measurement function
            else if (prop === 'text') {
              yogaNode.setMeasureFunc((innerWidth, widthMeasureMode, innerHeight, heightMeasureMode) => {
                const params = {
                  text: styleNode.text,
                  font: styleNode.font,
                  fontSize: styleNode.fontSize,
                  lineHeight: styleNode.lineHeight,
                  letterSpacing: styleNode.letterSpacing,
                  whiteSpace: styleNode.whiteSpace,
                  overflowWrap: styleNode.overflowWrap,
                  maxWidth: isNaN(innerWidth) ? Infinity : innerWidth
                };
                // NOTE: this assumes the measureFunction will exec the callback synchronously; this works
                // with current impl since we preload all needed fonts above, but it would be good to
                // formalize that contract in the LayoutEngine
                let result = measureFunction(params);
                if (result) {
                  // Apply a fudge factor to avoid issues where the flexbox layout result using this
                  // measurement ends up slightly smaller (due to rounding?) and making text wrap
                  result.width += styleNode.fontSize * 0.00001;
                }
                return result || {width: 0, height: 0}
              });
            }
          }
        }

        // Recurse to children
        if (styleNode.children) {
          for (let i = 0, len = styleNode.children.length; i < len; i++) {
            const childYogaNode = Yoga.Node.createWithConfig(yogaConfig);
            populateNode(childYogaNode, styleNode.children[i]);
            yogaNode.insertChild(childYogaNode, i);
          }
        }

        // Store the Yoga node on the style object, so we can access each Yoga node's original
        // context when traversing post-layout
        styleNode.yogaNode = yogaNode;
      }
      const root = Yoga.Node.createWithConfig(yogaConfig);
      populateNode(root, styleTree);

      // Perform the layout and collect the results as a flat id-to-computed-layout map
      root.calculateLayout();
      const results = Object.create(null);
      walkStyleTree(styleTree, styleNode => {
        const {id, yogaNode} = styleNode;
        results[id] = {
          left: yogaNode.getComputedLeft(),
          top: yogaNode.getComputedTop(),
          width: yogaNode.getComputedWidth(),
          height: yogaNode.getComputedHeight()
        };
      });
      root.freeRecursive();

      callback(results);
    });
  }

  return process
}


const flexLayoutProcessorWorkerModule = defineWorkerModule({
  name: 'FlexLayoutProcessor',
  dependencies: [
    yogaFactory,
    typesetterWorkerModule,
    createFlexLayoutProcessor,
    ThenableWorkerModule
  ],
  init(yogaFactory, layoutEngine, create, Thenable) {
    const Yoga = yogaFactory();
    function measure(params) {
      let result = null;
      layoutEngine.measure(params, r => {result = r;});
      return result
    }
    const process = create(Yoga, layoutEngine.loadFont, measure);
    return function(styleTree) {
      const thenable = new Thenable();
      process(styleTree, thenable.resolve);
      return thenable
    }
  }
});

///// Miscellaneous Utility Functions /////


/**
 * Pseudo-polyfilled shortcut for `Object.assign`. Copies own properties from
 * second-and-after arguments onto the first object, overwriting any that already
 * exist, and returns the first argument.
 * @return {object}
 */
const assign$7 = Object.assign || _assign$1;

// Non-native impl; exported for access by tests
function _assign$1(/*target, ...sources*/) {
  let target = arguments[0];
  for (let i = 1, len = arguments.length; i < len; i++) {
    let source = arguments[i];
    if (source) {
      for (let prop in source) {
        if (source.hasOwnProperty(prop)) {
          target[prop] = source[prop];
        }
      }
    }
  }
  return target
}


/**
 * Like {@link assign}, but will ony copy properties that do _not_ already
 * exist on the target object.
 * @return {object}
 */
function assignIf$1(/*target, ...sources*/) {
  let target = arguments[0];
  for (let i = 1, len = arguments.length; i < len; i++) {
    let source = arguments[i];
    if (source) {
      for (let prop in source) {
        if (source.hasOwnProperty(prop) && !target.hasOwnProperty(prop)) {
          target[prop] = source[prop];
        }
      }
    }
  }
  return target
}

/**
 * Like {@link assign}, but for any property where the source and target are both
 * sub-objects, does a deep recursive copy.
 * @param {object} target
 * @param {object} source
 */
function assignDeep$1(target, source) {
  if (source) {
    for (let prop in source) {
      if (source.hasOwnProperty(prop)) {
        if (target[prop] && typeof target[prop] === 'object' && typeof source[prop] === 'object') {
          assignDeep$1(target[prop], source[prop]);
        } else {
          target[prop] = source[prop];
        }
      }
    }
  }
}


/**
 * Iterate over an object's own (non-prototype-inherited) properties
 * @param {object} object - The object to iterate over
 * @param {function} fn - A function that will be invoked for each iterated property. It
 *        will be passed three arguments:
 *        - value (the property value)
 *        - key (the property name)
 *        - object (the object being iterated over)
 * @param {*} [scope] - An optional object to be used as `this` when calling the `fn`
 */
function forOwn$3(object, fn, scope) {
  for (let prop in object) {
    if (object.hasOwnProperty(prop)) {
      fn.call(scope, object[prop], prop, object);
    }
  }
}


/**
 * Given an object instance, return a consistent unique id for it.
 * @type function
 * @param {Object} obj - The object instance
 * @return {string} id
 */
const getIdForObject$1 = (() => {
  let objIds = new WeakMap();
  let lastId = 0;
  return function getIdForObject(obj) {
    let id = objIds.get(obj);
    if (!id) {
      objIds.set(obj, (id = `$id${++lastId}`));
    }
    return id
  }
})();


/**
 * Create a function that memoizes the result of another function based on the most
 * recent call's arguments and `this`. The arguments are compared using strict shallow equality.
 * @param {function} fn
 * @return {function}
 */
function memoize$1(fn) {
  let prevArgs, prevThis, prevResult;
  return function() {
    let changed = !prevArgs || this !== prevThis || arguments.length !== prevArgs.length;
    if (!changed) {
      for (let i = 0, len = arguments.length; i < len; i++) {
        if (arguments[i] !== prevArgs[i]) {
          changed = true;
          break
        }
      }
    }
    if (changed) {
      prevArgs = Array.prototype.slice.call(arguments);
      prevThis = this;
      prevResult = fn.apply(this, arguments);
    }
    return prevResult
  }
}


/**
 * Utility for the "extend-as" pattern used in several places to decorate facade
 * classes with extra capabilities.
 * @param {string} name - unique identifier for this class extension
 * @param {function} doExtend - the function that creates the actual class extension,
 *        this is passed the base class and will only be called once per base class.
 * @return {function(class): class}
 */
function createClassExtender$2(name, doExtend) {
  const cache = new WeakMap();
  return function(classToExtend) {
    let extended = cache.get(classToExtend);
    if (!extended) { //bidir check due to inheritance of statics
      extended = doExtend(classToExtend);
      cache.set(classToExtend, extended);
    }
    return extended
  }
}


/**
 * Determine whether a given object is a React element descriptor object, i.e. the
 * result of a JSX transpilation to React.createElement().
 * @param obj
 * @return {boolean}
 */
function isReactElement$1(obj) {
  const t = obj.$$typeof;
  return (t && t.toString && t.toString() === 'Symbol(react.element)') || false
}

var utils$1 = /*#__PURE__*/Object.freeze({
	__proto__: null,
	assign: assign$7,
	_assign: _assign$1,
	assignIf: assignIf$1,
	assignDeep: assignDeep$1,
	forOwn: forOwn$3,
	getIdForObject: getIdForObject$1,
	memoize: memoize$1,
	createClassExtender: createClassExtender$2,
	isReactElement: isReactElement$1
});

/**
 * The base class for all Facade classes.
 *
 * A Facade is basically just a class that receives property assignments from a scene descriptor
 * and manages forwarding the resulting state to more complex underlying implementation
 * objects, e.g. ThreeJS objects.
 *
 * The instantiated facade objects have a very simple lifecycle:
 *   - The `constructor` in which the initial state and the underyling implementation object(s)
 *     can be initialized. It will be passed a single argument: the `parent` facade object.
 *   - Updates to the object's properties, usually by direct assignment from the scene descriptor.
 *     These updates can be handled immediately by defining property setters that handle syncing
 *     new values to the underyling implementation object(s).
 *   - The `afterUpdate()` method which signals the end of all property updates; this can be
 *     implemented to handle syncing the full set of updated properties to the underlying
 *     implementation object(s). Useful if an aspect of the syncing relies on multiple properties
 *     or needs things to be synced in a specific order.
 *   - The `destructor` method which is always called when the object is removed from the scene.
 *     Implement this to remove and clean up the underlying implementation object(s) and other
 *     cleanup logic.
 *
 * Scene Descriptors:
 *
 * All facade instances are created, updated, and destroyed based on the current structure of
 * a scene descriptor object. The properties in the descriptor are generally just copied
 * directly to properties of the same names on the facade instance, which can handle them
 * either by custom setters or in `afterUpdate`. There are a few special properties in the
 * descriptor:
 *
 *   - `facade`: (required) a reference to the Facade class that will be instantiated.
 *   - `key`: (recommended) an identifier that is unique amongst the descriptor's siblings, which
 *     is used to associate the descriptor with its corresponding Facade instance. One will be
 *     assigned automatically if omitted, but it's recommended that you set one manually to ensure
 *     descriptors are predictably resolved to the same facade instances when siblings are being
 *     added or removed. Not doing so can lead to unnecessary facade destruction/creation and/or
 *     unpredictable facade states.
 *   - `children`: (optional) for `Parent` facade subclasses, defines the child object descriptors.
 *   - `ref`: (optional) a function that will be called with a reference to the instantiated Facade
 *     on creation, and with `null` on destruction, allowing external code to maintain references
 *     to individual facades.
 *   - `transition`: (optional) defines a set of properties that should be transitioned smoothly
 *     when their value changes. See `Animatable` for more details.
 *   - `animation`: (optional) defines one or more keyframe animations. See `Animatable` for more
 *     details.
 *   - `exitAnimation`: (optional) defines a keyframe animation to run when the facade is removed
 *     from its parent.
 *   - `pointerStates`: (optional) defines sets of property values that should be used in place
 *     of those defined on the main object, when the user's pointer (mouse, touch, vr controller,
 *     etc.) is in `hover` or `active` interaction state with the facade. See `PointerStates`
 *     for more details.
 *
 * It is also possible to define facade descriptors using JSX (https://reactjs.org/docs/introducing-jsx.html),
 * if it is precompiled to `React.createElement` calls. In this case, use the facade class as the JSX
 * element name instead of a `facade` property, and child descriptors are defined as nested JSX elements i
 * nstead of a `children` property. *NOTE:* While this is often a nicer looking syntax than the plain JS object
 * form, be aware that the creation of JSX elements does carry a slight performance cost from extra logic
 * and object allocations, so you should avoid it when defining large numbers of facades or when updating
 * descriptors on every frame.
 */
class Facade$1 {
  constructor(parent) {
    this.$facadeId = `facade${ idCounter$1++ }`;
    this.parent = parent;
  }

  /**
   * Performs a manual update of this facade, invoking the afterUpdate lifecycle method and triggering a
   * render. This can be called in event handlers, for example, to affect changes to this facade and its
   * subtree. This process is synchronous. Never override this method as a way to react to updates, as it
   * is not the only way a component is updated; instead override `afterUpdate` or use setters.
   * @param {object} [props] - A set of properties to be copied to the facade
   */
  update(props) {
    if (props && typeof props === 'object') {
      // Always assign transition and animation first
      this.transition = props.transition;
      this.animation = props.animation;
      for (let prop in props) {
        if (props.hasOwnProperty(prop) && !Facade$1.isSpecialDescriptorProperty(prop)) {
          this[prop] = props[prop];
        }
      }
    }
    this.afterUpdate();
    this.requestRender();
  }

  /**
   * Called at the end of an update batch, after all individual properties have been assigned.
   */
  afterUpdate() {
    // Handle calling ref function
    let ref = this.ref;
    if (ref !== this._lastRef) {
      if (typeof this._lastRef === 'function') {
        this._lastRef.call(null, null);
      }
      if (typeof ref === 'function') {
        ref.call(null, this);
        this._lastRef = ref;
      } else {
        this._lastRef = null;
      }
    }
  }

  /**
   * Dispatch a message with optional data up the facade parent tree.
   */
  notifyWorld(message, data) {
    if (this.parent) {
      this.parent.onNotifyWorld(this, message, data);
    }
  }

  /**
   * Default onNotifyWorld handler just bubbles it up the parent chain.
   */
  onNotifyWorld(source, message, data) {
    let notifiableParent = this._notifiableParent;
    if (notifiableParent) {
      notifiableParent.onNotifyWorld.call(notifiableParent, source, message, data);
    } else {
      // Optimization: on first call, walk up the tree looking for the first ancestor with a
      // non-default onNotifyWorld implementation, and save a pointer to that ancestor
      // facade so we can just call it directly the next time without any tree walking.
      notifiableParent = this.parent;
      let defaultImpl = Facade$1.prototype.onNotifyWorld;
      while (notifiableParent) {
        if (notifiableParent.onNotifyWorld !== defaultImpl) {
          this._notifiableParent = notifiableParent;
          notifiableParent.onNotifyWorld(source, message, data);
          break
        }
        notifiableParent = notifiableParent.parent;
      }
    }
  }

  /**
   * Notifies the top-level world manager that this object has changed in some way that affects its
   * visible rendering, so a rendering frame will be scheduled.
   */
  requestRender() {
    this.notifyWorld('needsRender');
  }

  traverse(fn) {
    fn(this);
  }

  forEachChild(fn) {
  }

  /**
   * Add an event listener for the given event type.
   * @param {String} type
   * @param {Function} handler
   */
  addEventListener(type, handler) {
    this.notifyWorld('addEventListener', {type, handler});
  }

  /**
   * Remove an event listener for the given event type.
   * @param {String} type
   * @param {Function} handler
   */
  removeEventListener(type, handler) {
    this.notifyWorld('removeEventListener', {type, handler});
  }

  /**
   * Dispatch an Event object on this facade, with DOM events bubbling logic.
   * @param {Event} event
   */
  dispatchEvent(event) {
    this.notifyWorld('dispatchEvent', event);
  }

  /**
   * Called when the instance is being removed from the scene. Override this to implement any
   * custom cleanup logic.
   */
  destructor() {
    // Unregister all event listeners from the world
    if (this.parent) {
      this.notifyWorld('removeAllEventListeners');
    }

    // Teardown refs
    if (typeof this.ref === 'function') {
      this.ref.call(null, null);
    }
    this.parent = this._notifiableParent = null;
  }
}

assign$7(Facade$1.prototype, {
  ref: null,
  _lastRef: null,
  _notifiableParent: null
});


let idCounter$1 = 0;
const DEF_SPECIAL_PROPS$1 = {key:1, facade:1, transition:1, animation:1};

/**
 * @static
 * Determine if a certain property name is one of the special descriptor properties
 */
Facade$1.isSpecialDescriptorProperty = function(name) {
  return DEF_SPECIAL_PROPS$1.hasOwnProperty(name)
};

/**
 * @static
 * Define a property name as an event handler for a given Facade class, so that it
 * automatically updates the global event registry when set.
 * @param {class} facadeClass - the class whose prototype the property should be defined on
 * @param {String} propName - the name of the event handler property, e.g. 'onMouseOver'
 * @param {String} eventType - the type of the event that will trigger the handler, e.g. 'mouseover'
 */
Facade$1.defineEventProperty = function(facadeClass, propName, eventType) {
  let privateProp = `${propName}➤handler`;
  Object.defineProperty(facadeClass.prototype, propName, {
    get() {
      return this[privateProp]
    },
    set(handler) {
      const oldHandler = this[privateProp];
      if ((handler || null) !== (oldHandler || null)) {
        // Remove old listener
        if (typeof oldHandler === 'function') {
          this.removeEventListener(eventType, oldHandler);
        }
        // Add new listener
        if (typeof handler === 'function') {
          this.addEventListener(eventType, handler);
        }
        this[privateProp] = handler;
      }
    }
  });
};

/*
 * Built-in easing functions for use in Troika animations. Any of the easings defined here
 * may be referred to within Tweens by their exported symbol name, or by reference.
 * 
 * The implementations here are roughly based on the logic from the jQuery Easing plugin
 * (original license blocks are maintained below for completeness), but they have been
 * significantly rewritten to use a single 0-1 time argument signature, converted to ES2015
 * syntax, and otherwise modified for succinctness or performance.
 */

const {pow: pow$1, PI: PI$1, sqrt: sqrt$1} = Math;
const HALF_PI$1 = PI$1 / 2;
const TWO_PI$1 = PI$1 * 2;


// factories for common easing function patterns
function makeInOut$1(inFn, outFn) {
  return t => t < 0.5 ? inFn(t * 2) * 0.5 : outFn(t * 2 - 1) * 0.5 + 0.5
}
function makeExpIn$1(exp) {
  return t => pow$1(t, exp)
}
function makeExpOut$1(exp) {
  return t => 1 - pow$1(1 - t, exp)
}
function makeExpInOut$1(exp) {
  return t => t < 0.5 ?
    pow$1(t * 2, exp) * 0.5 :
    (1 - pow$1(1 - (t * 2 - 1), exp)) * 0.5 + 0.5
}


const linear$1$1 = t => t;

const easeInQuad$1 = makeExpIn$1(2);
const easeOutQuad$1 = makeExpOut$1(2);
const easeInOutQuad$1 = makeExpInOut$1(2);

const easeInCubic$1 = makeExpIn$1(3);
const easeOutCubic$1 = makeExpOut$1(3);
const easeInOutCubic$1 = makeExpInOut$1(3);

const easeInQuart$1 = makeExpIn$1(4);
const easeOutQuart$1 = makeExpOut$1(4);
const easeInOutQuart$1 = makeExpInOut$1(4);

const easeInQuint$1 = makeExpIn$1(5);
const easeOutQuint$1 = makeExpOut$1(5);
const easeInOutQuint$1 = makeExpInOut$1(5);

const easeInSine$1 = t => 1 - Math.cos(t * (HALF_PI$1));
const easeOutSine$1 = t => Math.sin(t * (HALF_PI$1));
const easeInOutSine$1 = t => -0.5 * (Math.cos(PI$1 * t) - 1);

const easeInExpo$1 = t =>
  (t === 0) ? 0 : pow$1(2, 10 * (t - 1));

const easeOutExpo$1 = t =>
  (t === 1) ? 1 : 1 - pow$1(2, -10 * t);

const easeInOutExpo$1 = t =>
  (t === 0 || t === 1) ? t :
  t < 0.5 ?
    pow$1(2, 10 * (t * 2 - 1)) * 0.5 :
    (1 - pow$1(2, -10 * (t * 2 - 1))) * 0.5 + 0.5;

const easeInCirc$1 = t =>
  1 - sqrt$1(1 - t * t);

const easeOutCirc$1 = t =>
  sqrt$1(1 - pow$1(t - 1, 2));

const easeInOutCirc$1 = makeInOut$1(easeInCirc$1, easeOutCirc$1);

const easeInElastic$1 = t =>
  (t === 0 || t === 1) ? t : 1 - easeOutElastic$1(1 - t);

const easeOutElastic$1 = t =>
  (t === 0 || t === 1) ? t :
    Math.pow(2, -10 * t) * Math.sin((t - 0.075) * TWO_PI$1 / 0.3) + 1;

const easeInOutElastic$1 = makeInOut$1(easeInElastic$1, easeOutElastic$1);

const easeInBack$1 = t =>
  t * t * (2.70158 * t - 1.70158);

const easeOutBack$1 = t =>
  (t -= 1) * t * (2.70158 * t + 1.70158) + 1;

const easeInOutBack$1 = t => {
  const s = 1.70158 * 1.525;
  return (t *= 2) < 1 ? 
    0.5 * (t * t * ((s + 1) * t - s)) : 
    0.5 * ((t -= 2) * t * ((s + 1) * t + s) + 2)
};

const easeInBounce$1 = t => 
  1 - easeOutBounce$1(1 - t);

const easeOutBounce$1 = t => 
  t < (1 / 2.75) ? 
    (7.5625 * t * t) :
  t < (2 / 2.75) ? 
    (7.5625 * (t -= (1.5 / 2.75)) * t + .75) :
  t < (2.5 / 2.75) ? 
    (7.5625 * (t -= (2.25 / 2.75)) * t + .9375) :
    (7.5625 * (t -= (2.625 / 2.75)) * t + .984375);

const easeInOutBounce$1 = makeInOut$1(easeInBounce$1, easeOutBounce$1);

// Aliases...?
// export {
//   easeInBack as swingFrom,
//   easeOutBack as swingTo,
//   easeInOutBack as swingFromTo,
//   easeOutBounce as bounce,
//   easeFrom
// }





// ===== License blocks from originating works: =====

/*
 * jQuery Easing v1.3 - http://gsgd.co.uk/sandbox/jquery/easing/
 *
 * Uses the built in easing capabilities added In jQuery 1.1
 * to offer multiple easing options
 *
 * TERMS OF USE - jQuery Easing
 *
 * Open source under the BSD License.
 *
 * Copyright Â© 2008 George McGinley Smith
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this list of
 * conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright notice, this list
 * of conditions and the following disclaimer in the documentation and/or other materials
 * provided with the distribution.
 *
 * Neither the name of the author nor the names of contributors may be used to endorse
 * or promote products derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 *  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
 *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 *
*/

/*
 *
 * TERMS OF USE - EASING EQUATIONS
 *
 * Open source under the BSD License.
 *
 * Copyright Â© 2001 Robert Penner
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this list of
 * conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright notice, this list
 * of conditions and the following disclaimer in the documentation and/or other materials
 * provided with the distribution.
 *
 * Neither the name of the author nor the names of contributors may be used to endorse
 * or promote products derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 *  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
 *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

var Easings$1 = /*#__PURE__*/Object.freeze({
	__proto__: null,
	linear: linear$1$1,
	easeInQuad: easeInQuad$1,
	easeOutQuad: easeOutQuad$1,
	easeInOutQuad: easeInOutQuad$1,
	easeInCubic: easeInCubic$1,
	easeOutCubic: easeOutCubic$1,
	easeInOutCubic: easeInOutCubic$1,
	easeInQuart: easeInQuart$1,
	easeOutQuart: easeOutQuart$1,
	easeInOutQuart: easeInOutQuart$1,
	easeInQuint: easeInQuint$1,
	easeOutQuint: easeOutQuint$1,
	easeInOutQuint: easeInOutQuint$1,
	easeInSine: easeInSine$1,
	easeOutSine: easeOutSine$1,
	easeInOutSine: easeInOutSine$1,
	easeInExpo: easeInExpo$1,
	easeOutExpo: easeOutExpo$1,
	easeInOutExpo: easeInOutExpo$1,
	easeInCirc: easeInCirc$1,
	easeOutCirc: easeOutCirc$1,
	easeInOutCirc: easeInOutCirc$1,
	easeInElastic: easeInElastic$1,
	easeOutElastic: easeOutElastic$1,
	easeInOutElastic: easeInOutElastic$1,
	easeInBack: easeInBack$1,
	easeOutBack: easeOutBack$1,
	easeInOutBack: easeInOutBack$1,
	easeInBounce: easeInBounce$1,
	easeOutBounce: easeOutBounce$1,
	easeInOutBounce: easeInOutBounce$1
});

/**
 * Simple numeric interpolator function
 */
function number$1(fromValue, toValue, progress) {
  return fromValue + (toValue - fromValue) * progress
}

/**
 * Interpolator for color values; decomposes the color into r/g/b channels and does
 * numeric interpolation on each individually. The result is a 24-bit integer value
 * holding the r/g/b channels in its 3 bytes.
 */
function color$1(fromValue, toValue, progress) {
  fromValue = colorValueToNumber$1(fromValue);
  toValue = colorValueToNumber$1(toValue);
  return rgbToNumber$1(
    number$1(fromValue >> 16 & 255, toValue >> 16 & 255, progress),
    number$1(fromValue >> 8 & 255, toValue >> 8 & 255, progress),
    number$1(fromValue & 255, toValue & 255, progress)
  )
}



/**
 * Utility for converting one of the supported color value types to a 24-bit numeric color
 * representation.
 * @param {*} value - The input value to translate. Supported types:
 * - 24-bit number: simply returned as is
 * - string value: evaluated using a canvas context, so supports color keywords, rgb(), hsl(), etc.
 * - a three.js `Color` object
 * @return {*}
 */
const colorValueToNumber$1 = (function() {
  let colorCanvas, colorCanvasCtx;

  // Cache for evaluated string values
  let stringCache = Object.create(null);
  let stringCacheSize = 0;
  const stringCacheMaxSize = 2048;

  return function(value) {
    if (typeof value === 'number') {
      return value
    }
    else if (typeof value === 'string') {
      if (value in stringCache) {
        return stringCache[value]
      }

      // 2D canvas for evaluating string values
      if (!colorCanvas) {
        colorCanvas = document.createElement('canvas');
        colorCanvasCtx = colorCanvas.getContext('2d');
      }

      colorCanvas.width = colorCanvas.height = 1;
      colorCanvasCtx.fillStyle = value;
      colorCanvasCtx.fillRect(0, 0, 1, 1);
      const colorData = colorCanvasCtx.getImageData(0, 0, 1, 1).data;
      const result = rgbToNumber$1(colorData[0], colorData[1], colorData[2]);

      // Enforce max cache size - for now this invalidates the entire cache when reaching
      // the max size; we could use a true LRU cache but hitting the max size should be rare
      // in real world usage so this should suffice as a simple memory size protection.
      if (stringCacheSize > stringCacheMaxSize) {
        stringCache = Object.create(null);
        stringCacheSize = 0;
      }

      // Put into cache
      stringCache[value] = result;
      stringCacheSize++;

      return result
    }
    else if (value && value.isColor) {
      return value.getHex()
    }
    else {
      return 0 //fallback to black
    }
  }
})();

function rgbToNumber$1(r, g, b) {
  return r << 16 ^ g << 8 ^ b
}

var Interpolators$1 = /*#__PURE__*/Object.freeze({
	__proto__: null,
	number: number$1,
	color: color$1
});

/**
 * @interface AbstractTween
 * Defines the interface expected by `Runner` for tween-like things.
 */
class AbstractTween$1 {
  /**
   * @abstract
   * For a given elapsed time relative to the start of the tween, calculates the value at that time and calls the
   * `callback` function with that value. If the given time is during the `delay` period, the callback will not be
   * invoked.
   * @param {number} time
   */
  gotoElapsedTime(time) {}

  /**
   * @abstract
   * Like `gotoElapsedTime` but goes to the very end of the tween.
   */
  gotoEnd() {}

  /**
   * @abstract
   * For a given elapsed time relative to the start of the tween, determines if the tween is in its completed end state.
   * @param {number} time
   * @return {boolean}
   */
  isDoneAtElapsedTime(time) {}
}

const linear$2 = v => v;
const maxSafeInteger$1 = 0x1fffffffffffff;

/**
 * @class Tween
 * Represents a transition between two values across a duration of time.
 *
 * Typically you will create a Tween between two values, with a callback function to handle the intermediate values,
 * and then start the Tween in a {@link Runner} which will start invoking the tween on each animation frame until
 * it reaches the end of its duration.
 *
 * @param callback {Function} a function that will be called with the current tween value at a given point in time.
 * @param fromValue {*} the beginning value
 * @param toValue {*} the ending value
 * @param duration {Number} the duration of the tween in milliseconds
 * @param [delay] {Number} optional time in milliseconds to wait before starting the tween
 * @param [easing] {Function|String} optional easing to be applied to the tween values. Can either be a function
 *        that takes a value from 0 to 1 and returns a corresponding "eased" value, or a string that matches the
 *        name of one of the common Penner easing functions - see http://easings.net/ Defaults to linear easing.
 * @param [iterations] {Number} optional number of times to repeat the tween animation. For endless repeating,
 *        specify `Infinity`.
 * @param [direction] {String} direction to run the tween; one of 'forward', 'reverse', or 'alternate'. For
 *        'alternate', it will toggle between forward and reverse on each iteration.
 * @param [interpolate] {String|Function} how tweened values should be calculated between the fromValue and toValue.
 *        Can be the string name for one of the built-in interpolators in Interpolators.js, or a custom function that
 *        will be passed 3 arguments: `fromValue`, `toValue`, and `progress` from 0 to 1.
 */
class Tween$2 extends AbstractTween$1 {
  constructor(callback, fromValue, toValue, duration=750, delay=0, easing=linear$2, iterations=1, direction='forward', interpolate='number') {
    super();
    this.callback = callback;
    this.fromValue = fromValue;
    this.toValue = toValue;
    this.duration = duration;
    this.delay = delay;
    this.easing = typeof easing === 'string' ? (Easings$1[easing] || linear$2) : easing;
    this.iterations = iterations;
    this.direction = direction;
    this.interpolate = typeof interpolate === 'function' ? interpolate : Interpolators$1[interpolate] || number$1;

    /**
     * @property totalElapsed
     * @type {number}
     * The total duration of this tween from 0 to its completion, taking into account its `duration`, `delay`, and
     * `iterations`. This is calculated once upon instantiation, and may be used to determine whether the tween is
     * finished or not at a given time.
     */
    this.totalElapsed = this.iterations < maxSafeInteger$1 ? this.delay + (this.duration * this.iterations) : maxSafeInteger$1;
  }

  /**
   * For a given elapsed time relative to the start of the tween, calculates the value at that time and calls the
   * `callback` function with that value. If the given time is during the `delay` period, the callback will not be
   * invoked.
   * @param {number} time
   */
  gotoElapsedTime(time) {
    let duration = this.duration;
    let delay = this.delay;
    if (time >= delay) {
      time = Math.min(time, this.totalElapsed) - delay; //never go past final value
      let progress = (time % duration) / duration;
      if (progress === 0 && time !== 0) progress = 1;
      progress = this.easing(progress);
      if (this.direction === 'reverse' || (this.direction === 'alternate' && Math.ceil(time / duration) % 2 === 0)) {
        progress = 1 - progress;
      }
      this.callback(this.interpolate(this.fromValue, this.toValue, progress));
    }
  }

  /**
   * Like `gotoElapsedTime` but goes to the very end of the tween.
   */
  gotoEnd() {
    this.gotoElapsedTime(this.totalElapsed);
  }

  /**
   * For a given elapsed time relative to the start of the tween, determines if the tween is in its completed end state.
   * @param {number} time
   * @return {boolean}
   */
  isDoneAtElapsedTime(time) {
    return time > this.totalElapsed
  }
}

var Tween$1$1 = Tween$2;

/**
 * A specialized Tween that controls one or more other tweens. The controlled tweens are treated as a
 * single unit and the easing/iterations/etc. are applied across the total duration of all tweens.
 */
class MultiTween$2 extends Tween$1$1 {
  constructor(tweens, duration, delay, easing, iterations, direction) {
    if (typeof duration !== 'number') {
      // Calculate duration based on the longest individual total duration
      duration = tweens.reduce((dur, tween) => Math.max(dur, tween.totalElapsed), 0);
    }
    if (duration === Infinity) {
      // Make an infinite duration finite, so easing math still works
      duration = Number.MAX_VALUE;
    }

    // Tween the total duration time
    super(null, 0, duration, duration, delay, easing, iterations, direction);
    if (tweens.length === 1) {
      this.callback = tweens[0].gotoElapsedTime.bind(tweens[0]);
    } else {
      tweens.sort(endTimeComparator$1); //sort by end time to ensure proper iteration in syncTweens
      this.callback = this._syncTweens;
    }
    this.tweens = tweens;
  }

  _syncTweens(time) {
    // NOTE: forward iteration is important here so the tweens are evaluated in order
    // of when they end; that way later tweens will take precedence over earlier ones.
    // TODO would be nice to ignore tweens past their totalElapsed entirely, but have to
    // figure out how to do that while ensuring they don't get stuck with a value that is
    // slightly prior to their end state.
    for (let i = 0, len = this.tweens.length; i < len; i++) {
      this.tweens[i].gotoElapsedTime(time);
    }
  }
}

function endTimeComparator$1(a, b) {
  return a.totalElapsed - b.totalElapsed
}

var MultiTween$1$1 = MultiTween$2;

let runners$1 = [];
let nextFrameTimer$1 = null;
let hasStoppedRunners$1 = false;

function noop$3() {}

function isRunnerRunning$1(runner) {return runner.runner$running}
function isTweenNotStopped$1(tween) {return !tween.runner$stopped}

function tick$1() {
  let now = Date.now();
  nextFrameTimer$1 = null;

  // Filter out any runners that were stopped since last tick
  if (hasStoppedRunners$1) {
    runners$1 = runners$1.filter(isRunnerRunning$1);
    hasStoppedRunners$1 = false;
  }

  if (runners$1.length) {
    // Sync each runner, filtering out empty ones as we go
    for (let i = runners$1.length; i-- > 0;) {
      runners$1[i]._tick(now);
    }
    // Queue next tick if there are still active runners
    queueFrame$1();
  }
}

let _scheduler$1 = window;

function queueFrame$1() {
  if (!nextFrameTimer$1) {
    nextFrameTimer$1 = _scheduler$1.requestAnimationFrame(tick$1);
  }
}


function startRunner$1(runner) {
  if (!runner.runner$running) {
    runner.runner$running = true;
    runners$1.push(runner);
    queueFrame$1();
  }
}

function stopRunner$1(runner) {
  runner.runner$running = false;
  hasStoppedRunners$1 = true;
}


/**
 * @class Runner
 * A container for {@link Tween} instances that handles invoking them on each animation frame.
 */
class Runner$2 {
  constructor() {
    this.tweens = [];
  }

  destructor() {
    this.tweens = null;
    stopRunner$1(this);
    this.start = this.stop = this.pause = this._tick = noop$3;
  }

  /**
   * Add a tween to the runner. It will be invoked on the next frame, not immediately.
   * @param {Tween} tween
   */
  start(tween) {
    // If previously paused, update start time to account for the duration of the pause
    if (tween.runner$paused && tween.runner$started) {
      tween.runner$started += (Date.now() - tween.runner$paused);
    } else {
      this.tweens.push(tween);
    }
    tween.runner$paused = null;
    tween.runner$stopped = false;

    // add runner to running runners
    startRunner$1(this);
  }

  /**
   * Remove a tween from the runner.
   * @param tween
   */
  stop(tween) {
    // queue tween for removal from list on next tick
    tween.runner$stopped = true;
    tween.runner$paused = null;
  }

  /**
   * Pause a tween; call `runner.start(tween)` to unpause it
   * @param tween
   */
  pause(tween) {
    if (!tween.runner$paused) {
      tween.runner$paused = Date.now();
    }
  }

  /**
   * Stop all running tweens.
   */
  stopAll() {
    if (this.tweens) {
      this.tweens.forEach(this.stop, this);
    }
  }

  _tick(now) {
    let tweens = this.tweens;
    let hasStoppedTweens = false;
    let hasRunningTweens = false;

    // Sync each tween, filtering out old finished ones as we go
    for (let i = 0, len = tweens.length; i < len; i++) {
      let tween = tweens[i];
      if (!tween.runner$stopped && !tween.runner$paused) {
        // Sync the tween to current time
        let elapsed = now - (tween.runner$started || (tween.runner$started = now));
        tween.gotoElapsedTime(elapsed);
        hasRunningTweens = true;

        // Queue for removal if we're past its end time
        if (tween.isDoneAtElapsedTime(elapsed)) {
          this.stop(tween);
          if (tween.onDone) {
            tween.onDone();
          }
        }
      }
      if (tween.runner$stopped) {
        hasStoppedTweens = true;
      }
    }

    if (hasRunningTweens) {
      this.onTick();
    }

    // Prune list if needed
    // TODO perhaps batch this up so it happens less often
    if (hasStoppedTweens) {
      this.tweens = tweens.filter(isTweenNotStopped$1);

      // remove runner from running runners if it has no tweens left
      if (!this.tweens.length) {
        stopRunner$1(this);
        if (this.onDone) {
          this.onDone();
        }
      }
    }
  }

  /**
   * Override to specify a function that will be called at the end of every frame, after all
   * tweens have been updated.
   */
  onTick() {
    // abstract
  }

  /**
   * Override to specify a function that will be called after all running tweens have completed.
   */
  onDone() {
    // abstract
  }
}

var Runner$1$1 = Runner$2;

/**
 * Preset spring physics configurations.
 * For convenience, these match the presets defined by react-spring: https://www.react-spring.io/docs/hooks/api
 */
var PRESETS$1 = {
  default: { mass: 1, tension: 170, friction: 26 },
  gentle: { mass: 1, tension: 120, friction: 14 },
  wobbly: { mass: 1, tension: 180, friction: 12 },
  stiff: { mass: 1, tension: 210, friction: 20 },
  slow: { mass: 1, tension: 280, friction: 60 },
  molasses: { mass: 1, tension: 280, friction: 120 }
};

// Factors to be applied to the tension and friction values; these match those used by
// react-spring internally, so that users can use the same spring configs as they would
// in react-spring.
const tensionFactor$1 = 0.000001;
const frictionFactor$1 = 0.001;

const DEFAULTS$1 = PRESETS$1.default;

/**
 * @class SpringTween
 * Represents a transition between two values based on spring physics.
 *
 * This is very similar to `Tween`, except that it does not have a fixed duration. Instead, it advances a simple
 * spring physics simulation on each call to `gotoElapsedTime`. Since it depends on being advanced in forward-time
 * order, it cannot be repeated or run in a reverse direction. It is also not usable as a member of a `MultiTween`.
 *
 * The `toValue` property can be modified at any time while the simulation is running, and the velocity will be
 * maintained; this makes spring tweens more useful than duration-based tweens for objects whose target values are
 * changed rapidly over time, e.g. drag-drop.
 *
 * Non-numeric interpolations are not yet supported.
 *
 * @param callback {Function} a function that will be called with the current tween value at a given point in time.
 * @param {number} fromValue - the beginning value
 * @param {number} toValue - the initial ending value; this can be modified later by setting the `toValue` property
 * @param {string|object} springConfig - the physical configuration of the spring physics simulation. Either an object
 *        with `mass`, `tension`, and `friction` properties, or a string corresponding to one of the presets defined
 *        in `SpringPresets.js`. Defaults to the "default" preset.
 * @param {number} springConfig.mass - the mass of the simulated object being moved
 * @param {number} springConfig.tension - the spring's tension constant accelerating the simulated object
 * @param {number} springConfig.friction - the friction force decelerating the simulated object
 * @param {number} [initialVelocity] - velocity of the object at the start of the simulation
 * @param {number} [delay] optional time in milliseconds to wait before starting the simulation
 */
class SpringTween$2 extends AbstractTween$1 {
  constructor (
    callback,
    fromValue,
    toValue,
    springConfig,
    initialVelocity = 0,
    delay = 0
  ) {
    super();
    this.isSpring = true;
    this.callback = callback;
    this.currentValue = fromValue;
    this.toValue = toValue;
    this.velocity = initialVelocity;
    this.delay = delay;

    if (typeof springConfig === 'string') {
      springConfig = PRESETS$1[springConfig];
    }
    if (!springConfig) springConfig = DEFAULTS$1;
    const {mass, tension, friction} = springConfig;
    this.mass = typeof mass === 'number' ? mass : DEFAULTS$1.mass;
    this.tension = (typeof tension === 'number' ? tension : DEFAULTS$1.tension) * tensionFactor$1;
    this.friction = (typeof friction === 'number' ? friction : DEFAULTS$1.friction) * frictionFactor$1;
    this.minAcceleration = 1e-10; // in units/ms^2 - TODO make this configurable

    this.$lastTime = delay;
    this.$endTime = Infinity; //unknown until simulation is stepped to the end state
  }

  gotoElapsedTime (time) {
    if (time >= this.delay) {
      let { toValue, mass, tension, friction, minAcceleration } = this;
      let velocity = this.velocity || 0;
      let value = this.currentValue;

      // Step simulation by 1ms
      for (let t = this.$lastTime; t < time; t++) {
        const acceleration = (tension * (toValue - value) - friction * velocity) / mass;
        // Acceleration converges to zero near end state
        if (Math.abs(acceleration) < minAcceleration) {
          velocity = 0;
          value = toValue;
          this.$endTime = t;
          break
        } else {
          velocity += acceleration;
          value += velocity;
        }
      }
      this.velocity = velocity;
      this.$lastTime = time;
      this.callback(this.currentValue = value);
    }
  }

  gotoEnd () {
    this.velocity = 0;
    this.$lastTime = this.$endTime;
    this.callback(this.currentValue = this.toValue);
  }

  isDoneAtElapsedTime (time) {
    return time >= this.$endTime
  }
}

var SpringTween$1$1 = SpringTween$2;

const DEFAULT_DURATION$1 = 750;
const DEFAULT_EASING$1 = 'easeOutCubic';

const TEMP_ARRAY$1$1 = [null];

function animationIdJsonReplacer$1(key, value) {
  return key === 'paused' ? undefined : value === Infinity ? 'Infinity' : value
}

function compareByTime$1(a, b) {
  return a.time - b.time
}

const extendAsAnimatable$1 = createClassExtender$2('animatable', function(BaseFacadeClass) {
  class AnimatableFacade extends BaseFacadeClass {

    constructor(...args) {
      super(...args);

      // Create root runner for all this object's animation and transition tweens
      this.animation$runner = new Runner$1$1();
      this.animation$runner.onTick = () => {
        this.afterUpdate();
        this.requestRender();
      };
    }

    /**
     * Handle the special "transition" property. The descriptor should be an object with
     * transitionable property names as keys and transition parameters as values. The
     * transition parameters can either be objects describing the transition parameters,
     * or `true` for a default transition.
     *
     *   transition: {
     *     x: true, // uses a default duration-based transition
     *     y: 'spring', //uses a default spring-based transition
     *     z: {
     *       // ...custom transition config
     *     }
     *   }
     *
     * The custom transition config object can take one of two forms for duration- vs.
     * spring-based animations:
     *
     * Duration-based:
     *
     *   {
     *     duration: n, //in ms, defaults to 750
     *     easing: e, //easing function, defaults to 'easeOutCubic'
     *     delay: n, //in ms, defaults to 0
     *     interpolate: 'number' //one of the builtin named interpolators ('number', 'color', etc.) or a custom Function
     *   }
     *
     * Spring-based:
     *
     *   {
     *     spring: s, //either `true`, a named preset string e.g. "wobbly", or an object with {mass, tension, friction}
     *     delay: n //in ms, defaults to 0
     *   }
     *
     * Note that spring-based transitions do not currently support custom interpolations so they should only be used
     * for numeric values.
     */
    set transition(descriptor) {
      if (descriptor) {
        // Ensure setter/getter has been created for all props in transition
        for (let propName in descriptor) {
          if (descriptor.hasOwnProperty(propName)) {
            defineTransitionPropInterceptor(propName, this);
          }
        }
      }
      this.transition$descriptor = descriptor;
    }
    get transition() {
      return this.transition$descriptor
    }


    /**
     * Handle the special "animation" property. The descriptor should be an object or array
     * of objects defining a set of keyframes and their playback parameters. Keyframes are
     * defined by numeric keys from 0 to 100, each defining an object with the target
     * property values for that keyframe.
     *
     *   animation: [{
     *     0: {rotateZ: 0, color: 0x000000}, //can also use key "from"
     *     100: {rotateZ: Math.PI * 2, color: 0xffffff}, //can also use key "to"
     *     delay: 0, //starting delay in ms
     *     duration: 2000, //total anim duration in ms, defaults to 750
     *     easing: 'linear', //easing for the whole animation, defaults to 'linear'
     *     iterations: 5, //number of times to loop the animation, defaults to 1. Set to Infinity for endless loop.
     *     direction: 'forward', //either 'forward', 'backward', or 'alternate'
     *     interpolate: {color: 'color'}, //mapping of property names to Interpolators.js names or custom functions
     *     paused: false //if true the animation will be paused at its current position until set back to false
     *   }, ...]
     *
     * Internally the animations will be built into a set of nested tweens:
     *
     * |--------------------------- Main MultiTween ------------------------------------|
     *
     * |------------- Anim 1 MultiTween w/ easing+repeat ----------------|
     * |--- prop1 tween 1 ---|--- prop1 tween 2 ---|--- prop1 tween 3 ---|
     * |--------- prop2 tween 1 --------|--------- prop2 tween 2 --------|
     *
     *                    delay -->|-------- Anim 2 MultiTween w/ easing+repeat --------|
     *                             |----- prop3 tween 1 -----|----- prop3 tween 2 ------|
     *                             |------------------- prop4 tween --------------------|
     *                                            |----------- prop5 tween -------------|
     */
    set animation(descriptor) {
      if (this.animation$descriptor === descriptor) return
      this.animation$descriptor = descriptor;
      let oldAnimTweens = this.animation$tweens || null;
      let newAnimTweens = this.animation$tweens = descriptor ? Object.create(null) : null;
      let runner = this.animation$runner;
      let hasChanged = false;

      // Handle single object not wrapped in array
      if (descriptor && !Array.isArray(descriptor)) {
        TEMP_ARRAY$1$1[0] = descriptor;
        descriptor = TEMP_ARRAY$1$1;
      }

      if (descriptor) {
        for (let i = 0, len = descriptor.length; i < len; i++) {
          let animDesc = descriptor[i];
          if (!animDesc) continue

          // Calculate an identifier for this animation based on properties whose modification requires a new tween
          let animId = JSON.stringify(animDesc, animationIdJsonReplacer$1);
          //console.log(`${animId} - is ${oldAnimTweens && oldAnimTweens[animId] ? '' : 'not'} in old tweens`)

          // If a matching tween already exists, update it
          if (oldAnimTweens && (animId in oldAnimTweens)) {
            let tween = oldAnimTweens[animId];
            if (animDesc.paused) {
              runner.pause(tween);
            } else {
              runner.start(tween);
            }
            newAnimTweens[animId] = tween;
          }
          // Otherwise create a new tween
          else {
            let delay = 0;
            let duration = DEFAULT_DURATION$1;
            let easing = 'linear';
            let iterations = 1;
            let keyframes = [];
            let direction = 'forward';

            for (let key in animDesc) {
              if (animDesc.hasOwnProperty(key)) {
                switch(key) {
                  case 'duration':
                    duration = animDesc[key]; break
                  case 'delay':
                    delay = animDesc[key]; break
                  case 'easing':
                    easing = animDesc[key]; break
                  case 'iterations':
                    iterations = animDesc[key]; break
                  case 'direction':
                    direction = animDesc[key]; break
                  default: {
                    let percent = key === 'from' ? 0 : key === 'to' ? 100 : parseFloat(key);
                    if (!isNaN(percent) && percent >= 0 && percent <= 100) {
                      keyframes.push({time: percent / 100, props: animDesc[key]});
                      for (let animProp in animDesc[key]) {
                        if (animDesc[key].hasOwnProperty(animProp)) {
                          // Ensure setter is in place
                          defineTransitionPropInterceptor(animProp, this);
                          // Stop any active transition tweens for this property
                          let tweenKey = animProp + '➤anim:tween';
                          if (this[tweenKey]) {
                            runner.stop(this[tweenKey]);
                            this[tweenKey] = null;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }

            if (keyframes.length) {
              // Sort the keyframes by time
              keyframes.sort(compareByTime$1);
              if (keyframes[0].time > 0) {
                keyframes.unshift(assignIf$1({time: 0}, keyframes[0]));
              }

              // Build a MultiTween with tweens for each keyframe+property
              let keyframePropTweens = [];
              for (let j = 1, len = keyframes.length; j < len; j++) {
                let keyframe = keyframes[j];
                let props = keyframe.props;
                for (let prop in props) {
                  if (props.hasOwnProperty(prop)) {
                    let prevKeyframe = null;
                    for (let k = j; k--;) {
                      if (prop in keyframes[k].props) {
                        prevKeyframe = keyframes[k];
                        break
                      }
                    }
                    if (prevKeyframe) {
                      let propTween = new Tween$1$1(
                        this[prop + '➤anim:actuallySet'].bind(this), //callback
                        prevKeyframe.props[prop], //fromValue
                        props[prop], //toValue
                        (keyframe.time - prevKeyframe.time) * duration, //duration
                        prevKeyframe.time * duration, //delay
                        'linear', //easing
                        1, //iterations
                        'forward', //direction
                        animDesc.interpolate && animDesc.interpolate[prop] || 'number'
                      );
                      propTween.$$property = prop;
                      keyframePropTweens.push(propTween);
                    }
                  }
                }
              }
              let tween = newAnimTweens[animId] = new MultiTween$1$1(keyframePropTweens, duration, delay, easing, iterations, direction);
              if (!animDesc.paused) {
                runner.start(tween);
              }

              // The tween runner won't do anything until next tick, so immediately sync to the first frame's
              // properties if the animation has no delay to avoid a flash of bad initial state
              if (delay === 0) {
                let firstKeyframeProps = keyframes[0].props;
                for (let prop in firstKeyframeProps) {
                  if (firstKeyframeProps.hasOwnProperty(prop)) {
                    this[prop + '➤anim:actuallySet'](firstKeyframeProps[prop]);
                  }
                }
              }
            }

            hasChanged = true;
          }
        }
      }

      // Stop any obsolete tweens
      if (oldAnimTweens) {
        for (let animId in oldAnimTweens) {
          if (!newAnimTweens || !newAnimTweens[animId]) {
            let tween = oldAnimTweens[animId];
            tween.gotoEnd(); //force to end value so it doesn't stick partway through
            runner.stop(tween);
            hasChanged = true;
          }
        }
      }

      // If the total set of animations has changed, recalc the set of animating properties
      if (hasChanged) {
        if (newAnimTweens) {
          let animatingProps = this.animation$animatingProps = Object.create(null);
          for (let animId in newAnimTweens) {
            let propTweens = newAnimTweens[animId].tweens;
            for (let i = propTweens.length; i--;) {
              animatingProps[propTweens[i].$$property] = true;
            }
          }
        } else {
          this.animation$animatingProps = null;
        }
      }
    }
    get animation() {
      return this.animation$descriptor
    }

    destructor() {
      const runner = this.animation$runner;
      if (this.exitAnimation && !this.parent.isDestroying) {
        runner.stopAll();
        this.animation = this.exitAnimation;
        this.exitAnimation = this.transition = null;
        const onTick = runner.onTick;
        runner.onTick = () => {
          if (this.parent && !this.parent.isDestroying) {
            onTick();
          } else {
            // An ancestor may have been destroyed during our exit animation, orphaning this object;
            // catch this case and short-circuit the animation to prevent errors in subsequent ticks
            runner.onDone = null;
            this.destructor();
          }
        };
        runner.onDone = () => {
          this.requestRender();
          this.destructor();
        };
      } else {
        runner.destructor();
        super.destructor();
      }
    }
  }

  // Add get/set interceptor to the wrapper's prototype if this is the first time seeing this prop. Putting it
  // on the wrapper prototype allows us to avoid per-instance overhead as well as avoid collisions with
  // other custom setters anywhere else in the prototype chain.
  function defineTransitionPropInterceptor(propName, currentInstance) {
    if (!AnimatableFacade.prototype.hasOwnProperty(propName)) {
      let actualValueKey = `${ propName }➤anim:actualValue`;
      let actuallySetKey = `${ propName }➤anim:actuallySet`;
      let hasBeenSetKey = `${ propName }➤anim:hasBeenSet`;
      let activeTweenKey = `${ propName }➤anim:tween`;

      // Find the nearest getter/setter up the prototype chain, if one exists. Assuming the prototype won't change after the fact.
      let superGetter, superSetter;
      let proto = BaseFacadeClass.prototype;
      while (proto) {
        let desc = Object.getOwnPropertyDescriptor(proto, propName);
        if (desc) {
          superSetter = desc.set;
          superGetter = desc.get;
          if (superSetter && !superGetter || superGetter && !superSetter) {
            throw new Error(`Animatable: property ${propName} has a custom ${superSetter ? 'setter' : 'getter'} but no ${superSetter ? 'getter' : 'setter'}. Animatable properties must have both.`)
          }
          break
        }
        proto = Object.getPrototypeOf(proto);
      }

      // Function to set the value, bypassing the interceptor setter.
      // Use the super setter if available, otherwise store in a private-ish key
      let actuallySet = superSetter ? function actuallySet(value) {
        superSetter.call(this, value);
        if (!this[hasBeenSetKey]) {
          this[hasBeenSetKey] = true;
        }
      } : function actuallySet(value) {
        this[actualValueKey] = value;
        if (!this[hasBeenSetKey]) {
          this[hasBeenSetKey] = true;
        }
      };
      Object.defineProperty(AnimatableFacade.prototype, actuallySetKey, { value: actuallySet });


      // Add the custom getter/setter for this property
      Object.defineProperty(AnimatableFacade.prototype, propName, {
        get() {
          // Always return the current actual value
          return superGetter ? superGetter.call(this) : this[hasBeenSetKey] ? this[actualValueKey] : BaseFacadeClass.prototype[propName]
        },

        set(value) {
          // Will this value be controlled by an animation? Ignore it since animations take precedence.
          if (this.animation$animatingProps && this.animation$animatingProps[propName]) {
            return
          }

          // Does this value have a transition defined, and are the old/new values transitionable?
          let runner = this.animation$runner;
          let transition = this.transition;
          if (transition && transition[propName] && this[hasBeenSetKey] && transition.hasOwnProperty(propName)) {
            transition = transition[propName];
            let springConfig = transition === 'spring' ? 'default' : transition.spring;
            // If there's no active transition tween, or the new value is different than the active tween's
            // target value, initiate a new transition tween. Otherwise ignore it.
            let tween = this[activeTweenKey];
            let needsNewTween = false;
            if (tween) {
              // Active tween - start new one if new value is different than the old tween's target
              // value, unless they're both springs in which case update the original
              if (value !== tween.toValue) {
                if (springConfig && tween.isSpring) {
                  // TODO allow mid-simulation modification of spring config?
                  tween.toValue = value;
                } else {
                  runner.stop(tween);
                  needsNewTween = true;
                }
              }
            } else if (value !== this[propName]) {
              // No active tween - only start one if the value is changing
              needsNewTween = true;
            }
            if (needsNewTween) {
              tween = this[activeTweenKey] = springConfig
                ? new SpringTween$1$1(
                  actuallySet.bind(this), //callback
                  this[propName], //fromValue
                  value, //toValue
                  springConfig, //springConfig (mass, friction, tension)
                  0, //initialVelocity
                  transition.delay || 0 //delay
                )
                : new Tween$1$1(
                  actuallySet.bind(this), //callback
                  this[propName], //fromValue
                  value, //toValue
                  transition.duration || DEFAULT_DURATION$1, //duration
                  transition.delay || 0, //delay
                  transition.easing || DEFAULT_EASING$1, //easing
                  1, //iterations
                  'forward', //direction
                  transition.interpolate || 'number' //interpolate
                );
              tween.onDone = () => {
                tween = this[activeTweenKey] = null;
              };
              runner.start(tween);
            }
            return
          }

          // No animation or transition will be started; set the value.
          actuallySet.call(this, value);

          // Clean up obsolete stuff
          let tween = this[activeTweenKey];
          if (tween) runner.stop(tween);
          this[activeTweenKey] = null;
        }
      });
    }


    // If the instance had this property set before the intercepting setter was added to the
    // prototype, that would continue to take precedence, so move its value to the private property.
    if (currentInstance.hasOwnProperty(propName)) {
      currentInstance[`${ propName }➤anim:actualValue`] = currentInstance[propName];
      currentInstance[`${ propName }➤anim:hasBeenSet`] = true;
      delete currentInstance[propName];
    }

  }

  return AnimatableFacade
});

/**
 * Allows a facade to be configured with an optional `pointerStates` property, which defines
 * sets of property values that should be used in place of the object's actual values when
 * the user interacts with the facade using their pointer device (mouse, touch, vr controller, etc.)
 * This is not used directly, but is automatically wrapped by `ParentFacade` and `ListFacade` when
 * setting up their children if the `pointerStates` property is present.
 *
 * The `pointerStates` property should point to an object with `hover` and/or `active` properties,
 * each of which is an object holding the individual properties to be used in those states. Any
 * properties defined in `active` will take precedence over those defined in `hover`.
 *
 * The properties will honor any `transition`s defined for them, but the `transition` must be
 * defined on the facade's main configuration object, not within the pointerStates themselves.
 */
const extendAsPointerStatesAware$1 = createClassExtender$2('pointerStates', function(BaseFacadeClass) {
  const isHoveringProp = '➤pntr:isHovering';
  const isActiveProp = '➤pntr:isActive';
  const propsWithInterceptors = Object.create(null);

  class PointerStatesAware extends BaseFacadeClass {
    constructor(parent) {
      super(parent);
      this.addEventListener('mouseover', hoverOverHandler);
      this.addEventListener('mouseout', hoverOutHandler);
      this.addEventListener('mousedown', activeDownHandler);
      this.addEventListener('mouseup', activeUpHandler);
    }

    afterUpdate() {
      this._applyPointerStates();
      super.afterUpdate();
    }

    _applyPointerStates() {
      const pointerStates = this.pointerStates;
      const hoverValuesToUse = (pointerStates && this[isHoveringProp] && pointerStates.hover) || null;
      const activeValuesToUse = (pointerStates && this[isActiveProp] && pointerStates.active) || null;

      const lastAppliedValues = this['➤pntr:lastAppliedValues'] || propsWithInterceptors;
      const appliedValues = this['➤pntr:lastAppliedValues'] =
        (hoverValuesToUse || activeValuesToUse) ? assign$7(Object.create(null), hoverValuesToUse, activeValuesToUse) : null;

      if (appliedValues) {
        for (let prop in appliedValues) {
          definePropInterceptor(prop, this);
          actuallySet(this, prop, appliedValues[prop]);
        }
      }

      if (lastAppliedValues) {
        for (let prop in lastAppliedValues) {
          if (!appliedValues || !(prop in appliedValues)) {
            actuallySet(this, prop, this[`${prop}➤pntr:baseValue`]);
          }
        }
      }
    }
  }

  // Flag for identification
  Object.defineProperty(PointerStatesAware.prototype, 'isPointerStateAware', {value: true});

  // Add get/set interceptor to the wrapper's prototype if this is the first time seeing this prop. Putting it
  // on the wrapper prototype allows us to avoid per-instance overhead as well as avoid collisions with
  // other custom setters anywhere else in the prototype chain.
  function definePropInterceptor(propName, currentInstance) {
    // On first set for this instance, move the prop's previous value, if any, to the private property
    const hasBeenSetProp = `${propName}➤pntr:hasBeenSet`;
    if (!currentInstance[hasBeenSetProp]) {
      currentInstance[`${ propName }➤pntr:baseValue`] = currentInstance[propName];
      delete currentInstance[propName]; //remove own prop so it doesn't override the prototype getter/setter
      currentInstance[hasBeenSetProp] = true;
    }

    if (!PointerStatesAware.prototype.hasOwnProperty(propName)) {
      propsWithInterceptors[propName] = 1;
      const baseValueProp = `${ propName }➤pntr:baseValue`;
      const appliedValueProp = `${propName}➤pntr:appliedValue`;

      Object.defineProperty(PointerStatesAware.prototype, propName, {
        get() {
          const superGetter = getSuperGetter(propName);
          return superGetter ? superGetter.call(this) :
            (appliedValueProp in this) ? this[appliedValueProp] :
            this[baseValueProp]
        },

        set(value) {
          this[baseValueProp] = value;
        }
      });
    }
  }

  function actuallySet(instance, propName, value) {
    const superSetter = getSuperSetter(propName);
    if (superSetter) {
      superSetter.call(instance, value);
    } else {
      instance[`${propName}➤pntr:appliedValue`] = value;
    }
  }

  function getSuperGetter(propName) {
    let proto = BaseFacadeClass.prototype;
    if (propName in proto) { //prefilter across entire proto chain
      while (proto) {
        let desc = Object.getOwnPropertyDescriptor(proto, propName);
        if (desc && desc.get) {
          return desc.get
        }
        proto = Object.getPrototypeOf(proto);
      }
    }
    return null
  }

  function getSuperSetter(propName) {
    let proto = BaseFacadeClass.prototype;
    if (propName in proto) { //prefilter across entire proto chain
      while (proto) {
        let desc = Object.getOwnPropertyDescriptor(proto, propName);
        if (desc && desc.set) {
          return desc.set
        }
        proto = Object.getPrototypeOf(proto);
      }
    }
    return null
  }

  function hoverOverHandler(e) {
    e.currentTarget[isHoveringProp] = true;
    afterPointerStateChange(e);
  }
  function hoverOutHandler(e) {
    e.currentTarget[isHoveringProp] = e.currentTarget[isActiveProp] = false;
    afterPointerStateChange(e);
  }
  function activeDownHandler(e) {
    e.currentTarget[isActiveProp] = true;
    afterPointerStateChange(e);
  }
  function activeUpHandler(e) {
    e.currentTarget[isActiveProp] = false;
    afterPointerStateChange(e);
  }

  function afterPointerStateChange(e) {
    let highestFacade = e.currentTarget;
    let parent = highestFacade.parent;
    while (parent && parent.shouldUpdateChildren()) {
      if (parent.isPointerStateAware) {
        highestFacade = parent;
      }
      parent = parent.parent;
    }
    highestFacade.afterUpdate();
    highestFacade.requestRender();
  }

  return PointerStatesAware
});

const TEMP_ARRAY$2 = [null];

/**
 * @typedef {object} FacadeDescriptor
 * An object describing the type and properties of a child facade to be created and managed by
 * its parent. See the detailed description in the docs for {@link Facade.js}.
 * @property {class} facade
 * @property {string|number} [key]
 */


/**
 * Base facade class for objects that have `children`. Manages creating and destroying child
 * facade instances as needed as its `children` array changes.
 *
 * If you need to create a large number of child objects based on an array of incoming data,
 * consider using a `ListFacade` instead of a parent object with a large `children` array, since
 * that requires only a single template descriptor object instead of one for every child.
 */
class ParentFacade$1 extends Facade$1 {
  constructor(parent) {
    super(parent);

    /**
     * @member {FacadeDescriptor | Array<FacadeDescriptor>} children
     * Descriptors for one or more child facades.
     */
    this.children = null;

    this._orderedChildKeys = [];
  }

  afterUpdate() {
    if (this.shouldUpdateChildren()) {
      this.updateChildren(this.describeChildren());
    }
    super.afterUpdate();
  }

  /**
   * Return the descriptor(s) for the actual children to be created and managed. By default
   * this simply returns the value of the `children` property set by the parent, but you can
   * override it to customize how the child content should be structured, for instance to wrap
   * the `children` within a deeper structure, add in anonymous child siblings, or modify the
   * `children` configurations.
   * @protected
   * @return {FacadeDescriptor | Array<FacadeDescriptor>}
   */
  describeChildren() {
    return this.children
  }

  /**
   * Override to selectively prevent traversing to child nodes on `afterUpdate`, for
   * potential performance gain.
   * @returns {boolean}
   */
  shouldUpdateChildren() {
    return true
  }

  updateChildren(children) {
    const oldDict = this._childrenDict || null;
    let newDict = this._childrenDict = null;
    const orderedChildKeys = this._orderedChildKeys;
    orderedChildKeys.length = 0;

    if (children) {
      // Allow single child without wrapper array
      if (!Array.isArray(children)) {
        TEMP_ARRAY$2[0] = children;
        children = TEMP_ARRAY$2;
      }

      for (let i = 0, len = children.length; i < len; i++) {
        let childDesc = children[i];
        if (!childDesc) continue //child members can be null
        if (!newDict) {
          newDict = this._childrenDict = Object.create(null);
        }

        // Handle child descriptors defined via a JSX->React.createElement() transforms (ReactElement objects)
        const isJSX = isReactElement$1(childDesc);
        let propsObj = isJSX ? childDesc.props : childDesc;
        let facadeClass = isJSX ? childDesc.type : childDesc.facade;

        // Find this child's key; if not specified by the author, build one from the facade class name
        let key = childDesc.key;
        if (!key) {
          let j = 0;
          do {
            key = `auto:${facadeClass.name}:${j++}`;
          } while (newDict[key])
        }
        if (newDict[key]) {
          while(newDict[key]) {
            key += '|dupe';
          }
        }

        // If a transition/animation is present, upgrade the class to a Animatable class on demand.
        // NOTE: changing between animatable/non-animatable results in a full teardown/recreation
        // of this instance *and its entire subtree*, so try to avoid that by always including the `transition`
        // definition if the object is expected to ever need transitions, even if it's temporarily empty.
        let transition = propsObj.transition;
        let animation = propsObj.animation;
        if (transition || animation || propsObj.exitAnimation) {
          facadeClass = extendAsAnimatable$1(facadeClass);
        }

        // Same for pointer states
        if (propsObj.pointerStates) {
          facadeClass = extendAsPointerStatesAware$1(facadeClass);
        }

        // If we have an old instance with the same key and class, update it, otherwise instantiate a new one
        let oldImpl = oldDict && oldDict[key];
        let newImpl;
        if (oldImpl && oldImpl.constructor === facadeClass) {
          newImpl = oldImpl;
        } else {
          // If swapping instance need to destroy the old before creating the new, e.g. for `ref` call ordering
          if (oldImpl) oldImpl.destructor();
          newImpl = new facadeClass(this);
        }
        //always set transition/animation before any other props
        newImpl.transition = transition;
        newImpl.animation = animation;
        for (let prop in propsObj) {
          if (propsObj.hasOwnProperty(prop) && !Facade$1.isSpecialDescriptorProperty(prop)) {
            newImpl[prop] = propsObj[prop];
          }
        }
        newDict[key] = newImpl;
        orderedChildKeys.push(key);
        newImpl.afterUpdate();
      }
    }

    // Destroy all old child instances that were not reused or replaced
    if (oldDict) {
      for (let key in oldDict) {
        if (!newDict || !newDict[key]) {
          oldDict[key].destructor();
        }
      }
    }
  }

  getChildByKey(key) {
    let dict = this._childrenDict;
    return dict && dict[key] || null
  }

  /**
   * Walk this facade's descendant tree, invoking a function for it and each descendant.
   * The iteration order will match the order in which the `children` were declared. It may
   * also include items that have been queued for removal but not yet removed, e.g. facades
   * in the process of an `exitAnimation`.
   * @param {Function} fn
   * @param {Object} [thisArg]
   */
  traverse(fn, thisArg) {
    fn.call(thisArg, this);
    const keys = this._orderedChildKeys;
    const dict = this._childrenDict;
    for (let i = 0, len = keys.length; i < len; i++) {
      dict[keys[i]].traverse(fn, thisArg);
    }
  }

  /**
   * Iterate over this facade's direct child facades, invoking a function for each.
   * The iteration order will match the order in which the `children` were declared. It may
   * also include items that have been queued for removal but not yet removed, e.g. facades
   * in the process of an `exitAnimation`.
   * @param {Function} fn
   * @param {Object} [thisArg]
   */
  forEachChild(fn, thisArg) {
    const keys = this._orderedChildKeys;
    const dict = this._childrenDict;
    for (let i = 0, len = keys.length; i < len; i++) {
      fn.call(thisArg, dict[keys[i]], keys[i]);
    }
  }

  destructor() {
    this.isDestroying = true;
    // Destroy all child instances
    let dict = this._childrenDict;
    if (dict) {
      for (let key in dict) {
        dict[key].destructor();
      }
    }
    super.destructor();
  }
}

const pointerMotionEventProps$1 = [
  'onMouseOver',
  'onMouseOut',
  'onMouseMove',
  'onDragStart',
  'onDrag',
  'onDragEnter',
  'onDragOver',
  'onDragLeave'
];

const pointerActionEventProps$1 = [
  'onMouseDown',
  'onMouseUp',
  'onClick',
  'onDoubleClick',
  'onDrop',
  'onDragEnd',
  'onWheel'
];

const pointerActionEventTypes$1 = pointerActionEventProps$1.map(eventPropToType$1);
const pointerMotionEventTypes$1 = pointerMotionEventProps$1.map(eventPropToType$1);

const pointerEventProps$1 = pointerMotionEventProps$1.concat(pointerActionEventProps$1);
const pointerEventTypes$1 = pointerMotionEventTypes$1.concat(pointerActionEventTypes$1);

function eventPropToType$1(prop) {
  return prop === 'onDoubleClick' ? 'dblclick' : prop.replace(/^on/, '').toLowerCase()
}


class PointerEventTarget$1 extends ParentFacade$1 {
  /**
   * Determine if this PointerEventTarget should intercept pointer events:
   * - By default only facades with a pointer event listener assigned will be counted, to prevent being blocked by unwanted objects
   * - If an object should definitely block events from objects behind it, set `pointerEvents:true`
   * - If an object has one of the pointer event properties but should be ignored in picking, set `pointerEvents:false`
   */
  interceptsPointerEvents(eventRegistry) {
    if (this.pointerEvents === false) {
      return false
    }
    if (this.pointerEvents) {
      return true
    }
    for (let i = 0, len = pointerEventTypes$1.length; i < len; i++) {
      if (eventRegistry.hasFacadeListenersOfType(this, pointerEventTypes$1[i])) {
        return true
      }
    }
  }
}


Object.defineProperty(PointerEventTarget$1.prototype, 'isPointerEventTarget', {value: true});


// Add handlers for pointer event properties
pointerEventProps$1.forEach(propName => {
  Facade$1.defineEventProperty(PointerEventTarget$1, propName, eventPropToType$1(propName));
});

/**
 * @class EventRegistry
 * Utility for tracking event listeners by type and target facade
 */
function EventRegistry$1() {
  const byEventType = Object.create(null);

  this.addListenerForFacade = (facade, type, handler) => {
    const listenersOfType = byEventType[type] || (byEventType[type] = {
      count: 0,
      byFacadeId: Object.create(null)
    });
    const facadeId = facade.$facadeId;
    const oldHandlers = listenersOfType.byFacadeId[facadeId];
    // No listeners for this facade yet; set handler function as single value to avoid
    // unnecessary array creation in the common single-listener case.
    if (!oldHandlers) {
      listenersOfType.count++;
      listenersOfType.byFacadeId[facadeId] = handler;
    }
    // Already multiple listeners; add to array if not already present
    else if (Array.isArray(oldHandlers)) {
      if (oldHandlers.indexOf(handler) === -1) {
        listenersOfType.count++;
        oldHandlers.push(handler);
      }
    }
    // Second unique listener; promote to array
    else if (oldHandlers !== handler) {
      listenersOfType.count++;
      listenersOfType.byFacadeId[facadeId] = [oldHandlers, handler];
    }
  };

  this.removeListenerForFacade = (facade, type, handler) => {
    const listenersOfType = byEventType[type];
    const facadeId = facade.$facadeId;
    const oldHandlers = listenersOfType && listenersOfType.byFacadeId[facadeId];
    // Single listener; delete from map
    if (oldHandlers === handler) {
      listenersOfType.count--;
      delete listenersOfType.byFacadeId[facadeId];
    }
    // Multiple listeners; remove from array
    else if (Array.isArray(oldHandlers)) {
      const idx = oldHandlers.indexOf(handler);
      if (idx > -1) {
        listenersOfType.count--;
        // Delete from map if the array will be empty; we don't demote from array to single
        // item because it can result in unneeded churn in the likely case of a different
        // listener being added immediately after
        if (oldHandlers.length === 1) {
          delete listenersOfType.byFacadeId[facadeId];
        } else {
          oldHandlers.splice(idx, 1);
        }
      }
    }
  };

  this.removeAllListenersForFacade = (facade) => {
    const facadeId = facade.$facadeId;
    for (let type in byEventType) {
      let facadeListeners = byEventType[type].byFacadeId[facadeId];
      if (facadeListeners) {
        byEventType[type].count -= (Array.isArray(facadeListeners) ? facadeListeners.length : 1);
        delete byEventType[type].byFacadeId[facadeId];
      }
    }
  };

  this.hasFacadeListenersOfType = (facade, type) => {
    return byEventType[type] ? !!byEventType[type].byFacadeId[facade.$facadeId] : false
  };

  this.hasAnyListenersOfType = (type) => {
    return byEventType[type] ? byEventType[type].count > 0 : false
  };

  this.findBubblingEventTarget = (targetFacade, eventType) => {
    while (targetFacade) {
      if (this.hasFacadeListenersOfType(targetFacade, eventType)) {
        return targetFacade
      }
      targetFacade = targetFacade.parent;
    }
    return null
  };

  function tryCall(func, scope, arg1, arg2) {
    try {
      func.call(scope, arg1, arg2);
    } catch(err) {
    }
  }

  this.forEachFacadeListenerOfType = (facade, type, callback, scope) => {
    const listenersOfType = byEventType[type];
    const facadeId = facade.$facadeId;
    const handlers = listenersOfType && listenersOfType.byFacadeId[facadeId];
    if (handlers) {
      if (Array.isArray(handlers)) {
        for (let i = 0; i < handlers.length; i++) {
          tryCall(callback, scope, handlers[i], facadeId);
        }
      } else {
        tryCall(callback, scope, handlers, facadeId);
      }
    }
  };

  this.forEachListenerOfType = (type, callback, scope) => {
    const listenersOfType = byEventType[type];
    if (listenersOfType && listenersOfType.count > 0) {
      for (let facadeId in listenersOfType.byFacadeId) {
        const facadeListeners = listenersOfType.byFacadeId[facadeId];
        if (Array.isArray(facadeListeners)) {
          for (let i = 0; i < facadeListeners.length; i++) {
            tryCall(callback, scope, facadeListeners[i], facadeId);
          }
        } else {
          tryCall(callback, scope, facadeListeners, facadeId);
        }
      }
    }
  };

  this.dispatchEventOnFacade = (facade, event) => {
    let currentTarget = facade;
    function callHandler(handler) {
      handler.call(currentTarget, event);
    }
    event.target = facade;
    while (currentTarget && !event.propagationStopped) { //TODO should defaultPrevented mean anything here?
      event.currentTarget = currentTarget;
      this.forEachFacadeListenerOfType(currentTarget, event.type, callHandler, null);
      if (event.bubbles) {
        currentTarget = currentTarget.parent;
      } else {
        break
      }
    }
  };
}

const TAP_DISTANCE_THRESHOLD$1 = 10;
const TAP_GESTURE_MAX_DUR$1 = 300;
const TAP_DBLCLICK_MAX_DUR$1 = 300;
const DEFAULT_EVENT_SOURCE$1 = {};

const domPointerMotionEventTypes$1 = [
  'mousemove',
  'mouseout',
  'touchmove'
];
const domPointerActionEventTypes$1 = [
  'mousedown',
  'mouseup',
  'click',
  'dblclick',
  'wheel',
  'touchstart',
  'touchend',
  'touchcancel'
];
const dropEventTypes$1 = [
  'mouseup',
  'touchend',
  'touchcancel'
];
const pointerActionEventTypeMappings$1 = {
  'touchstart': 'mousedown',
  'touchend': 'mouseup',
  'touchcancel': 'mouseup'
};

const touchDragPropsToNormalize$1 = ['clientX', 'clientY', 'screenX', 'screenY', 'pageX', 'pageY'];

class SyntheticEvent$1 {
  constructor(nativeEvent, type, target, relatedTarget, extraProps) {
    // Copy native event properties - TODO investigate using a Proxy
    for (let prop in nativeEvent) {
      // NOTE: we don't check hasOwnProperty in this loop because properties that will return
      // false for properties that are defined by getters on inherited prototypes
      if (typeof nativeEvent[prop] !== 'function') {
        this[prop] = nativeEvent[prop];
      }
    }

    // Adjust to custom params
    this.target = target;
    this.relatedTarget = relatedTarget;
    this.type = type;
    this.nativeEvent = nativeEvent;
    assign$7(this, extraProps);

    // normalize position properties on touch events with a single touch, to facilitate
    // downstream handlers that expect them to look like mouse events
    // NOTE: can't do this in _normalizePointerEvent() as these props are unwritable on native Event objects
    if (nativeEvent.touches) {
      let touches = isTouchEndOrCancel$1(nativeEvent) ? nativeEvent.changedTouches : nativeEvent.touches;
      if (touches.length === 1) {
        touchDragPropsToNormalize$1.forEach(prop => {
          this[prop] = touches[0][prop];
        });
      }
    }
  }

  preventDefault() {
    this.defaultPrevented = true;
    this.nativeEvent.preventDefault();
  }

  stopPropagation() {
    this.propagationStopped = true;
    this.nativeEvent.stopPropagation();
  }
}

function isTouchEndOrCancel$1(e) {
  return e.type === 'touchend' || e.type === 'touchcancel'
}

function killEvent$1(e) {
  e.stopPropagation();
  e.preventDefault();
}


class WorldBaseFacade$1 extends ParentFacade$1 {
  constructor(element) {
    super(null);

    this.width = this.height = 1;
    this._element = element;
    this._htmlOverlays = Object.create(null);

    // Bind events
    this.eventRegistry = new EventRegistry$1();
    this._onPointerMotionEvent = this._onPointerMotionEvent.bind(this);
    this._onPointerActionEvent = this._onPointerActionEvent.bind(this);
    this._onDropEvent = this._onDropEvent.bind(this);
    this._togglePointerListeners(true);
  }

  afterUpdate() {
    this._queueRender();
    super.afterUpdate();
  }

  onNotifyWorld(source, message, data) {
    let handler = this._notifyWorldHandlers[message];
    if (handler) {
      handler.call(this, source, data);
    }
  }

  _isContinuousRender() {
    return this.continuousRender
  }

  /**
   * @property {{requestAnimationFrame, cancelAnimationFrame}} renderingScheduler
   * The object holding `requestAnimationFrame` and `cancelAnimationFrame` scheduling
   * functions. Defaults to `window` but can be switched to another implementation, e.g.
   * to use an XRSession's custom scheduler.
   */
  set renderingScheduler(scheduler) {
    scheduler = scheduler || window;
    if (scheduler !== this.renderingScheduler) {
      const activeHandle = this._nextFrameTimer;
      if (activeHandle) {
        this.renderingScheduler.cancelAnimationFrame(activeHandle);
        this._nextFrameTimer = null;
      }
      this._renderingScheduler = scheduler;
    }
  }
  get renderingScheduler() {
    return this._renderingScheduler || window
  }

  // Schedule a render pass on the next frame
  _queueRender() {
    if (!this._nextFrameTimer) {
      const handler = this._nextFrameHandler || (this._nextFrameHandler = (...args) => {
        let {onStatsUpdate, onBeforeRender, onAfterRender} = this;
        let start = onStatsUpdate && Date.now();

        if (onBeforeRender) onBeforeRender(this);

        this.doRender(...args);

        if (onStatsUpdate) {
          let now = Date.now();
          onStatsUpdate({
            'Render CPU Time (ms)': now - start,
            'Time Between Frames (ms)': this._lastFrameTime ? now - this._lastFrameTime : '?',
            'FPS': this._lastFrameTime ? Math.round(1000 / (now - this._lastFrameTime)) : '?'
          });
          this._lastFrameTime = now;
        }

        this._doRenderHtmlItems();

        if (onAfterRender) onAfterRender(this);

        this._nextFrameTimer = null;

        if (this._isContinuousRender()) {
          this._queueRender();
        }
      });
      this._nextFrameTimer = this.renderingScheduler.requestAnimationFrame(handler);
    }
  }

  /**
   * @abstract
   */
  doRender(/*...frameArgs*/) {
  }

  /**
   * @abstract
   */
  getFacadeUserSpaceXYZ(/*facade*/) {
  }

  _doRenderHtmlItems() {
    if (this.renderHtmlItems) {
      let htmlItemsData = [];
      let overlayFacades = this._htmlOverlays;
      for (let key in overlayFacades) {
        let facade = overlayFacades[key];
        let data = this.getFacadeUserSpaceXYZ(facade);
        if (data.z >= 0) { //Ignore objects with negative z (behind the camera)
          data.key = facade.$facadeId;
          data.html = facade.html;
          data.exact = facade.exact;
          htmlItemsData.push(data);
        }
      }
      this.renderHtmlItems(htmlItemsData);
    }
  }

  /**
   * Hook allowing world implementations to pre-normalize native pointer events, for instance
   * computing derived worldspace properties that are simpler for downstream code to use.
   * @param {Event} e
   * @protected
   */
  _normalizePointerEvent(e) {
  }

  /**
   * Entry point for handling events related to pointer motion (e.g. mouse or touch movement).
   * This will be called by the code that wraps this World facade to bridge native DOM events
   * into the Troika world.
   * @param {Event} e
   */
  _onPointerMotionEvent(e) {
    this._normalizePointerEvent(e);
    const eventState = this._getPointerEventState(e);

    if (pointerMotionEventTypes$1.some(this.eventRegistry.hasAnyListenersOfType)) {
      const hoverInfo = (e.type === 'mouseout' || isTouchEndOrCancel$1(e)) ? null : this._findHoverTarget(e);
      let lastHovered = eventState.hoveredFacade;
      let hovered = eventState.hoveredFacade = hoverInfo && hoverInfo.facade;

      let dragInfo = eventState.dragInfo;
      if (dragInfo) {
        if (!dragInfo.dragStartFired) {
          this._firePointerEvent('dragstart', dragInfo.dragStartEvent, dragInfo.draggedFacade, null, hoverInfo);
          dragInfo.dragStartFired = true;
        }
        this._firePointerEvent('drag', e, dragInfo.draggedFacade, null, hoverInfo);
      }

      if (hovered !== lastHovered) {
        if (lastHovered) {
          this._firePointerEvent('mouseout', e, lastHovered, hovered, hoverInfo);
          if (dragInfo) {
            this._firePointerEvent('dragleave', e, lastHovered, hovered, hoverInfo);
          }
        }
        if (hovered) {
          this._firePointerEvent('mouseover', e, hovered, lastHovered, hoverInfo);
          if (dragInfo) {
            this._firePointerEvent('dragenter', e, hovered, lastHovered, hoverInfo);
          }
        }
      }
      if (hovered) {
        this._firePointerEvent('mousemove', e, hovered, null, hoverInfo);
        if (dragInfo) {
          this._firePointerEvent('dragover', e, hovered, null, hoverInfo);
        }
      }
    }

    // Cancel tap gesture if moving past threshold
    let tapInfo = eventState.tapInfo;
    if (tapInfo && e.type === 'touchmove') {
      let touch = e.changedTouches[0];
      if (touch && Math.sqrt(Math.pow(touch.clientX - tapInfo.x, 2) + Math.pow(touch.clientY - tapInfo.y, 2)) > TAP_DISTANCE_THRESHOLD$1) {
        eventState.tapInfo = null;
      }
    }
  }

  /**
   * Entry point for handling events related to pointer motion (e.g. mouse clicks or touch taps).
   * This will be called by the code that wraps this World facade to bridge native DOM events
   * into the Troika world.
   * @param {Event} e
   */
  _onPointerActionEvent(e) {
    this._normalizePointerEvent(e);

    // Handle drop events, in the case they weren't captured by the listeners on `document`
    // e.g. synthetic events dispatched internally
    if (dropEventTypes$1.indexOf(e.type) > -1) {
      this._onDropEvent(e);
    }

    // Map touch start to mouseover, and disable touch-hold context menu
    if (e.type === 'touchstart') {
      if (e.touches.length === 1) {
        this._onPointerMotionEvent(e);
      }
      this._enableContextMenu(false);
    }

    const eventRegistry = this.eventRegistry;
    if (eventRegistry.hasAnyListenersOfType('dragstart') || pointerActionEventTypes$1.some(eventRegistry.hasAnyListenersOfType)) {
      let hoverInfo = this._findHoverTarget(e);
      let facade = hoverInfo && hoverInfo.facade;
      if (facade) {
        const eventState = this._getPointerEventState(e);
        this._firePointerEvent(pointerActionEventTypeMappings$1[e.type] || e.type, e, facade, null, hoverInfo);

        // touchstart/touchend could be start/end of a tap - map to click
        if (eventRegistry.findBubblingEventTarget(facade, 'click') || eventRegistry.findBubblingEventTarget(facade, 'dblclick')) {
          let tapInfo = eventState.tapInfo;
          if (e.type === 'touchstart' && e.touches.length === 1) {
            eventState.tapInfo = {
              facade: facade,
              x: e.touches[0].clientX,
              y: e.touches[0].clientY,
              startTime: Date.now(),
              isDblClick: tapInfo && Date.now() - tapInfo.startTime < TAP_DBLCLICK_MAX_DUR$1
            };
          } else {
            if (
              tapInfo && tapInfo.facade === facade && e.type === 'touchend' &&
              e.touches.length === 0 && e.changedTouches.length === 1 &&
              Date.now() - tapInfo.startTime < TAP_GESTURE_MAX_DUR$1
            ) {
              this._firePointerEvent('click', e, facade, null, hoverInfo);
              if (tapInfo.isDblClick) {
                this._firePointerEvent('dblclick', e, facade, null, hoverInfo);
              }
            }
          }
        }

        // mousedown/touchstart could be prepping for drag gesture
        if (e.type === 'mousedown' || e.type === 'touchstart') {
          const dragger = eventRegistry.findBubblingEventTarget(facade, 'dragstart');
          if (dragger) {
            let dragStartEvent = new SyntheticEvent$1(e, 'dragstart', dragger, null, {intersection: hoverInfo});
            eventState.dragInfo = {
              draggedFacade: dragger,
              dragStartFired: false,
              dragStartEvent: dragStartEvent
            };
            // handle release outside canvas
            this._toggleDropListeners(true);
          }
        }
      }
      e.preventDefault(); //prevent e.g. touch scroll
    }

    // Map touch end to mouseout
    if (isTouchEndOrCancel$1(e)) {
      if (e.changedTouches.length === 1) {
        this._onPointerMotionEvent(e);
      }
      this._enableContextMenu(true);
    }
  }

  _onDropEvent(e) {
    const eventState = this._getPointerEventState(e);
    let dragInfo = eventState.dragInfo;
    if (dragInfo) {
      this._normalizePointerEvent(e);
      let hoverInfo = this._findHoverTarget(e);
      let targetFacade = hoverInfo && hoverInfo.facade;
      if (targetFacade) {
        this._firePointerEvent('drop', e, targetFacade, null, hoverInfo);
      }
      this._firePointerEvent('dragend', e, dragInfo.draggedFacade, null, hoverInfo);
      this._toggleDropListeners(false);
      eventState.dragInfo = null;
    }
  }

  _firePointerEvent(eventType, originalEvent, targetFacade, relatedTargetFacade, intersection) {
    let newEvent = (originalEvent instanceof SyntheticEvent$1) ?
      originalEvent :
      new SyntheticEvent$1(
        originalEvent,
        eventType,
        targetFacade,
        relatedTargetFacade,
        {
          bubbles: true,
          intersection
        }
      );
    // Dispatch with bubbling
    this.eventRegistry.dispatchEventOnFacade(targetFacade, newEvent);
  }

  _getPointerEventState(e) {
    const states = this._pointerEventStates || (this._pointerEventStates = new WeakMap());
    const eventSource = e.eventSource || DEFAULT_EVENT_SOURCE$1;
    let eventState = states.get(eventSource);
    if (!eventState) {
      states.set(eventSource, eventState = {});
    }
    return eventState
  }

  _toggleDropListeners(on) {
    dropEventTypes$1.forEach(type => {
      document[(on ? 'add' : 'remove') + 'EventListener'](type, this._onDropEvent, true);
    });
  }

  _togglePointerListeners(on) {
    let canvas = this._element;
    if (canvas && on !== this._pointerListenersAttached) {
      let method = (on ? 'add' : 'remove') + 'EventListener';
      domPointerMotionEventTypes$1.forEach(type => {
        canvas[method](type, this._onPointerMotionEvent, false);
      });
      domPointerActionEventTypes$1.forEach(type => {
        canvas[method](type, this._onPointerActionEvent, false);
      });
      this._pointerListenersAttached = on;
    }
  }

  _enableContextMenu(enable) {
    let canvas = this._element;
    if (canvas) {
      canvas[(enable ? 'remove' : 'add') + 'EventListener']('contextmenu', killEvent$1, true);
    }
  }

  /**
   * @abstract
   * Given a pointer-related Event, find and return all facade objects that are intersected
   * by that event. If any hits are found, this should return an array of objects that contain
   * at least `facade` and `distance` properties. Any additional properties will be exposed to
   * event listeners on the synthetic event object as an `intersection` property.
   * @param {Event} e
   * @param {Function} [filterFn]
   * @return {Array<{facade, distance, ?distanceBias, ...}>|null}
   */
  getFacadesAtEvent(e, filterFn) {
    throw new Error('getFacadesAtEvent: no impl')
  }

  _findHoverTarget(e) {
    //only handle single touches for now
    if (e.touches && e.touches.length > 1) {
      return null
    }

    let allHits = this.getFacadesAtEvent(e, facade =>
      facade.isPointerEventTarget && facade.interceptsPointerEvents(this.eventRegistry)
    );
    if (allHits) {
      // Find the closest by comparing distance, or distanceBias if distance is the same
      let closestHit = allHits[0];
      for (let i = 1; i < allHits.length; i++) {
        if (allHits[i].distance < closestHit.distance ||
          (allHits[i].distance === closestHit.distance && (allHits[i].distanceBias || 0) < (closestHit.distanceBias || 0))
        ) {
          closestHit = allHits[i];
        }
      }
      return closestHit
    }

    return null
  }

  destructor() {
    if (this._nextFrameTimer) {
      this.renderingScheduler.cancelAnimationFrame(this._nextFrameTimer);
    }
    this._togglePointerListeners(false);
    this._toggleDropListeners(false);
    super.destructor();
  }

}

Object.defineProperty(WorldBaseFacade$1.prototype, 'isWorld', {value: true});

WorldBaseFacade$1.prototype._notifyWorldHandlers = {
  needsRender() {
    this._queueRender();
  },
  addEventListener(source, data) {
    this.eventRegistry.addListenerForFacade(source, data.type, data.handler);
  },
  removeEventListener(source, data) {
    this.eventRegistry.removeListenerForFacade(source, data.type, data.handler);
  },
  removeAllEventListeners(source) {
    this.eventRegistry.removeAllListenersForFacade(source);
  },
  dispatchEvent(source, event) {
    if (!(event instanceof SyntheticEvent$1)) {
      event = new SyntheticEvent$1(event, event.type, event.target, event.relatedTarget);
    }
    this.eventRegistry.dispatchEventOnFacade(source, event);
  },
  addHtmlOverlay(source) {
    this._htmlOverlays[source.$facadeId] = source;
  },
  removeHtmlOverlay(source) {
    delete this._htmlOverlays[source.$facadeId];
  },
  statsUpdate(source, data) {
    let onStatsUpdate = this.onStatsUpdate;
    if (onStatsUpdate) onStatsUpdate(data);
  }
};

const { assign: assign$6, createClassExtender: createClassExtender$1 } = utils$1;

/**
 * Extends a given Facade class to become a `FlexNode`, giving it the ability to participate
 * in flexbox layout. The resulting class behaves just like the original facade class, except:
 *
 * - It now accepts a full set of flexbox-related input properties, defined below
 * - Those input properties get evaluated by a flexbox layout algorithm in the background
 * - The resulting layout metrics get written to the object as properties that the extended
 *   facade class can use in its `afterUpdate` method to affect its position/size/styling.
 *
 * The flexbox layout algorithm is performed asynchronously within a web worker, so the result
 * metrics will probably not be available the first time `afterUpdate` is called. This can
 * sometimes cause issues with rendering due to NaNs, so it's good to check first that the
 * object has a nonzero `offsetWidth` and `offsetHeight` before displaying the node's object(s).
 *
 * Currently the flexbox algorithm implementation is Facebook's Yoga. (https://yogalayout.com/)
 *
 * *Supported input flexbox style properties:*
 * - width (number, string percentage, or 'auto')
 * - height (number, string percentage, or 'auto')
 * - minWidth (number, string percentage, or 'auto')
 * - minHeight (number, string percentage, or 'auto')
 * - maxWidth (number, string percentage, or 'auto')
 * - maxHeight (number, string percentage, or 'auto')
 * - aspectRatio (number, as width divided by height, or 'auto')
 * - flexDirection ('column', 'column-reverse', 'row', or 'row-reverse')
 * - flexWrap ('wrap' or 'nowrap')
 * - flex (number, where positive becomes flexGrow and negative becomes flexShrink)
 * - flexGrow (number)
 * - flexShrink (number)
 * - flexBasis (number, string percentage, or 'auto')
 * - alignContent ('auto', 'baseline', 'center', 'flex-end', 'flex-start', or 'stretch')
 * - alignItems ('auto', 'baseline', 'center', 'flex-end', 'flex-start', or 'stretch')
 * - alignSelf ('auto', 'baseline', 'center', 'flex-end', 'flex-start', or 'stretch')
 * - justifyContent ('center', 'flex-end', 'flex-start', 'space-around', or 'space-between')
 * - position ('relative' or 'absolute')
 * - top (number, string percentage, or 'auto')
 * - right (number, string percentage, or 'auto')
 * - bottom (number, string percentage, or 'auto')
 * - left (number, string percentage, or 'auto')
 * - margin (number, or array of up to four numbers in t-r-b-l order)
 * - padding (number, or array of up to four numbers in t-r-b-l order)
 * - borderWidth (number, or array of up to four numbers in t-r-b-l order)
 * - overflow ('visible', 'hidden', or 'scroll')
 *
 * *Computed layout result properties:*
 * - offsetLeft
 * - offsetTop
 * - offsetWidth
 * - offsetHeight
 * - clientLeft
 * - clientTop
 * - clientWidth
 * - clientHeight
 * - scrollLeft
 * - scrollTop
 * - scrollWidth
 * - scrollHeight
 * - clipLeft
 * - clipTop
 * - clipRight
 * - clipBottom
 * (All of these are `null` initially and then numbers after the layout completes, except
 * scrollLeft and scrollTop which are `0` initially.)
 *
 * *Additional FlexNode-specific properties:*
 * - isFlexNode (`true`, can be used to find FlexNodes in the facade tree)
 * - flexNodeDepth (number, where topmost FlexNode's depth is `0` and children increase by 1)
 * - parentFlexNode (the nearest parent FlexNode instance, or `null` if this is the root FlexNode)
 * - needsFlexLayout (boolean, can be set to force a recalculation of the full flexbox layout)
 *
 * If the base class implements an `onAfterFlexLayoutApplied`, that will be invoked after the
 * results of a flex layout pass have been written to the object. This is a good place to put
 * custom logic that depends on a completed layout, rather than in `afterUpdate` which may have
 * layout properties queued but not yet evaluated.
 *
 * @param {class} BaseFacadeClass
 * @return {FlexNode} a new class that extends the BaseFacadeClass
 */
const extendAsFlexNode = createClassExtender$1('flexNode', BaseFacadeClass => {

  class FlexNode extends BaseFacadeClass {
    constructor(parent) {
      super(parent);
      this.isFlexNode = true;
      this.needsFlexLayout = true;

      // Object holding all input styles for this node in the flex tree; see the style object
      // format in troika-flex-layout
      this._flexStyles = {
        id: this.$facadeId
      };

      // Look for the nearest flex layout ancestor; if there is one, add to its layout children,
      // otherwise we're a flex layout root.
      let parentFlexFacade = parent;
      while (parentFlexFacade && !parentFlexFacade.isFlexNode) {parentFlexFacade = parentFlexFacade.parent;}
      if (parentFlexFacade) {
        this.parentFlexNode = parentFlexFacade;
        this.flexNodeDepth = parentFlexFacade.flexNodeDepth + 1;
      } else {
        this.flexNodeDepth = 0;
      }
    }

    afterUpdate() {
      // Keep max scroll and clip rects in sync
      if (this.offsetWidth != null) {
        this._checkOverscroll();
        this._updateClipRect();
      }

      super.afterUpdate();

      // Did something change that requires a layout recalc?
      if (this.needsFlexLayout) {
        // If we're managed by an ancestor layout root, let it know
        if (this.parentFlexNode) {
          this.notifyWorld('needsFlexLayout');
          this.needsFlexLayout = false;
        }
        // If we're the layout root, perform the layout
        else {
          this._performRootLayout();
        }
      }
    }

    destructor() {
      if (this.parentFlexNode) {
        this.notifyWorld('needsFlexLayout');
      }
      super.destructor();
    }

    onNotifyWorld(source, message, data) {
      if (message === 'needsFlexLayout' && !this.parentFlexNode) {
        this.needsFlexLayout = true;
        if (!this._rootLayoutReq) {
          this._rootLayoutReq = setTimeout(this._performRootLayout.bind(this), 0);
        }
        return
      }
      super.onNotifyWorld(source, message, data);
    }

    _performRootLayout() {
      // If there's a request in progress, don't queue another one yet; that will happen
      // automatically after the current one finishes and it calls afterUpdate again
      if (this._hasActiveFlexRequest) return

      this._hasActiveFlexRequest = true;
      this.needsFlexLayout = false;
      clearTimeout(this._rootLayoutReq);
      delete this._rootLayoutReq;

      // Traverse the flex node tree in document order and add the ordered child
      // relationships to the style nodes at each level
      this.traverse(facade => {
        if (facade.isFlexNode) {
          const parent = facade.parentFlexNode;
          if (parent) {
            const siblings = parent._flexStyles.children || (parent._flexStyles.children = []);
            siblings.push(facade._flexStyles);
          }
          facade._flexStyles.children = null; //clear own leftover children from last time
        }
      });

      requestFlexLayout(this._flexStyles, results => {
        if (!this.isDestroying) {
          this._applyRootLayoutResults(results);

          // Final afterUpdate on the whole subtree
          this._hasActiveFlexRequest = false;
          this.afterUpdate();
          this.requestRender();
        }
      });
    }

    _applyRootLayoutResults(results) {
      // Results will be a flat map of facade id to computed layout; traverse the tree
      // and math them up, applying them as `computedXYZ` properties
      this.traverse(facade => {
        if (facade.isFlexNode) {
          const computedLayout = results[facade.$facadeId];
          if (computedLayout) {
            const {left, top, width, height} = computedLayout;
            const {borderWidth, padding} = facade;

            // Outer metrics
            facade.offsetLeft = left;
            facade.offsetTop = top;
            facade.offsetWidth = width;
            facade.offsetHeight = height;

            // Inner metrics
            facade.clientLeft = borderWidth[3] + padding[3];
            facade.clientTop = borderWidth[0] + padding[0];
            facade.clientWidth = width - borderWidth[1] - borderWidth[3] - padding[1] - padding[3];
            facade.clientHeight = height - borderWidth[0] - borderWidth[2] - padding[0] - padding[2];

            // Scrolling metrics
            facade.scrollHeight = facade.scrollWidth = 0;
            const parent = facade.parentFlexNode;
            if (parent) {
              let w = left + width - parent.clientLeft;
              let h = top + height - parent.clientTop;
              // Note: allowing a small tolerance here between scrollWidth/Height and clientWidth/Height,
              // to account for very slight overflows due to floating point math errors
              if (w > parent.scrollWidth) {
                if (Math.abs(w - parent.clientWidth) < w / 10000) {
                  w = parent.clientWidth;
                }
                parent.scrollWidth = w;
              }
              if (h > parent.scrollHeight) {
                if (Math.abs(h - parent.clientHeight) < h / 10000) {
                  h = parent.clientHeight;
                }
                parent.scrollHeight = h;
              }
            }

            if (facade.onAfterFlexLayoutApplied) {
              facade.onAfterFlexLayoutApplied();
            }
          }
        }
      });
    }

    _checkOverscroll() {
      const {scrollLeft, scrollTop} = this;
      if (scrollLeft || scrollTop) {
        const maxScrollLeft = Math.max(0, this.scrollWidth - this.clientWidth);
        const maxScrollTop = Math.max(0, this.scrollHeight - this.clientHeight);
        if (maxScrollLeft < scrollLeft) {
          this.scrollLeft = maxScrollLeft;
        }
        if (maxScrollTop < scrollTop) {
          this.scrollTop = maxScrollTop;
        }
      }
    }

    _updateClipRect() {
      const {offsetWidth, offsetHeight, parentFlexNode:parent} = this;
      const INF = Infinity;
      let clipLeft, clipTop, clipRight, clipBottom;

      if (parent && this.position !== 'absolute') {
        const scrolledLeft = this.offsetLeft - parent.scrollLeft;
        const scrolledTop = this.offsetTop - parent.scrollTop;
        const doesParentClip = parent.overflow !== 'visible';
        clipLeft = Math.max(doesParentClip ? parent.clientLeft : -INF, parent.clipLeft) - scrolledLeft;
        clipTop = Math.max(doesParentClip ? parent.clientTop : -INF, parent.clipTop) - scrolledTop;
        clipRight = Math.min(doesParentClip ? parent.clientLeft + parent.clientWidth : INF, parent.clipRight) - scrolledLeft;
        clipBottom = Math.min(doesParentClip ? parent.clientTop + parent.clientHeight : INF, parent.clipBottom) - scrolledTop;
      } else {
        clipLeft = clipTop = -INF;
        clipRight = clipBottom = INF;
      }

      this.clipLeft = clipLeft;
      this.clipTop = clipTop;
      this.clipRight = clipRight;
      this.clipBottom = clipBottom;
      this.isFullyClipped = clipLeft >= offsetWidth || clipTop >= offsetHeight ||
        clipRight <= 0 || clipBottom <= 0 ||
        clipLeft === clipRight || clipTop === clipBottom;
    }
  }

  // Define computed layout properties. Those that depend on a layout computation will be null
  // initially, and set to numbers after layout calculation is completed. Derived facades should
  // use these to update their rendering.
  assign$6(FlexNode.prototype, {
    offsetLeft: null,
    offsetTop: null,
    offsetWidth: null,
    offsetHeight: null,
    clientLeft: null,
    clientTop: null,
    clientWidth: null,
    clientHeight: null,
    scrollLeft: 0,
    scrollTop: 0,
    scrollWidth: null,
    scrollHeight: null,
    clipLeft: null,
    clipTop: null,
    clipRight: null,
    clipBottom: null,
    isFullyClipped: false,
    overflow: 'visible'
  })

  // Setters for simple flex layout properties that can be copied directly into the
  // flex node's style input object
  ;[
    'width',
    'height',
    'minWidth',
    'minHeight',
    'maxWidth',
    'maxHeight',
    'aspectRatio',
    'flexDirection',
    'flex',
    'flexWrap',
    'flexBasis',
    'flexGrow',
    'flexShrink',
    'alignContent',
    'alignItems',
    'alignSelf',
    'justifyContent',
    'position',
    'left',
    'right',
    'top',
    'bottom'
  ].forEach(prop => {
    Object.defineProperty(FlexNode.prototype, prop, {
      get() {
        return this._flexStyles[prop]
      },
      set(value) {
        if (value !== this._flexStyles[prop]) {
          this._flexStyles[prop] = value;
          this.needsFlexLayout = true;
        }
      },
      configurable: true
    });
  })

  // Add setters to normalize top/right/bottom/left properties which can be a single
  // number or an array of up to 4 numbers, like their corresponding CSS shorthands
  ;[
    'margin',
    'padding',
    'borderWidth'
  ].forEach(prop => {
    const privateProp = `_priv_${prop}`;
    const styleBase = prop === 'borderWidth' ? 'border' : prop;
    const topStyle = styleBase + 'Top';
    const rightStyle = styleBase + 'Right';
    const bottomStyle = styleBase + 'Bottom';
    const leftStyle = styleBase + 'Left';
    Object.defineProperty(FlexNode.prototype, prop, {
      get() {
        return this[privateProp] || (this[privateProp] = Object.freeze([0, 0, 0, 0]))
      },
      set(value) {
        let t, r, b, l;
        if (Array.isArray(value)) {
          const len = value.length;
          t = value[0] || 0;
          r = (len > 1 ? value[1] : value[0]) || 0;
          b = (len > 2 ? value[2] : value[0]) || 0;
          l = (len > 3 ? value[3] : len > 1 ? value[1] : value[0]) || 0;
        } else {
          t = r = b = l = value;
        }
        const arr = this[prop];
        if (t !== arr[0] || r !== arr[1] || b !== arr[2] || l !== arr[3]) {
          this[privateProp] = Object.freeze([t, r, b, l]);
          const styles = this._flexStyles;
          styles[topStyle] = t;
          styles[rightStyle] = r;
          styles[bottomStyle] = b;
          styles[leftStyle] = l;
          this.needsFlexLayout = true;
        }
      }
    });
  });

  return FlexNode
});

///// Miscellaneous Utility Functions /////


/**
 * Pseudo-polyfilled shortcut for `Object.assign`. Copies own properties from
 * second-and-after arguments onto the first object, overwriting any that already
 * exist, and returns the first argument.
 * @return {object}
 */
const assign$5 = Object.assign || _assign;

// Non-native impl; exported for access by tests
function _assign(/*target, ...sources*/) {
  let target = arguments[0];
  for (let i = 1, len = arguments.length; i < len; i++) {
    let source = arguments[i];
    if (source) {
      for (let prop in source) {
        if (source.hasOwnProperty(prop)) {
          target[prop] = source[prop];
        }
      }
    }
  }
  return target
}


/**
 * Like {@link assign}, but will ony copy properties that do _not_ already
 * exist on the target object.
 * @return {object}
 */
function assignIf(/*target, ...sources*/) {
  let target = arguments[0];
  for (let i = 1, len = arguments.length; i < len; i++) {
    let source = arguments[i];
    if (source) {
      for (let prop in source) {
        if (source.hasOwnProperty(prop) && !target.hasOwnProperty(prop)) {
          target[prop] = source[prop];
        }
      }
    }
  }
  return target
}

/**
 * Like {@link assign}, but for any property where the source and target are both
 * sub-objects, does a deep recursive copy.
 * @param {object} target
 * @param {object} source
 */
function assignDeep(target, source) {
  if (source) {
    for (let prop in source) {
      if (source.hasOwnProperty(prop)) {
        if (target[prop] && typeof target[prop] === 'object' && typeof source[prop] === 'object') {
          assignDeep(target[prop], source[prop]);
        } else {
          target[prop] = source[prop];
        }
      }
    }
  }
}


/**
 * Iterate over an object's own (non-prototype-inherited) properties
 * @param {object} object - The object to iterate over
 * @param {function} fn - A function that will be invoked for each iterated property. It
 *        will be passed three arguments:
 *        - value (the property value)
 *        - key (the property name)
 *        - object (the object being iterated over)
 * @param {*} [scope] - An optional object to be used as `this` when calling the `fn`
 */
function forOwn$2(object, fn, scope) {
  for (let prop in object) {
    if (object.hasOwnProperty(prop)) {
      fn.call(scope, object[prop], prop, object);
    }
  }
}


/**
 * Given an object instance, return a consistent unique id for it.
 * @type function
 * @param {Object} obj - The object instance
 * @return {string} id
 */
const getIdForObject = (() => {
  let objIds = new WeakMap();
  let lastId = 0;
  return function getIdForObject(obj) {
    let id = objIds.get(obj);
    if (!id) {
      objIds.set(obj, (id = `$id${++lastId}`));
    }
    return id
  }
})();


/**
 * Create a function that memoizes the result of another function based on the most
 * recent call's arguments and `this`. The arguments are compared using strict shallow equality.
 * @param {function} fn
 * @return {function}
 */
function memoize(fn) {
  let prevArgs, prevThis, prevResult;
  return function() {
    let changed = !prevArgs || this !== prevThis || arguments.length !== prevArgs.length;
    if (!changed) {
      for (let i = 0, len = arguments.length; i < len; i++) {
        if (arguments[i] !== prevArgs[i]) {
          changed = true;
          break
        }
      }
    }
    if (changed) {
      prevArgs = Array.prototype.slice.call(arguments);
      prevThis = this;
      prevResult = fn.apply(this, arguments);
    }
    return prevResult
  }
}


/**
 * Utility for the "extend-as" pattern used in several places to decorate facade
 * classes with extra capabilities.
 * @param {string} name - unique identifier for this class extension
 * @param {function} doExtend - the function that creates the actual class extension,
 *        this is passed the base class and will only be called once per base class.
 * @return {function(class): class}
 */
function createClassExtender(name, doExtend) {
  const cache = new WeakMap();
  return function(classToExtend) {
    let extended = cache.get(classToExtend);
    if (!extended) { //bidir check due to inheritance of statics
      extended = doExtend(classToExtend);
      cache.set(classToExtend, extended);
    }
    return extended
  }
}


/**
 * Determine whether a given object is a React element descriptor object, i.e. the
 * result of a JSX transpilation to React.createElement().
 * @param obj
 * @return {boolean}
 */
function isReactElement(obj) {
  const t = obj.$$typeof;
  return (t && t.toString && t.toString() === 'Symbol(react.element)') || false
}

var utils = /*#__PURE__*/Object.freeze({
	__proto__: null,
	assign: assign$5,
	_assign: _assign,
	assignIf: assignIf,
	assignDeep: assignDeep,
	forOwn: forOwn$2,
	getIdForObject: getIdForObject,
	memoize: memoize,
	createClassExtender: createClassExtender,
	isReactElement: isReactElement
});

/**
 * The base class for all Facade classes.
 *
 * A Facade is basically just a class that receives property assignments from a scene descriptor
 * and manages forwarding the resulting state to more complex underlying implementation
 * objects, e.g. ThreeJS objects.
 *
 * The instantiated facade objects have a very simple lifecycle:
 *   - The `constructor` in which the initial state and the underyling implementation object(s)
 *     can be initialized. It will be passed a single argument: the `parent` facade object.
 *   - Updates to the object's properties, usually by direct assignment from the scene descriptor.
 *     These updates can be handled immediately by defining property setters that handle syncing
 *     new values to the underyling implementation object(s).
 *   - The `afterUpdate()` method which signals the end of all property updates; this can be
 *     implemented to handle syncing the full set of updated properties to the underlying
 *     implementation object(s). Useful if an aspect of the syncing relies on multiple properties
 *     or needs things to be synced in a specific order.
 *   - The `destructor` method which is always called when the object is removed from the scene.
 *     Implement this to remove and clean up the underlying implementation object(s) and other
 *     cleanup logic.
 *
 * Scene Descriptors:
 *
 * All facade instances are created, updated, and destroyed based on the current structure of
 * a scene descriptor object. The properties in the descriptor are generally just copied
 * directly to properties of the same names on the facade instance, which can handle them
 * either by custom setters or in `afterUpdate`. There are a few special properties in the
 * descriptor:
 *
 *   - `facade`: (required) a reference to the Facade class that will be instantiated.
 *   - `key`: (recommended) an identifier that is unique amongst the descriptor's siblings, which
 *     is used to associate the descriptor with its corresponding Facade instance. One will be
 *     assigned automatically if omitted, but it's recommended that you set one manually to ensure
 *     descriptors are predictably resolved to the same facade instances when siblings are being
 *     added or removed. Not doing so can lead to unnecessary facade destruction/creation and/or
 *     unpredictable facade states.
 *   - `children`: (optional) for `Parent` facade subclasses, defines the child object descriptors.
 *   - `ref`: (optional) a function that will be called with a reference to the instantiated Facade
 *     on creation, and with `null` on destruction, allowing external code to maintain references
 *     to individual facades.
 *   - `transition`: (optional) defines a set of properties that should be transitioned smoothly
 *     when their value changes. See `Animatable` for more details.
 *   - `animation`: (optional) defines one or more keyframe animations. See `Animatable` for more
 *     details.
 *   - `exitAnimation`: (optional) defines a keyframe animation to run when the facade is removed
 *     from its parent.
 *   - `pointerStates`: (optional) defines sets of property values that should be used in place
 *     of those defined on the main object, when the user's pointer (mouse, touch, vr controller,
 *     etc.) is in `hover` or `active` interaction state with the facade. See `PointerStates`
 *     for more details.
 *
 * It is also possible to define facade descriptors using JSX (https://reactjs.org/docs/introducing-jsx.html),
 * if it is precompiled to `React.createElement` calls. In this case, use the facade class as the JSX
 * element name instead of a `facade` property, and child descriptors are defined as nested JSX elements i
 * nstead of a `children` property. *NOTE:* While this is often a nicer looking syntax than the plain JS object
 * form, be aware that the creation of JSX elements does carry a slight performance cost from extra logic
 * and object allocations, so you should avoid it when defining large numbers of facades or when updating
 * descriptors on every frame.
 */
class Facade {
  constructor(parent) {
    this.$facadeId = `facade${ idCounter++ }`;
    this.parent = parent;
  }

  /**
   * Performs a manual update of this facade, invoking the afterUpdate lifecycle method and triggering a
   * render. This can be called in event handlers, for example, to affect changes to this facade and its
   * subtree. This process is synchronous. Never override this method as a way to react to updates, as it
   * is not the only way a component is updated; instead override `afterUpdate` or use setters.
   * @param {object} [props] - A set of properties to be copied to the facade
   */
  update(props) {
    if (props && typeof props === 'object') {
      // Always assign transition and animation first
      this.transition = props.transition;
      this.animation = props.animation;
      for (let prop in props) {
        if (props.hasOwnProperty(prop) && !Facade.isSpecialDescriptorProperty(prop)) {
          this[prop] = props[prop];
        }
      }
    }
    this.afterUpdate();
    this.requestRender();
  }

  /**
   * Called at the end of an update batch, after all individual properties have been assigned.
   */
  afterUpdate() {
    // Handle calling ref function
    let ref = this.ref;
    if (ref !== this._lastRef) {
      if (typeof this._lastRef === 'function') {
        this._lastRef.call(null, null);
      }
      if (typeof ref === 'function') {
        ref.call(null, this);
        this._lastRef = ref;
      } else {
        this._lastRef = null;
      }
    }
  }

  /**
   * Dispatch a message with optional data up the facade parent tree.
   */
  notifyWorld(message, data) {
    if (this.parent) {
      this.parent.onNotifyWorld(this, message, data);
    }
  }

  /**
   * Default onNotifyWorld handler just bubbles it up the parent chain.
   */
  onNotifyWorld(source, message, data) {
    let notifiableParent = this._notifiableParent;
    if (notifiableParent) {
      notifiableParent.onNotifyWorld.call(notifiableParent, source, message, data);
    } else {
      // Optimization: on first call, walk up the tree looking for the first ancestor with a
      // non-default onNotifyWorld implementation, and save a pointer to that ancestor
      // facade so we can just call it directly the next time without any tree walking.
      notifiableParent = this.parent;
      let defaultImpl = Facade.prototype.onNotifyWorld;
      while (notifiableParent) {
        if (notifiableParent.onNotifyWorld !== defaultImpl) {
          this._notifiableParent = notifiableParent;
          notifiableParent.onNotifyWorld(source, message, data);
          break
        }
        notifiableParent = notifiableParent.parent;
      }
    }
  }

  /**
   * Notifies the top-level world manager that this object has changed in some way that affects its
   * visible rendering, so a rendering frame will be scheduled.
   */
  requestRender() {
    this.notifyWorld('needsRender');
  }

  traverse(fn) {
    fn(this);
  }

  forEachChild(fn) {
  }

  /**
   * Add an event listener for the given event type.
   * @param {String} type
   * @param {Function} handler
   */
  addEventListener(type, handler) {
    this.notifyWorld('addEventListener', {type, handler});
  }

  /**
   * Remove an event listener for the given event type.
   * @param {String} type
   * @param {Function} handler
   */
  removeEventListener(type, handler) {
    this.notifyWorld('removeEventListener', {type, handler});
  }

  /**
   * Dispatch an Event object on this facade, with DOM events bubbling logic.
   * @param {Event} event
   */
  dispatchEvent(event) {
    this.notifyWorld('dispatchEvent', event);
  }

  /**
   * Called when the instance is being removed from the scene. Override this to implement any
   * custom cleanup logic.
   */
  destructor() {
    // Unregister all event listeners from the world
    if (this.parent) {
      this.notifyWorld('removeAllEventListeners');
    }

    // Teardown refs
    if (typeof this.ref === 'function') {
      this.ref.call(null, null);
    }
    this.parent = this._notifiableParent = null;
  }
}

assign$5(Facade.prototype, {
  ref: null,
  _lastRef: null,
  _notifiableParent: null
});


let idCounter = 0;
const DEF_SPECIAL_PROPS = {key:1, facade:1, transition:1, animation:1};

/**
 * @static
 * Determine if a certain property name is one of the special descriptor properties
 */
Facade.isSpecialDescriptorProperty = function(name) {
  return DEF_SPECIAL_PROPS.hasOwnProperty(name)
};

/**
 * @static
 * Define a property name as an event handler for a given Facade class, so that it
 * automatically updates the global event registry when set.
 * @param {class} facadeClass - the class whose prototype the property should be defined on
 * @param {String} propName - the name of the event handler property, e.g. 'onMouseOver'
 * @param {String} eventType - the type of the event that will trigger the handler, e.g. 'mouseover'
 */
Facade.defineEventProperty = function(facadeClass, propName, eventType) {
  let privateProp = `${propName}➤handler`;
  Object.defineProperty(facadeClass.prototype, propName, {
    get() {
      return this[privateProp]
    },
    set(handler) {
      const oldHandler = this[privateProp];
      if ((handler || null) !== (oldHandler || null)) {
        // Remove old listener
        if (typeof oldHandler === 'function') {
          this.removeEventListener(eventType, oldHandler);
        }
        // Add new listener
        if (typeof handler === 'function') {
          this.addEventListener(eventType, handler);
        }
        this[privateProp] = handler;
      }
    }
  });
};

/*
 * Built-in easing functions for use in Troika animations. Any of the easings defined here
 * may be referred to within Tweens by their exported symbol name, or by reference.
 * 
 * The implementations here are roughly based on the logic from the jQuery Easing plugin
 * (original license blocks are maintained below for completeness), but they have been
 * significantly rewritten to use a single 0-1 time argument signature, converted to ES2015
 * syntax, and otherwise modified for succinctness or performance.
 */

const {pow, PI, sqrt} = Math;
const HALF_PI = PI / 2;
const TWO_PI = PI * 2;


// factories for common easing function patterns
function makeInOut(inFn, outFn) {
  return t => t < 0.5 ? inFn(t * 2) * 0.5 : outFn(t * 2 - 1) * 0.5 + 0.5
}
function makeExpIn(exp) {
  return t => pow(t, exp)
}
function makeExpOut(exp) {
  return t => 1 - pow(1 - t, exp)
}
function makeExpInOut(exp) {
  return t => t < 0.5 ?
    pow(t * 2, exp) * 0.5 :
    (1 - pow(1 - (t * 2 - 1), exp)) * 0.5 + 0.5
}


const linear$1 = t => t;

const easeInQuad = makeExpIn(2);
const easeOutQuad = makeExpOut(2);
const easeInOutQuad = makeExpInOut(2);

const easeInCubic = makeExpIn(3);
const easeOutCubic = makeExpOut(3);
const easeInOutCubic = makeExpInOut(3);

const easeInQuart = makeExpIn(4);
const easeOutQuart = makeExpOut(4);
const easeInOutQuart = makeExpInOut(4);

const easeInQuint = makeExpIn(5);
const easeOutQuint = makeExpOut(5);
const easeInOutQuint = makeExpInOut(5);

const easeInSine = t => 1 - Math.cos(t * (HALF_PI));
const easeOutSine = t => Math.sin(t * (HALF_PI));
const easeInOutSine = t => -0.5 * (Math.cos(PI * t) - 1);

const easeInExpo = t =>
  (t === 0) ? 0 : pow(2, 10 * (t - 1));

const easeOutExpo = t =>
  (t === 1) ? 1 : 1 - pow(2, -10 * t);

const easeInOutExpo = t =>
  (t === 0 || t === 1) ? t :
  t < 0.5 ?
    pow(2, 10 * (t * 2 - 1)) * 0.5 :
    (1 - pow(2, -10 * (t * 2 - 1))) * 0.5 + 0.5;

const easeInCirc = t =>
  1 - sqrt(1 - t * t);

const easeOutCirc = t =>
  sqrt(1 - pow(t - 1, 2));

const easeInOutCirc = makeInOut(easeInCirc, easeOutCirc);

const easeInElastic = t =>
  (t === 0 || t === 1) ? t : 1 - easeOutElastic(1 - t);

const easeOutElastic = t =>
  (t === 0 || t === 1) ? t :
    Math.pow(2, -10 * t) * Math.sin((t - 0.075) * TWO_PI / 0.3) + 1;

const easeInOutElastic = makeInOut(easeInElastic, easeOutElastic);

const easeInBack = t =>
  t * t * (2.70158 * t - 1.70158);

const easeOutBack = t =>
  (t -= 1) * t * (2.70158 * t + 1.70158) + 1;

const easeInOutBack = t => {
  const s = 1.70158 * 1.525;
  return (t *= 2) < 1 ? 
    0.5 * (t * t * ((s + 1) * t - s)) : 
    0.5 * ((t -= 2) * t * ((s + 1) * t + s) + 2)
};

const easeInBounce = t => 
  1 - easeOutBounce(1 - t);

const easeOutBounce = t => 
  t < (1 / 2.75) ? 
    (7.5625 * t * t) :
  t < (2 / 2.75) ? 
    (7.5625 * (t -= (1.5 / 2.75)) * t + .75) :
  t < (2.5 / 2.75) ? 
    (7.5625 * (t -= (2.25 / 2.75)) * t + .9375) :
    (7.5625 * (t -= (2.625 / 2.75)) * t + .984375);

const easeInOutBounce = makeInOut(easeInBounce, easeOutBounce);

// Aliases...?
// export {
//   easeInBack as swingFrom,
//   easeOutBack as swingTo,
//   easeInOutBack as swingFromTo,
//   easeOutBounce as bounce,
//   easeFrom
// }





// ===== License blocks from originating works: =====

/*
 * jQuery Easing v1.3 - http://gsgd.co.uk/sandbox/jquery/easing/
 *
 * Uses the built in easing capabilities added In jQuery 1.1
 * to offer multiple easing options
 *
 * TERMS OF USE - jQuery Easing
 *
 * Open source under the BSD License.
 *
 * Copyright Â© 2008 George McGinley Smith
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this list of
 * conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright notice, this list
 * of conditions and the following disclaimer in the documentation and/or other materials
 * provided with the distribution.
 *
 * Neither the name of the author nor the names of contributors may be used to endorse
 * or promote products derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 *  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
 *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 *
*/

/*
 *
 * TERMS OF USE - EASING EQUATIONS
 *
 * Open source under the BSD License.
 *
 * Copyright Â© 2001 Robert Penner
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this list of
 * conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright notice, this list
 * of conditions and the following disclaimer in the documentation and/or other materials
 * provided with the distribution.
 *
 * Neither the name of the author nor the names of contributors may be used to endorse
 * or promote products derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 *  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
 *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

var Easings = /*#__PURE__*/Object.freeze({
	__proto__: null,
	linear: linear$1,
	easeInQuad: easeInQuad,
	easeOutQuad: easeOutQuad,
	easeInOutQuad: easeInOutQuad,
	easeInCubic: easeInCubic,
	easeOutCubic: easeOutCubic,
	easeInOutCubic: easeInOutCubic,
	easeInQuart: easeInQuart,
	easeOutQuart: easeOutQuart,
	easeInOutQuart: easeInOutQuart,
	easeInQuint: easeInQuint,
	easeOutQuint: easeOutQuint,
	easeInOutQuint: easeInOutQuint,
	easeInSine: easeInSine,
	easeOutSine: easeOutSine,
	easeInOutSine: easeInOutSine,
	easeInExpo: easeInExpo,
	easeOutExpo: easeOutExpo,
	easeInOutExpo: easeInOutExpo,
	easeInCirc: easeInCirc,
	easeOutCirc: easeOutCirc,
	easeInOutCirc: easeInOutCirc,
	easeInElastic: easeInElastic,
	easeOutElastic: easeOutElastic,
	easeInOutElastic: easeInOutElastic,
	easeInBack: easeInBack,
	easeOutBack: easeOutBack,
	easeInOutBack: easeInOutBack,
	easeInBounce: easeInBounce,
	easeOutBounce: easeOutBounce,
	easeInOutBounce: easeInOutBounce
});

/**
 * Simple numeric interpolator function
 */
function number(fromValue, toValue, progress) {
  return fromValue + (toValue - fromValue) * progress
}

/**
 * Interpolator for color values; decomposes the color into r/g/b channels and does
 * numeric interpolation on each individually. The result is a 24-bit integer value
 * holding the r/g/b channels in its 3 bytes.
 */
function color(fromValue, toValue, progress) {
  fromValue = colorValueToNumber(fromValue);
  toValue = colorValueToNumber(toValue);
  return rgbToNumber(
    number(fromValue >> 16 & 255, toValue >> 16 & 255, progress),
    number(fromValue >> 8 & 255, toValue >> 8 & 255, progress),
    number(fromValue & 255, toValue & 255, progress)
  )
}



/**
 * Utility for converting one of the supported color value types to a 24-bit numeric color
 * representation.
 * @param {*} value - The input value to translate. Supported types:
 * - 24-bit number: simply returned as is
 * - string value: evaluated using a canvas context, so supports color keywords, rgb(), hsl(), etc.
 * - a three.js `Color` object
 * @return {*}
 */
const colorValueToNumber = (function() {
  let colorCanvas, colorCanvasCtx;

  // Cache for evaluated string values
  let stringCache = Object.create(null);
  let stringCacheSize = 0;
  const stringCacheMaxSize = 2048;

  return function(value) {
    if (typeof value === 'number') {
      return value
    }
    else if (typeof value === 'string') {
      if (value in stringCache) {
        return stringCache[value]
      }

      // 2D canvas for evaluating string values
      if (!colorCanvas) {
        colorCanvas = document.createElement('canvas');
        colorCanvasCtx = colorCanvas.getContext('2d');
      }

      colorCanvas.width = colorCanvas.height = 1;
      colorCanvasCtx.fillStyle = value;
      colorCanvasCtx.fillRect(0, 0, 1, 1);
      const colorData = colorCanvasCtx.getImageData(0, 0, 1, 1).data;
      const result = rgbToNumber(colorData[0], colorData[1], colorData[2]);

      // Enforce max cache size - for now this invalidates the entire cache when reaching
      // the max size; we could use a true LRU cache but hitting the max size should be rare
      // in real world usage so this should suffice as a simple memory size protection.
      if (stringCacheSize > stringCacheMaxSize) {
        stringCache = Object.create(null);
        stringCacheSize = 0;
      }

      // Put into cache
      stringCache[value] = result;
      stringCacheSize++;

      return result
    }
    else if (value && value.isColor) {
      return value.getHex()
    }
    else {
      return 0 //fallback to black
    }
  }
})();

function rgbToNumber(r, g, b) {
  return r << 16 ^ g << 8 ^ b
}

var Interpolators = /*#__PURE__*/Object.freeze({
	__proto__: null,
	number: number,
	color: color
});

/**
 * @interface AbstractTween
 * Defines the interface expected by `Runner` for tween-like things.
 */
class AbstractTween {
  /**
   * @abstract
   * For a given elapsed time relative to the start of the tween, calculates the value at that time and calls the
   * `callback` function with that value. If the given time is during the `delay` period, the callback will not be
   * invoked.
   * @param {number} time
   */
  gotoElapsedTime(time) {}

  /**
   * @abstract
   * Like `gotoElapsedTime` but goes to the very end of the tween.
   */
  gotoEnd() {}

  /**
   * @abstract
   * For a given elapsed time relative to the start of the tween, determines if the tween is in its completed end state.
   * @param {number} time
   * @return {boolean}
   */
  isDoneAtElapsedTime(time) {}
}

const linear = v => v;
const maxSafeInteger = 0x1fffffffffffff;

/**
 * @class Tween
 * Represents a transition between two values across a duration of time.
 *
 * Typically you will create a Tween between two values, with a callback function to handle the intermediate values,
 * and then start the Tween in a {@link Runner} which will start invoking the tween on each animation frame until
 * it reaches the end of its duration.
 *
 * @param callback {Function} a function that will be called with the current tween value at a given point in time.
 * @param fromValue {*} the beginning value
 * @param toValue {*} the ending value
 * @param duration {Number} the duration of the tween in milliseconds
 * @param [delay] {Number} optional time in milliseconds to wait before starting the tween
 * @param [easing] {Function|String} optional easing to be applied to the tween values. Can either be a function
 *        that takes a value from 0 to 1 and returns a corresponding "eased" value, or a string that matches the
 *        name of one of the common Penner easing functions - see http://easings.net/ Defaults to linear easing.
 * @param [iterations] {Number} optional number of times to repeat the tween animation. For endless repeating,
 *        specify `Infinity`.
 * @param [direction] {String} direction to run the tween; one of 'forward', 'reverse', or 'alternate'. For
 *        'alternate', it will toggle between forward and reverse on each iteration.
 * @param [interpolate] {String|Function} how tweened values should be calculated between the fromValue and toValue.
 *        Can be the string name for one of the built-in interpolators in Interpolators.js, or a custom function that
 *        will be passed 3 arguments: `fromValue`, `toValue`, and `progress` from 0 to 1.
 */
class Tween extends AbstractTween {
  constructor(callback, fromValue, toValue, duration=750, delay=0, easing=linear, iterations=1, direction='forward', interpolate='number') {
    super();
    this.callback = callback;
    this.fromValue = fromValue;
    this.toValue = toValue;
    this.duration = duration;
    this.delay = delay;
    this.easing = typeof easing === 'string' ? (Easings[easing] || linear) : easing;
    this.iterations = iterations;
    this.direction = direction;
    this.interpolate = typeof interpolate === 'function' ? interpolate : Interpolators[interpolate] || number;

    /**
     * @property totalElapsed
     * @type {number}
     * The total duration of this tween from 0 to its completion, taking into account its `duration`, `delay`, and
     * `iterations`. This is calculated once upon instantiation, and may be used to determine whether the tween is
     * finished or not at a given time.
     */
    this.totalElapsed = this.iterations < maxSafeInteger ? this.delay + (this.duration * this.iterations) : maxSafeInteger;
  }

  /**
   * For a given elapsed time relative to the start of the tween, calculates the value at that time and calls the
   * `callback` function with that value. If the given time is during the `delay` period, the callback will not be
   * invoked.
   * @param {number} time
   */
  gotoElapsedTime(time) {
    let duration = this.duration;
    let delay = this.delay;
    if (time >= delay) {
      time = Math.min(time, this.totalElapsed) - delay; //never go past final value
      let progress = (time % duration) / duration;
      if (progress === 0 && time !== 0) progress = 1;
      progress = this.easing(progress);
      if (this.direction === 'reverse' || (this.direction === 'alternate' && Math.ceil(time / duration) % 2 === 0)) {
        progress = 1 - progress;
      }
      this.callback(this.interpolate(this.fromValue, this.toValue, progress));
    }
  }

  /**
   * Like `gotoElapsedTime` but goes to the very end of the tween.
   */
  gotoEnd() {
    this.gotoElapsedTime(this.totalElapsed);
  }

  /**
   * For a given elapsed time relative to the start of the tween, determines if the tween is in its completed end state.
   * @param {number} time
   * @return {boolean}
   */
  isDoneAtElapsedTime(time) {
    return time > this.totalElapsed
  }
}

var Tween$1 = Tween;

/**
 * A specialized Tween that controls one or more other tweens. The controlled tweens are treated as a
 * single unit and the easing/iterations/etc. are applied across the total duration of all tweens.
 */
class MultiTween extends Tween$1 {
  constructor(tweens, duration, delay, easing, iterations, direction) {
    if (typeof duration !== 'number') {
      // Calculate duration based on the longest individual total duration
      duration = tweens.reduce((dur, tween) => Math.max(dur, tween.totalElapsed), 0);
    }
    if (duration === Infinity) {
      // Make an infinite duration finite, so easing math still works
      duration = Number.MAX_VALUE;
    }

    // Tween the total duration time
    super(null, 0, duration, duration, delay, easing, iterations, direction);
    if (tweens.length === 1) {
      this.callback = tweens[0].gotoElapsedTime.bind(tweens[0]);
    } else {
      tweens.sort(endTimeComparator); //sort by end time to ensure proper iteration in syncTweens
      this.callback = this._syncTweens;
    }
    this.tweens = tweens;
  }

  _syncTweens(time) {
    // NOTE: forward iteration is important here so the tweens are evaluated in order
    // of when they end; that way later tweens will take precedence over earlier ones.
    // TODO would be nice to ignore tweens past their totalElapsed entirely, but have to
    // figure out how to do that while ensuring they don't get stuck with a value that is
    // slightly prior to their end state.
    for (let i = 0, len = this.tweens.length; i < len; i++) {
      this.tweens[i].gotoElapsedTime(time);
    }
  }
}

function endTimeComparator(a, b) {
  return a.totalElapsed - b.totalElapsed
}

var MultiTween$1 = MultiTween;

let runners = [];
let nextFrameTimer = null;
let hasStoppedRunners = false;

function noop$1() {}

function isRunnerRunning(runner) {return runner.runner$running}
function isTweenNotStopped(tween) {return !tween.runner$stopped}

function tick() {
  let now = Date.now();
  nextFrameTimer = null;

  // Filter out any runners that were stopped since last tick
  if (hasStoppedRunners) {
    runners = runners.filter(isRunnerRunning);
    hasStoppedRunners = false;
  }

  if (runners.length) {
    // Sync each runner, filtering out empty ones as we go
    for (let i = runners.length; i-- > 0;) {
      runners[i]._tick(now);
    }
    // Queue next tick if there are still active runners
    queueFrame();
  }
}

let _scheduler = window;

function queueFrame() {
  if (!nextFrameTimer) {
    nextFrameTimer = _scheduler.requestAnimationFrame(tick);
  }
}


function startRunner(runner) {
  if (!runner.runner$running) {
    runner.runner$running = true;
    runners.push(runner);
    queueFrame();
  }
}

function stopRunner(runner) {
  runner.runner$running = false;
  hasStoppedRunners = true;
}


/**
 * @class Runner
 * A container for {@link Tween} instances that handles invoking them on each animation frame.
 */
class Runner {
  constructor() {
    this.tweens = [];
  }

  destructor() {
    this.tweens = null;
    stopRunner(this);
    this.start = this.stop = this.pause = this._tick = noop$1;
  }

  /**
   * Add a tween to the runner. It will be invoked on the next frame, not immediately.
   * @param {Tween} tween
   */
  start(tween) {
    // If previously paused, update start time to account for the duration of the pause
    if (tween.runner$paused && tween.runner$started) {
      tween.runner$started += (Date.now() - tween.runner$paused);
    } else {
      this.tweens.push(tween);
    }
    tween.runner$paused = null;
    tween.runner$stopped = false;

    // add runner to running runners
    startRunner(this);
  }

  /**
   * Remove a tween from the runner.
   * @param tween
   */
  stop(tween) {
    // queue tween for removal from list on next tick
    tween.runner$stopped = true;
    tween.runner$paused = null;
  }

  /**
   * Pause a tween; call `runner.start(tween)` to unpause it
   * @param tween
   */
  pause(tween) {
    if (!tween.runner$paused) {
      tween.runner$paused = Date.now();
    }
  }

  /**
   * Stop all running tweens.
   */
  stopAll() {
    if (this.tweens) {
      this.tweens.forEach(this.stop, this);
    }
  }

  _tick(now) {
    let tweens = this.tweens;
    let hasStoppedTweens = false;
    let hasRunningTweens = false;

    // Sync each tween, filtering out old finished ones as we go
    for (let i = 0, len = tweens.length; i < len; i++) {
      let tween = tweens[i];
      if (!tween.runner$stopped && !tween.runner$paused) {
        // Sync the tween to current time
        let elapsed = now - (tween.runner$started || (tween.runner$started = now));
        tween.gotoElapsedTime(elapsed);
        hasRunningTweens = true;

        // Queue for removal if we're past its end time
        if (tween.isDoneAtElapsedTime(elapsed)) {
          this.stop(tween);
          if (tween.onDone) {
            tween.onDone();
          }
        }
      }
      if (tween.runner$stopped) {
        hasStoppedTweens = true;
      }
    }

    if (hasRunningTweens) {
      this.onTick();
    }

    // Prune list if needed
    // TODO perhaps batch this up so it happens less often
    if (hasStoppedTweens) {
      this.tweens = tweens.filter(isTweenNotStopped);

      // remove runner from running runners if it has no tweens left
      if (!this.tweens.length) {
        stopRunner(this);
        if (this.onDone) {
          this.onDone();
        }
      }
    }
  }

  /**
   * Override to specify a function that will be called at the end of every frame, after all
   * tweens have been updated.
   */
  onTick() {
    // abstract
  }

  /**
   * Override to specify a function that will be called after all running tweens have completed.
   */
  onDone() {
    // abstract
  }
}

var Runner$1 = Runner;

/**
 * Preset spring physics configurations.
 * For convenience, these match the presets defined by react-spring: https://www.react-spring.io/docs/hooks/api
 */
var PRESETS = {
  default: { mass: 1, tension: 170, friction: 26 },
  gentle: { mass: 1, tension: 120, friction: 14 },
  wobbly: { mass: 1, tension: 180, friction: 12 },
  stiff: { mass: 1, tension: 210, friction: 20 },
  slow: { mass: 1, tension: 280, friction: 60 },
  molasses: { mass: 1, tension: 280, friction: 120 }
};

// Factors to be applied to the tension and friction values; these match those used by
// react-spring internally, so that users can use the same spring configs as they would
// in react-spring.
const tensionFactor = 0.000001;
const frictionFactor = 0.001;

const DEFAULTS = PRESETS.default;

/**
 * @class SpringTween
 * Represents a transition between two values based on spring physics.
 *
 * This is very similar to `Tween`, except that it does not have a fixed duration. Instead, it advances a simple
 * spring physics simulation on each call to `gotoElapsedTime`. Since it depends on being advanced in forward-time
 * order, it cannot be repeated or run in a reverse direction. It is also not usable as a member of a `MultiTween`.
 *
 * The `toValue` property can be modified at any time while the simulation is running, and the velocity will be
 * maintained; this makes spring tweens more useful than duration-based tweens for objects whose target values are
 * changed rapidly over time, e.g. drag-drop.
 *
 * Non-numeric interpolations are not yet supported.
 *
 * @param callback {Function} a function that will be called with the current tween value at a given point in time.
 * @param {number} fromValue - the beginning value
 * @param {number} toValue - the initial ending value; this can be modified later by setting the `toValue` property
 * @param {string|object} springConfig - the physical configuration of the spring physics simulation. Either an object
 *        with `mass`, `tension`, and `friction` properties, or a string corresponding to one of the presets defined
 *        in `SpringPresets.js`. Defaults to the "default" preset.
 * @param {number} springConfig.mass - the mass of the simulated object being moved
 * @param {number} springConfig.tension - the spring's tension constant accelerating the simulated object
 * @param {number} springConfig.friction - the friction force decelerating the simulated object
 * @param {number} [initialVelocity] - velocity of the object at the start of the simulation
 * @param {number} [delay] optional time in milliseconds to wait before starting the simulation
 */
class SpringTween extends AbstractTween {
  constructor (
    callback,
    fromValue,
    toValue,
    springConfig,
    initialVelocity = 0,
    delay = 0
  ) {
    super();
    this.isSpring = true;
    this.callback = callback;
    this.currentValue = fromValue;
    this.toValue = toValue;
    this.velocity = initialVelocity;
    this.delay = delay;

    if (typeof springConfig === 'string') {
      springConfig = PRESETS[springConfig];
    }
    if (!springConfig) springConfig = DEFAULTS;
    const {mass, tension, friction} = springConfig;
    this.mass = typeof mass === 'number' ? mass : DEFAULTS.mass;
    this.tension = (typeof tension === 'number' ? tension : DEFAULTS.tension) * tensionFactor;
    this.friction = (typeof friction === 'number' ? friction : DEFAULTS.friction) * frictionFactor;
    this.minAcceleration = 1e-10; // in units/ms^2 - TODO make this configurable

    this.$lastTime = delay;
    this.$endTime = Infinity; //unknown until simulation is stepped to the end state
  }

  gotoElapsedTime (time) {
    if (time >= this.delay) {
      let { toValue, mass, tension, friction, minAcceleration } = this;
      let velocity = this.velocity || 0;
      let value = this.currentValue;

      // Step simulation by 1ms
      for (let t = this.$lastTime; t < time; t++) {
        const acceleration = (tension * (toValue - value) - friction * velocity) / mass;
        // Acceleration converges to zero near end state
        if (Math.abs(acceleration) < minAcceleration) {
          velocity = 0;
          value = toValue;
          this.$endTime = t;
          break
        } else {
          velocity += acceleration;
          value += velocity;
        }
      }
      this.velocity = velocity;
      this.$lastTime = time;
      this.callback(this.currentValue = value);
    }
  }

  gotoEnd () {
    this.velocity = 0;
    this.$lastTime = this.$endTime;
    this.callback(this.currentValue = this.toValue);
  }

  isDoneAtElapsedTime (time) {
    return time >= this.$endTime
  }
}

var SpringTween$1 = SpringTween;

const DEFAULT_DURATION = 750;
const DEFAULT_EASING = 'easeOutCubic';

const TEMP_ARRAY$1 = [null];

function animationIdJsonReplacer(key, value) {
  return key === 'paused' ? undefined : value === Infinity ? 'Infinity' : value
}

function compareByTime(a, b) {
  return a.time - b.time
}

const extendAsAnimatable = createClassExtender('animatable', function(BaseFacadeClass) {
  class AnimatableFacade extends BaseFacadeClass {

    constructor(...args) {
      super(...args);

      // Create root runner for all this object's animation and transition tweens
      this.animation$runner = new Runner$1();
      this.animation$runner.onTick = () => {
        this.afterUpdate();
        this.requestRender();
      };
    }

    /**
     * Handle the special "transition" property. The descriptor should be an object with
     * transitionable property names as keys and transition parameters as values. The
     * transition parameters can either be objects describing the transition parameters,
     * or `true` for a default transition.
     *
     *   transition: {
     *     x: true, // uses a default duration-based transition
     *     y: 'spring', //uses a default spring-based transition
     *     z: {
     *       // ...custom transition config
     *     }
     *   }
     *
     * The custom transition config object can take one of two forms for duration- vs.
     * spring-based animations:
     *
     * Duration-based:
     *
     *   {
     *     duration: n, //in ms, defaults to 750
     *     easing: e, //easing function, defaults to 'easeOutCubic'
     *     delay: n, //in ms, defaults to 0
     *     interpolate: 'number' //one of the builtin named interpolators ('number', 'color', etc.) or a custom Function
     *   }
     *
     * Spring-based:
     *
     *   {
     *     spring: s, //either `true`, a named preset string e.g. "wobbly", or an object with {mass, tension, friction}
     *     delay: n //in ms, defaults to 0
     *   }
     *
     * Note that spring-based transitions do not currently support custom interpolations so they should only be used
     * for numeric values.
     */
    set transition(descriptor) {
      if (descriptor) {
        // Ensure setter/getter has been created for all props in transition
        for (let propName in descriptor) {
          if (descriptor.hasOwnProperty(propName)) {
            defineTransitionPropInterceptor(propName, this);
          }
        }
      }
      this.transition$descriptor = descriptor;
    }
    get transition() {
      return this.transition$descriptor
    }


    /**
     * Handle the special "animation" property. The descriptor should be an object or array
     * of objects defining a set of keyframes and their playback parameters. Keyframes are
     * defined by numeric keys from 0 to 100, each defining an object with the target
     * property values for that keyframe.
     *
     *   animation: [{
     *     0: {rotateZ: 0, color: 0x000000}, //can also use key "from"
     *     100: {rotateZ: Math.PI * 2, color: 0xffffff}, //can also use key "to"
     *     delay: 0, //starting delay in ms
     *     duration: 2000, //total anim duration in ms, defaults to 750
     *     easing: 'linear', //easing for the whole animation, defaults to 'linear'
     *     iterations: 5, //number of times to loop the animation, defaults to 1. Set to Infinity for endless loop.
     *     direction: 'forward', //either 'forward', 'backward', or 'alternate'
     *     interpolate: {color: 'color'}, //mapping of property names to Interpolators.js names or custom functions
     *     paused: false //if true the animation will be paused at its current position until set back to false
     *   }, ...]
     *
     * Internally the animations will be built into a set of nested tweens:
     *
     * |--------------------------- Main MultiTween ------------------------------------|
     *
     * |------------- Anim 1 MultiTween w/ easing+repeat ----------------|
     * |--- prop1 tween 1 ---|--- prop1 tween 2 ---|--- prop1 tween 3 ---|
     * |--------- prop2 tween 1 --------|--------- prop2 tween 2 --------|
     *
     *                    delay -->|-------- Anim 2 MultiTween w/ easing+repeat --------|
     *                             |----- prop3 tween 1 -----|----- prop3 tween 2 ------|
     *                             |------------------- prop4 tween --------------------|
     *                                            |----------- prop5 tween -------------|
     */
    set animation(descriptor) {
      if (this.animation$descriptor === descriptor) return
      this.animation$descriptor = descriptor;
      let oldAnimTweens = this.animation$tweens || null;
      let newAnimTweens = this.animation$tweens = descriptor ? Object.create(null) : null;
      let runner = this.animation$runner;
      let hasChanged = false;

      // Handle single object not wrapped in array
      if (descriptor && !Array.isArray(descriptor)) {
        TEMP_ARRAY$1[0] = descriptor;
        descriptor = TEMP_ARRAY$1;
      }

      if (descriptor) {
        for (let i = 0, len = descriptor.length; i < len; i++) {
          let animDesc = descriptor[i];
          if (!animDesc) continue

          // Calculate an identifier for this animation based on properties whose modification requires a new tween
          let animId = JSON.stringify(animDesc, animationIdJsonReplacer);
          //console.log(`${animId} - is ${oldAnimTweens && oldAnimTweens[animId] ? '' : 'not'} in old tweens`)

          // If a matching tween already exists, update it
          if (oldAnimTweens && (animId in oldAnimTweens)) {
            let tween = oldAnimTweens[animId];
            if (animDesc.paused) {
              runner.pause(tween);
            } else {
              runner.start(tween);
            }
            newAnimTweens[animId] = tween;
          }
          // Otherwise create a new tween
          else {
            let delay = 0;
            let duration = DEFAULT_DURATION;
            let easing = 'linear';
            let iterations = 1;
            let keyframes = [];
            let direction = 'forward';

            for (let key in animDesc) {
              if (animDesc.hasOwnProperty(key)) {
                switch(key) {
                  case 'duration':
                    duration = animDesc[key]; break
                  case 'delay':
                    delay = animDesc[key]; break
                  case 'easing':
                    easing = animDesc[key]; break
                  case 'iterations':
                    iterations = animDesc[key]; break
                  case 'direction':
                    direction = animDesc[key]; break
                  default: {
                    let percent = key === 'from' ? 0 : key === 'to' ? 100 : parseFloat(key);
                    if (!isNaN(percent) && percent >= 0 && percent <= 100) {
                      keyframes.push({time: percent / 100, props: animDesc[key]});
                      for (let animProp in animDesc[key]) {
                        if (animDesc[key].hasOwnProperty(animProp)) {
                          // Ensure setter is in place
                          defineTransitionPropInterceptor(animProp, this);
                          // Stop any active transition tweens for this property
                          let tweenKey = animProp + '➤anim:tween';
                          if (this[tweenKey]) {
                            runner.stop(this[tweenKey]);
                            this[tweenKey] = null;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }

            if (keyframes.length) {
              // Sort the keyframes by time
              keyframes.sort(compareByTime);
              if (keyframes[0].time > 0) {
                keyframes.unshift(assignIf({time: 0}, keyframes[0]));
              }

              // Build a MultiTween with tweens for each keyframe+property
              let keyframePropTweens = [];
              for (let j = 1, len = keyframes.length; j < len; j++) {
                let keyframe = keyframes[j];
                let props = keyframe.props;
                for (let prop in props) {
                  if (props.hasOwnProperty(prop)) {
                    let prevKeyframe = null;
                    for (let k = j; k--;) {
                      if (prop in keyframes[k].props) {
                        prevKeyframe = keyframes[k];
                        break
                      }
                    }
                    if (prevKeyframe) {
                      let propTween = new Tween$1(
                        this[prop + '➤anim:actuallySet'].bind(this), //callback
                        prevKeyframe.props[prop], //fromValue
                        props[prop], //toValue
                        (keyframe.time - prevKeyframe.time) * duration, //duration
                        prevKeyframe.time * duration, //delay
                        'linear', //easing
                        1, //iterations
                        'forward', //direction
                        animDesc.interpolate && animDesc.interpolate[prop] || 'number'
                      );
                      propTween.$$property = prop;
                      keyframePropTweens.push(propTween);
                    }
                  }
                }
              }
              let tween = newAnimTweens[animId] = new MultiTween$1(keyframePropTweens, duration, delay, easing, iterations, direction);
              if (!animDesc.paused) {
                runner.start(tween);
              }

              // The tween runner won't do anything until next tick, so immediately sync to the first frame's
              // properties if the animation has no delay to avoid a flash of bad initial state
              if (delay === 0) {
                let firstKeyframeProps = keyframes[0].props;
                for (let prop in firstKeyframeProps) {
                  if (firstKeyframeProps.hasOwnProperty(prop)) {
                    this[prop + '➤anim:actuallySet'](firstKeyframeProps[prop]);
                  }
                }
              }
            }

            hasChanged = true;
          }
        }
      }

      // Stop any obsolete tweens
      if (oldAnimTweens) {
        for (let animId in oldAnimTweens) {
          if (!newAnimTweens || !newAnimTweens[animId]) {
            let tween = oldAnimTweens[animId];
            tween.gotoEnd(); //force to end value so it doesn't stick partway through
            runner.stop(tween);
            hasChanged = true;
          }
        }
      }

      // If the total set of animations has changed, recalc the set of animating properties
      if (hasChanged) {
        if (newAnimTweens) {
          let animatingProps = this.animation$animatingProps = Object.create(null);
          for (let animId in newAnimTweens) {
            let propTweens = newAnimTweens[animId].tweens;
            for (let i = propTweens.length; i--;) {
              animatingProps[propTweens[i].$$property] = true;
            }
          }
        } else {
          this.animation$animatingProps = null;
        }
      }
    }
    get animation() {
      return this.animation$descriptor
    }

    destructor() {
      const runner = this.animation$runner;
      if (this.exitAnimation && !this.parent.isDestroying) {
        runner.stopAll();
        this.animation = this.exitAnimation;
        this.exitAnimation = this.transition = null;
        const onTick = runner.onTick;
        runner.onTick = () => {
          if (this.parent && !this.parent.isDestroying) {
            onTick();
          } else {
            // An ancestor may have been destroyed during our exit animation, orphaning this object;
            // catch this case and short-circuit the animation to prevent errors in subsequent ticks
            runner.onDone = null;
            this.destructor();
          }
        };
        runner.onDone = () => {
          this.requestRender();
          this.destructor();
        };
      } else {
        runner.destructor();
        super.destructor();
      }
    }
  }

  // Add get/set interceptor to the wrapper's prototype if this is the first time seeing this prop. Putting it
  // on the wrapper prototype allows us to avoid per-instance overhead as well as avoid collisions with
  // other custom setters anywhere else in the prototype chain.
  function defineTransitionPropInterceptor(propName, currentInstance) {
    if (!AnimatableFacade.prototype.hasOwnProperty(propName)) {
      let actualValueKey = `${ propName }➤anim:actualValue`;
      let actuallySetKey = `${ propName }➤anim:actuallySet`;
      let hasBeenSetKey = `${ propName }➤anim:hasBeenSet`;
      let activeTweenKey = `${ propName }➤anim:tween`;

      // Find the nearest getter/setter up the prototype chain, if one exists. Assuming the prototype won't change after the fact.
      let superGetter, superSetter;
      let proto = BaseFacadeClass.prototype;
      while (proto) {
        let desc = Object.getOwnPropertyDescriptor(proto, propName);
        if (desc) {
          superSetter = desc.set;
          superGetter = desc.get;
          if (superSetter && !superGetter || superGetter && !superSetter) {
            throw new Error(`Animatable: property ${propName} has a custom ${superSetter ? 'setter' : 'getter'} but no ${superSetter ? 'getter' : 'setter'}. Animatable properties must have both.`)
          }
          break
        }
        proto = Object.getPrototypeOf(proto);
      }

      // Function to set the value, bypassing the interceptor setter.
      // Use the super setter if available, otherwise store in a private-ish key
      let actuallySet = superSetter ? function actuallySet(value) {
        superSetter.call(this, value);
        if (!this[hasBeenSetKey]) {
          this[hasBeenSetKey] = true;
        }
      } : function actuallySet(value) {
        this[actualValueKey] = value;
        if (!this[hasBeenSetKey]) {
          this[hasBeenSetKey] = true;
        }
      };
      Object.defineProperty(AnimatableFacade.prototype, actuallySetKey, { value: actuallySet });


      // Add the custom getter/setter for this property
      Object.defineProperty(AnimatableFacade.prototype, propName, {
        get() {
          // Always return the current actual value
          return superGetter ? superGetter.call(this) : this[hasBeenSetKey] ? this[actualValueKey] : BaseFacadeClass.prototype[propName]
        },

        set(value) {
          // Will this value be controlled by an animation? Ignore it since animations take precedence.
          if (this.animation$animatingProps && this.animation$animatingProps[propName]) {
            return
          }

          // Does this value have a transition defined, and are the old/new values transitionable?
          let runner = this.animation$runner;
          let transition = this.transition;
          if (transition && transition[propName] && this[hasBeenSetKey] && transition.hasOwnProperty(propName)) {
            transition = transition[propName];
            let springConfig = transition === 'spring' ? 'default' : transition.spring;
            // If there's no active transition tween, or the new value is different than the active tween's
            // target value, initiate a new transition tween. Otherwise ignore it.
            let tween = this[activeTweenKey];
            let needsNewTween = false;
            if (tween) {
              // Active tween - start new one if new value is different than the old tween's target
              // value, unless they're both springs in which case update the original
              if (value !== tween.toValue) {
                if (springConfig && tween.isSpring) {
                  // TODO allow mid-simulation modification of spring config?
                  tween.toValue = value;
                } else {
                  runner.stop(tween);
                  needsNewTween = true;
                }
              }
            } else if (value !== this[propName]) {
              // No active tween - only start one if the value is changing
              needsNewTween = true;
            }
            if (needsNewTween) {
              tween = this[activeTweenKey] = springConfig
                ? new SpringTween$1(
                  actuallySet.bind(this), //callback
                  this[propName], //fromValue
                  value, //toValue
                  springConfig, //springConfig (mass, friction, tension)
                  0, //initialVelocity
                  transition.delay || 0 //delay
                )
                : new Tween$1(
                  actuallySet.bind(this), //callback
                  this[propName], //fromValue
                  value, //toValue
                  transition.duration || DEFAULT_DURATION, //duration
                  transition.delay || 0, //delay
                  transition.easing || DEFAULT_EASING, //easing
                  1, //iterations
                  'forward', //direction
                  transition.interpolate || 'number' //interpolate
                );
              tween.onDone = () => {
                tween = this[activeTweenKey] = null;
              };
              runner.start(tween);
            }
            return
          }

          // No animation or transition will be started; set the value.
          actuallySet.call(this, value);

          // Clean up obsolete stuff
          let tween = this[activeTweenKey];
          if (tween) runner.stop(tween);
          this[activeTweenKey] = null;
        }
      });
    }


    // If the instance had this property set before the intercepting setter was added to the
    // prototype, that would continue to take precedence, so move its value to the private property.
    if (currentInstance.hasOwnProperty(propName)) {
      currentInstance[`${ propName }➤anim:actualValue`] = currentInstance[propName];
      currentInstance[`${ propName }➤anim:hasBeenSet`] = true;
      delete currentInstance[propName];
    }

  }

  return AnimatableFacade
});

/**
 * Allows a facade to be configured with an optional `pointerStates` property, which defines
 * sets of property values that should be used in place of the object's actual values when
 * the user interacts with the facade using their pointer device (mouse, touch, vr controller, etc.)
 * This is not used directly, but is automatically wrapped by `ParentFacade` and `ListFacade` when
 * setting up their children if the `pointerStates` property is present.
 *
 * The `pointerStates` property should point to an object with `hover` and/or `active` properties,
 * each of which is an object holding the individual properties to be used in those states. Any
 * properties defined in `active` will take precedence over those defined in `hover`.
 *
 * The properties will honor any `transition`s defined for them, but the `transition` must be
 * defined on the facade's main configuration object, not within the pointerStates themselves.
 */
const extendAsPointerStatesAware = createClassExtender('pointerStates', function(BaseFacadeClass) {
  const isHoveringProp = '➤pntr:isHovering';
  const isActiveProp = '➤pntr:isActive';
  const propsWithInterceptors = Object.create(null);

  class PointerStatesAware extends BaseFacadeClass {
    constructor(parent) {
      super(parent);
      this.addEventListener('mouseover', hoverOverHandler);
      this.addEventListener('mouseout', hoverOutHandler);
      this.addEventListener('mousedown', activeDownHandler);
      this.addEventListener('mouseup', activeUpHandler);
    }

    afterUpdate() {
      this._applyPointerStates();
      super.afterUpdate();
    }

    _applyPointerStates() {
      const pointerStates = this.pointerStates;
      const hoverValuesToUse = (pointerStates && this[isHoveringProp] && pointerStates.hover) || null;
      const activeValuesToUse = (pointerStates && this[isActiveProp] && pointerStates.active) || null;

      const lastAppliedValues = this['➤pntr:lastAppliedValues'] || propsWithInterceptors;
      const appliedValues = this['➤pntr:lastAppliedValues'] =
        (hoverValuesToUse || activeValuesToUse) ? assign$5(Object.create(null), hoverValuesToUse, activeValuesToUse) : null;

      if (appliedValues) {
        for (let prop in appliedValues) {
          definePropInterceptor(prop, this);
          actuallySet(this, prop, appliedValues[prop]);
        }
      }

      if (lastAppliedValues) {
        for (let prop in lastAppliedValues) {
          if (!appliedValues || !(prop in appliedValues)) {
            actuallySet(this, prop, this[`${prop}➤pntr:baseValue`]);
          }
        }
      }
    }
  }

  // Flag for identification
  Object.defineProperty(PointerStatesAware.prototype, 'isPointerStateAware', {value: true});

  // Add get/set interceptor to the wrapper's prototype if this is the first time seeing this prop. Putting it
  // on the wrapper prototype allows us to avoid per-instance overhead as well as avoid collisions with
  // other custom setters anywhere else in the prototype chain.
  function definePropInterceptor(propName, currentInstance) {
    // On first set for this instance, move the prop's previous value, if any, to the private property
    const hasBeenSetProp = `${propName}➤pntr:hasBeenSet`;
    if (!currentInstance[hasBeenSetProp]) {
      currentInstance[`${ propName }➤pntr:baseValue`] = currentInstance[propName];
      delete currentInstance[propName]; //remove own prop so it doesn't override the prototype getter/setter
      currentInstance[hasBeenSetProp] = true;
    }

    if (!PointerStatesAware.prototype.hasOwnProperty(propName)) {
      propsWithInterceptors[propName] = 1;
      const baseValueProp = `${ propName }➤pntr:baseValue`;
      const appliedValueProp = `${propName}➤pntr:appliedValue`;

      Object.defineProperty(PointerStatesAware.prototype, propName, {
        get() {
          const superGetter = getSuperGetter(propName);
          return superGetter ? superGetter.call(this) :
            (appliedValueProp in this) ? this[appliedValueProp] :
            this[baseValueProp]
        },

        set(value) {
          this[baseValueProp] = value;
        }
      });
    }
  }

  function actuallySet(instance, propName, value) {
    const superSetter = getSuperSetter(propName);
    if (superSetter) {
      superSetter.call(instance, value);
    } else {
      instance[`${propName}➤pntr:appliedValue`] = value;
    }
  }

  function getSuperGetter(propName) {
    let proto = BaseFacadeClass.prototype;
    if (propName in proto) { //prefilter across entire proto chain
      while (proto) {
        let desc = Object.getOwnPropertyDescriptor(proto, propName);
        if (desc && desc.get) {
          return desc.get
        }
        proto = Object.getPrototypeOf(proto);
      }
    }
    return null
  }

  function getSuperSetter(propName) {
    let proto = BaseFacadeClass.prototype;
    if (propName in proto) { //prefilter across entire proto chain
      while (proto) {
        let desc = Object.getOwnPropertyDescriptor(proto, propName);
        if (desc && desc.set) {
          return desc.set
        }
        proto = Object.getPrototypeOf(proto);
      }
    }
    return null
  }

  function hoverOverHandler(e) {
    e.currentTarget[isHoveringProp] = true;
    afterPointerStateChange(e);
  }
  function hoverOutHandler(e) {
    e.currentTarget[isHoveringProp] = e.currentTarget[isActiveProp] = false;
    afterPointerStateChange(e);
  }
  function activeDownHandler(e) {
    e.currentTarget[isActiveProp] = true;
    afterPointerStateChange(e);
  }
  function activeUpHandler(e) {
    e.currentTarget[isActiveProp] = false;
    afterPointerStateChange(e);
  }

  function afterPointerStateChange(e) {
    let highestFacade = e.currentTarget;
    let parent = highestFacade.parent;
    while (parent && parent.shouldUpdateChildren()) {
      if (parent.isPointerStateAware) {
        highestFacade = parent;
      }
      parent = parent.parent;
    }
    highestFacade.afterUpdate();
    highestFacade.requestRender();
  }

  return PointerStatesAware
});

/**
 * ListFacade is an optimized way to define a large number of scene objects based on an array of data.
 * Unlike mapping a data array to `children` objects in the scene descriptor, ListFacade allows you to
 * define only a single "template" descriptor object whose properties are either constant values
 * or accessor functions that get invoked for each data item. The resulting property values are
 * then applied directly to the implementation objects, without creating any intermediary objects.
 *
 * Example:
 *
 *     {
 *       key: 'balls',
 *       facade: ListFacade,
 *       data: itemsData,
 *       template: {
 *         key: (item, i, all) => `ball_${ item.id }`,
 *         facade: Ball,
 *         x: (item, i, all) => item.time,
 *         y: (item, i, all) => item.count,
 *         radius: 10,
 *         color: (item, i, all) => item.important ? 0xff0000 : 0xcccccc
 *       }
 *     }
 */
class List extends Facade {
  constructor(parent) {
    super(parent);
    this._orderedItemKeys = [];
  }

  afterUpdate() {
    let {data, template} = this;
    let hasData = data && data.length && Array.isArray(data);

    if (this.shouldUpdateChildren()) {
      let oldDict = this._itemsDict || null;
      let newDict = this._itemsDict = hasData ? Object.create(null) : null;
      let orderedItemKeys = this._orderedItemKeys;

      if (hasData) {
        orderedItemKeys.length = data.length;

        for (let i = 0, len = data.length; i < len; i++) {
          let childData = data[i];
          let key = template.key(childData, i, data);
          let facadeClass = template.facade;
          while(newDict[key]) {
            key += '|dupe';
          }

          // If a transition/animation is present, upgrade the class to a Animatable class on demand.
          // NOTE: changing between animatable/non-animatable results in a full teardown/recreation
          // of this instance *and its entire subtree*, so try to avoid that by always including the `transition`
          // definition if the object is expected to ever need transitions, even if it's temporarily empty.
          let transition = typeof template.transition === 'function' ? template.transition(childData, i, data) : template.transition;
          let animation = typeof template.animation === 'function' ? template.animation(childData, i, data) : template.animation;
          let exitAnimation = typeof template.exitAnimation === 'function' ? template.exitAnimation(childData, i, data) : template.exitAnimation;
          if (transition || animation || exitAnimation) {
            facadeClass = extendAsAnimatable(facadeClass);
          }

          // Same for pointer states
          let pointerStates = template.pointerStates;
          if (pointerStates === 'function' ? pointerStates(childData, i, data) : pointerStates) {
            facadeClass = extendAsPointerStatesAware(facadeClass);
          }

          // If we have an old instance with the same key and class, reuse it; otherwise instantiate a new one
          let oldImpl = oldDict && oldDict[key];
          let newImpl;
          if (oldImpl && oldImpl.constructor === facadeClass) {
            newImpl = oldImpl;
          } else {
            // If swapping instance need to destroy the old before creating the new, e.g. for `ref` call ordering
            if (oldImpl) oldImpl.destructor();
            newImpl = new facadeClass(this);
          }
          //always set transition/animation before any other props
          newImpl.transition = transition;
          newImpl.animation = animation;
          for (let prop in template) {
            if (template.hasOwnProperty(prop) && !Facade.isSpecialDescriptorProperty(prop)) {
              newImpl[prop] = typeof template[prop] === 'function' ? template[prop](childData, i, data) : template[prop];
            }
          }
          newImpl.afterUpdate();
          newDict[key] = newImpl;
          orderedItemKeys[i] = key;
        }
      }

      // Destroy all old child instances that were not reused or replaced
      if (oldDict) {
        for (let key in oldDict) {
          if (!newDict || !newDict[key]) {
            oldDict[key].destructor();
          }
        }
      }
    }

    super.afterUpdate();
  }

  /**
   * Override to selectively prevent updating the ListFacade's items on `afterUpdate`, for
   * potential performance gain.
   * @returns {boolean}
   */
  shouldUpdateChildren() {
    return true
  }

  /**
   * Walk this facade's descendant tree, invoking a function for it and each descendant.
   * The iteration order will match the order in which the `data` items were declared. It may
   * also include items that have been queued for removal but not yet removed, e.g. facades
   * in the process of an `exitAnimation`.
   * @param {Function} fn
   * @param {Object} [thisArg]
   */
  traverse(fn, thisArg) {
    fn.call(thisArg, this);
    let keys = this._orderedItemKeys;
    let dict = this._itemsDict;
    for (let i = 0, len = keys.length; i < len; i++) {
      dict[keys[i]].traverse(fn, thisArg);
    }
  }

  /**
   * Iterate over this facade's direct child facades, invoking a function for each.
   * The iteration order will match the order in which the `data` items were declared. It may
   * also include items that have been queued for removal but not yet removed, e.g. facades
   * in the process of an `exitAnimation`.
   * @param {Function} fn
   * @param {Object} [thisArg]
   */
  forEachChild(fn, thisArg) {
    let keys = this._orderedItemKeys;
    let dict = this._itemsDict;
    for (let i = 0, len = keys.length; i < len; i++) {
      fn.call(thisArg, dict[keys[i]], keys[i]);
    }
  }

  destructor() {
    this.isDestroying = true;
    // Destroy all child instances
    let dict = this._itemsDict;
    if (dict) {
      for (let key in dict) {
        dict[key].destructor();
      }
    }
    super.destructor();
  }
}

const TEMP_ARRAY = [null];

/**
 * @typedef {object} FacadeDescriptor
 * An object describing the type and properties of a child facade to be created and managed by
 * its parent. See the detailed description in the docs for {@link Facade.js}.
 * @property {class} facade
 * @property {string|number} [key]
 */


/**
 * Base facade class for objects that have `children`. Manages creating and destroying child
 * facade instances as needed as its `children` array changes.
 *
 * If you need to create a large number of child objects based on an array of incoming data,
 * consider using a `ListFacade` instead of a parent object with a large `children` array, since
 * that requires only a single template descriptor object instead of one for every child.
 */
class ParentFacade extends Facade {
  constructor(parent) {
    super(parent);

    /**
     * @member {FacadeDescriptor | Array<FacadeDescriptor>} children
     * Descriptors for one or more child facades.
     */
    this.children = null;

    this._orderedChildKeys = [];
  }

  afterUpdate() {
    if (this.shouldUpdateChildren()) {
      this.updateChildren(this.describeChildren());
    }
    super.afterUpdate();
  }

  /**
   * Return the descriptor(s) for the actual children to be created and managed. By default
   * this simply returns the value of the `children` property set by the parent, but you can
   * override it to customize how the child content should be structured, for instance to wrap
   * the `children` within a deeper structure, add in anonymous child siblings, or modify the
   * `children` configurations.
   * @protected
   * @return {FacadeDescriptor | Array<FacadeDescriptor>}
   */
  describeChildren() {
    return this.children
  }

  /**
   * Override to selectively prevent traversing to child nodes on `afterUpdate`, for
   * potential performance gain.
   * @returns {boolean}
   */
  shouldUpdateChildren() {
    return true
  }

  updateChildren(children) {
    const oldDict = this._childrenDict || null;
    let newDict = this._childrenDict = null;
    const orderedChildKeys = this._orderedChildKeys;
    orderedChildKeys.length = 0;

    if (children) {
      // Allow single child without wrapper array
      if (!Array.isArray(children)) {
        TEMP_ARRAY[0] = children;
        children = TEMP_ARRAY;
      }

      for (let i = 0, len = children.length; i < len; i++) {
        let childDesc = children[i];
        if (!childDesc) continue //child members can be null
        if (!newDict) {
          newDict = this._childrenDict = Object.create(null);
        }

        // Handle child descriptors defined via a JSX->React.createElement() transforms (ReactElement objects)
        const isJSX = isReactElement(childDesc);
        let propsObj = isJSX ? childDesc.props : childDesc;
        let facadeClass = isJSX ? childDesc.type : childDesc.facade;

        // Find this child's key; if not specified by the author, build one from the facade class name
        let key = childDesc.key;
        if (!key) {
          let j = 0;
          do {
            key = `auto:${facadeClass.name}:${j++}`;
          } while (newDict[key])
        }
        if (newDict[key]) {
          while(newDict[key]) {
            key += '|dupe';
          }
        }

        // If a transition/animation is present, upgrade the class to a Animatable class on demand.
        // NOTE: changing between animatable/non-animatable results in a full teardown/recreation
        // of this instance *and its entire subtree*, so try to avoid that by always including the `transition`
        // definition if the object is expected to ever need transitions, even if it's temporarily empty.
        let transition = propsObj.transition;
        let animation = propsObj.animation;
        if (transition || animation || propsObj.exitAnimation) {
          facadeClass = extendAsAnimatable(facadeClass);
        }

        // Same for pointer states
        if (propsObj.pointerStates) {
          facadeClass = extendAsPointerStatesAware(facadeClass);
        }

        // If we have an old instance with the same key and class, update it, otherwise instantiate a new one
        let oldImpl = oldDict && oldDict[key];
        let newImpl;
        if (oldImpl && oldImpl.constructor === facadeClass) {
          newImpl = oldImpl;
        } else {
          // If swapping instance need to destroy the old before creating the new, e.g. for `ref` call ordering
          if (oldImpl) oldImpl.destructor();
          newImpl = new facadeClass(this);
        }
        //always set transition/animation before any other props
        newImpl.transition = transition;
        newImpl.animation = animation;
        for (let prop in propsObj) {
          if (propsObj.hasOwnProperty(prop) && !Facade.isSpecialDescriptorProperty(prop)) {
            newImpl[prop] = propsObj[prop];
          }
        }
        newDict[key] = newImpl;
        orderedChildKeys.push(key);
        newImpl.afterUpdate();
      }
    }

    // Destroy all old child instances that were not reused or replaced
    if (oldDict) {
      for (let key in oldDict) {
        if (!newDict || !newDict[key]) {
          oldDict[key].destructor();
        }
      }
    }
  }

  getChildByKey(key) {
    let dict = this._childrenDict;
    return dict && dict[key] || null
  }

  /**
   * Walk this facade's descendant tree, invoking a function for it and each descendant.
   * The iteration order will match the order in which the `children` were declared. It may
   * also include items that have been queued for removal but not yet removed, e.g. facades
   * in the process of an `exitAnimation`.
   * @param {Function} fn
   * @param {Object} [thisArg]
   */
  traverse(fn, thisArg) {
    fn.call(thisArg, this);
    const keys = this._orderedChildKeys;
    const dict = this._childrenDict;
    for (let i = 0, len = keys.length; i < len; i++) {
      dict[keys[i]].traverse(fn, thisArg);
    }
  }

  /**
   * Iterate over this facade's direct child facades, invoking a function for each.
   * The iteration order will match the order in which the `children` were declared. It may
   * also include items that have been queued for removal but not yet removed, e.g. facades
   * in the process of an `exitAnimation`.
   * @param {Function} fn
   * @param {Object} [thisArg]
   */
  forEachChild(fn, thisArg) {
    const keys = this._orderedChildKeys;
    const dict = this._childrenDict;
    for (let i = 0, len = keys.length; i < len; i++) {
      fn.call(thisArg, dict[keys[i]], keys[i]);
    }
  }

  destructor() {
    this.isDestroying = true;
    // Destroy all child instances
    let dict = this._childrenDict;
    if (dict) {
      for (let key in dict) {
        dict[key].destructor();
      }
    }
    super.destructor();
  }
}

const pointerMotionEventProps = [
  'onMouseOver',
  'onMouseOut',
  'onMouseMove',
  'onDragStart',
  'onDrag',
  'onDragEnter',
  'onDragOver',
  'onDragLeave'
];

const pointerActionEventProps = [
  'onMouseDown',
  'onMouseUp',
  'onClick',
  'onDoubleClick',
  'onDrop',
  'onDragEnd',
  'onWheel'
];

const pointerActionEventTypes = pointerActionEventProps.map(eventPropToType);
const pointerMotionEventTypes = pointerMotionEventProps.map(eventPropToType);

const pointerEventProps = pointerMotionEventProps.concat(pointerActionEventProps);
const pointerEventTypes = pointerMotionEventTypes.concat(pointerActionEventTypes);

function eventPropToType(prop) {
  return prop === 'onDoubleClick' ? 'dblclick' : prop.replace(/^on/, '').toLowerCase()
}


class PointerEventTarget extends ParentFacade {
  /**
   * Determine if this PointerEventTarget should intercept pointer events:
   * - By default only facades with a pointer event listener assigned will be counted, to prevent being blocked by unwanted objects
   * - If an object should definitely block events from objects behind it, set `pointerEvents:true`
   * - If an object has one of the pointer event properties but should be ignored in picking, set `pointerEvents:false`
   */
  interceptsPointerEvents(eventRegistry) {
    if (this.pointerEvents === false) {
      return false
    }
    if (this.pointerEvents) {
      return true
    }
    for (let i = 0, len = pointerEventTypes.length; i < len; i++) {
      if (eventRegistry.hasFacadeListenersOfType(this, pointerEventTypes[i])) {
        return true
      }
    }
  }
}


Object.defineProperty(PointerEventTarget.prototype, 'isPointerEventTarget', {value: true});


// Add handlers for pointer event properties
pointerEventProps.forEach(propName => {
  Facade.defineEventProperty(PointerEventTarget, propName, eventPropToType(propName));
});

/**
 * @class EventRegistry
 * Utility for tracking event listeners by type and target facade
 */
function EventRegistry() {
  const byEventType = Object.create(null);

  this.addListenerForFacade = (facade, type, handler) => {
    const listenersOfType = byEventType[type] || (byEventType[type] = {
      count: 0,
      byFacadeId: Object.create(null)
    });
    const facadeId = facade.$facadeId;
    const oldHandlers = listenersOfType.byFacadeId[facadeId];
    // No listeners for this facade yet; set handler function as single value to avoid
    // unnecessary array creation in the common single-listener case.
    if (!oldHandlers) {
      listenersOfType.count++;
      listenersOfType.byFacadeId[facadeId] = handler;
    }
    // Already multiple listeners; add to array if not already present
    else if (Array.isArray(oldHandlers)) {
      if (oldHandlers.indexOf(handler) === -1) {
        listenersOfType.count++;
        oldHandlers.push(handler);
      }
    }
    // Second unique listener; promote to array
    else if (oldHandlers !== handler) {
      listenersOfType.count++;
      listenersOfType.byFacadeId[facadeId] = [oldHandlers, handler];
    }
  };

  this.removeListenerForFacade = (facade, type, handler) => {
    const listenersOfType = byEventType[type];
    const facadeId = facade.$facadeId;
    const oldHandlers = listenersOfType && listenersOfType.byFacadeId[facadeId];
    // Single listener; delete from map
    if (oldHandlers === handler) {
      listenersOfType.count--;
      delete listenersOfType.byFacadeId[facadeId];
    }
    // Multiple listeners; remove from array
    else if (Array.isArray(oldHandlers)) {
      const idx = oldHandlers.indexOf(handler);
      if (idx > -1) {
        listenersOfType.count--;
        // Delete from map if the array will be empty; we don't demote from array to single
        // item because it can result in unneeded churn in the likely case of a different
        // listener being added immediately after
        if (oldHandlers.length === 1) {
          delete listenersOfType.byFacadeId[facadeId];
        } else {
          oldHandlers.splice(idx, 1);
        }
      }
    }
  };

  this.removeAllListenersForFacade = (facade) => {
    const facadeId = facade.$facadeId;
    for (let type in byEventType) {
      let facadeListeners = byEventType[type].byFacadeId[facadeId];
      if (facadeListeners) {
        byEventType[type].count -= (Array.isArray(facadeListeners) ? facadeListeners.length : 1);
        delete byEventType[type].byFacadeId[facadeId];
      }
    }
  };

  this.hasFacadeListenersOfType = (facade, type) => {
    return byEventType[type] ? !!byEventType[type].byFacadeId[facade.$facadeId] : false
  };

  this.hasAnyListenersOfType = (type) => {
    return byEventType[type] ? byEventType[type].count > 0 : false
  };

  this.findBubblingEventTarget = (targetFacade, eventType) => {
    while (targetFacade) {
      if (this.hasFacadeListenersOfType(targetFacade, eventType)) {
        return targetFacade
      }
      targetFacade = targetFacade.parent;
    }
    return null
  };

  function tryCall(func, scope, arg1, arg2) {
    try {
      func.call(scope, arg1, arg2);
    } catch(err) {
    }
  }

  this.forEachFacadeListenerOfType = (facade, type, callback, scope) => {
    const listenersOfType = byEventType[type];
    const facadeId = facade.$facadeId;
    const handlers = listenersOfType && listenersOfType.byFacadeId[facadeId];
    if (handlers) {
      if (Array.isArray(handlers)) {
        for (let i = 0; i < handlers.length; i++) {
          tryCall(callback, scope, handlers[i], facadeId);
        }
      } else {
        tryCall(callback, scope, handlers, facadeId);
      }
    }
  };

  this.forEachListenerOfType = (type, callback, scope) => {
    const listenersOfType = byEventType[type];
    if (listenersOfType && listenersOfType.count > 0) {
      for (let facadeId in listenersOfType.byFacadeId) {
        const facadeListeners = listenersOfType.byFacadeId[facadeId];
        if (Array.isArray(facadeListeners)) {
          for (let i = 0; i < facadeListeners.length; i++) {
            tryCall(callback, scope, facadeListeners[i], facadeId);
          }
        } else {
          tryCall(callback, scope, facadeListeners, facadeId);
        }
      }
    }
  };

  this.dispatchEventOnFacade = (facade, event) => {
    let currentTarget = facade;
    function callHandler(handler) {
      handler.call(currentTarget, event);
    }
    event.target = facade;
    while (currentTarget && !event.propagationStopped) { //TODO should defaultPrevented mean anything here?
      event.currentTarget = currentTarget;
      this.forEachFacadeListenerOfType(currentTarget, event.type, callHandler, null);
      if (event.bubbles) {
        currentTarget = currentTarget.parent;
      } else {
        break
      }
    }
  };
}

const TAP_DISTANCE_THRESHOLD = 10;
const TAP_GESTURE_MAX_DUR = 300;
const TAP_DBLCLICK_MAX_DUR = 300;
const DEFAULT_EVENT_SOURCE = {};

const domPointerMotionEventTypes = [
  'mousemove',
  'mouseout',
  'touchmove'
];
const domPointerActionEventTypes = [
  'mousedown',
  'mouseup',
  'click',
  'dblclick',
  'wheel',
  'touchstart',
  'touchend',
  'touchcancel'
];
const dropEventTypes = [
  'mouseup',
  'touchend',
  'touchcancel'
];
const pointerActionEventTypeMappings = {
  'touchstart': 'mousedown',
  'touchend': 'mouseup',
  'touchcancel': 'mouseup'
};

const touchDragPropsToNormalize = ['clientX', 'clientY', 'screenX', 'screenY', 'pageX', 'pageY'];

class SyntheticEvent {
  constructor(nativeEvent, type, target, relatedTarget, extraProps) {
    // Copy native event properties - TODO investigate using a Proxy
    for (let prop in nativeEvent) {
      // NOTE: we don't check hasOwnProperty in this loop because properties that will return
      // false for properties that are defined by getters on inherited prototypes
      if (typeof nativeEvent[prop] !== 'function') {
        this[prop] = nativeEvent[prop];
      }
    }

    // Adjust to custom params
    this.target = target;
    this.relatedTarget = relatedTarget;
    this.type = type;
    this.nativeEvent = nativeEvent;
    assign$5(this, extraProps);

    // normalize position properties on touch events with a single touch, to facilitate
    // downstream handlers that expect them to look like mouse events
    // NOTE: can't do this in _normalizePointerEvent() as these props are unwritable on native Event objects
    if (nativeEvent.touches) {
      let touches = isTouchEndOrCancel(nativeEvent) ? nativeEvent.changedTouches : nativeEvent.touches;
      if (touches.length === 1) {
        touchDragPropsToNormalize.forEach(prop => {
          this[prop] = touches[0][prop];
        });
      }
    }
  }

  preventDefault() {
    this.defaultPrevented = true;
    this.nativeEvent.preventDefault();
  }

  stopPropagation() {
    this.propagationStopped = true;
    this.nativeEvent.stopPropagation();
  }
}

function isTouchEndOrCancel(e) {
  return e.type === 'touchend' || e.type === 'touchcancel'
}

function killEvent(e) {
  e.stopPropagation();
  e.preventDefault();
}


class WorldBaseFacade extends ParentFacade {
  constructor(element) {
    super(null);

    this.width = this.height = 1;
    this._element = element;
    this._htmlOverlays = Object.create(null);

    // Bind events
    this.eventRegistry = new EventRegistry();
    this._onPointerMotionEvent = this._onPointerMotionEvent.bind(this);
    this._onPointerActionEvent = this._onPointerActionEvent.bind(this);
    this._onDropEvent = this._onDropEvent.bind(this);
    this._togglePointerListeners(true);
  }

  afterUpdate() {
    this._queueRender();
    super.afterUpdate();
  }

  onNotifyWorld(source, message, data) {
    let handler = this._notifyWorldHandlers[message];
    if (handler) {
      handler.call(this, source, data);
    }
  }

  _isContinuousRender() {
    return this.continuousRender
  }

  /**
   * @property {{requestAnimationFrame, cancelAnimationFrame}} renderingScheduler
   * The object holding `requestAnimationFrame` and `cancelAnimationFrame` scheduling
   * functions. Defaults to `window` but can be switched to another implementation, e.g.
   * to use an XRSession's custom scheduler.
   */
  set renderingScheduler(scheduler) {
    scheduler = scheduler || window;
    if (scheduler !== this.renderingScheduler) {
      const activeHandle = this._nextFrameTimer;
      if (activeHandle) {
        this.renderingScheduler.cancelAnimationFrame(activeHandle);
        this._nextFrameTimer = null;
      }
      this._renderingScheduler = scheduler;
    }
  }
  get renderingScheduler() {
    return this._renderingScheduler || window
  }

  // Schedule a render pass on the next frame
  _queueRender() {
    if (!this._nextFrameTimer) {
      const handler = this._nextFrameHandler || (this._nextFrameHandler = (...args) => {
        let {onStatsUpdate, onBeforeRender, onAfterRender} = this;
        let start = onStatsUpdate && Date.now();

        if (onBeforeRender) onBeforeRender(this);

        this.doRender(...args);

        if (onStatsUpdate) {
          let now = Date.now();
          onStatsUpdate({
            'Render CPU Time (ms)': now - start,
            'Time Between Frames (ms)': this._lastFrameTime ? now - this._lastFrameTime : '?',
            'FPS': this._lastFrameTime ? Math.round(1000 / (now - this._lastFrameTime)) : '?'
          });
          this._lastFrameTime = now;
        }

        this._doRenderHtmlItems();

        if (onAfterRender) onAfterRender(this);

        this._nextFrameTimer = null;

        if (this._isContinuousRender()) {
          this._queueRender();
        }
      });
      this._nextFrameTimer = this.renderingScheduler.requestAnimationFrame(handler);
    }
  }

  /**
   * @abstract
   */
  doRender(/*...frameArgs*/) {
  }

  /**
   * @abstract
   */
  getFacadeUserSpaceXYZ(/*facade*/) {
  }

  _doRenderHtmlItems() {
    if (this.renderHtmlItems) {
      let htmlItemsData = [];
      let overlayFacades = this._htmlOverlays;
      for (let key in overlayFacades) {
        let facade = overlayFacades[key];
        let data = this.getFacadeUserSpaceXYZ(facade);
        if (data.z >= 0) { //Ignore objects with negative z (behind the camera)
          data.key = facade.$facadeId;
          data.html = facade.html;
          data.exact = facade.exact;
          htmlItemsData.push(data);
        }
      }
      this.renderHtmlItems(htmlItemsData);
    }
  }

  /**
   * Hook allowing world implementations to pre-normalize native pointer events, for instance
   * computing derived worldspace properties that are simpler for downstream code to use.
   * @param {Event} e
   * @protected
   */
  _normalizePointerEvent(e) {
  }

  /**
   * Entry point for handling events related to pointer motion (e.g. mouse or touch movement).
   * This will be called by the code that wraps this World facade to bridge native DOM events
   * into the Troika world.
   * @param {Event} e
   */
  _onPointerMotionEvent(e) {
    this._normalizePointerEvent(e);
    const eventState = this._getPointerEventState(e);

    if (pointerMotionEventTypes.some(this.eventRegistry.hasAnyListenersOfType)) {
      const hoverInfo = (e.type === 'mouseout' || isTouchEndOrCancel(e)) ? null : this._findHoverTarget(e);
      let lastHovered = eventState.hoveredFacade;
      let hovered = eventState.hoveredFacade = hoverInfo && hoverInfo.facade;

      let dragInfo = eventState.dragInfo;
      if (dragInfo) {
        if (!dragInfo.dragStartFired) {
          this._firePointerEvent('dragstart', dragInfo.dragStartEvent, dragInfo.draggedFacade, null, hoverInfo);
          dragInfo.dragStartFired = true;
        }
        this._firePointerEvent('drag', e, dragInfo.draggedFacade, null, hoverInfo);
      }

      if (hovered !== lastHovered) {
        if (lastHovered) {
          this._firePointerEvent('mouseout', e, lastHovered, hovered, hoverInfo);
          if (dragInfo) {
            this._firePointerEvent('dragleave', e, lastHovered, hovered, hoverInfo);
          }
        }
        if (hovered) {
          this._firePointerEvent('mouseover', e, hovered, lastHovered, hoverInfo);
          if (dragInfo) {
            this._firePointerEvent('dragenter', e, hovered, lastHovered, hoverInfo);
          }
        }
      }
      if (hovered) {
        this._firePointerEvent('mousemove', e, hovered, null, hoverInfo);
        if (dragInfo) {
          this._firePointerEvent('dragover', e, hovered, null, hoverInfo);
        }
      }
    }

    // Cancel tap gesture if moving past threshold
    let tapInfo = eventState.tapInfo;
    if (tapInfo && e.type === 'touchmove') {
      let touch = e.changedTouches[0];
      if (touch && Math.sqrt(Math.pow(touch.clientX - tapInfo.x, 2) + Math.pow(touch.clientY - tapInfo.y, 2)) > TAP_DISTANCE_THRESHOLD) {
        eventState.tapInfo = null;
      }
    }
  }

  /**
   * Entry point for handling events related to pointer motion (e.g. mouse clicks or touch taps).
   * This will be called by the code that wraps this World facade to bridge native DOM events
   * into the Troika world.
   * @param {Event} e
   */
  _onPointerActionEvent(e) {
    this._normalizePointerEvent(e);

    // Handle drop events, in the case they weren't captured by the listeners on `document`
    // e.g. synthetic events dispatched internally
    if (dropEventTypes.indexOf(e.type) > -1) {
      this._onDropEvent(e);
    }

    // Map touch start to mouseover, and disable touch-hold context menu
    if (e.type === 'touchstart') {
      if (e.touches.length === 1) {
        this._onPointerMotionEvent(e);
      }
      this._enableContextMenu(false);
    }

    const eventRegistry = this.eventRegistry;
    if (eventRegistry.hasAnyListenersOfType('dragstart') || pointerActionEventTypes.some(eventRegistry.hasAnyListenersOfType)) {
      let hoverInfo = this._findHoverTarget(e);
      let facade = hoverInfo && hoverInfo.facade;
      if (facade) {
        const eventState = this._getPointerEventState(e);
        this._firePointerEvent(pointerActionEventTypeMappings[e.type] || e.type, e, facade, null, hoverInfo);

        // touchstart/touchend could be start/end of a tap - map to click
        if (eventRegistry.findBubblingEventTarget(facade, 'click') || eventRegistry.findBubblingEventTarget(facade, 'dblclick')) {
          let tapInfo = eventState.tapInfo;
          if (e.type === 'touchstart' && e.touches.length === 1) {
            eventState.tapInfo = {
              facade: facade,
              x: e.touches[0].clientX,
              y: e.touches[0].clientY,
              startTime: Date.now(),
              isDblClick: tapInfo && Date.now() - tapInfo.startTime < TAP_DBLCLICK_MAX_DUR
            };
          } else {
            if (
              tapInfo && tapInfo.facade === facade && e.type === 'touchend' &&
              e.touches.length === 0 && e.changedTouches.length === 1 &&
              Date.now() - tapInfo.startTime < TAP_GESTURE_MAX_DUR
            ) {
              this._firePointerEvent('click', e, facade, null, hoverInfo);
              if (tapInfo.isDblClick) {
                this._firePointerEvent('dblclick', e, facade, null, hoverInfo);
              }
            }
          }
        }

        // mousedown/touchstart could be prepping for drag gesture
        if (e.type === 'mousedown' || e.type === 'touchstart') {
          const dragger = eventRegistry.findBubblingEventTarget(facade, 'dragstart');
          if (dragger) {
            let dragStartEvent = new SyntheticEvent(e, 'dragstart', dragger, null, {intersection: hoverInfo});
            eventState.dragInfo = {
              draggedFacade: dragger,
              dragStartFired: false,
              dragStartEvent: dragStartEvent
            };
            // handle release outside canvas
            this._toggleDropListeners(true);
          }
        }
      }
      e.preventDefault(); //prevent e.g. touch scroll
    }

    // Map touch end to mouseout
    if (isTouchEndOrCancel(e)) {
      if (e.changedTouches.length === 1) {
        this._onPointerMotionEvent(e);
      }
      this._enableContextMenu(true);
    }
  }

  _onDropEvent(e) {
    const eventState = this._getPointerEventState(e);
    let dragInfo = eventState.dragInfo;
    if (dragInfo) {
      this._normalizePointerEvent(e);
      let hoverInfo = this._findHoverTarget(e);
      let targetFacade = hoverInfo && hoverInfo.facade;
      if (targetFacade) {
        this._firePointerEvent('drop', e, targetFacade, null, hoverInfo);
      }
      this._firePointerEvent('dragend', e, dragInfo.draggedFacade, null, hoverInfo);
      this._toggleDropListeners(false);
      eventState.dragInfo = null;
    }
  }

  _firePointerEvent(eventType, originalEvent, targetFacade, relatedTargetFacade, intersection) {
    let newEvent = (originalEvent instanceof SyntheticEvent) ?
      originalEvent :
      new SyntheticEvent(
        originalEvent,
        eventType,
        targetFacade,
        relatedTargetFacade,
        {
          bubbles: true,
          intersection
        }
      );
    // Dispatch with bubbling
    this.eventRegistry.dispatchEventOnFacade(targetFacade, newEvent);
  }

  _getPointerEventState(e) {
    const states = this._pointerEventStates || (this._pointerEventStates = new WeakMap());
    const eventSource = e.eventSource || DEFAULT_EVENT_SOURCE;
    let eventState = states.get(eventSource);
    if (!eventState) {
      states.set(eventSource, eventState = {});
    }
    return eventState
  }

  _toggleDropListeners(on) {
    dropEventTypes.forEach(type => {
      document[(on ? 'add' : 'remove') + 'EventListener'](type, this._onDropEvent, true);
    });
  }

  _togglePointerListeners(on) {
    let canvas = this._element;
    if (canvas && on !== this._pointerListenersAttached) {
      let method = (on ? 'add' : 'remove') + 'EventListener';
      domPointerMotionEventTypes.forEach(type => {
        canvas[method](type, this._onPointerMotionEvent, false);
      });
      domPointerActionEventTypes.forEach(type => {
        canvas[method](type, this._onPointerActionEvent, false);
      });
      this._pointerListenersAttached = on;
    }
  }

  _enableContextMenu(enable) {
    let canvas = this._element;
    if (canvas) {
      canvas[(enable ? 'remove' : 'add') + 'EventListener']('contextmenu', killEvent, true);
    }
  }

  /**
   * @abstract
   * Given a pointer-related Event, find and return all facade objects that are intersected
   * by that event. If any hits are found, this should return an array of objects that contain
   * at least `facade` and `distance` properties. Any additional properties will be exposed to
   * event listeners on the synthetic event object as an `intersection` property.
   * @param {Event} e
   * @param {Function} [filterFn]
   * @return {Array<{facade, distance, ?distanceBias, ...}>|null}
   */
  getFacadesAtEvent(e, filterFn) {
    throw new Error('getFacadesAtEvent: no impl')
  }

  _findHoverTarget(e) {
    //only handle single touches for now
    if (e.touches && e.touches.length > 1) {
      return null
    }

    let allHits = this.getFacadesAtEvent(e, facade =>
      facade.isPointerEventTarget && facade.interceptsPointerEvents(this.eventRegistry)
    );
    if (allHits) {
      // Find the closest by comparing distance, or distanceBias if distance is the same
      let closestHit = allHits[0];
      for (let i = 1; i < allHits.length; i++) {
        if (allHits[i].distance < closestHit.distance ||
          (allHits[i].distance === closestHit.distance && (allHits[i].distanceBias || 0) < (closestHit.distanceBias || 0))
        ) {
          closestHit = allHits[i];
        }
      }
      return closestHit
    }

    return null
  }

  destructor() {
    if (this._nextFrameTimer) {
      this.renderingScheduler.cancelAnimationFrame(this._nextFrameTimer);
    }
    this._togglePointerListeners(false);
    this._toggleDropListeners(false);
    super.destructor();
  }

}

Object.defineProperty(WorldBaseFacade.prototype, 'isWorld', {value: true});

WorldBaseFacade.prototype._notifyWorldHandlers = {
  needsRender() {
    this._queueRender();
  },
  addEventListener(source, data) {
    this.eventRegistry.addListenerForFacade(source, data.type, data.handler);
  },
  removeEventListener(source, data) {
    this.eventRegistry.removeListenerForFacade(source, data.type, data.handler);
  },
  removeAllEventListeners(source) {
    this.eventRegistry.removeAllListenersForFacade(source);
  },
  dispatchEvent(source, event) {
    if (!(event instanceof SyntheticEvent)) {
      event = new SyntheticEvent(event, event.type, event.target, event.relatedTarget);
    }
    this.eventRegistry.dispatchEventOnFacade(source, event);
  },
  addHtmlOverlay(source) {
    this._htmlOverlays[source.$facadeId] = source;
  },
  removeHtmlOverlay(source) {
    delete this._htmlOverlays[source.$facadeId];
  },
  statsUpdate(source, data) {
    let onStatsUpdate = this.onStatsUpdate;
    if (onStatsUpdate) onStatsUpdate(data);
  }
};

const {assign: assign$4, forOwn: forOwn$1} = utils;
const singletonVec3 = new Vector3();
const singletonVec3b = new Vector3();
const notifyWorldGetter = (function() {
  const obj = {
    callback: function(pos) {
      obj.value = pos;
    },
    value: null
  };
  return obj
})();
const removedEvent = {type: 'removed'};
const singletonIntersects = [];

function ascDistanceSort(a, b) {
  return a.distance - b.distance
}

function canObjectBeOrphaned(obj) {
  return obj.isRenderable === false && (
    !obj.children.length || obj.children.every(canObjectBeOrphaned)
  )
}

let _worldMatrixVersion = 0;
let _geometrySphereVersion = 0;

class Object3DFacade extends PointerEventTarget {
  constructor(parent, threeObject) {
    super(parent);

    if (!threeObject) {
      threeObject = this.initThreeObject();
    }

    // We'll track matrix updates manually
    threeObject.matrixAutoUpdate = false;

    // Set bidirectional refs
    this.threeObject = threeObject;
    threeObject.$facade = this;

    // Subclasses may set isRenderable=false on the threeObject, to trigger some scene graph optimizations.
    // The first is to remove it from all layer masks to short-circuit WebGLRenderer.projectObject.
    let isRenderable = threeObject.isRenderable !== false;
    if (!isRenderable) {
      threeObject.layers.mask = 0;
    }

    // Add it as a child of the nearest parent threeObject, if one exists
    while (parent) {
      if (parent.isObject3DFacade) {
        this._parentObject3DFacade = parent; //reference to nearest Object3DFacade ancestor
        if (isRenderable) {
          this._addToThreeObjectTree();
        }
        break
      }
      parent = parent.parent;
    }

    this.notifyWorld('object3DAdded');
  }

  /**
   * Lifecycle method, called at constructor time, that creates and returns a Three.js `Object3D`
   * instance which will become the `threeObject` for this facade. This is a more ergonomic
   * alternative than overriding the constructor to pass the `threeObject` as a second argument
   * to the super() call. By default it creates a plain Object3D marked as non-renderable so it
   * is not added to the Three.js tree.
   * @return {Object3D}
   * @protected
   */
  initThreeObject() {
    const obj = new Object3D();
    obj.isRenderable = false; //trigger optimizations
    return obj
  }

  afterUpdate() {
    // Update matrix and worldMatrix before processing children
    this.updateMatrices();
    this._checkBoundsChange();

    // If the world matrix was modified, and we won't be doing an update pass on child facades due
    // to `shouldUpdateChildren` optimization, we need to manually update their matrices to match.
    if (this._worldMatrixVersion > this._worldMatrixVersionAfterLastUpdate) {
      if (!this.shouldUpdateChildren()) {
        this.traverse((facade, rootFacade) => {
          if (facade !== rootFacade && facade.updateMatrices) {
            facade.updateMatrices();
            facade._checkBoundsChange();
          }
        }, this);
      }
      this._worldMatrixVersionAfterLastUpdate = this._worldMatrixVersion;
    }

    // Process children
    super.afterUpdate();

    // If any children were removed during the update, remove them from the threejs
    // object in a single batch; this avoids threejs's very expensive single-item remove.
    this._flushQueuedChildRemovals();
  }

  /**
   * Update the underlying threeObject's `matrix` and `matrixWorld` to the current state if necessary.
   * This bypasses the `updateMatrix` and `updateMatrixWorld` methods of the threejs objects with a more
   * efficient approach that doesn't require traversing the entire tree prior to every render. This is possible
   * since we control the update lifecycle; as long as this is called from the `afterUpdate` lifecycle
   * method or later, it can be safely assumed that the world matrices of all ancestors have already been
   * similarly updated so the result should always be accurate.
   */
  updateMatrices() {
    let threeObj = this.threeObject;
    let parent3DFacade = this._parentObject3DFacade;
    let needsWorldMatrixUpdate;
    if (this._matrixChanged) {
      threeObj.matrix.compose(threeObj.position, threeObj.quaternion, threeObj.scale);
      this._matrixChanged = false;
      needsWorldMatrixUpdate = true;
    } else {
      needsWorldMatrixUpdate = parent3DFacade && parent3DFacade._worldMatrixVersion > this._worldMatrixVersion;
    }
    if (needsWorldMatrixUpdate) {
      if (parent3DFacade) {
        threeObj.matrixWorld.multiplyMatrices(parent3DFacade.threeObject.matrixWorld, threeObj.matrix);
      } else {
        threeObj.matrixWorld.copy(threeObj.matrix);
      }

      // If the threeObject has children that were manually added (not managed by facades), we'll need to update them too
      // TODO can we determine this state without a full loop that will likely return nothing?
      let threeKids = threeObj.children;
      for (let i = 0, len = threeKids.length; i < len; i++) {
        if (!threeKids[i].$facade) {
          threeKids[i].updateMatrixWorld(true);
        }
      }

      this.markWorldMatrixDirty();
    }
  }

  /**
   * If the `threeObject.matrixWorld` is modified manually instead of via the individual transformation
   * properties, you can call this to tell the facade its caches need to be recalculated.
   */
  markWorldMatrixDirty() {
    this._worldMatrixVersion = ++_worldMatrixVersion;
    this._boundsChanged = true;
  }

  _checkBoundsChange() {
    let changed = this._boundsChanged;
    if (!changed) {
      const geomSphere = this._getGeometryBoundingSphere();
      if (geomSphere && geomSphere.version !== this._lastGeometrySphereVersion) {
        changed = true;
        this._lastGeometrySphereVersion = geomSphere.version;
      }
    }
    if (changed) {
      this.notifyWorld('object3DBoundsChanged');
      this._boundsChanged = false;
    }
  }

  /**
   * Get this object's current position in world space
   * @param {Vector3} [vec3] - optional Vector3 object to populate with the position;
   *                  if not passed in a new one will be created.
   * @returns {Vector3}
   */
  getWorldPosition(vec3 ) {
    this.updateMatrices();
    return (vec3 || new Vector3()).setFromMatrixPosition(this.threeObject.matrixWorld)
  }

  /**
   * Get the current position vector of the world's camera.
   * @param {Vector3} [vec3] - optional Vector3 object to populate with the position;
   *                  if not passed in a new one will be created.
   * @returns {Vector3}
   */
  getCameraPosition(vec3 ) {
    vec3 = vec3 || new Vector3();
    this.notifyWorld('getCameraPosition', vec3);
    return vec3
  }

  /**
   * Get the facade object for the world's camera. Can be used to get to low-level info
   * about the camera such as its various matrices, but be careful not to make modifications
   * to the camera as that can lead to things getting out of sync.
   * @returns {Camera3DFacade}
   */
  getCameraFacade() {
    notifyWorldGetter.value = null;
    this.notifyWorld('getCameraFacade', notifyWorldGetter);
    return notifyWorldGetter.value
  }

  /**
   * Calculate the distance in world units between this object's origin and the camera.
   * @returns {Number}
   */
  getCameraDistance() {
    let cameraPos = this.getCameraPosition(singletonVec3b);
    let objectPos = this.getWorldPosition(singletonVec3);
    return cameraPos.distanceTo(objectPos)
  }

  /**
   * Get the current projected user space position for this object, or for a specific position
   * in its object space.
   * @returns {Vector3} x and y are in screen pixels, z is worldspace distance from camera. The
   *                    z may be negative, which means it is out of view behind the camera.
   */
  getProjectedPosition(x, y, z) {
    this.updateMatrices();
    notifyWorldGetter.value = null;
    notifyWorldGetter.worldPosition = singletonVec3.set(x || 0, y || 0, z || 0).applyMatrix4(this.threeObject.matrixWorld);
    this.notifyWorld('projectWorldPosition', notifyWorldGetter);
    return notifyWorldGetter.value
  }

  /**
   * Get the facade object for the world's scene.
   * @returns {Scene3DFacade}
   */
  getSceneFacade() {
    notifyWorldGetter.value = null;
    this.notifyWorld('getSceneFacade', notifyWorldGetter);
    return notifyWorldGetter.value
  }

  /**
   * Return a {@link Sphere} encompassing the bounds of this object in worldspace, or `null` if
   * it has no physical bounds. This is used for optimized raycasting.
   *
   * The default implementation attempts to be as efficient as possible, only updating the sphere
   * when necessary, and assumes the threeObject has a geometry that accurately describes its bounds.
   * Override this method to provide custom bounds calculation logic, for example when additional meshes
   * need to be checked or a vertex shader manipulates the geometry; you'll probably also need to override
   * {@link #raycast} to match.
   *
   * TODO: this needs to be easier to override without having to reimplement large chunks of logic
   */
  getBoundingSphere() {
    // Get the geometry's current bounding sphere
    let geomSphere = this._getGeometryBoundingSphere();
    if (!geomSphere) return null

    // Ensure world matrix is up to date
    this.updateMatrices();

    // Lazily create our Sphere
    let sphere = this._boundingSphere;
    if (!sphere) {
      sphere = this._boundingSphere = new Sphere();
    }

    // If the geometry, the geometry's bounding sphere, or this object's world matrix changed,
    // update our bounding sphere to match them.
    if (sphere._geometrySphereVersion !== geomSphere.version || sphere._worldMatrixVersion !== this._worldMatrixVersion) {
      sphere.copy(geomSphere);
      sphere.applyMatrix4(this.threeObject.matrixWorld);
      sphere._worldMatrixVersion = this._worldMatrixVersion;
      sphere._geometrySphereVersion = geomSphere.version;
    }

    return sphere
  }

  /**
   * Ensure the object's geometry, if any, has an up-to-date bounding Sphere, and return that Sphere.
   * The returned Sphere will be assigned a unique `version` property when it is modified, which can
   * be used elsewhere for tracking changes.
   * @private
   */
  _getGeometryBoundingSphere() {
    const geometry = this.getGeometry();
    if (geometry) {
      let geomSphere = geometry.boundingSphere;
      let geomSphereChanged = false;
      if (geomSphere) {
        if (geometry.isBufferGeometry) {
          // For a BufferGeometry we can look at the `position` attribute's `version` (incremented
          // when the user sets `geom.needsUpdate = true`) to detect the need for bounds recalc
          const posAttr = geometry.attributes.position;
          if (posAttr && geomSphere._posAttrVersion !== posAttr.version) {
            geometry.computeBoundingSphere();
            geomSphere._posAttrVersion = posAttr.version;
            geomSphereChanged = true;
          }
        } else {
          // For a non-buffer Geometry (not recommended!) users will have to manually call
          // `geom.computeBoundingSphere()` after changing its vertices, and we'll do a brute force
          // check for changes to the sphere's properties
          if (!geometry._lastBoundingSphere || !geomSphere.equals(geometry._lastBoundingSphere)) {
            geometry._lastBoundingSphere = geomSphere.clone();
            geomSphereChanged = true;
          }
        }
      } else {
        geometry.computeBoundingSphere();
        geomSphere = geometry.boundingSphere;
        geomSphereChanged = true;
      }
      if (geomSphereChanged) {
        geomSphere.version = ++_geometrySphereVersion;
      }
      return geomSphere
    } else {
      return null
    }
  }

  /**
   * @protected Extension point for subclasses that don't use their threeObject's geometry, e.g. Instanceable
   */
  getGeometry() {
    const obj = this.threeObject;
    return obj && obj.geometry
  }

  /**
   * Determine if this facade's threeObject intersects a Raycaster. Override this method to provide
   * custom raycasting logic, for example when additional meshes need to be checked or a vertex shader
   * manipulates the geometry; you'll probably also need to override {@link #getBoundingSphere} to match.
   *
   * The return value can be:
   *   - An array of hit objects for this facade, matching the format returned by `Raycaster.intersectObject`
   *   - `null`, if this facade has no hits
   */
  raycast(raycaster) {
    return this.threeObject ? this._raycastObject(this.threeObject, raycaster) : null
  }

  /**
   * Custom optimized raycast that, unlike Raycaster.intersectObject(), avoids creating a
   * new array unless there are actually hits. It also supports the custom `raycastSide`
   * override property, hit on sides other than the material's configured `side`.
   * @protected
   */
  _raycastObject(obj, raycaster) {
    if (obj.visible) {
      singletonIntersects.length = 0;
      let origSide = null;
      const raycastSide = this.raycastSide;
      if (raycastSide != null) {
        origSide = obj.material.side;
        obj.material.side = raycastSide;
      }
      obj.raycast(raycaster, singletonIntersects);
      if (origSide !== null) {
        obj.material.side = origSide;
      }
      if (singletonIntersects.length) {
        singletonIntersects.sort(ascDistanceSort);
        return singletonIntersects.slice()
      }
    }
    return null
  }

  _addToThreeObjectTree() {
    let parent = this._parentObject3DFacade;
    if (parent) {
      if (this.threeObject.parent !== parent.threeObject) {
        parent.threeObject.add(this.threeObject);
        parent._addToThreeObjectTree();
      }
    }
  }

  _queueRemoveChildObject3D(threeObjectId) {
    let removeChildIds = this._removeChildIds || (this._removeChildIds = Object.create(null));
    removeChildIds[threeObjectId] = true;
  }

  _flushQueuedChildRemovals() {
    // If any children were queued for removal, remove them from the threejs
    // object in a single batch; this avoids threejs's very expensive single-item remove.
    if (this._removeChildIds) {
      let threeObject = this.threeObject;
      let removeChildIds = this._removeChildIds;
      threeObject.children = threeObject.children.filter(child => {
        if (child.id in removeChildIds) {
          child.parent = null;
          child.dispatchEvent(removedEvent);
          return false
        }
        return true
      });

      // If that resulted in a non-renderable object having no renderable children,
      // remove it from the threejs object tree, recursively upward.
      let parentObj3D = this._parentObject3DFacade;
      if (canObjectBeOrphaned(threeObject) && parentObj3D && parentObj3D.threeObject === threeObject.parent) {
        parentObj3D._queueRemoveChildObject3D(threeObject.id);
        parentObj3D._flushQueuedChildRemovals(); //if we don't force a parent flush, tree can get in a bad state
      }

      this._removeChildIds = null;
    }
  }

  destructor() {
    this.notifyWorld('object3DRemoved');
    let parentObj3D = this._parentObject3DFacade;
    if (parentObj3D) {
      parentObj3D._queueRemoveChildObject3D(this.threeObject.id);
    }
    delete this.threeObject;
    super.destructor();
  }
}


// Convenience setters for Object3D simple properties
['castShadow', 'receiveShadow', 'renderOrder', 'visible'].forEach(prop => {
  Object.defineProperty(Object3DFacade.prototype, prop, {
    get() {
      return this.threeObject[prop]
    },
    set(value) {
      this.threeObject[prop] = value;
    }
  });
});

/**
 * @property {null|number} raycastSide
 * Hook to force a different `side` than that of the material for mesh raycasting.
 * Should be set to `FrontSide`|`BackSide`|`DoubleSide`, or `null` to use the
 * material's side.
 */
Object3DFacade.prototype.raycastSide = null;


// Create flat property setters for individual position/scale/rotation properties
forOwn$1({
  position: {
    x: 'x',
    y: 'y',
    z: 'z'
  },
  scale: {
    x: 'scaleX',
    y: 'scaleY',
    z: 'scaleZ'
  },
  rotation: {
    x: 'rotateX',
    y: 'rotateY',
    z: 'rotateZ',
    order: 'rotateOrder'
  },
  quaternion: {
    x: 'quaternionX',
    y: 'quaternionY',
    z: 'quaternionZ',
    w: 'quaternionW'
  }
}, (attrs, aspect) => {
  forOwn$1(attrs, (propName, attr) => {
    // Compile functions to avoid runtime cost of aspect/attr evaluation
    Object.defineProperty(Object3DFacade.prototype, propName, {
      get: new Function(`return function ${propName}$get() {
  return this.threeObject.${aspect}.${attr}
}`)(),
      set: new Function(`return function ${propName}$set(value) {
  //let obj = this.threeObject.${aspect}
  if (this.threeObject.${aspect}.${attr} !== value) {
    this.threeObject.${aspect}.${attr} = value
    if (!this._matrixChanged) {
      this._matrixChanged = true
    }
  }
}`)()
    });
  });
});

// ...and a special shortcut for uniform scale
Object.defineProperty(Object3DFacade.prototype, 'scale', {
  get() {
    // can't guarantee scale was already uniform, so just use scaleX arbitrarily
    return this.threeObject.scale.x
  },
  set(value) {
    const scaleObj = this.threeObject.scale;
    if (value !== scaleObj.x || value !== scaleObj.y || value !== scaleObj.z) {
      scaleObj.x = scaleObj.y = scaleObj.z = value;
      if (!this._matrixChanged) {
        this._matrixChanged = true;
      }
    }
  }
});


Object.defineProperty(Object3DFacade.prototype, 'isObject3DFacade', {value: true});

// Predefine shape to facilitate JS engine optimization
assign$4(Object3DFacade.prototype, {
  threeObject: null,
  _parentObject3DFacade: null,
  _removeChildIds: null,
  _matrixChanged: true,
  _worldMatrixVersion: -1,
  _worldMatrixVersionAfterLastUpdate: -1,
  _boundingSphereChanged: false
});

// Define onBeforeRender/onAfterRender event handler properties
Facade.defineEventProperty(Object3DFacade, 'onBeforeRender', 'beforerender');
Facade.defineEventProperty(Object3DFacade, 'onAfterRender', 'afterrender');

/**
 * Regular expression for matching the `void main() {` opener line in GLSL.
 * @type {RegExp}
 */
const voidMainRegExp = /\bvoid\s+main\s*\(\s*\)\s*{/g;

/**
 * Recursively expands all `#include <xyz>` statements within string of shader code.
 * Copied from three's WebGLProgram#parseIncludes for external use.
 *
 * @param {string} source - The GLSL source code to evaluate
 * @return {string} The GLSL code with all includes expanded
 */
function expandShaderIncludes( source ) {
  const pattern = /^[ \t]*#include +<([\w\d./]+)>/gm;
  function replace(match, include) {
    let chunk = ShaderChunk[include];
    return chunk ? expandShaderIncludes(chunk) : match
  }
  return source.replace( pattern, replace )
}

/*
 * This is a direct copy of MathUtils.generateUUID from Three.js, to preserve compatibility with three
 * versions before 0.113.0 as it was changed from Math to MathUtils in that version.
 * https://github.com/mrdoob/three.js/blob/dd8b5aa3b270c17096b90945cd2d6d1b13aaec53/src/math/MathUtils.js#L16
 */

const _lut = [];

for (let i = 0; i < 256; i++) {
  _lut[i] = (i < 16 ? '0' : '') + (i).toString(16);
}

function generateUUID() {

  // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136

  const d0 = Math.random() * 0xffffffff | 0;
  const d1 = Math.random() * 0xffffffff | 0;
  const d2 = Math.random() * 0xffffffff | 0;
  const d3 = Math.random() * 0xffffffff | 0;
  const uuid = _lut[d0 & 0xff] + _lut[d0 >> 8 & 0xff] + _lut[d0 >> 16 & 0xff] + _lut[d0 >> 24 & 0xff] + '-' +
    _lut[d1 & 0xff] + _lut[d1 >> 8 & 0xff] + '-' + _lut[d1 >> 16 & 0x0f | 0x40] + _lut[d1 >> 24 & 0xff] + '-' +
    _lut[d2 & 0x3f | 0x80] + _lut[d2 >> 8 & 0xff] + '-' + _lut[d2 >> 16 & 0xff] + _lut[d2 >> 24 & 0xff] +
    _lut[d3 & 0xff] + _lut[d3 >> 8 & 0xff] + _lut[d3 >> 16 & 0xff] + _lut[d3 >> 24 & 0xff];

  // .toUpperCase() here flattens concatenated strings to save heap memory space.
  return uuid.toUpperCase()

}

// Local assign polyfill to avoid importing troika-core
const assign$3 = Object.assign || function(/*target, ...sources*/) {
  let target = arguments[0];
  for (let i = 1, len = arguments.length; i < len; i++) {
    let source = arguments[i];
    if (source) {
      for (let prop in source) {
        if (source.hasOwnProperty(prop)) {
          target[prop] = source[prop];
        }
      }
    }
  }
  return target
};


const epoch = Date.now();
const CONSTRUCTOR_CACHE = new WeakMap();
const SHADER_UPGRADE_CACHE = new Map();

// Material ids must be integers, but we can't access the increment from Three's `Material` module,
// so let's choose a sufficiently large starting value that should theoretically never collide.
let materialInstanceId = 1e10;

/**
 * A utility for creating a custom shader material derived from another material's
 * shaders. This allows you to inject custom shader logic and transforms into the
 * builtin ThreeJS materials without having to recreate them from scratch.
 *
 * @param {THREE.Material} baseMaterial - the original material to derive from
 *
 * @param {Object} options - How the base material should be modified.
 * @param {Object} options.defines - Custom `defines` for the material
 * @param {Object} options.extensions - Custom `extensions` for the material, e.g. `{derivatives: true}`
 * @param {Object} options.uniforms - Custom `uniforms` for use in the modified shader. These can
 *        be accessed and manipulated via the resulting material's `uniforms` property, just like
 *        in a ShaderMaterial. You do not need to repeat the base material's own uniforms here.
 * @param {String} options.timeUniform - If specified, a uniform of this name will be injected into
 *        both shaders, and it will automatically be updated on each render frame with a number of
 *        elapsed milliseconds. The "zero" epoch time is not significant so don't rely on this as a
 *        true calendar time.
 * @param {String} options.vertexDefs - Custom GLSL code to inject into the vertex shader's top-level
 *        definitions, above the `void main()` function.
 * @param {String} options.vertexMainIntro - Custom GLSL code to inject at the top of the vertex
 *        shader's `void main` function.
 * @param {String} options.vertexMainOutro - Custom GLSL code to inject at the end of the vertex
 *        shader's `void main` function.
 * @param {String} options.vertexTransform - Custom GLSL code to manipulate the `position`, `normal`,
 *        and/or `uv` vertex attributes. This code will be wrapped within a standalone function with
 *        those attributes exposed by their normal names as read/write values.
 * @param {String} options.fragmentDefs - Custom GLSL code to inject into the fragment shader's top-level
 *        definitions, above the `void main()` function.
 * @param {String} options.fragmentMainIntro - Custom GLSL code to inject at the top of the fragment
 *        shader's `void main` function.
 * @param {String} options.fragmentMainOutro - Custom GLSL code to inject at the end of the fragment
 *        shader's `void main` function. You can manipulate `gl_FragColor` here but keep in mind it goes
 *        after any of ThreeJS's color postprocessing shader chunks (tonemapping, fog, etc.), so if you
 *        want those to apply to your changes use `fragmentColorTransform` instead.
 * @param {String} options.fragmentColorTransform - Custom GLSL code to manipulate the `gl_FragColor`
 *        output value. Will be injected near the end of the `void main` function, but before any
 *        of ThreeJS's color postprocessing shader chunks (tonemapping, fog, etc.), and before the
 *        `fragmentMainOutro`.
 * @param {function<{vertexShader,fragmentShader}>:{vertexShader,fragmentShader}} options.customRewriter - A function
 *        for performing custom rewrites of the full shader code. Useful if you need to do something
 *        special that's not covered by the other builtin options. This function will be executed before
 *        any other transforms are applied.
 * @param {boolean} options.chained - Set to `true` to prototype-chain the derived material to the base
 *        material, rather than the default behavior of copying it. This allows the derived material to
 *        automatically pick up changes made to the base material and its properties. This can be useful
 *        where the derived material is hidden from the user as an implementation detail, allowing them
 *        to work with the original material like normal. But it can result in unexpected behavior if not
 *        handled carefully.
 *
 * @return {THREE.Material}
 *
 * The returned material will also have two new methods, `getDepthMaterial()` and `getDistanceMaterial()`,
 * which can be called to get a variant of the derived material for use in shadow casting. If the
 * target mesh is expected to cast shadows, then you can assign these to the mesh's `customDepthMaterial`
 * (for directional and spot lights) and/or `customDistanceMaterial` (for point lights) properties to
 * allow the cast shadow to honor your derived shader's vertex transforms and discarded fragments. These
 * will also set a custom `#define IS_DEPTH_MATERIAL` or `#define IS_DISTANCE_MATERIAL` that you can look
 * for in your derived shaders with `#ifdef` to customize their behavior for the depth or distance
 * scenarios, e.g. skipping antialiasing or expensive shader logic.
 */
function createDerivedMaterial(baseMaterial, options) {
  // Generate a key that is unique to the content of these `options`. We'll use this
  // throughout for caching and for generating the upgraded shader code. This increases
  // the likelihood that the resulting shaders will line up across multiple calls so
  // their GL programs can be shared and cached.
  const optionsKey = getKeyForOptions(options);

  // First check to see if we've already derived from this baseMaterial using this
  // unique set of options, and if so reuse the constructor to avoid some allocations.
  let ctorsByDerivation = CONSTRUCTOR_CACHE.get(baseMaterial);
  if (!ctorsByDerivation) {
    CONSTRUCTOR_CACHE.set(baseMaterial, (ctorsByDerivation = Object.create(null)));
  }
  if (ctorsByDerivation[optionsKey]) {
    return new ctorsByDerivation[optionsKey]()
  }

  const privateBeforeCompileProp = `_onBeforeCompile${optionsKey}`;

  // Private onBeforeCompile handler that injects the modified shaders and uniforms when
  // the renderer switches to this material's program
  const onBeforeCompile = function (shaderInfo) {
    baseMaterial.onBeforeCompile.call(this, shaderInfo);

    // Upgrade the shaders, caching the result by incoming source code
    const cacheKey = this.customProgramCacheKey() + '|' + shaderInfo.vertexShader + '|' + shaderInfo.fragmentShader;
    let upgradedShaders = SHADER_UPGRADE_CACHE[cacheKey];
    if (!upgradedShaders) {
      const upgraded = upgradeShaders$1(shaderInfo, options, optionsKey);
      upgradedShaders = SHADER_UPGRADE_CACHE[cacheKey] = upgraded;
    }

    // Inject upgraded shaders and uniforms into the program
    shaderInfo.vertexShader = upgradedShaders.vertexShader;
    shaderInfo.fragmentShader = upgradedShaders.fragmentShader;
    assign$3(shaderInfo.uniforms, this.uniforms);

    // Inject auto-updating time uniform if requested
    if (options.timeUniform) {
      shaderInfo.uniforms[options.timeUniform] = {
        get value() {return Date.now() - epoch}
      };
    }

    // Users can still add their own handlers on top of ours
    if (this[privateBeforeCompileProp]) {
      this[privateBeforeCompileProp](shaderInfo);
    }
  };

  const DerivedMaterial = function DerivedMaterial() {
    return derive(options.chained ? baseMaterial : baseMaterial.clone())
  };

  const derive = function(base) {
    // Prototype chain to the base material
    const derived = Object.create(base, descriptor);

    // Store the baseMaterial for reference; this is always the original even when cloning
    Object.defineProperty(derived, 'baseMaterial', { value: baseMaterial });

    // Needs its own ids
    Object.defineProperty(derived, 'id', { value: materialInstanceId++ });
    derived.uuid = generateUUID();

    // Merge uniforms, defines, and extensions
    derived.uniforms = assign$3({}, base.uniforms, options.uniforms);
    derived.defines = assign$3({}, base.defines, options.defines);
    derived.defines[`TROIKA_DERIVED_MATERIAL_${optionsKey}`] = ''; //force a program change from the base material
    derived.extensions = assign$3({}, base.extensions, options.extensions);

    // Don't inherit EventDispatcher listeners
    derived._listeners = undefined;

    return derived
  };

  const descriptor = {
    constructor: {value: DerivedMaterial},
    isDerivedMaterial: {value: true},

    customProgramCacheKey: {
      writable: true,
      configurable: true,
      value: function () {
        return baseMaterial.customProgramCacheKey() + '|' + optionsKey
      }
    },

    onBeforeCompile: {
      get() {
        return onBeforeCompile
      },
      set(fn) {
        this[privateBeforeCompileProp] = fn;
      }
    },

    copy: {
      writable: true,
      configurable: true,
      value: function (source) {
        baseMaterial.copy.call(this, source);
        if (!baseMaterial.isShaderMaterial && !baseMaterial.isDerivedMaterial) {
          assign$3(this.extensions, source.extensions);
          assign$3(this.defines, source.defines);
          assign$3(this.uniforms, UniformsUtils.clone(source.uniforms));
        }
        return this
      }
    },

    clone: {
      writable: true,
      configurable: true,
      value: function () {
        const newBase = new baseMaterial.constructor();
        return derive(newBase).copy(this)
      }
    },

    /**
     * Utility to get a MeshDepthMaterial that will honor this derived material's vertex
     * transformations and discarded fragments.
     */
    getDepthMaterial: {
      writable: true,
      configurable: true,
      value: function() {
        let depthMaterial = this._depthMaterial;
        if (!depthMaterial) {
          depthMaterial = this._depthMaterial = createDerivedMaterial(
            baseMaterial.isDerivedMaterial
              ? baseMaterial.getDepthMaterial()
              : new MeshDepthMaterial({ depthPacking: RGBADepthPacking }),
            options
          );
          depthMaterial.defines.IS_DEPTH_MATERIAL = '';
          depthMaterial.uniforms = this.uniforms; //automatically recieve same uniform values
        }
        return depthMaterial
      }
    },

    /**
     * Utility to get a MeshDistanceMaterial that will honor this derived material's vertex
     * transformations and discarded fragments.
     */
    getDistanceMaterial: {
      writable: true,
      configurable: true,
      value: function() {
        let distanceMaterial = this._distanceMaterial;
        if (!distanceMaterial) {
          distanceMaterial = this._distanceMaterial = createDerivedMaterial(
            baseMaterial.isDerivedMaterial
              ? baseMaterial.getDistanceMaterial()
              : new MeshDistanceMaterial(),
            options
          );
          distanceMaterial.defines.IS_DISTANCE_MATERIAL = '';
          distanceMaterial.uniforms = this.uniforms; //automatically recieve same uniform values
        }
        return distanceMaterial
      }
    },

    dispose: {
      writable: true,
      configurable: true,
      value() {
        const {_depthMaterial, _distanceMaterial} = this;
        if (_depthMaterial) _depthMaterial.dispose();
        if (_distanceMaterial) _distanceMaterial.dispose();
        baseMaterial.dispose.call(this);
      }
    }
  };

  ctorsByDerivation[optionsKey] = DerivedMaterial;
  return new DerivedMaterial()
}


function upgradeShaders$1({vertexShader, fragmentShader}, options, key) {
  let {
    vertexDefs,
    vertexMainIntro,
    vertexMainOutro,
    vertexTransform,
    fragmentDefs,
    fragmentMainIntro,
    fragmentMainOutro,
    fragmentColorTransform,
    customRewriter,
    timeUniform
  } = options;

  vertexDefs = vertexDefs || '';
  vertexMainIntro = vertexMainIntro || '';
  vertexMainOutro = vertexMainOutro || '';
  fragmentDefs = fragmentDefs || '';
  fragmentMainIntro = fragmentMainIntro || '';
  fragmentMainOutro = fragmentMainOutro || '';

  // Expand includes if needed
  if (vertexTransform || customRewriter) {
    vertexShader = expandShaderIncludes(vertexShader);
  }
  if (fragmentColorTransform || customRewriter) {
    // We need to be able to find postprocessing chunks after include expansion in order to
    // put them after the fragmentColorTransform, so mark them with comments first. Even if
    // this particular derivation doesn't have a fragmentColorTransform, other derivations may,
    // so we still mark them.
    fragmentShader = fragmentShader.replace(
      /^[ \t]*#include <((?:tonemapping|encodings|fog|premultiplied_alpha|dithering)_fragment)>/gm,
      '\n//!BEGIN_POST_CHUNK $1\n$&\n//!END_POST_CHUNK\n'
    );
    fragmentShader = expandShaderIncludes(fragmentShader);
  }

  // Apply custom rewriter function
  if (customRewriter) {
    let res = customRewriter({vertexShader, fragmentShader});
    vertexShader = res.vertexShader;
    fragmentShader = res.fragmentShader;
  }

  // The fragmentColorTransform needs to go before any postprocessing chunks, so extract
  // those and re-insert them into the outro in the correct place:
  if (fragmentColorTransform) {
    let postChunks = [];
    fragmentShader = fragmentShader.replace(
      /^\/\/!BEGIN_POST_CHUNK[^]+?^\/\/!END_POST_CHUNK/gm, // [^]+? = non-greedy match of any chars including newlines
      match => {
        postChunks.push(match);
        return ''
      }
    );
    fragmentMainOutro = `${fragmentColorTransform}\n${postChunks.join('\n')}\n${fragmentMainOutro}`;
  }

  // Inject auto-updating time uniform if requested
  if (timeUniform) {
    const code = `\nuniform float ${timeUniform};\n`;
    vertexDefs = code + vertexDefs;
    fragmentDefs = code + fragmentDefs;
  }

  // Inject a function for the vertexTransform and rename all usages of position/normal/uv
  if (vertexTransform) {
    // Hoist these defs to the very top so they work in other function defs
    vertexShader = `vec3 troika_position_${key};
vec3 troika_normal_${key};
vec2 troika_uv_${key};
${vertexShader}
`;
    vertexDefs = `${vertexDefs}
void troikaVertexTransform${key}(inout vec3 position, inout vec3 normal, inout vec2 uv) {
  ${vertexTransform}
}
`;
    vertexMainIntro = `
troika_position_${key} = vec3(position);
troika_normal_${key} = vec3(normal);
troika_uv_${key} = vec2(uv);
troikaVertexTransform${key}(troika_position_${key}, troika_normal_${key}, troika_uv_${key});
${vertexMainIntro}
`;
    vertexShader = vertexShader.replace(/\b(position|normal|uv)\b/g, (match, match1, index, fullStr) => {
      return /\battribute\s+vec[23]\s+$/.test(fullStr.substr(0, index)) ? match1 : `troika_${match1}_${key}`
    });
  }

  // Inject defs and intro/outro snippets
  vertexShader = injectIntoShaderCode(vertexShader, key, vertexDefs, vertexMainIntro, vertexMainOutro);
  fragmentShader = injectIntoShaderCode(fragmentShader, key, fragmentDefs, fragmentMainIntro, fragmentMainOutro);

  return {
    vertexShader,
    fragmentShader
  }
}

function injectIntoShaderCode(shaderCode, id, defs, intro, outro) {
  if (intro || outro || defs) {
    shaderCode = shaderCode.replace(voidMainRegExp, `
${defs}
void troikaOrigMain${id}() {`
    );
    shaderCode += `
void main() {
  ${intro}
  troikaOrigMain${id}();
  ${outro}
}`;
  }
  return shaderCode
}


function optionsJsonReplacer(key, value) {
  return key === 'uniforms' ? undefined : typeof value === 'function' ? value.toString() : value
}

let _idCtr = 0;
const optionsHashesToIds = new Map();
function getKeyForOptions(options) {
  const optionsHash = JSON.stringify(options, optionsJsonReplacer);
  let id = optionsHashesToIds.get(optionsHash);
  if (id == null) {
    optionsHashesToIds.set(optionsHash, (id = ++_idCtr));
  }
  return id
}

// Copied from threejs WebGLPrograms.js so we can resolve builtin materials to their shaders
// TODO how can we keep this from getting stale?
const MATERIAL_TYPES_TO_SHADERS = {
  MeshDepthMaterial: 'depth',
  MeshDistanceMaterial: 'distanceRGBA',
  MeshNormalMaterial: 'normal',
  MeshBasicMaterial: 'basic',
  MeshLambertMaterial: 'lambert',
  MeshPhongMaterial: 'phong',
  MeshToonMaterial: 'toon',
  MeshStandardMaterial: 'physical',
  MeshPhysicalMaterial: 'physical',
  MeshMatcapMaterial: 'matcap',
  LineBasicMaterial: 'basic',
  LineDashedMaterial: 'dashed',
  PointsMaterial: 'points',
  ShadowMaterial: 'shadow',
  SpriteMaterial: 'sprite'
};

/**
 * Given a Three.js `Material` instance, find the shaders/uniforms that will be
 * used to render that material.
 *
 * @param material - the Material instance
 * @return {object} - the material's shader info: `{uniforms:{}, fragmentShader:'', vertexShader:''}`
 */
function getShadersForMaterial(material) {
  let builtinType = MATERIAL_TYPES_TO_SHADERS[material.type];
  return builtinType ? ShaderLib[builtinType] : material //TODO fallback for unknown type?
}

/**
 * Find all uniforms and their types within a shader code string.
 *
 * @param {string} shader - The shader code to parse
 * @return {object} mapping of uniform names to their glsl type
 */
function getShaderUniformTypes(shader) {
  let uniformRE = /\buniform\s+(int|float|vec[234]|mat[34])\s+([A-Za-z_][\w]*)/g;
  let uniforms = Object.create(null);
  let match;
  while ((match = uniformRE.exec(shader)) !== null) {
    uniforms[match[2]] = match[1];
  }
  return uniforms
}

/**
 * Helper for smoothing out the `m.getInverse(x)` --> `m.copy(x).invert()` conversion
 * that happened in ThreeJS r123.
 * @param {Matrix4} srcMatrix
 * @param {Matrix4} [tgtMatrix]
 */
function invertMatrix4(srcMatrix, tgtMatrix = new Matrix4()) {
  if (typeof tgtMatrix.invert === 'function') {
    tgtMatrix.copy(srcMatrix).invert();
  } else {
    tgtMatrix.getInverse(srcMatrix);
  }
  return tgtMatrix
}

const noop$2 = function() {};
const tempRaycaster = new Raycaster();
const tempVec2$1 = new Vector2();
const tempVec3$1 = new Vector3();
const tempMat4$2 = new Matrix4();
const tempQuat = new Quaternion();
const lookAtUp = new Vector3(0, 1, 0);

let _projectionMatrixVersion = 0;

function createCameraFacade(threeJsCameraClass, projectionProps, otherProps) {
  class Camera3DFacade extends Object3DFacade {
    constructor(parent) {
      super(parent);
      this.lookAt = this.up = null;
      this._projectionChanged = false;
      this._frustum = new Frustum();
    }

    initThreeObject () {
      const camera = new threeJsCameraClass();
      // Forcibly prevent updateMatrixWorld from doing anything when called; the renderer
      // likes to call this even though matrixAutoUpdate=false which can sometimes clobber
      // our optimized `updateMatrices` handling and any custom adjustments it may make.
      // TODO consider doing this at the Object3DFacade level?
      camera.updateMatrixWorld = noop$2;
      return camera
    }

    afterUpdate() {
      // Apply lookAt+up as a final transform - applied as individual quaternion
      // properties so they can selectively trigger updates, be transitioned, etc.
      if (this.lookAt) {
        tempVec3$1.copy(this.lookAt);
        lookAtUp.copy(this.up || Object3D.DefaultUp);
        tempMat4$2.lookAt(this.threeObject.position, tempVec3$1, lookAtUp);
        tempQuat.setFromRotationMatrix(tempMat4$2);
        this.quaternionX = tempQuat.x;
        this.quaternionY = tempQuat.y;
        this.quaternionZ = tempQuat.z;
        this.quaternionW = tempQuat.w;
      }
      super.afterUpdate();
    }

    updateMatrices() {
      let camObj = this.threeObject;

      // Projection changes require a projection matrix rebuild - see setters below
      if (this._projectionChanged) {
        camObj.updateProjectionMatrix();
        this._projectionChanged = false;
        this._projectionMatrixVersion = _projectionMatrixVersion++;
      }

      // If changing the world matrix, also update its inverse
      let matrixVersionBeforeUpdate = this._worldMatrixVersion;
      super.updateMatrices();
      if (matrixVersionBeforeUpdate !== this._worldMatrixVersion) {
        invertMatrix4(camObj.matrixWorld, camObj.matrixWorldInverse);
      }
    }

    /**
     * Utility method that returns a Frustum object which is initialized to match this camera's
     * current state. This can be used for example to optimize updates to the Facade tree by
     * avoiding work for objects that fall outside the camera's view.
     *
     * You can access this by calling `this.getCameraFacade().getFrustum()` from any Object3DFacade's
     * `afterUpdate` lifecycle method or later.
     *
     * Be careful that this Frustum does not get modified after it is requested, as it is cached for
     * the lifetime of the camera's current world matrix and modifiying it would result in bad state
     * for other code requesting it within that lifetime.
     *
     * @return {Frustum}
     */
    getFrustum() {
      this.updateMatrices();
      let frustum = this._frustum;
      let {_worldMatrixVersion, _projectionMatrixVersion} = this;
      if (frustum._lastWorldMatrixVersion !== _worldMatrixVersion || frustum._lastProjMatrixVersion !== _projectionMatrixVersion) {
        let camObj = this.threeObject;
        let matrix = new Matrix4().multiplyMatrices(camObj.projectionMatrix, camObj.matrixWorldInverse);
        frustum.setFromMatrix(matrix);
        frustum._lastWorldMatrixVersion = _worldMatrixVersion;
        frustum._lastProjMatrixVersion = _projectionMatrixVersion;
      }
      return frustum
    }

    /**
     * Given a set of camera projection coordinates (u,v in the range [-1, 1]), return a `Ray`
     * representing that line of sight in worldspace.
     * @param {number} u
     * @param {number} v
     * @return Ray
     */
    getRayAtProjectedCoords(u, v) {
      // By default we use the builtin Raycaster functionality, but this can be overridden
      const ray = tempRaycaster.ray = new Ray();
      tempRaycaster.setFromCamera(tempVec2$1.set(u, v), this.threeObject);
      return ray
    }
  }

  // Setters for properties which require a matrix update
  function defineProp(prop, affectsProjection) {
    Object.defineProperty(Camera3DFacade.prototype, prop, {
      set(val) {
        if (val !== this.threeObject[prop]) {
          this.threeObject[prop] = val;
          if (affectsProjection) this._projectionChanged = true;
        }
      },
      get() {
        return this.threeObject[prop]
      }
    });
  }

  projectionProps.forEach(prop => {
    defineProp(prop, true);
  });

  if (otherProps) {
    otherProps.forEach(prop => {
      defineProp(prop, false);
    });
  }

  return Camera3DFacade
}


const PerspectiveCamera3DFacade = createCameraFacade(PerspectiveCamera, ['fov', 'aspect', 'near', 'far'], ['focus', 'filmGauge', 'filmOffset']);
createCameraFacade(OrthographicCamera, ['left', 'right', 'top', 'bottom', 'near', 'far']);

class Group3DFacade extends Object3DFacade {
  initThreeObject() {
    let group = new Group();
    group.isRenderable = false; //trigger optimizations
    return group
  }
}

//import {ShadowMapViewer} from 'three/examples/jsm/utils/ShadowMapViewer.js'


// Common superclass with setters for all possible light properties
class Light3DFacade extends Object3DFacade {
  set color(c) {
    this.threeObject.color.set(c);
  }
  get color() {
    return this.threeObject.color.getHex()
  }

  // Shadow map configurable by deep object copy:
  get shadow() {
    return this.threeObject.shadow
  }
  set shadow(val) {
    utils.assignDeep(this.threeObject.shadow, val);
  }
}
// Setters for simple properties to be copied
['intensity', 'distance', 'angle', 'penumbra', 'decay', 'castShadow', 'width', 'height'].forEach(propName => {
  Object.defineProperty(Light3DFacade.prototype, propName, {
    get() {
      return this.threeObject[propName]
    },
    set(value) {
      this.threeObject[propName] = value;
    }
  });
});


function createLightFacade(ThreeJsLightClass, HelperClass, customProtoDefs) {
  const Cls = class extends Light3DFacade {
    initThreeObject() {
      return new ThreeJsLightClass()
    }
    set showHelper(showHelper) {
      let helper = this._helper;
      if (!!showHelper !== !!helper) {
        if (showHelper) {
          this.threeObject.add(this._helper = new HelperClass(this.threeObject));
        } else if (helper) {
          helper.dispose();
          this.threeObject.remove(helper);
          this._helper = null;
        }
      }
    }
    afterUpdate () {
      super.afterUpdate();
      if (this._helper) {
        this._helper.update();
      }
    }
  };
  if (customProtoDefs) {
    Object.defineProperties(Cls.prototype, customProtoDefs);
  }
  return Cls
}

const AmbientLight3DFacade = createLightFacade(AmbientLight);
const DirectionalLight3DFacade = createLightFacade(DirectionalLight, DirectionalLightHelper);
const SpotLight3DFacade = createLightFacade(SpotLight, SpotLightHelper);
const PointLight3DFacade = createLightFacade(PointLight, PointLightHelper);
const HemisphereLight3DFacade = createLightFacade(HemisphereLight, HemisphereLightHelper, {
  groundColor: {
    set(c) {
      this.threeObject.groundColor.set(c);
    },
    get() {
      return this.threeObject.groundColor.getHex()
    }
  }
});
createLightFacade(RectAreaLight);

const inverseFunction = `
#if __VERSION__ < 300
// matrix inversion utility for pre-ES3 - credit https://github.com/stackgl/glsl-inverse
mat3 inverse(mat3 m) {
  float a00 = m[0][0], a01 = m[0][1], a02 = m[0][2];
  float a10 = m[1][0], a11 = m[1][1], a12 = m[1][2];
  float a20 = m[2][0], a21 = m[2][1], a22 = m[2][2];

  float b01 = a22 * a11 - a12 * a21;
  float b11 = -a22 * a10 + a12 * a20;
  float b21 = a21 * a10 - a11 * a20;

  float det = a00 * b01 + a01 * b11 + a02 * b21;

  return mat3(
    b01, (-a22 * a01 + a02 * a21), (a12 * a01 - a02 * a11),
    b11, (a22 * a00 - a02 * a20), (-a12 * a00 + a02 * a10),
    b21, (-a21 * a00 + a01 * a20), (a11 * a00 - a01 * a10)
  ) / det;
}
#endif
`;

const vertexCommonDefs = `
attribute vec4 troika_modelMatrixRow0;
attribute vec4 troika_modelMatrixRow1;
attribute vec4 troika_modelMatrixRow2;
mat4 troika_modelMatrix;
mat4 troika_modelViewMatrix;
mat3 troika_normalMatrix;
`;

const modelMatrixVarAssignment = `
troika_modelMatrix = mat4(
  %0.x, %1.x, %2.x, 0.0,
  %0.y, %1.y, %2.y, 0.0,
  %0.z, %1.z, %2.z, 0.0,
  %0.w, %1.w, %2.w, 1.0
);
`.replace(/%/g, 'troika_modelMatrixRow');

const modelViewMatrixVarAssignment = `
troika_modelViewMatrix = viewMatrix * troika_modelMatrix;
`;

const normalMatrixVarAssignment = `
troika_normalMatrix = transposeMat3(inverse(mat3(troika_modelViewMatrix)));
`;


const modelMatrixRefRE = /\bmodelMatrix\b/g;
const modelViewMatrixRefRE = /\bmodelViewMatrix\b/g;
const normalMatrixRefRE = /\bnormalMatrix\b/g;
const precededByUniformRE = /\buniform\s+(int|float|vec[234])\s+$/;
const attrRefReplacer = (name, index, str) => precededByUniformRE.test(str.substr(0, index)) ? name : `troika_${name}`;
const varyingRefReplacer = (name, index, str) => precededByUniformRE.test(str.substr(0, index)) ? name : `troika_vary_${name}`;

const CACHE = new WeakMap();

/**
 * Get a derived material with instancing upgrades for the given base material.
 * The result is cached by baseMaterial+instanceUniforms so we always get the same instance
 * back rather than getting a clone each time and having to re-upgrade every frame.
 */
function getInstancingDerivedMaterial(baseMaterial, instanceUniforms) {
  let instanceUniformsKey = instanceUniforms ? instanceUniforms.sort().join('|') : '';
  let derived = CACHE.get(baseMaterial);
  if (!derived || derived._instanceUniformsKey !== instanceUniformsKey) {
    derived = createDerivedMaterial(baseMaterial, {
      defines: {
        TROIKA_INSTANCED_UNIFORMS: instanceUniformsKey
      },
      customRewriter({vertexShader, fragmentShader}) {
        return upgradeShaders(vertexShader, fragmentShader, instanceUniforms)
      }
    });
    derived._instanceUniformsKey = instanceUniformsKey;
    CACHE.set(baseMaterial, derived);
  }
  return derived
}


/**
 * Transform the given vertex and fragment shader pair so they accept instancing
 * attributes for the builtin matrix uniforms as well as any other uniforms that
 * have been declared as instanceable.
 */
function upgradeShaders(vertexShader, fragmentShader, instanceUniforms) {
  // See what gets used
  let usesModelMatrix = modelMatrixRefRE.test(vertexShader);
  let usesModelViewMatrix = modelViewMatrixRefRE.test(vertexShader);
  let usesNormalMatrix = normalMatrixRefRE.test(vertexShader);

  // Find what uniforms are declared in which shader and their types
  let vertexUniforms = getShaderUniformTypes(vertexShader);
  let fragmentUniforms = getShaderUniformTypes(fragmentShader);

  let vertexDeclarations = [vertexCommonDefs];
  let vertexAssignments = [];
  let fragmentDeclarations = [];

  // Add variable assignments for, and rewrite references to, builtin matrices
  if (usesModelMatrix || usesModelViewMatrix || usesNormalMatrix) {
    vertexShader = vertexShader.replace(modelMatrixRefRE, attrRefReplacer);
    vertexAssignments.push(modelMatrixVarAssignment);
  }
  if (usesModelViewMatrix || usesNormalMatrix) {
    vertexShader = vertexShader.replace(modelViewMatrixRefRE, attrRefReplacer);
    vertexAssignments.push(modelViewMatrixVarAssignment);
  }
  if (usesNormalMatrix) {
    vertexShader = vertexShader.replace(normalMatrixRefRE, attrRefReplacer);
    vertexAssignments.push(normalMatrixVarAssignment);
    // Add the inverse() glsl polyfill if there isn't already one defined
    if (!/\binverse\s*\(/.test(vertexShader)) {
      vertexDeclarations.push(inverseFunction);
    }
  }

  // Add attributes and varyings for, and rewrite references to, instanceUniforms
  if (instanceUniforms) {
    instanceUniforms.forEach(name => {
      let vertType = vertexUniforms[name];
      let fragType = fragmentUniforms[name];
      if (vertType || fragType) {
        let finder = new RegExp(`\\b${name}\\b`, 'g');
        vertexDeclarations.push(`attribute ${vertType || fragType} troika_${name};`);
        if (vertType) {
          vertexShader = vertexShader.replace(finder, attrRefReplacer);
        }
        if (fragType) {
          fragmentShader = fragmentShader.replace(finder, varyingRefReplacer);
          let varyingDecl = `varying ${fragType} troika_vary_${name};`;
          vertexDeclarations.push(varyingDecl);
          fragmentDeclarations.push(varyingDecl);
          vertexAssignments.push(`troika_vary_${name} = troika_${name};`);
        }
      }
    });
  }

  // Inject vertex shader declarations and assignments
  vertexShader = `
${vertexDeclarations.join('\n')}
${vertexShader.replace(voidMainRegExp, `
  $&
  ${ vertexAssignments.join('\n') }
`)}`;

  // Inject fragment shader declarations
  if (fragmentDeclarations.length) {
    fragmentShader = `
${fragmentDeclarations.join('\n')}
${fragmentShader}`;
  }

  return {vertexShader, fragmentShader}
}

const { assign: assign$2 } = utils;

const INSTANCE_BATCH_SIZE = 128; //TODO make this an option?
const DYNAMIC_DRAW = 0x88E8; //can't import DynamicDrawUsage from three without breaking older versions

/**
 * An InstancingManager handles aggregating all Instanceable3DFacade descendants into
 * instancing batches. For each batch it creates a clone of the instancedThreeObject,
 * populates a pooled InstancedBufferGeometry with buffer attributes holding the world
 * matrices of all the batch's instances, and temporarily inserts that into the
 * scene to be rendered.
 *
 * As an additional "turbo" optimization, the instancing batch objects/geometries will be
 * reused untouched between rendering frames if none of the managed Instanceable3DFacade
 * objects have changed in a way that would affect the batches or world matrix attributes.
 *
 * There is a global InstancingManager automatically added to the main scene, and it does
 * nothing if there are no Instanceable3DFacades in the scene, so in most cases you should
 * not need to touch this yourself. But it is also possible to insert additional
 * InstancingManager facades further down in the scene if you wish to control the scope
 * of instancing, e.g. to increase the likelihood of the aforementioned "turbo" optimization
 * kicking in.
 *
 * Also see InstancingShaderUpgrades, which modifies material shaders so they accept the matrix
 * and custom uniform values coming in as attributes. This allows built-in materials as well
 * as custom shaders to work with instancing without manual modification.
 */
class InstancingManager extends Group3DFacade {
  constructor(parent) {
    super(parent);
    this._instanceables = Object.create(null);
    this._batchGeometryPool = new BatchGeometryPool();
    this._needsRebatch = true;
    this.addEventListener('beforerender', this._setupBatchObjects.bind(this));
    this.addEventListener('afterrender', this._teardownBatchObjects.bind(this));
  }

  onNotifyWorld(source, message, data) {
    let handler = this._notifyWorldHandlers[message];
    if (handler) {
      handler.call(this, source, data);
    } else if (this.parent) {
      this.parent.onNotifyWorld(source, message, data);
    }
  }

  _setupBatchObjects(renderer, scene, camera) {
    let instanceables = this._instanceables;
    let batchObjectsByKey = this._batchObjectsByKey;
    let needsRebatch = this._needsRebatch;

    if (!needsRebatch) {
      // We'll already know about most types of changes (instanceable addition/removal, instancedThreeObject
      // changes, matrix changes) but if any of the instancedThreeObjects changed their geometry or material
      // internally we'll need to detect that here and deoptimize.
      for (let key in batchObjectsByKey) {
        let batchObj = batchObjectsByKey[key][0];
        if (this._getBatchKey(batchObj.$troikaBatchBaseObj) !== key) {
          needsRebatch = true;
          break
        }
      }
    }

    if (needsRebatch) {
      batchObjectsByKey = this._batchObjectsByKey = Object.create(null);
      let geometryPool = this._batchGeometryPool;
      for (let facadeId in instanceables) {
        let facade = instanceables[facadeId];
        let instanceObject = facade.threeObject;
        let protoObject = facade.instancedThreeObject;

        if (protoObject && instanceObject.visible) {
          // Find or create the batch object for this facade's instancedThreeObject
          let batchKey = this._getBatchKey(protoObject);
          let instanceUniforms = this._getInstanceUniformNames(protoObject);
          let batchObjects = batchObjectsByKey[batchKey] || (batchObjectsByKey[batchKey] = []);
          let batchObject = batchObjects[batchObjects.length - 1];
          let batchGeometry = batchObject && batchObject.geometry;
          if (!batchGeometry || getInstanceCount(batchGeometry) === INSTANCE_BATCH_SIZE) {
            batchObject = this._getBatchObject(protoObject);
            batchGeometry = batchObject.geometry;
            let attrs = batchGeometry._instanceAttrs.matrix;
            for (let row = 0; row < 3; row++) {
              attrs[row].version++;
            }
            if (instanceUniforms) {
              attrs = batchGeometry._instanceAttrs.uniforms;
              for (let i = instanceUniforms.length; i--;) {
                attrs[instanceUniforms[i]].version++;
              }
            }
            batchObjects.push(batchObject);
          }

          // Put the instance's world matrix into the batch geometry's instancing attributes
          let attrOffset = getInstanceCount(batchGeometry);
          setInstanceCount(batchGeometry, attrOffset + 1);
          let attrs = batchGeometry._instanceAttrs.matrix;
          let elements = instanceObject.matrixWorld.elements; //column order
          attrs[0].setXYZW(attrOffset, elements[0], elements[4], elements[8], elements[12]);
          attrs[1].setXYZW(attrOffset, elements[1], elements[5], elements[9], elements[13]);
          attrs[2].setXYZW(attrOffset, elements[2], elements[6], elements[10], elements[14]);

          // Put the instance's values for instanceUniforms into the corresponding attributes
          if (instanceUniforms) {
            attrs = batchGeometry._instanceAttrs.uniforms;
            for (let i = instanceUniforms.length; i--;) {
              let uniform = instanceUniforms[i];
              let attr = attrs[uniform];
              let facadeUniforms = facade._instanceUniforms;
              let value = facadeUniforms && (uniform in facadeUniforms) ?
                facadeUniforms[uniform] : getDefaultUniformValue(protoObject.material, uniform);
              setAttributeValue(attr, attrOffset, value);
            }
          }

          // Save pointers for possible reuse next frame
          facade._instancingBatchObject = batchObject;
          facade._instancingBatchAttrOffset = attrOffset;
        } else {
          facade._instancingBatchObject = facade._instancingBatchAttrOffset = null;
        }
      }

      // Dispose any old batch geometries that were unused during this render pass
      // TODO should this be delayed any to prevent thrashing?
      geometryPool.disposeUnused();
    }

    // Add the batch objects to the scene
    let batchCount = 0;
    let batchGrpCount = 0;
    let instanceCount = 0;
    for (let id in batchObjectsByKey) {
      let batchObjects = batchObjectsByKey[id];
      scene.children.push.apply(scene.children, batchObjects);

      // increment stats
      batchGrpCount++;
      for (let i = batchObjects.length; i--;) {
        batchCount++;
        instanceCount += getInstanceCount(batchObjects[i].geometry);
      }
    }

    this.notifyWorld('statsUpdate', {
      'Instancing Batch Groups': batchGrpCount,
      'Instancing Batches': batchCount,
      'Instanced Objects': instanceCount
    });

    this._needsRebatch = false;
  }

  _onInstanceAdded(facade) {
    this._instanceables[facade.$facadeId] = facade;
    this._needsRebatch = true;
  }

  _onInstanceRemoved(facade) {
    delete this._instanceables[facade.$facadeId];
    this._needsRebatch = true;
  }

  _onInstanceChanged(facade) {
    this._needsRebatch = true;
  }

  _onInstanceMatrixChanged(facade) {
    // If a single instance's matrix changed and the batches are still otherwise valid, avoid a
    // full rebatch by updating just this instance's values in the matrix attributes directly.
    if (!this._needsRebatch) {
      let protoObject = facade.instancedThreeObject;
      let batchObject = facade._instancingBatchObject;
      let attrOffset = facade._instancingBatchAttrOffset;
      if (protoObject && batchObject && this._getBatchKey(protoObject) === this._getBatchKey(batchObject)) {
        let attrs = batchObject.geometry._instanceAttrs.matrix;
        let elements = facade.threeObject.matrixWorld.elements;
        attrs[0].setXYZW(attrOffset, elements[0], elements[4], elements[8], elements[12]).version++;
        attrs[1].setXYZW(attrOffset, elements[1], elements[5], elements[9], elements[13]).version++;
        attrs[2].setXYZW(attrOffset, elements[2], elements[6], elements[10], elements[14]).version++;
      } else {
        // Fallback just in case something didn't line up above - clear pointers and trigger rebatch
        facade._instancingBatchObject = facade._instancingBatchAttrOffset = null;
        this._needsRebatch = true;
      }
    }
  }

  _onInstanceUniformChanged(facade, uniformName) {
    if (!this._needsRebatch) {
      let protoObject = facade.instancedThreeObject;
      let batchObject = facade._instancingBatchObject;
      let attr;
      if (protoObject && batchObject && this._getBatchKey(protoObject) === this._getBatchKey(batchObject)
        && (attr = batchObject.geometry._instanceAttrs.uniforms[uniformName])) {
        setAttributeValue(attr, facade._instancingBatchAttrOffset, facade._instanceUniforms[uniformName]);
        attr.version++; //skip setter
      } else {
        // Fallback just in case something didn't line up above - clear pointers and trigger rebatch
        facade._instancingBatchObject = facade._instancingBatchAttrOffset = null;
        this._needsRebatch = true;
      }
    }
  }

  _getBatchKey(object) {
    let cache = this._batchKeysCache || (this._batchKeysCache = Object.create(null)); //cache results for duration of this frame
    let key = cache && cache[object.id];
    if (!key) {
      let uniforms = this._getInstanceUniformNames(object);
      key = `${object.geometry.id}|${object.material.id}|${uniforms ? uniforms.sort().join(',') : ''}`;
      cache[object.id] = key;
    }
    return key
  }

  _getInstanceUniformNames(object) {
    let namesSet = object._instanceUniformNames;
    if (!namesSet) return null
    let cache = this._uniformNamesCache || (this._uniformNamesCache = new Map());
    let namesArray = cache.get(namesSet);
    if (!namesArray) {
      namesArray = Array.from(namesSet);
      cache.set(namesSet, namesArray);
    }
    return namesArray
  }

  _getInstanceUniformSizes(material, uniformNames) {
    // Cache results per material for duration of this frame
    let cache = this._uniformSizesCache || (this._uniformSizesCache = new Map());
    let result = cache.get(material);
    if (!result) {
      result = Object.create(null);
      if (uniformNames) {
        uniformNames.forEach(name => {
          let size = getUniformItemSize(material, name);
          if (size > 0) {
            result[name] = size;
          }
        });
      }
      cache.set(material, result);
    }
    return result
  }

  _getBatchObject(instancedObject) {
    let {geometry, material} = instancedObject;

    // Upgrade the geometry to an instanced one
    if (!geometry.isBufferGeometry) {
      throw new Error('Instanceable proto object must use a BufferGeometry')
    }
    let batchKey = this._getBatchKey(instancedObject);
    let uniformNames = this._getInstanceUniformNames(instancedObject);
    let uniformSizes = this._getInstanceUniformSizes(material, uniformNames);
    let batchGeometry = this._batchGeometryPool.borrow(batchKey, geometry, uniformSizes);
    setInstanceCount(batchGeometry, 0);

    // Upgrade the material to one with the shader modifications for instancing
    let batchMaterial = getInstancingDerivedMaterial(material, uniformNames);
    let depthMaterial, distanceMaterial;

    // Create a new mesh object to hold it all
    let batchObject = Object.create(instancedObject, {
      // Redefine properties rather than setting them so we don't inadvertently trigger setters on
      // the base object:
      geometry: { value: batchGeometry },
      material: { value: batchMaterial },
      visible: { value: true },
      frustumCulled: { value: false },

      // Lazy getters for shadow materials:
      customDepthMaterial: {
        get() {
          if (!depthMaterial) {
            depthMaterial = batchMaterial.getDepthMaterial();
            // We need to trick WebGLRenderer into setting the `viewMatrix` uniform, which it doesn't
            // normally do for MeshDepthMaterial but it's needed by the instancing shader code. It does
            // for ShaderMaterials so we pretend to be one.
            depthMaterial.isShaderMaterial = true;
            depthMaterial.uniformsGroups = depthMaterial.uniformsGroups || [];
          }
          return depthMaterial
        }
      },
      customDistanceMaterial: {
        get() {
          if (!distanceMaterial) {
            distanceMaterial = batchMaterial.getDistanceMaterial();
            // We need to trick WebGLRenderer into setting the `viewMatrix` uniform, which it doesn't
            // normally do for MeshDistanceMaterial but it's needed by the instancing shader code. It does
            // for ShaderMaterials so we pretend to be one.
            distanceMaterial.isShaderMaterial = true;
            distanceMaterial.uniformsGroups = distanceMaterial.uniformsGroups || [];

            // Additionally, WebGLShadowMap.render() rotates a single camera 6 times per object, which fails
            // to trigger the code in WebGLRenderer.setProgram() that updates the viewMatrix uniform for
            // directions 2 through 6. Since we need a correct viewMatrix in the instancing shader code,
            // we hack it by defining our own viewMatrix uniform on the distance material and manually
            // updating it before each view of the distance cube is rendered. Unfortunately intercepting the
            // view changes in a way that has access to the shadow camera's viewMatrix has proven quite
            // difficult; the least-awful way I've found is to monkeypatch the `modelViewMatrix.multiplyMatrices()`
            // function which is always called - see (*!) below.
            distanceMaterial.uniforms = assign$2({
              viewMatrix: { value: new Matrix4() }
            }, distanceMaterial.uniforms);
          }
          return distanceMaterial
        }
      },
      // (*!) Hack for updating viewMatrix uniform on the distance material - see explanation above.
      modelViewMatrix: {
        value: function() {
          const modelViewMatrix = new Matrix4();
          modelViewMatrix.multiplyMatrices = function(viewMatrix, matrixWorld) {
            if (distanceMaterial) {
              distanceMaterial.uniforms.viewMatrix.value.copy(viewMatrix);
              distanceMaterial.uniformsNeedUpdate = true; //undocumented flag for ShaderMaterial
            }
            return Matrix4.prototype.multiplyMatrices.call(this, viewMatrix, matrixWorld)
          };
          return modelViewMatrix
        }()
      }
    });
    batchObject.$troikaBatchBaseObj = instancedObject;
    batchObject.$troikaInstancingManager = this;
    // NOTE other props are inherited so don't need to copy them
    return batchObject
  }

  _teardownBatchObjects(renderer, scene, camera) {
    // Release geometries to the pool for next time
    this._batchGeometryPool.releaseAll();

    // Clear caches from this render frame
    this._batchKeysCache = null;
    this._uniformNamesCache = null;
    this._uniformSizesCache = null;

    // Remove batch objects from scene
    scene.children = scene.children.filter(obj => obj.$troikaInstancingManager !== this);
  }

  destructor() {
    let pool = this._batchGeometryPool;
    pool.releaseAll();
    pool.disposeUnused();
    super.destructor();
  }
}


/**
 * Pool for the instancing batch geometries
 */
class BatchGeometryPool {
  constructor() {
    this._poolsByKey = Object.create(null);
  }

  borrow(key, baseGeometry, instanceUniformSizes) {
    let poolsByKey = this._poolsByKey;
    let pool = poolsByKey[key] || (poolsByKey[key] = {geometries: [], firstFree: 0});
    let batchGeometry = pool.geometries[pool.firstFree++];

    if (!batchGeometry) {
      batchGeometry = new InstancedBufferGeometry();
      assign$2(batchGeometry, baseGeometry);
      batchGeometry.attributes = assign$2({}, baseGeometry.attributes);
      let instanceAttrs = batchGeometry._instanceAttrs = {matrix: [], uniforms: Object.create(null)}; //separate collections for quicker lookup

      // Create instancing attributes for the modelMatrix's rows
      for (let row = 0; row < 3; row++) {
        let attr = new InstancedBufferAttribute(new Float32Array(INSTANCE_BATCH_SIZE * 4), 4);
        if (attr.setUsage) {
          attr.setUsage(DYNAMIC_DRAW);
        } else {
          attr.dynamic = true;
        }
        batchGeometry.attributes[`troika_modelMatrixRow${row}`] = attr;
        instanceAttrs.matrix[row] = attr;
      }

      // Create instancing attributes for the instanceUniforms
      for (let name in instanceUniformSizes) {
        let itemSize = instanceUniformSizes[name];
        let attr = new InstancedBufferAttribute(new Float32Array(INSTANCE_BATCH_SIZE * itemSize), itemSize);
        if (attr.setUsage) {
          attr.setUsage(DYNAMIC_DRAW);
        } else {
          attr.dynamic = true;
        }
        batchGeometry.attributes[`troika_${name}`] = attr;
        instanceAttrs.uniforms[name] = attr;
      }

      pool.geometries.push(batchGeometry);
    }

    return batchGeometry
  }

  releaseAll() {
    let pools = this._poolsByKey;
    if (pools) {
      for (let key in pools) {
        pools[key].firstFree = 0;
      }
    }
  }

  disposeUnused() {
    let pools = this._poolsByKey;
    if (pools) {
      for (let key in pools) {
        let {firstFree, geometries} = pools[key];
        for (let i = firstFree, len = geometries.length; i < len; i++) {
          // Only allow the instancing attributes to be disposed; those copied from the
          // original geometry will be up to the author to dispose of properly
          let attrs = geometries[i].attributes;
          for (let attrName in attrs) {
            if (attrs.hasOwnProperty(attrName) && attrName.indexOf('troika_') !== 0) {
              delete attrs[attrName];
            }
          }
          try {
            // can throw if it's already been disposed or hasn't yet been rendered
            geometries[i].dispose();
          } catch(e) { /* empty */ }
          geometries[i]._instanceAttrs = null;
        }
        geometries.length = firstFree;
      }
    }
  }
}


const proto = InstancingManager.prototype;
proto._notifyWorldHandlers = {
  instanceableAdded: proto._onInstanceAdded,
  instanceableRemoved: proto._onInstanceRemoved,
  instanceableChanged: proto._onInstanceChanged,
  instanceableMatrixChanged: proto._onInstanceMatrixChanged,
  instanceableUniformChanged: proto._onInstanceUniformChanged
};


function setAttributeValue(attr, offset, value) {
  let size = attr.itemSize;
  if (size === 1) {
    attr.setX(offset, value);
  }
  else if (size === 2) {
    attr.setXY(offset, value.x, value.y);
  }
  else if (size === 3) {
    if (value.isColor) {
      attr.setXYZ(offset, value.r, value.g, value.b);
    } else {
      attr.setXYZ(offset, value.x, value.y, value.z);
    }
  } else if (size === 4) {
    attr.setXYZW(offset, value.x, value.y, value.z, value.w);
  }
}

function getDefaultUniformValue(material, name) {
  // Try uniforms on the material itself, then try the builtin material shaders
  let uniforms = material.uniforms;
  if (uniforms && uniforms[name]) {
    return uniforms[name].value
  }
  uniforms = getShadersForMaterial(material).uniforms;
  if (uniforms && uniforms[name]) {
    return uniforms[name].value
  }
  return null
}

function getUniformItemSize(material, name) {
  return getItemSizeForValue(getDefaultUniformValue(material, name))
}

function getItemSizeForValue(value) {
  return value == null ? 0
    : typeof value === 'number' ? 1
    : value.isVector2 ? 2
    : (value.isVector3 || value.isColor) ? 3
    : value.isVector4 ? 4
    : Array.isArray(value) ? value.length
    : 0
}

// Handle maxInstancedCount -> instanceCount rename that happened in three r117
function getInstanceCount(geom) {
  return geom[geom.hasOwnProperty('instanceCount') ? 'instanceCount' : 'maxInstancedCount']
}
function setInstanceCount(geom, count) {
  geom[geom.hasOwnProperty('instanceCount') ? 'instanceCount' : 'maxInstancedCount'] = count;
}

const LIGHT_TYPES = {
  ambient: AmbientLight3DFacade,
  directional: DirectionalLight3DFacade,
  spot: SpotLight3DFacade,
  point: PointLight3DFacade,
  hemisphere: HemisphereLight3DFacade
};

const RAY_INTERSECTION = [{distance: Infinity}];
const INFINITE_SPHERE = new Sphere(undefined, Infinity);
const tempArr = [null];

class Scene3DFacade extends Object3DFacade {
  initThreeObject() {
    const scene = new Scene();
    // We always manually update world matrices when needed - see Object3DFacade.updateMatrices() -
    // so the additional auto-update pass done by threejs before render is not needed.
    // The flag was renamed autoUpdate->matrixWorldAutoUpdate in r144
    if ('matrixWorldAutoUpdate' in scene) {
      scene.matrixWorldAutoUpdate = false;
    } else {
      scene.autoUpdate = false;
    }
    return scene
  }

  afterUpdate () {
    let scene = this.threeObject;
    scene.background = this.background || null;
    scene.environment = this.environment || null;
    super.afterUpdate();
  }

  describeChildren() {
    // Add root instancing manager
    let children = {
      key: 'instancingMgr',
      facade: InstancingManager,
      children: this.objects
    };

    // Map light definitions to their appropriate classes
    let {lights} = this;
    if (lights) {
      children = [children];
      if (!Array.isArray(lights)) {
        tempArr[0] = lights;
        lights = tempArr;
      }
      lights.forEach((def, i) => {
        let facade = def.facade || LIGHT_TYPES[def.type];
        if (typeof facade === 'function') {
          let realDef = utils.assign({}, def);
          delete realDef.type;
          realDef.key = def.key || `light${ i }`;
          realDef.facade = facade;
          children.push(realDef);
        }
      });
    }

    return children
  }

  set fog(def) {
    let fogObj = this._fogObj;
    if (def) {
      let isExp2 = 'density' in def;
      let fogClass = isExp2 ? FogExp2 : Fog;
      if (!fogObj || !(fogObj instanceof fogClass)) {
        fogObj = this._fogObj = new fogClass();
      }
      fogObj.color.set(def.color);
      if (isExp2) {
        fogObj.density = def.density;
      } else {
        fogObj.near = def.near;
        fogObj.far = def.far;
      }
    } else {
      fogObj = this._fogObj = null;
    }
    this.threeObject.fog = fogObj;
  }

  getBoundingSphere() {
    return INFINITE_SPHERE
  }

  raycast(raycaster) {
    // Scene3DFacade will always intersect, but as the furthest from the camera
    return RAY_INTERSECTION
  }
}

const { assign: assign$1, forOwn } = utils;
const tempSphere = new Sphere();
const SQRT3 = Math.sqrt(3);
const PRECISION = 1e-8;


class BoundingSphereOctree {
  constructor() {
    this.root = null;
    this.keysToLeaves = Object.create(null);
  }

  putSpheres(spheres) {
    forOwn(spheres, (sphere, key) => {
      this.putSphere(key, sphere);
    });
  }

  putSphere(key, sphere) {
    const {center, radius} = sphere;

    // Sanity check
    if (!sphere || isNaN(radius) || isNaN(center.x)) {
      return
    }

    // To prevent excessively deep trees when spheres are very close together, apply a rounding
    // precision below which spheres will be treated as coincident and stored in the same leaf.
    center._roundedX = Math.round(center.x / PRECISION) * PRECISION;
    center._roundedY = Math.round(center.y / PRECISION) * PRECISION;
    center._roundedZ = Math.round(center.z / PRECISION) * PRECISION;

    this._putSphere(key, sphere);
  }

  _putSphere(key, sphere) {
    const {center} = sphere;
    const {root} = this;
    let {_roundedX, _roundedY, _roundedZ} = center;

    // If we already have a sphere for this key, perform an update
    if (key in this.keysToLeaves) {
      return this._updateSphere(key, sphere)
    }

    // First sphere being added: create a leaf octant and set it as the root. This will be replaced as
    // soon as a second item is added, so we can start with an initial root bounding cube that matches
    // our actual dataset rather than an arbitrary one.
    if (!root) {
      const newRoot = new Octant();
      newRoot.isLeaf = true;
      newRoot.addSphereData(key, sphere);
      this.root = newRoot;
      this.keysToLeaves[key] = newRoot;
    }

    // Second sphere being added:
    else if (root.isLeaf) {
      const oldRoot = this.root;
      const {dataX, dataY, dataZ} = root;

      // Handle special case where the second sphere has the same center point as the first, we still
      // can't determine good starting bounds so just append to the existing leaf
      if (dataX === _roundedX && dataY === _roundedY && dataZ === _roundedZ) {
        this._insertIntoOctant(key, sphere, root);
      }
      // Non-coincident: we can now choose an appropriate size for the root node's box. Overwrite the
      // root with a new branch octant, and set its position/size to the smallest whole-integer cube
      // that contains both sphere centerpoints. (Cube rounded to whole ints to avoid floating point issues)
      else {
        const newRoot = new Octant();
        const cx = newRoot.cx = Math.round((dataX + _roundedX) / 2);
        const cy = newRoot.cy = Math.round((dataY + _roundedY) / 2);
        const cz = newRoot.cz = Math.round((dataZ + _roundedZ) / 2);
        newRoot.cr = Math.ceil(Math.max(Math.abs(cx - dataX), Math.abs(cy - dataY), Math.abs(cz - dataZ)) + 1e-5);
        this.root = newRoot;

        // Re-add the original leaf's sphere(s) and the new sphere under the new branch root, and exit
        oldRoot.forEachLeafSphere((_sphere, _key) => this._insertIntoOctant(_key, _sphere, newRoot));
        this._insertIntoOctant(key, sphere, newRoot);
      }
    }

    // Expand the root to cover the new centerpoint if necessary, and insert the sphere within it
    else {
      this._expandToCoverPoint(_roundedX, _roundedY, _roundedZ);
      this._insertIntoOctant(key, sphere, this.root);
    }
  }

  _expandToCoverPoint(x, y, z) {
    // Loop until the root cube contains the new point...
    while (!this.root.containsPoint(x, y, z)) {
      // Create a larger branch, expanded by 2x in the corner direction closest to the new point
      const oldRoot = this.root;
      const {cx, cy, cz, cr} = oldRoot;
      const newRoot = new Octant();
      newRoot.maxRadius = oldRoot.maxRadius;
      newRoot.sphereCount = oldRoot.sphereCount;
      newRoot.leafCount = oldRoot.leafCount;

      newRoot.cx = cx + cr * (x < cx ? -1 : 1);
      newRoot.cy = cy + cr * (y < cy ? -1 : 1);
      newRoot.cz = cz + cr * (z < cz ? -1 : 1);
      newRoot.cr = cr * 2;

      // Move the old root to be a child of the new outer box, and make the outer box the new root
      const octantIdx = newRoot.getSubOctantIndexForPoint(cx, cy, cz);
      oldRoot.parent = newRoot;
      oldRoot.index = octantIdx;
      newRoot[octantIdx] = oldRoot;
      this.root = newRoot;
    }
  }

  _insertIntoOctant(key, sphere, octant) {
    const {center, radius} = sphere;
    const {_roundedX, _roundedY, _roundedZ} = center;

    // If the parent octant is a leaf:
    if (octant.isLeaf) {
      const {dataX, dataY, dataZ} = octant;

      // If the new sphere's center matches that of the leaf, add it to the leaf's members
      if (_roundedX === dataX && _roundedY === dataY && _roundedZ === dataZ) {
        octant.addSphereData(key, sphere);

        // Increase maxRadius up the parent tree as needed
        for (let oct = octant.parent; oct; oct = oct.parent) {
          if (radius > oct.maxRadius) { oct.maxRadius = radius; }
        }

        // Add to index
        this.keysToLeaves[key] =  octant;
      }

      // Otherwise split the leaf into a branch, push the old leaf down, and try again
      else {
        const newBranch = _createBranchFromLeaf(octant);
        octant.parent[octant.index] = newBranch;
        newBranch.addOctantForPoint(octant, dataX, dataY, dataZ);
        this._insertIntoOctant(key, sphere, newBranch); //recurse
      }
    }

    // The parent octant is a branch:
    else {
      // Always increment branch's total count
      octant.sphereCount++;

      // Find the suboctant index in which the new center point falls
      const subOctantIndex = octant.getSubOctantIndexForPoint(_roundedX, _roundedY, _roundedZ);

      // If there is nothing at that index yet, insert a new leaf octant
      let subOctant = octant[subOctantIndex];
      if (!subOctant) {
        const newLeaf = new Octant();
        newLeaf.isLeaf = true;
        octant.addOctantForPoint(newLeaf, _roundedX, _roundedY, _roundedZ);
        newLeaf.addSphereData(key, sphere);

        // Increment leafCount and maxRadius up the parent tree
        for (let oct = newLeaf.parent; oct; oct = oct.parent) {
          if (radius > oct.maxRadius) { oct.maxRadius = radius; }
          oct.leafCount++;
        }

        // Add to index
        this.keysToLeaves[key] = newLeaf;
      }

      // If there was already a sub-octant at that index, recurse
      else {
        return this._insertIntoOctant(key, sphere, subOctant)
      }
    }
  }

  removeSphere(key) {
    // Find the existing leaf that holds the sphere
    let leafOctant = this.keysToLeaves[key];
    if (!leafOctant) { return }

    // Preemptively decrement sphereCount up the parent tree
    let oct = leafOctant.parent;
    while (oct) {
      oct.sphereCount--;
      oct = oct.parent;
    }

    // If there are other members in the leaf, remove it from the leaf's members and keep the leaf in place
    if (leafOctant.sphereCount > 1) {
      // Remove sphere from the leaf data
      leafOctant.removeSphereData(key);

      // Update maxRadius up the tree
      leafOctant.updateMaxRadii();
    }

    // It was the only member of the leaf; remove the leaf and any ancestor branches that are now empty
    else {
      // Walk up the tree and remove all empty branches
      oct = leafOctant;
      let lowestRemainingOctant;
      do {
        const parent = oct.parent;
        lowestRemainingOctant = parent;
        if (parent) {
          parent[oct.index] = null;
        }
        oct = oct.parent;
      } while (oct && oct.sphereCount === 0)

      // If we got to the top of the tree, it's totally empty so set the root to null and exit
      if (!lowestRemainingOctant) {
        this.root = null;
        return
      }

      // Continue up the tree, decrementing the leafCount and looking for the highest branch point with only
      // a single remaining leaf underneath it, if any
      let highestSingleLeafBranch = null;
      oct = lowestRemainingOctant;
      while (oct) {
        oct.leafCount--;
        if (oct.leafCount === 1) {
          highestSingleLeafBranch = oct;
        }
        oct = oct.parent;
      }

      // If we were left with a branch with only one leaf descendant, move that leaf up to the branch point
      if (highestSingleLeafBranch) {
        let leaf = this._findSingleLeaf(highestSingleLeafBranch);
        const parent = highestSingleLeafBranch.parent;
        if (parent) {
          parent.addOctantForPoint(leaf, leaf.cx, leaf.cy, leaf.cz);
          parent.updateMaxRadii();
        } else {
          this.root = leaf;
        }
      } else {
        // Update the max radii up the tree from the lowest remaining node
        lowestRemainingOctant.updateMaxRadii();
      }
    }

    // Delete it from the index
    delete this.keysToLeaves[key];
  }

  _updateSphere(key, sphere) {
    // Find the existing leaf octant that holds the sphere
    let leaf = this.keysToLeaves[key];

    const center = sphere.center;
    const {_roundedX, _roundedY, _roundedZ} = center;

    // If its center point still falls within the leaf's cube, we can fast-path the changes:
    if (leaf.containsPoint(_roundedX, _roundedY, _roundedZ)) {
      const isMulti = leaf.sphereCount > 1;

      const hasMoved = _roundedX !== leaf.dataX ||
        _roundedY !== leaf.dataY ||
        _roundedZ !== leaf.dataZ;

      // If it was not the only member and has changed position, split that leaf; we can do this
      // slightly faster than a full remove+add because we know this will be the branch point and can
      // avoid some unnecessary upward tree walking
      if (isMulti && hasMoved) {
        leaf.removeSphereData(key);
        leaf.updateMaxRadii();
        this._insertIntoOctant(key, sphere, leaf);
      }

      // Otherwise we can just update this leaf
      else {
        if (hasMoved) {
          leaf.dataX = _roundedX;
          leaf.dataY = _roundedY;
          leaf.dataZ = _roundedZ;
        }
        if (sphere.radius !== leaf.maxRadius) {
          leaf.updateMaxRadii();
        }
      }
    }

    // If its center point is no longer within the leaf, delegate to full remove+add
    // TODO possible faster path: remove only up to lowest common ancestor branch point,
    // collapse remaining up to that point, and insert sphere under that point
    else {
      this.removeSphere(key);
      this._putSphere(key, sphere);
    }
  }

  // Optimized utility for finding single descendant leaf without creating a function
  _findSingleLeaf(octant) {
    let leaf;
    function visit(oct) {
      if (oct.isLeaf) leaf = oct;
    }
    function find(oct) {
      leaf = null;
      this.walkBranch(oct, visit);
      return leaf
    }
    this._findSingleLeaf = find; //reuse closure after first call
    return find.call(this, octant)
  }


  /**
   * Perform a depth-first walk of the tree structure, invoking a `callback` function for
   * each node. The `callback` will be passed the current tree node object, and will be invoked
   * for parent branch nodes first before their child nodes.
   *
   * If the function returns `false` for a branch node, none of that branch's children will be
   * visited; this is how you can efficiently query the tree by filtering out the majority of branches.
   *
   * @param {Function} callback
   */
  walkTree(callback) {
    if (this.root) {
      this.walkBranch(this.root, callback);
    }
  }
  walkBranch(root, callback) {
    if (callback(root) !== false && !root.isLeaf) {
      for (let i = 0; i < 8; i++) {
        if (root[i] !== null) {
          this.walkBranch(root[i], callback);
        }
      }
    }
  }


  /**
   * Given a {@link Ray}, search the octree for any spheres that intersect that ray and invoke
   * the given `callback` function, passing it the sphere and its key as arguments.
   * TODO need to handle near/far
   *
   * @param {Ray} ray
   * @param {Function} callback
   * @param {Object} scope
   */
  forEachSphereOnRay(ray, callback, scope) {
    return this._forEachMatchingSphere(ray.intersectsSphere.bind(ray), callback, scope)
  }

  forEachIntersectingSphere(sphere, callback, scope) {
    return this._forEachMatchingSphere(sphere.intersectsSphere.bind(sphere), callback, scope)
  }

  _forEachMatchingSphere(testFn, callback, scope) {
    // const startTime = performance.now()
    // let branchTests = 0
    // let sphereTests = 0
    // let sphereHits = 0

    function visitSphere(sphere, key) {
      // sphereTests++
      if (testFn(sphere)) {
        // sphereHits++
        callback.call(scope, sphere, key);
      }
    }

    this.walkTree((octant) => {
      if (octant.isLeaf) { //leaf
        octant.forEachLeafSphere(visitSphere);
      } else { //branch
        // branchTests++
        // Test using a sphere large enough to cover the maximum constituent bounding sphere with
        // its center anywhere within the octant's box. This will obviously catch some false positives
        // but those will be filtered at the leaf level.
        // TODO investigate using a Box3 test, which could have fewer false positives, but only if that
        // outweighs its slower speed (see https://jsperf.com/ray-intersectsphere-vs-intersectbox)
        tempSphere.center.set(octant.cx, octant.cy, octant.cz);
        tempSphere.radius = octant.cr * SQRT3 + octant.maxRadius;
        if (!testFn(tempSphere)) {
          return false //ignore this branch
        }
      }
      return true
    });

    //console.log(`Raycast search: ${branchTests} branch tests, ${sphereTests} sphere tests, and ${sphereHits} hits, in ${performance.now() - startTime}ms`)
  }
}




class Octant {
  containsPoint(x, y, z) {
    const {cx, cy, cz, cr} = this;
    return x >= cx - cr && x < cx + cr &&
      y >= cy - cr && y < cy + cr &&
      z >= cz - cr && z < cz + cr
  }

  getSubOctantIndexForPoint(x, y, z) {
    return (z < this.cz ? 0 : 4) + (y < this.cy ? 0 : 2) + (x < this.cx ? 0 : 1)
  }

  addOctantForPoint(subOctant, x, y, z) {
    const index = this.getSubOctantIndexForPoint(x, y, z);
    const subCR = this.cr / 2;

    subOctant.parent = this;
    subOctant.index = index;
    subOctant.cx = this.cx + subCR * (x < this.cx ? -1 : 1);
    subOctant.cy = this.cy + subCR * (y < this.cy ? -1 : 1);
    subOctant.cz = this.cz + subCR * (z < this.cz ? -1 : 1);
    subOctant.cr = subCR;

    this[index] = subOctant;
    return subOctant
  }

  findMaxSphereRadius() {
    let maxRadius = 0;
    if (this.isLeaf) {
      const data = this.data;
      if (this.sphereCount > 1) {
        for (let key in data) {
          const r = data[key].radius;
          if (r > maxRadius) maxRadius = r;
        }
      } else {
        maxRadius = data.radius;
      }
    } else {
      for (let i = 0; i < 8; i++) {
        if (this[i] !== null && this[i].maxRadius > maxRadius) {
          maxRadius = this[i].maxRadius;
        }
      }
    }
    return maxRadius
  }

  updateMaxRadii() {
    // Find the max maxRadius of the leaf octant's members
    let maxRadius = this.findMaxSphereRadius();

    // If the max radius has grown, just do a simple increase of the ancestor maxRadius values
    if (maxRadius > this.maxRadius) {
      let octant = this;
      while (octant) {
        if (maxRadius > octant.maxRadius) {
          octant.maxRadius = maxRadius;
        }
        octant = octant.parent;
      }
    }
    // If the max radius has shrunk, set it and repeat the process up the parent tree
    else if (maxRadius < this.maxRadius) {
      this.maxRadius = maxRadius;
      if (this.parent) {
        this.parent.updateMaxRadii();
      }
    }
  }

  addSphereData(key, sphere) {
    const count = this.sphereCount++;
    if (count === 0) {
      this.leafCount = 1;
      this.data = sphere;
      this.dataKey = key;
      // copy center coords from the first added sphere
      const {_roundedX, _roundedY, _roundedZ} = sphere.center;
      this.dataX = _roundedX;
      this.dataY = _roundedY;
      this.dataZ = _roundedZ;
    }
    else if (count === 1) {
      const oldSphere = this.data;
      const newData = this.data = Object.create(null);
      newData[this.dataKey] = oldSphere;
      newData[key] = sphere;
      this.dataKey = null;
    }
    else if (count > 1) {
      this.data[key] = sphere;
    }

    if (sphere.radius > this.maxRadius) {
      this.maxRadius = sphere.radius;
    }
  }

  removeSphereData(key) {
    const data = this.data;
    if (data) {
      const count = this.sphereCount--;
      if (count > 2) {
        delete data[key];
      }
      else if (count === 2) {
        for (let _key in data) {
          if (_key !== key) {
            this.dataKey = _key;
            this.data = data[_key];
            break
          }
        }
      }
      else {
        this.data = null;
      }
    }
  }

  forEachLeafSphere(fn, scope) {
    const data = this.data;
    if (data) {
      if (this.sphereCount > 1) {
        for (let key in data) {
          fn.call(scope, data[key], key);
        }
      } else {
        fn.call(scope, data, this.dataKey);
      }
    }
  }
}
assign$1(Octant.prototype, {
  // Relationships
  parent: null,
  index: -1,

  // Cube bounds
  cx: 0, //center x
  cy: 0, //center y
  cz: 0, //center z
  cr: 0, //cubic radius (dist from center to edge)

  // Sub-octants
  0: null,
  1: null,
  2: null,
  3: null,
  4: null,
  5: null,
  6: null,
  7: null,

  // Leaf data
  // For a single-item leaf (probably the vast majority) `data` will be the Sphere object and `dataKey`
  // will be its key. For a multi-item leaf, `data` will be an object of key->Sphere mappings and
  // `dataKey` will be null. I'm not a huge fan of the asymmetry but this lets us avoid an extra
  // sub-object for the majority of leaves while keeping the Octant's shape predictable for the JS engine.
  isLeaf: false,
  data: null,
  dataKey: null,
  // The first sphere added to the leaf will have its center position copied for easier access and
  // to avoid issues with the Sphere objects being mutated elsewhere.
  dataX: 0,
  dataY: 0,
  dataZ: 0,

  // Stats
  sphereCount: 0,
  leafCount: 0,
  maxRadius: 0
});



const _createBranchFromLeaf = (function() {
  const copyProps = ['parent', 'index', 'cx', 'cy', 'cz', 'cr', 'sphereCount', 'leafCount', 'maxRadius'];
  return function(leaf) {
    const branch = new Octant();
    for (let i = copyProps.length; i--;) {
      branch[copyProps[i]] = leaf[copyProps[i]];
    }
    return branch
  }
})();

const { assign } = utils;
const tmpVec2 = new Vector2();
const tmpVec3 = new Vector3();
const raycaster = new Raycaster();


class World3DFacade extends WorldBaseFacade {
  constructor(canvas) {
    super(canvas);
    this._object3DFacadesById = Object.create(null);
    this._onBgClick = this._onBgClick.bind(this);
  }

  afterUpdate() {
    let {width, height, antialias, backgroundColor, contextAttributes, _element:canvas} = this;

    // Set up renderer
    let renderer = this._threeRenderer;
    const RendererClass = this.rendererClass || WebGLRenderer;
    if (!renderer || !(renderer instanceof RendererClass)) {
      if (renderer) {
        renderer.dispose();
      }
      // Init the context manually so we can prefer webgl2
      contextAttributes = assign({
        alpha: true,
        antialias
      }, contextAttributes);
      const context = canvas.getContext('webgl2', contextAttributes) || undefined;
      renderer = this._threeRenderer = new RendererClass(assign({
        canvas,
        context
      }, contextAttributes));
    }

    const shadows = this.shadows;
    renderer.shadowMap.enabled = !!shadows;
    if (shadows && typeof shadows === 'object') {
      assign(renderer.shadowMap, shadows);
    }

    if (backgroundColor !== this._bgColor) {
      renderer.setClearColor(new Color(backgroundColor || 0), backgroundColor != null ? 1 : 0);
      this._bgColor = backgroundColor;
    }

    renderer.outputColorSpace = this.outputColorSpace || LinearSRGBColorSpace;
    renderer.colorSpace = this.colorSpace || LinearSRGBColorSpace;
    renderer.toneMapping = this.toneMapping || NoToneMapping;

    // Update render canvas size
    this._updateDrawingBufferSize(width, height, this.pixelRatio || window.devicePixelRatio || 1);

    super.afterUpdate();
  }

  describeChildren() {
    return [
      this._getCameraDef(),
      this._getSceneDef()
    ]
  }

  /**
   * Build a normalized definition for the camera facade
   * @protected
   */
  _getCameraDef() {
    const {camera} = this;
    return assign({
      key: 'camera',
      facade: PerspectiveCamera3DFacade,
      aspect: this.width / this.height
    }, camera)
  }

  /**
   * Build a normalized definition for the scene facade
   * @protected
   */
  _getSceneDef() {
    return {
      key: 'scene',
      facade: Scene3DFacade,
      lights: this.lights,
      objects: this.objects,
      fog: this.fog,
      background: this.background,
      environment: this.environment,
      onClick: this.onBackgroundClick ? this._onBgClick : null
    }
  }

  /**
   * Update the renderer's drawing buffer size
   * @protected
   */
  _updateDrawingBufferSize(width, height, pixelRatio) {
    const renderer = this._threeRenderer;
    renderer.getSize(tmpVec2);
    if (tmpVec2.width !== width || tmpVec2.height !== height || renderer.getPixelRatio() !== pixelRatio) {
      renderer.setDrawingBufferSize(width, height, pixelRatio);
    }
  }

  doRender(/*...frameArgs*/) {
    let sceneFacade = this.getChildByKey('scene');
    let scene = sceneFacade.threeObject;
    let camera = this.getChildByKey('camera').threeObject;
    let renderer = this._threeRenderer;

    // Invoke any onBeforeRender listeners
    let registry = this.eventRegistry;
    function invokeHandler(handler, facadeId) {
      handler.call(this._object3DFacadesById[facadeId], renderer, scene, camera);
    }
    registry.forEachListenerOfType('beforerender', invokeHandler, this);

    // Render scene
    renderer.render(scene, camera);

    // Invoke any onAfterRender listeners
    registry.forEachListenerOfType('afterrender', invokeHandler, this);

    let onStatsUpdate = this.onStatsUpdate;
    if (onStatsUpdate) {
      const {memory, render} = renderer.info;
      const stats = {
        'WebGL Draw Calls': render.calls,
        'WebGL Geometries': memory.geometries,
        'WebGL Textures': memory.textures,
        'WebGL Triangles': render.triangles
      };
      if (render.points) {
        stats['WebGL Points'] = render.points;
      }
      if (render.lines) {
        stats['WebGL Lines'] = render.lines;
      }
      onStatsUpdate(stats);
    }
  }

  /**
   * Implementation of abstract
   */
  getFacadeUserSpaceXYZ(facade) {
    let matrixEls = facade.threeObject.matrixWorld.elements;
    return this.projectWorldPosition(matrixEls[12], matrixEls[13], matrixEls[14])
  }

  projectWorldPosition(x, y, z) {
    tmpVec3.set(x, y, z);
    let camera = this.getChildByKey('camera');
    camera.updateMatrices();
    camera = camera.threeObject;

    // Make position relative to camera
    tmpVec3.applyMatrix4(camera.matrixWorldInverse);

    // Get relative distance to the point, negative if it's behind the camera
    let signedDistance = tmpVec3.length() * (tmpVec3.z > 0 ? -1 : 1);

    // Project x/y to screen coords
    tmpVec3.applyMatrix4(camera.projectionMatrix);
    let screenX = (tmpVec3.x + 1) * this.width / 2;
    let screenY = (1 - tmpVec3.y) * this.height / 2;

    return new Vector3(screenX, screenY, signedDistance)
  }

  /**
   * @override
   * In 3D worlds, we will normalize all pointer events so they always carry a `ray` property;
   * handlers for these events should then only rely on that, which is guaranteed to be present,
   * unlike `clientX/Y` etc. which are only present for pointer events originating from a screen.
   */
  _normalizePointerEvent(e) {
    // All pointer events in a 3D world will be given a `ray` property.
    if (!e.ray) {
      // normalize touch events
      let posInfo = e;
      if (e.touches) {
        let touches = /^touch(end|cancel)$/.test(e.type) ? e.changedTouches : e.touches;
        if (touches.length === 1) {
          posInfo = touches[0];
        }
      }

      // convert mouse position to normalized device coords (-1 to 1)
      const canvasRect = e.target.getBoundingClientRect(); //e.target is the canvas
      let width = canvasRect.width || this.width; //use logical size if no visible rect, e.g. offscreen canvas
      let height = canvasRect.height || this.height;
      let u = ((posInfo.clientX || 0) - (canvasRect.left || 0)) / width * 2 - 1;
      let v = ((posInfo.clientY || 0) - (canvasRect.top || 0)) / height * -2 + 1;

      // ensure camera's matrix is up to date
      let camera = this.getChildByKey('camera');
      camera.updateMatrices();

      // calculate the ray and put it on the event
      e.ray = camera.getRayAtProjectedCoords(u, v);
    }

    super._normalizePointerEvent(e);
  }

  /**
   * @override Implementation of abstract
   * @return {Array<{facade, distance, ?distanceBias, ...}>|null}
   */
  getFacadesAtEvent(e, filterFn) {
    return e.ray ? this.getFacadesOnRay(e.ray, filterFn) : null
  }

  getFacadesOnRay(ray, filterFn) {
    // update bounding sphere octree
    const octree = this._updateOctree();

    // search bounding sphere octree to quickly filter down to a small set of likely hits,
    // then do a true raycast on those facades
    let allHits = null;
    if (octree) {
      raycaster.ray = ray;
      octree.forEachSphereOnRay(ray, (sphere, facadeId) => {
        const facadesById = this._object3DFacadesById;
        const facade = facadesById && facadesById[facadeId];
        // let the filterFn eliminate things before trying to raycast them
        const hits = facade && (!filterFn || filterFn(facade)) && facade.raycast && facade.raycast(raycaster);
        if (hits && hits[0]) {
          // Ignore all but closest
          hits[0].facade = facade
          ;(allHits || (allHits = [])).push(hits[0]);
        }
      });
    }
    return allHits
  }

  _updateOctree() {
    // update octree with any new bounding spheres
    let octree = this._boundingSphereOctree;
    const changes = this._octreeChangeset;
    if (changes) {
      if (!octree) {
        octree = this._boundingSphereOctree = new BoundingSphereOctree();
      }
      const {remove, put} = changes;
      if (remove) {
        for (let facadeId in remove) {
          octree.removeSphere(facadeId);
        }
      }
      if (put) {
        for (let facadeId in put) {
          // Check for put requests for objects that are now obsolete
          const facade = this._object3DFacadesById[facadeId];
          if (facade && !facade.isDestroying && !(remove && remove[facadeId])) {
            const sphere = facade.getBoundingSphere && facade.getBoundingSphere();
            if (sphere) {
              octree.putSphere(facadeId, sphere);
            } else {
              octree.removeSphere(facadeId);
            }
          }
        }
      }
      this._octreeChangeset = null;
    }
    return octree
  }

  _queueForOctreeChange(changeType, facade) {
    const changes = this._octreeChangeset || (this._octreeChangeset = {});
    const map = changes[changeType] || (changes[changeType] = Object.create(null));
    map[facade.$facadeId] = facade;
  }

  _onBgClick(e) {
    // Ignore clicks that bubbled up
    if (e.target === e.currentTarget) {
      this.onBackgroundClick(e);
    }
  }

  destructor() {
    super.destructor();
    this._threeRenderer.dispose();
  }

}



World3DFacade.prototype._notifyWorldHandlers = assign(
  Object.create(WorldBaseFacade.prototype._notifyWorldHandlers),
  {
    getCameraPosition(source, outputVec3) {
      // We decompose from the world matrix here to handle pose transforms on top of the configured position
      outputVec3.setFromMatrixPosition(this.getChildByKey('camera').threeObject.matrixWorld);
    },
    getCameraFacade(source, data) {
      data.callback(this.getChildByKey('camera'));
    },
    getSceneFacade(source, data) {
      data.callback(this.getChildByKey('scene'));
    },
    projectWorldPosition(source, data) {
      let pos = data.worldPosition;
      data.callback(this.projectWorldPosition(pos.x, pos.y, pos.z));
    },
    object3DAdded(source) {
      this._object3DFacadesById[source.$facadeId] = source;
      this._queueForOctreeChange('put', source);
    },
    object3DBoundsChanged(source) {
      this._queueForOctreeChange('put', source);
    },
    object3DRemoved(source) {
      delete this._object3DFacadesById[source.$facadeId];
      this._queueForOctreeChange('remove', source);
    },
    rayPointerMotion(source, ray) {
      // Dispatch a custom event carrying the Ray, which will be used by our `getFacadesAtEvent`
      // override to search for a hovered facade
      const e = new MouseEvent('mousemove');
      e.isRayEvent = true;
      e.ray = ray;
      e.eventSource = source; //for tracking gesture states per ray source
      this._onPointerMotionEvent(e);
    },
    rayPointerAction(source, eventParams) {
      // Dispatch a custom event carrying the Ray, which will be used by our `getFacadesAtEvent`
      // override to search for a hovered facade
      const e = new (eventParams.type === 'wheel' ? WheelEvent : MouseEvent)(eventParams.type, eventParams);
      e.isRayEvent = true;
      e.ray = eventParams.ray;
      e.eventSource = source; //for tracking gesture states per ray source
      this._onPointerActionEvent(e);
    }
  }
);

/**
 * Instanceable3DFacade is a specialized Object3DFacade that renders using GPU
 * instancing. This can give a significant performance boost for objects that
 * are rendered many thousands of times in a scene.
 *
 * Usage is nearly identical to an Object3DFacade, but instead of creating a
 * `threeObject` in the constructor, you set its `instancedThreeObject` property
 * to a common shared Mesh object. Any other Instanceable3DFacades in the scene
 * that reference the same `instancedThreeObject` will be batched together and
 * rendered using a single GPU draw call. The `instancedThreeObject` can be
 * changed at any time, allowing dynamic appearance changes by swapping out the
 * referenced mesh or its geometry or material.
 *
 * == Per-instance values: ==
 *
 * By default, the instances will each be rendered using their own world matrix
 * transform, so they can be positioned/scaled/rotated independently as usual.
 *
 * It is also possible, with a little extra effort, to allow specific shader
 * uniforms such as colors to be varied per instance. This works with both custom
 * shader materials as well as the built-in materials.
 *
 * To enable per-instance uniforms, use the `setInstanceUniform(name, value)`
 * method to set an instance's values for the enabled uniforms:
 *
 *     `this.setInstanceUniform('diffuse', new Color(color))`
 *
 * If an instance does not have a uniform value set this way, it will fall back to using
 * the default value in the material's `uniforms` object.
 *
 * The uniform types that allow instancing are: `int`, `float`, `vec2`, `vec3`, and `vec4`.
 * Mapping from application value types such as `Vector2` or `Color` behaves similarly to
 * how three.js does it internally. More complex uniform types such as textures are not
 * instanceable.
 *
 * == Caveats: ==
 *
 * It is generally not recommended to use this technique on meshes that are semi-
 * transparent, as there is no guarantee that they will be drawn in back-to-front
 * order relative to the camera position.
 */
class Instanceable3DFacade extends Object3DFacade {
  constructor(parent) {
    let obj = new Object3D();

    // Trigger scene graph size optimizations
    obj.isRenderable = false;

    // Visibility change affects batching so listen for changes
    obj.$troikaVisible = obj.visible;
    Object.defineProperty(obj, 'visible', visibilityPropDef);

    super(parent, obj);

    this.notifyWorld('instanceableAdded');
  }

  /**
   * @property {Object3D} instancedThreeObject
   * Sets the Mesh instance to use for batching this instance with others that
   * reference the same Mesh.
   */

  /**
   * Sets this instance's value for a shader uniform.
   * @param {String} name
   * @param {Number|Vector2|Vector3|Vector4|Color} value
   */
  setInstanceUniform(name, value) {
    let values = this._instanceUniforms || (this._instanceUniforms = Object.create(null));
    if (values[name] !== value) {
      // If this is a new uniform value, add it to the Set of instance uniform names
      const obj = this.instancedThreeObject;
      if (obj && !(name in values)) {
        const names = obj._instanceUniformNames || (obj._instanceUniformNames = new Set());
        names.add(name);
      }
      values[name] = value;
      this.notifyWorld('instanceableUniformChanged', name);
    }
  }

  afterUpdate() {
    const newObj = this.instancedThreeObject;
    const oldObj = this._instancedObj;
    if (newObj !== oldObj) {
      if (newObj && this._instanceUniforms) { //make sure new object tracks our instance uniforms
        const names = newObj._instanceUniformNames || (newObj._instanceUniformNames = new Set());
        for (let name in this._instanceUniforms) {
          names.add(name);
        }
      }
      this._instancedObj = newObj;
      this.notifyWorld('instanceableChanged');
      this._boundsChanged = true;
    }
    super.afterUpdate();
  }

  updateMatrices() {
    const prevMatrixVersion = this._worldMatrixVersion;

    super.updateMatrices();

    // If the world matrix changed, we must notify the instancing manager
    if (this._worldMatrixVersion !== prevMatrixVersion && this.threeObject.$troikaVisible) {
      this.notifyWorld('instanceableMatrixChanged');
    }
  }

  destructor() {
    this.notifyWorld('instanceableRemoved');
    super.destructor();
  }

  // Custom bounding sphere calc
  getGeometry() {
    let instancedObj = this.instancedThreeObject;
    return instancedObj && instancedObj.geometry
  }

  // Custom raycasting based on current geometry and transform
  raycast(raycaster) {
    let {instancedThreeObject, threeObject} = this;
    if (instancedThreeObject && threeObject) {
      let origMatrix = instancedThreeObject.matrixWorld;
      instancedThreeObject.matrixWorld = threeObject.matrixWorld;
      let result = this._raycastObject(instancedThreeObject, raycaster); //use optimized method
      instancedThreeObject.matrixWorld = origMatrix;
      return result
    }
    return null
  }
}

const visibilityPropDef = {
  set(visible) {
    if (visible !== this.$troikaVisible) {
      this.$troikaVisible = visible;
      this.$facade.notifyWorld('instanceableChanged');
    }
  },
  get() {
    return this.$troikaVisible
  }
};

// Predefine shape to facilitate JS engine optimization
utils.assign(Instanceable3DFacade.prototype, {
  _lastInstancedMatrixVersion: -1,
  _instancedThreeObject: null
});

new BufferGeometry();
new MeshBasicMaterial();

const MESH_MATERIALS = {
  'basic': MeshBasicMaterial,
  'depth': MeshDepthMaterial,
  'distance': MeshDistanceMaterial,
  'lambert': MeshLambertMaterial,
  'matcap': MeshMatcapMaterial,
  'normal': MeshNormalMaterial,
  'phong': MeshPhongMaterial,
  'physical': MeshPhysicalMaterial,
  'standard': MeshStandardMaterial,
  'toon': MeshToonMaterial,
};

// For all of the known mesh materials, add `material.*` setters for all of their
// supported properties. The setters will update a "dirty" object which will then be
// applied to the material during afterUpdate; this lets us only deal with the specific
// material props that have been set rather than having to iterate over all props.
const ignoreMaterialProps = {type:1, id:1, uuid:1, version:1};
Object.keys(MESH_MATERIALS).forEach(key => {
  let material = new MESH_MATERIALS[key]();
  for (let mtlProp in material) {
    if (material.hasOwnProperty(mtlProp) && !ignoreMaterialProps.hasOwnProperty(mtlProp)) ;
  }
});

/**
 * Return a singleton instance of a 1x1x1 BoxGeometry
 * @type {function(): BoxGeometry}
 */
utils.memoize(() => {
  return new BoxGeometry(1, 1, 1, 1, 1)
});

Object.create(null, [
  ['low', 32],
  ['medium', 64],
  ['high', 128]
].reduce((descr, [name, segments]) => {
  descr[name] = {
    get: utils.memoize(() =>
      new CircleGeometry(1, segments).rotateX(-Math.PI / 2)
    )
  };
  return descr
}, {}));

utils.memoize(() => {
  return new PlaneGeometry(1, 1, 1, 1).rotateX(-Math.PI / 2)
});

Object.create(null, [
  ['low', 16, 12],
  ['medium', 32, 24],
  ['high', 64, 48]
].reduce((descr, [name, wSegs, hSegs]) => {
  descr[name] = {
    get: utils.memoize(() => new SphereGeometry(1, wSegs, hSegs))
  };
  return descr
}, {}));

const tempVec4$1 = new Vector4();

function getMeshes() {
  let material = createDerivedMaterial(
    new MeshBasicMaterial({
      transparent: true,
      opacity: 0.3,
      depthWrite: false
    }),
    {
      uniforms: {
        rect: {value: new Vector4()},
        depthAndCurveRadius: {value: new Vector2()}
      },
      vertexDefs: `
uniform vec4 rect;
uniform vec2 depthAndCurveRadius;
`,
      vertexTransform: `
float depth = depthAndCurveRadius.x;
float rad = depthAndCurveRadius.y;
position.x = mix(rect.x, rect.z, position.x);
position.y = mix(rect.w, rect.y, position.y);
position.z = mix(-depth * 0.5, depth * 0.5, position.z);
if (rad != 0.0) {
  float angle = position.x / rad;
  position.xz = vec2(sin(angle) * (rad - position.z), rad - cos(angle) * (rad - position.z));
  // TODO fix normals: normal.xz = vec2(sin(angle), cos(angle));
}
`
    }
  );
  const meshes = {
    normal: new Mesh(
      new BoxBufferGeometry(1, 1, 1).translate(0.5, 0.5, 0.5),
      material
    ),
    curved: new Mesh(
      new BoxBufferGeometry(1, 1, 1, 32).translate(0.5, 0.5, 0.5),
      material
    )
  };
  return (getMeshes = () => meshes)()
}


// TODO make instanceable or a single updated geometry to limit to a single draw call

class RangeRectFacade extends Instanceable3DFacade {
  constructor (parent) {
    super(parent);
    this.depth = 0;
    this.curveRadius = 0;
    this._color = new Color();
    this._rect = new Vector4();
  }

  afterUpdate() {
    const {top, right, bottom, left, color, depth, curveRadius} = this;
    this.instancedThreeObject = getMeshes()[curveRadius ? 'curved' : 'normal'];

    if (!this._color.equals(color)) {
      this.setInstanceUniform('diffuse', this._color = new Color(color));
    }

    if (!this._rect.equals(tempVec4$1.set(left, top, right, bottom))) {
      this.setInstanceUniform('rect', tempVec4$1.clone());
    }
    if (!depth !== this._depth || curveRadius !== this._curveRadius) {
      this.setInstanceUniform('depthAndCurveRadius', new Vector2(this._depth = depth, this._curveRadius = curveRadius));
    }
    super.afterUpdate();
  }

  getBoundingSphere () {
    return null
  }
}

const THICKNESS = 0.25; //rect depth as percentage of height

const tempMat4$1 = new Matrix4();
const tempPlane$1 = new Plane();
const tempVec2 = new Vector2();
const tempVec3 = new Vector3();
const noClip = Object.freeze([-Infinity, -Infinity, Infinity, Infinity]);

/**
 * Manager facade for selection rects and user selection behavior
 */
class SelectionManagerFacade extends List {
  constructor (parent, onSelectionChange) {
    super(parent);
    const textMesh = parent.threeObject;

    this.rangeColor = 0x00ccff;
    this.clipRect = noClip;
    this.curveRadius = 0;

    this.template = {
      key: (d, i) => `rect${i}`,
      facade: RangeRectFacade,
      top: d => clamp(d.top, this.clipRect[1], this.clipRect[3]),
      right: d => clamp(d.right, this.clipRect[0], this.clipRect[2]),
      bottom: d => clamp(d.bottom, this.clipRect[1], this.clipRect[3]),
      left: d => clamp(d.left, this.clipRect[0], this.clipRect[2]),
      depth: d => (d.top - d.bottom) * THICKNESS,
      color: d => this.rangeColor,
      curveRadius: d => this.curveRadius,
      visible: d => {
        let r = this.clipRect;
        return d.right > r[0] && d.top > r[1] && d.left < r[2] && d.bottom < r[3]
      },
      renderOrder: d => this.renderOrder || 0
    };

    const onDragStart = e => {
      const textRenderInfo = textMesh.textRenderInfo;
      if (textRenderInfo) {
        const textPos = textMesh.worldPositionToTextCoords(e.intersection.point, tempVec2);
        const caret = getCaretAtPoint(textRenderInfo, textPos.x, textPos.y);
        if (caret) {
          onSelectionChange(caret.charIndex, caret.charIndex);
          parent.addEventListener('drag', onDrag);
          parent.addEventListener('dragend', onDragEnd);
        }
        e.preventDefault();
      }
    };

    const onDrag = e => {
      const textRenderInfo = textMesh.textRenderInfo;
      if (e.ray && textRenderInfo) {
        // If it's hitting on the Text mesh, do an exact translation; otherwise raycast to an
        // infinite plane so dragging outside the text bounds will work
        let textPos;
        const ix = e.intersection;
        if (ix && ix.object === textMesh && ix.point) {
          textPos = textMesh.worldPositionToTextCoords(ix.point, tempVec2);
        } else {
          const ray = e.ray.clone().applyMatrix4(invertMatrix4$1(textMesh.matrixWorld, tempMat4$1));
          textPos = ray.intersectPlane(tempPlane$1.setComponents(0, 0, 1, 0), tempVec3);
        }
        if (textPos) {
          const caret = getCaretAtPoint(textRenderInfo, textPos.x, textPos.y);
          if (caret) {
            onSelectionChange(this.selectionStart, caret.charIndex);
          }
        }
        e.preventDefault();
      }
    };

    const onDragEnd = e => {
      parent.removeEventListener('drag', onDrag);
      parent.removeEventListener('dragend', onDragEnd);
    };

    parent.addEventListener('dragstart', onDragStart);
    parent.addEventListener('mousedown', onDragStart);

    this._cleanupEvents = () => {
      onDragEnd();
      parent.removeEventListener('dragstart', onDragStart);
      parent.removeEventListener('mousedown', onDragStart);
    };
  }

  afterUpdate() {
    this.data = getSelectionRects(this.textRenderInfo, this.selectionStart, this.selectionEnd);
    super.afterUpdate();
  }

  // normalize clipRect
  set clipRect(clipRect) {
    this._clipRect = (clipRect && Array.isArray(clipRect) && clipRect.length === 4) ? clipRect : noClip;
  }
  get clipRect() {
    return this._clipRect
  }

  destructor () {
    this._cleanupEvents();
    super.destructor();
  }
}

function clamp(val, min, max) {
  return Math.min(max, Math.max(min, val))
}

// Properties that will simply be forwarded to the TextMesh:
const TEXT_MESH_PROPS = [
  'text',
  'anchorX',
  'anchorY',
  'font',
  'fontSize',
  'letterSpacing',
  'lineHeight',
  'maxWidth',
  'overflowWrap',
  'direction',
  'textAlign',
  'textIndent',
  'whiteSpace',
  'material',
  'color',
  'colorRanges',
  'fillOpacity',
  'outlineOpacity',
  'outlineColor',
  'outlineWidth',
  'outlineOffsetX',
  'outlineOffsetY',
  'outlineBlur',
  'strokeColor',
  'strokeWidth',
  'strokeOpacity',
  'curveRadius',
  'depthOffset',
  'clipRect',
  'orientation',
  'glyphGeometryDetail',
  'sdfGlyphSize',
  'gpuAccelerateSDF',
  'debugSDF'
];


/**
 * Facade wrapper for a TextMesh. All configuration properties of TextMesh
 * are accepted and proxied through directly.
 */
class Text3DFacade extends Object3DFacade {
  constructor(parent) {
    const mesh = new Text();
    mesh.geometry.boundingSphere.version = 0;
    super(parent, mesh);

    /* TODO mirroring to DOM...?
    const el = this._domEl = document.createElement('section')
    el.style = 'position:fixed;left:-99px;overflow:hidden;width:10px;height:10px;'
    document.body.appendChild(el) //should insert into local element
    */

    this.selectable = false;
    this.selectionStart = this.selectionEnd = -1;
    this.onSyncStart = null;
    this.onSyncComplete = null;
    this.gpuAccelerateSDF = true;

    mesh.addEventListener('syncstart', e => {
      this.notifyWorld('text3DSyncStart');
      if (this.onSyncStart) {
        this.onSyncStart();
      }
    });
    mesh.addEventListener('synccomplete', e => {
      if (!this.isDestroying) {
        mesh.geometry.boundingSphere.version++;
        this.afterUpdate();
        this.notifyWorld('text3DSyncComplete');
        this.requestRender();
        if (this.onSyncComplete) {
          this.onSyncComplete();
        }
      }
    });
  }

  get textRenderInfo() {
    return this.threeObject.textRenderInfo
  }

  afterUpdate() {
    const textMesh = this.threeObject;
    TEXT_MESH_PROPS.forEach(prop => {
      textMesh[prop] = this[prop];
    });
    textMesh.sync();

    super.afterUpdate();

    if (this.text !== this._prevText) {
      // TODO mirror to DOM... this._domEl.textContent = this.text
      // Clear selection when text changes
      this.selectionStart = this.selectionEnd = -1;
      this._prevText = this.text;
    }

    this._updateSelection();
  }

  _updateSelection() {
    const {selectable, selectionStart, selectionEnd} = this;
    let selFacade = this._selectionFacade;
    if (selectable !== this._selectable) {
      this._selectable = selectable;
      if (selectable) {
        selFacade = this._selectionFacade = new SelectionManagerFacade(this, (start, end) => {
          this.selectionStart = start;
          this.selectionEnd = end;
          this._updateSelection();
          this.requestRender();
        });
      } else {
        if (selFacade) {
          selFacade.destructor();
          selFacade = this._selectionFacade = null;
        }
        this.selectionStart = this.selectionEnd = -1;
      }
    }
    if (selFacade) {
      selFacade.textRenderInfo = this.threeObject.textRenderInfo;
      selFacade.selectionStart = selectionStart;
      selFacade.selectionEnd = selectionEnd;
      selFacade.curveRadius = this.curveRadius || 0;
      selFacade.clipRect = this.clipRect;
      selFacade.renderOrder = this.renderOrder;
      selFacade.afterUpdate();
    }

    /* TODO update selection in DOM...
    const {selectionStart, selectionEnd} = this
    if (selectionStart !== this._prevSelStart || selectionEnd !== this._prevSelEnd) {
      this._prevSelStart = selectionStart
      this._prevSelEnd = selectionEnd
      const sel = document.getSelection()
      sel.removeAllRanges()
      if (this.selectable && selectionStart > -1 && selectionEnd > selectionStart) {
        const range = document.createRange()
        range.setStart(this._domEl.firstChild, this.selectionStart)
        range.setEnd(this._domEl.firstChild, this.selectionEnd)
        sel.addRange(range)
      }
    }
    */
  }

  destructor() {
    this.threeObject.dispose();
    //this._domEl.parentNode.removeChild(this._domEl)
    if (this._selectionFacade) {
      this._selectionFacade.destructor();
    }
    super.destructor();
  }
}

var Text3DFacade$1 = Text3DFacade;

const UNDEF = undefined;

// List of UI flex node properties that should be inherited by default:
const INHERITABLES = [
  'font',
  'fontSize',
  'textAlign',
  'textIndent',
  'lineHeight',
  'letterSpacing',
  'whiteSpace',
  'overflowWrap',
  'color'
];

function getInheritable(owner, prop, defaultValue) {
  let val;
  while (owner && (val = owner[prop]) === 'inherit') {
    owner = owner.parentFlexNode;
    val = UNDEF;
  }
  if (val === UNDEF) {
    val = defaultValue;
  }
  return val
}

function getComputedFontSize(owner, defaultFontSize) {
  let val;
  while (owner && typeof (val = owner.fontSize) === 'string') {
    if (val === 'inherit') {
      owner = owner.parentFlexNode;
      val = UNDEF;
    } else if (/%$/.test(val)) {
      const multiplier = parseFloat(val) / 100;
      val = getComputedFontSize(owner.parentFlexNode, defaultFontSize);
      if (val !== UNDEF) {
        val *= multiplier;
      }
      break
    } else {
      val = UNDEF;
      break
    }
  }
  if (val === UNDEF) {
    val = defaultFontSize;
  }
  return val
}

const flexLayoutTextProps = ['text', 'textIndent', 'font', 'fontSize', 'lineHeight', 'letterSpacing', 'whiteSpace', 'overflowWrap'];
const noop = () => {};

/**
 * Wrapper for Text3DFacade that lets it act as a flex layout node. This shouldn't be used
 * directly, but will be created as an implicit child by {@link UIBlock3DFacade} when
 * configured with a `text` property.
 */
class UITextNode3DFacadeBase extends Text3DFacade$1 {
  constructor (props) {
    super(props);

    // Override the sync method so we can have control over when it's called
    let mesh = this.threeObject;
    mesh._actuallySync = mesh.sync;
    mesh.sync = noop;
  }

  afterUpdate() {
    // Read computed layout
    const {
      offsetLeft,
      offsetTop,
      offsetWidth
    } = this;

    // Update position and size if flex layout has been completed
    const hasLayout = offsetWidth !== null;
    if (hasLayout) {
      let parent = this.parentFlexNode;
      this.x = offsetLeft - parent.scrollLeft;
      this.y = -(offsetTop - parent.scrollTop);

      // Update clip rect based on parent
      const clipRect = this.clipRect || (this.clipRect = [0, 0, 0, 0]);
      clipRect[0] = this.clipLeft;
      clipRect[1] = -this.clipBottom;
      clipRect[2] = this.clipRight;
      clipRect[3] = -this.clipTop;

      // If fully hidden by parent clipping rect, cull this object out of the scene
      this.threeObject.visible = !this.isFullyClipped;
    }

    // Check text props that could affect flex layout
    // TODO seems odd that this happens here rather than FlexLayoutNode
    const flexStyles = this._flexStyles;
    for (let i = 0, len = flexLayoutTextProps.length; i < len; i++) {
      const prop = flexLayoutTextProps[i];
      const val = prop === 'text' ? this.text : getInheritable(this, prop);
      if (val !== flexStyles[prop]) {
        flexStyles[prop] = this[prop];
        this.needsFlexLayout = true;
      }
    }

    super.afterUpdate();
  }

  onAfterFlexLayoutApplied() {
    this.threeObject.maxWidth = this.offsetWidth;
    this.threeObject._actuallySync(this._afterSync);
  }

  getBoundingSphere() {
    return null //parent UIBlock3DFacade will handle bounding sphere and raycasting
  }
}

// Extend as FlexNode
const UITextNode3DFacade = extendAsFlexNode(UITextNode3DFacadeBase);

INHERITABLES.forEach(prop => {
  UITextNode3DFacade.prototype[prop] = 'inherit';
});

// Redefine the maxWidth property so it's not treated as a setter that affects flexbox layout
Object.defineProperty(UITextNode3DFacade.prototype, 'maxWidth', {
  value: Infinity,
  enumerable: true,
  writable: true
});

// language=GLSL
const VERTEX_DEFS = `
uniform vec2 uTroikaBlockSize;
uniform vec4 uTroikaClipRect;
varying vec2 vTroikaPosInBlock;
`;

// language=GLSL prefix="void main() {" suffix="}"
const VERTEX_TRANSFORM = `
vec2 xy = position.xy * uTroikaBlockSize;
xy.y *= -1.0;
xy = clamp(xy, uTroikaClipRect.xy, uTroikaClipRect.zw);
vTroikaPosInBlock = xy;
xy.y *= -1.0;
position.xy = xy;
`;

// language=GLSL
const FRAGMENT_DEFS = `
uniform vec2 uTroikaBlockSize;
uniform vec4 uTroikaCornerRadii;
uniform vec4 uTroikaBorderWidth;
varying vec2 vTroikaPosInBlock;
const vec4 NO_BORDER = vec4(0.,0.,0.,0.);

float troikaEllipseRadiusAtAngle(in float angle, in float rx, in float ry) {
  if (rx == ry) {return rx;}
  float _cos = cos(angle);
  float _sin = sin(angle);
  return 1.0 / sqrt((_cos*_cos)/(rx*rx) + (_sin*_sin)/(ry*ry));
}

void troikaGetCurveDists(
  in vec2 pos, in vec2 radCenter, in float outerR, in float xBorder, in float yBorder, 
  out float dOuter, out float dInner
) {
  vec2 adjPos = pos - radCenter;
  float angle = atan(adjPos.y, adjPos.x);
  dOuter = troikaEllipseRadiusAtAngle(angle, outerR, outerR) - length(adjPos);
  dInner = uTroikaBorderWidth == NO_BORDER ? dInner : 
    troikaEllipseRadiusAtAngle(angle, max(0.0, outerR - xBorder), max(0.0, outerR - yBorder)) - length(adjPos);
}

float troikaGetAlphaMultiplier() {
  // Short aliases
  vec2 dim = uTroikaBlockSize;
  vec4 rad = uTroikaCornerRadii;
  vec4 bdr = uTroikaBorderWidth;
  vec2 pos = vTroikaPosInBlock;

  float dOuter;
  float dInner;
  bool isOnCurve = true;
  bool isBorder = uTroikaBorderWidth != NO_BORDER;

  // Top left
  if (pos.x < rad[0] && pos.y < rad[0]) {
    troikaGetCurveDists(pos, vec2(rad[0], rad[0]), rad[0], bdr[3], bdr[0], dOuter, dInner);
  }
  // Top Right
  else if (pos.x > dim.x - rad[1] && pos.y < rad[1]) {
    troikaGetCurveDists(pos, vec2(dim.x - rad[1], rad[1]), rad[1], bdr[1], bdr[0], dOuter, dInner);
  }
  // Bottom Right
  else if (pos.x > dim.x - rad[2] && pos.y > dim.y - rad[2]) {
    troikaGetCurveDists(pos, vec2(dim.x - rad[2], dim.y - rad[2]), rad[2], bdr[1], bdr[2], dOuter, dInner);
  }
  // Bottom Left
  else if (pos.x < rad[3] && pos.y > dim.y - rad[3]) {
    troikaGetCurveDists(pos, vec2(rad[3], dim.y - rad[3]), rad[3], bdr[3], bdr[2], dOuter, dInner);
  }
  // Not on a curve, use closest side
  else {
    isOnCurve = false;
    dOuter = min(min(pos.x, pos.y), min(dim.x - pos.x, dim.y - pos.y));
    dInner = isBorder ? min(min(pos.x - bdr[3], pos.y - bdr[0]), min(dim.x - pos.x - bdr[1], dim.y - pos.y - bdr[2])) : dInner;
  }

  float alpha;
  #if defined(GL_OES_standard_derivatives) || __VERSION__ >= 300
    float aa = length(fwidth(pos)) * 0.5;
    alpha = isOnCurve ? smoothstep(-aa, aa, dOuter) : 1.0;
    alpha = isBorder ? min(alpha, (dOuter == dInner) ? 0.0 : smoothstep(aa, -aa, dInner)) : alpha;
    return alpha;
  #else
    alpha = step(0.0, dOuter);
    alpha = isBorder ? min(alpha, step(0.0, -dInner)) : alpha;
  #endif
  return alpha;
}
`;

// language=GLSL prefix="void main() {" suffix="}"
const FRAGMENT_COLOR_TRANSFORM = `
float troikaAlphaMult = troikaGetAlphaMultiplier();
if (troikaAlphaMult == 0.0) {
  discard;
} else {
  gl_FragColor.a *= troikaAlphaMult;
}
`;


function createUIBlockLayerDerivedMaterial(baseMaterial) {
  const material = createDerivedMaterial(baseMaterial, {
    defines: {
      TROIKA_UI_BLOCK: ''
    },
    extensions: {
      derivatives: true
    },
    uniforms: {
      uTroikaBlockSize: {value: new Vector2()},
      uTroikaClipRect: {value: new Vector4(0,0,0,0)},
      uTroikaCornerRadii: {value: new Vector4(0,0,0,0)},
      uTroikaBorderWidth: {value: new Vector4(0,0,0,0)}
    },
    vertexDefs: VERTEX_DEFS,
    vertexTransform: VERTEX_TRANSFORM,
    fragmentDefs: FRAGMENT_DEFS,
    fragmentColorTransform: FRAGMENT_COLOR_TRANSFORM
  });

  // WebGLShadowMap reverses the side of the shadow material by default, which fails
  // for planes, so here we force the `shadowSide` to always match the main side.
  Object.defineProperty(material, 'shadowSide', {
    get() {
      return this.side
    },
    set() {
      //no-op
    }
  });

  //force transparency - TODO is this reasonable?
  material.transparent = true;

  return material
}

const geometry$1 = new PlaneGeometry(1, 1).translate(0.5, -0.5, 0);
const defaultMaterial$1 = new MeshBasicMaterial({color: 0});
const emptyVec2 = Object.freeze(new Vector2());
const emptyVec4$1 = Object.freeze(new Vector4(0,0,0,0));

const shadowMaterialPropDefs = {
  // Create and update materials for shadows upon request:
  customDepthMaterial: {
    get() {
      return this.material.getDepthMaterial()
    }
  },
  customDistanceMaterial: {
    get() {
      return this.material.getDistanceMaterial()
    }
  }
};

const instanceMeshesByKey = new Map();

/**
 * A single layer in a UI Block's rendering, e.g. background or border. All layers honor
 * border radius, which is calculated shader-side for perfectly smooth curves at any scale,
 * with antialiasing.
 *
 * Layer meshes are rendered via GPU instancing when possible -- specifically when they share
 * the same Material instance, layering depth, and shadow behavior.
 *
 * You shouldn't have to use this directly; UIBlock3DFacade will create these as needed
 * based on background/border styles.
 */
class UIBlockLayer3DFacade extends Instanceable3DFacade {
  constructor(parent) {
    super(parent);

    this._colorObj = new Color();

    // Properties
    this.size = emptyVec2;
    this.borderRadius = emptyVec4$1;
    this.borderWidth = emptyVec4$1;
    this.color = 0;
    this.isBorder = false;
    this.material = defaultMaterial$1;
  }

  afterUpdate() {
    let {material, depthOffset, castShadow, receiveShadow, color, renderOrder} = this;
    if (!material) { material = defaultMaterial$1; }

    // Find or create the instanced mesh
    let meshKey = `${material.id}|${renderOrder}|${depthOffset}|${castShadow}|${receiveShadow}`;
    if (meshKey !== this._prevMeshKey) {
      let mesh = instanceMeshesByKey.get(meshKey);
      if (!mesh) {
        let derivedMaterial = createUIBlockLayerDerivedMaterial(material);
        derivedMaterial.polygonOffset = !!this.depthOffset;
        derivedMaterial.polygonOffsetFactor = derivedMaterial.polygonOffsetUnits = this.depthOffset || 0;
        // dispose the derived material when its base material is disposed:
        material.addEventListener('dispose', function onDispose() {
          material.removeEventListener('dispose', onDispose);
          derivedMaterial.dispose();
        });

        mesh = new Mesh(geometry$1, derivedMaterial);
        mesh._instanceKey = meshKey;
        mesh.castShadow = castShadow;
        mesh.receiveShadow = receiveShadow;
        mesh.renderOrder = renderOrder;
        Object.defineProperties(mesh, shadowMaterialPropDefs);
        instanceMeshesByKey.set(meshKey, mesh);
      }
      this.instancedThreeObject = mesh;
      this._prevMeshKey = meshKey;
    }

    // Set material uniform values
    this.setInstanceUniform('uTroikaBlockSize', this.size);
    this.setInstanceUniform('uTroikaCornerRadii', this.borderRadius);
    this.setInstanceUniform('uTroikaClipRect', this.clipRect);
    this.setInstanceUniform('uTroikaBorderWidth', this.isBorder ? this.borderWidth : emptyVec4$1);
    if (color !== this._lastColor) {
      this._lastColor = color;
      this.setInstanceUniform('diffuse', new Color(color));
    }

    super.afterUpdate();
  }

  getBoundingSphere() {
    return null //parent will handle bounding sphere and raycasting
  }
}

let barGeometry;


class ScrollbarBarFacade extends Object3DFacade {
  constructor(parent) {
    const mesh = new Mesh(
      barGeometry || (barGeometry =
        new CylinderGeometry(0.5, 0.5, 1, 8).translate(0, -0.5, 0)
      ),
      // TODO allow overriding material
      new MeshBasicMaterial({
        color: 0xffffff,
        transparent: true,
        opacity: 0
      })
    );
    super(parent, mesh);
    this.girth = 0;
    this.length = 0;
  }

  afterUpdate () {
    this.scaleX = this.scaleZ = this.girth;
    this.scaleY = this.length;
    this.rotateZ = this.horizontal ? Math.PI / 2 : 0;
    this.threeObject.material.opacity = this.opacity;
    super.afterUpdate();
  }
}

const targets = new WeakMap();

const opacityTransition = {
  opacity: {duration: 300}
};

class ScrollbarsFacade extends ParentFacade {
  constructor(parent) {
    super(parent);
    this._onOver = e => {
      this.hovering = true;
      this.afterUpdate();
    };
    this._onOut = e => {
      this.hovering = false;
      this.afterUpdate();
    };
  }

  set target(target) {
    const oldTarget = targets.get(this);
    if (target !== oldTarget) {
      if (oldTarget) {
        oldTarget.removeEventListener('mouseover', this._onOver);
        oldTarget.removeEventListener('mouseout', this._onOut);
      }
      if (target) {
        target.addEventListener('mouseover', this._onOver);
        target.addEventListener('mouseout', this._onOut);
      }
      targets.set(this, target);
    }
  }
  get target() {
    return targets.get(this)
  }

  describeChildren() {
    const {target} = this;
    const children = this._childArr || (this._childArr = []);
    children.length = 0;
    if (target) {
      const {
        offsetWidth,
        offsetHeight,
        scrollHeight,
        scrollWidth,
        clientWidth,
        clientHeight
      } = target;
      const fontSize = target.getComputedFontSize();

      if (scrollWidth > clientWidth) {
        const hScrollbar = this._hDef || (this._hDef = {
          key: 'h',
          facade: ScrollbarBarFacade,
          horizontal: true,
          transition: opacityTransition
        });
        hScrollbar.girth = Math.min( fontSize / 4, offsetHeight / 10);
        hScrollbar.length = Math.max(clientWidth * clientWidth / scrollWidth, fontSize);
        hScrollbar.x = target.clientLeft + (clientWidth - hScrollbar.length) * (target.scrollLeft / (scrollWidth - clientWidth));
        hScrollbar.y = -offsetHeight;
        hScrollbar.opacity = this.hovering ? 0.5 : 0;
        hScrollbar.renderOrder = this.renderOrder;
        children.push(hScrollbar);
      }
      if (scrollHeight > clientHeight) {
        const vScrollbar = this._vDef || (this._vDef = {
          key: 'v',
          facade: ScrollbarBarFacade,
          transition: opacityTransition
        });
        vScrollbar.girth = Math.min( fontSize / 4, offsetWidth / 10);
        vScrollbar.length = Math.max(clientHeight * clientHeight / scrollHeight, fontSize);
        vScrollbar.x = offsetWidth;
        vScrollbar.y = -(target.clientTop + (clientHeight - vScrollbar.length) * (target.scrollTop / (scrollHeight - clientHeight)));
        vScrollbar.opacity = this.hovering ? 0.5 : 0;
        vScrollbar.renderOrder = this.renderOrder;
        children.push(vScrollbar);
      }
    }
    return children
  }

  destructor () {
    this.target = null;
    super.destructor();
  }
}

const raycastMesh = new Mesh(new PlaneGeometry(1, 1).translate(0.5, -0.5, 0));
const tempMat4 = new Matrix4();
const tempVec4 = new Vector4(0,0,0,0);
const emptyVec4 = Object.freeze(new Vector4(0,0,0,0));
const tempPlane = new Plane();
const DEFAULT_FONT_SIZE = 16;
const DEFAULT_LINE_HEIGHT = 'normal';

const groupVisiblePropDef = {
  get() {
    return !this._priv_hidden && !this.$facade.isFullyClipped
  },
  set(value) {
    this._priv_hidden = !value;
  }
};

/**
 * Represents a single block UI element, essentially just a 2D rectangular block that
 * can contain text, be styled with background/border, and participate in flexbox layout.
 * Its behavior and styling is very much like an HTML element using flexbox.
 */
class UIBlock3DFacadeBase extends Group3DFacade {
  constructor(parent) {
    super(parent);

    // If fully hidden by parent clipping rect, cull the whole Group out of the scene
    Object.defineProperty(this.threeObject, 'visible', groupVisiblePropDef);

    // Anonymous container for bg/border/scrollbar child objects; these live separate
    // from the main `children` tree
    this.layers = new Group3DFacade(this);
    this.layers.children = [null, null, null];

    // Shared objects for passing down to layers - treated as immutable
    this._sizeVec2 = Object.freeze(new Vector2());
    this._clipRectVec4 = emptyVec4;
    this._borderWidthVec4 = emptyVec4;
    this._borderRadiiVec4 = emptyVec4

    ;(this._geomBoundingSphere = new Sphere()).version = 0;
    this._wasFullyClipped = true;
  }

  /**
   * @override When fully clipped out of view, skip updating children entirely. We do this by
   * overriding `updateChildren` instead of using the `shouldUpdateChildren` hook, because the
   * latter would still traverse the child tree to sync matrices, which we don't need here.
   * TODO this doesn't work so well when descendants are absolutely positioned or overflow outside our bounds
   */
  updateChildren(children) {
    if (!this.isFullyClipped || !this._wasFullyClipped) {
      super.updateChildren(children);
    }
  }

  updateMatrices() {
    super.updateMatrices();
    this.layers.traverse(updateMatrices);
  }

  afterUpdate() {
    let {
      layers,
      backgroundColor,
      backgroundMaterial,
      borderWidth,
      borderColor,
      borderMaterial,
      text,
      offsetLeft,
      offsetTop,
      offsetWidth,
      offsetHeight,
      parentFlexNode,
      flexNodeDepth,
      isFullyClipped,
      _wasFullyClipped,
      _borderWidthVec4,
      _clipRectVec4,
      _sizeVec2
    } = this;
    const hasLayout = offsetWidth !== null;
    const hasNonZeroSize = !!(offsetWidth && offsetHeight);
    const hasBg = hasNonZeroSize && !isFullyClipped && (backgroundColor != null || backgroundMaterial != null);
    const hasBorder = hasNonZeroSize && !isFullyClipped && (borderColor != null || borderMaterial != null) && Math.max(...borderWidth) > 0;
    const canScroll = hasNonZeroSize && (this.overflow === 'scroll' || this.overflow === 'auto') && (
      this.scrollHeight > this.clientHeight || this.scrollWidth > this.clientWidth
    );

    // Update the block's element and size from flexbox computed values
    if (hasLayout) {
      if (parentFlexNode) {
        const isAbsPos = this.position === 'absolute';
        this.x = offsetLeft - (isAbsPos ? 0 : parentFlexNode.scrollLeft);
        this.y = -(offsetTop - (isAbsPos ? 0 : parentFlexNode.scrollTop));
      }
      if (offsetWidth !== _sizeVec2.x || offsetHeight !== _sizeVec2.y) {
        _sizeVec2 = this._sizeVec2 = Object.freeze(new Vector2(offsetWidth, offsetHeight));

        // Update pre-worldmatrix bounding sphere
        const sphere = this._geomBoundingSphere;
        sphere.radius = Math.sqrt(offsetWidth * offsetWidth / 4 + offsetHeight * offsetHeight / 4);
        sphere.center.set(offsetWidth / 2, -offsetHeight / 2, 0);
        sphere.version++;
      }
    }

    if (!isFullyClipped || !_wasFullyClipped) {
      // Update shared vector objects for the sublayers
      const radii = (hasBg || hasBorder) ? this._normalizeBorderRadius() : null;

      tempVec4.fromArray(borderWidth);
      if (!tempVec4.equals(_borderWidthVec4)) {
        _borderWidthVec4 = this._borderWidthVec4 = Object.freeze(tempVec4.clone());
      }
      tempVec4.set(
        Math.max(this.clipLeft, 0),
        Math.max(this.clipTop, 0),
        Math.min(this.clipRight, offsetWidth),
        Math.min(this.clipBottom, offsetHeight)
      );
      if (!tempVec4.equals(_clipRectVec4)) {
        _clipRectVec4 = this._clipRectVec4 = Object.freeze(tempVec4.clone());
      }

      // Update rendering layers...
      let bgLayer = null;
      if (hasBg) {
        bgLayer = this._bgLayerDef || (this._bgLayerDef = {
          key: 'bg',
          facade: UIBlockLayer3DFacade
        });
        bgLayer.size = _sizeVec2;
        bgLayer.color = backgroundColor;
        bgLayer.borderRadius = radii;
        bgLayer.material = backgroundMaterial;
        bgLayer.clipRect = _clipRectVec4;
        bgLayer.depthOffset = -flexNodeDepth;
        bgLayer.renderOrder = flexNodeDepth; //TODO how can we make this play with the rest of the scene?
        bgLayer.castShadow = this.castShadow;
        bgLayer.receiveShadow = this.receiveShadow;
      }
      layers.children[0] = bgLayer;

      let borderLayer = null;
      if (hasBorder) {
        borderLayer = this._borderLayerDef || (this._borderLayerDef = {
          key: 'border',
          facade: UIBlockLayer3DFacade,
          isBorder: true
        });
        borderLayer.size = _sizeVec2;
        borderLayer.color = borderColor;
        borderLayer.borderWidth = _borderWidthVec4;
        borderLayer.borderRadius = radii;
        borderLayer.material = borderMaterial;
        borderLayer.clipRect = _clipRectVec4;
        borderLayer.depthOffset = -flexNodeDepth - 1;
        borderLayer.renderOrder = flexNodeDepth + 1; //TODO how can we make this play with the rest of the scene?
        borderLayer.castShadow = this.castShadow;
        borderLayer.receiveShadow = this.receiveShadow;
      }
      layers.children[1] = borderLayer;

      // Scrollbars if scrollable:
      let scrollbarsLayer = null;
      if (canScroll) {
        scrollbarsLayer = this._scrollbarsDef || (this._scrollbarsDef = {
          key: 'sb',
          facade: ScrollbarsFacade,
          target: this
        });
        scrollbarsLayer.renderOrder = flexNodeDepth + 2; //TODO how can we make this play with the rest of the scene?
      }
      layers.children[2] = scrollbarsLayer;

      // Allow text to be specified as a single string child
      if (!text && isTextNodeChild(this.children)) {
        text = '' + this.children;
      }
      // Update text child...
      if (text) {
        const textChild = this._textChildDef || (this._textChildDef = {
          key: 'text',
          facade: UITextNode3DFacade
        });
        textChild.text = text;
        textChild.font = getInheritable(this, 'font');
        textChild.fontSize = this.getComputedFontSize();
        textChild.textAlign = getInheritable(this, 'textAlign');
        textChild.textIndent = getInheritable(this, 'textIndent');
        textChild.lineHeight = getInheritable(this, 'lineHeight', DEFAULT_LINE_HEIGHT);
        textChild.letterSpacing = getInheritable(this, 'letterSpacing', 0);
        textChild.whiteSpace = getInheritable(this, 'whiteSpace');
        textChild.overflowWrap = getInheritable(this, 'overflowWrap');
        textChild.color = getInheritable(this, 'color');
        textChild.colorRanges = this.colorRanges;
        textChild.outlineWidth = this.textOutlineWidth || 0;
        textChild.outlineColor = this.textOutlineColor;
        textChild.outlineOpacity = this.textOutlineOpacity;
        textChild.outlineBlur = this.textOutlineBlur || 0;
        textChild.outlineOffsetX = this.textOutlineOffsetX || 0;
        textChild.outlineOffsetY = this.textOutlineOffsetY || 0;
        textChild.strokeWidth = this.textStrokeWidth || 0;
        textChild.strokeColor = this.textStrokeColor;
        textChild.strokeOpacity = this.textStrokeOpacity;
        textChild.fillOpacity = this.textFillOpacity;
        textChild.material = this.textMaterial;
        textChild.depthOffset = -flexNodeDepth - 1;
        textChild.renderOrder = flexNodeDepth + 1;
        textChild.castShadow = this.castShadow;
        textChild.receiveShadow = this.receiveShadow;
        this._actualChildren = textChild; //NOTE: text content will clobber any other defined children
      } else {
        // Convert any children specified as plain strings to nested text blocks; handy for JSX style
        let children = this.children;
        if (Array.isArray(children)) {
          for (let i = 0, len = children.length; i < len; i++) {
            if (isTextNodeChild(children[i])) {
              children = children.slice();
              for (; i < len; i++) { //continue from here
                if (isTextNodeChild(children[i])) {
                  children[i] = {
                    facade: UIBlock3DFacade,
                    text: '' + children[i],
                    textMaterial: this.textMaterial
                  };
                }
              }
              break
            }
          }
        }
        this._actualChildren = children;
      }
    }

    // Add mousewheel and drag listeners if scrollable
    if (canScroll !== this._couldScroll) {
      this._couldScroll = canScroll;
      this[`${canScroll ? 'add' : 'remove'}EventListener`]('wheel', wheelHandler);
      this[`${canScroll ? 'add' : 'remove'}EventListener`]('dragstart', dragHandler);
      this[`${canScroll ? 'add' : 'remove'}EventListener`]('drag', dragHandler);
    }

    super.afterUpdate();
    if (!isFullyClipped || !_wasFullyClipped) {
      layers.afterUpdate();
    }
    this._wasFullyClipped = isFullyClipped;
  }

  describeChildren () {
    return this._actualChildren
  }

  getComputedFontSize() {
    return getComputedFontSize(this, DEFAULT_FONT_SIZE)
  }

  _normalizeBorderRadius() {
    let {
      borderRadius:input,
      offsetWidth=0,
      offsetHeight=0,
      _borderRadiiVec4:prevVec4
    } = this;

    // Normalize to four corner values
    let tl, tr, br, bl;
    if (Array.isArray(input)) {
      const len = input.length;
      tl = input[0] || 0;
      tr = (len > 1 ? input[1] : input[0]) || 0;
      br = (len > 2 ? input[2] : input[0]) || 0;
      bl = (len > 3 ? input[3] : len > 1 ? input[1] : input[0]) || 0;
    } else {
      tl = tr = br = bl = input || 0;
    }

    if (tl !== 0 || tr !== 0 || br !== 0 || bl !== 0) { //avoid work for common no-radius case
      // Resolve percentages
      const minDimension = Math.min(offsetWidth, offsetHeight);
      if (typeof tl === 'string' && /%$/.test(tl)) {
        tl = parseInt(tl, 10) / 100 * minDimension;
      }
      if (typeof tr === 'string' && /%$/.test(tr)) {
        tr = parseInt(tr, 10) / 100 * minDimension;
      }
      if (typeof bl === 'string' && /%$/.test(bl)) {
        bl = parseInt(bl, 10) / 100 * minDimension;
      }
      if (typeof br === 'string' && /%$/.test(br)) {
        br = parseInt(br, 10) / 100 * minDimension;
      }

      // If any radii overlap based on the block's current size, reduce them all by the same ratio, ala CSS3.
      let radiiAdjRatio = Math.min(
        offsetWidth / (tl + tr),
        offsetHeight / (tr + br),
        offsetWidth / (br + bl),
        offsetHeight / (bl + tl)
      );
      if (radiiAdjRatio < 1) {
        tl *= radiiAdjRatio;
        tr *= radiiAdjRatio;
        bl *= radiiAdjRatio;
        br *= radiiAdjRatio;
      }
    }

    // Update the Vector4 if anything changed
    tempVec4.set(tl, tr, br, bl);
    if (!tempVec4.equals(prevVec4)) {
      prevVec4 = this._borderRadiiVec4 = Object.freeze(tempVec4.clone());
    }
    return prevVec4
  }

  /**
   * @override Use our private boundingSphere which we keep updated as we get new
   * layout metrics.
   */
  _getGeometryBoundingSphere() {
    return this._geomBoundingSphere.radius && !this.isFullyClipped ? this._geomBoundingSphere : null
  }

  /**
   * @override Custom raycaster to test against the layout block
   */
  raycast(raycaster) {
    const {offsetWidth, offsetHeight, clipTop, clipRight, clipBottom, clipLeft} = this;
    let hits = null;
    if (offsetWidth && offsetHeight) {
      raycastMesh.matrixWorld.multiplyMatrices(
        this.threeObject.matrixWorld,
        tempMat4.makeScale(offsetWidth, offsetHeight, 1)
      );
      hits = this._raycastObject(raycastMesh, raycaster);
      if (hits) {
        // Filter out hits that occurred on clipped areas
        hits = hits.filter(hit => {
          const x = hit.uv.x * offsetWidth;
          const y = (1 - hit.uv.y) * offsetHeight;
          return x > clipLeft && x < clipRight && y > clipTop && y < clipBottom
        });

        // Add a distance bias (used as secondary sort for equidistant intersections) to prevent
        // container blocks from intercepting pointer events for their children. Also apply a
        // slight rounding prevent floating point precision irregularities from reporting different
        // distances for coplanar blocks.
        hits.forEach(hit => {
          hit.distance = parseFloat(hit.distance.toFixed(12));
          hit.distanceBias = -this.flexNodeDepth;
        });
      }
    }
    return hits && hits.length ? hits : null
  }


  destructor() {
    this.layers.destructor();
    super.destructor();
  }
}

// Extend as FlexNode
const UIBlock3DFacade = extendAsFlexNode(UIBlock3DFacadeBase);

INHERITABLES.forEach(prop => {
  UIBlock3DFacade.prototype[prop] = 'inherit';
});



function wheelHandler(e) {
  if (!e._didScroll) {
    const facade = e.currentTarget;
    let {deltaX, deltaY, deltaMode} = e.nativeEvent;
    let deltaMultiplier;
    if (deltaMode === 0x01) { //line mode
      deltaMultiplier = getComputedFontSize(facade, DEFAULT_FONT_SIZE) *
        getInheritable(facade, 'lineHeight', 1.2); //Note: fixed default since we can't resolve 'normal' here
    } else { //pixel mode
      //TODO can we more accurately scale to visual expectation?
      deltaMultiplier = getComputedFontSize(facade, DEFAULT_FONT_SIZE) / 12;
    }
    deltaX *= deltaMultiplier;
    deltaY *= deltaMultiplier;

    const scrollLeft = Math.max(0, Math.min(
      facade.scrollWidth - facade.clientWidth,
      facade.scrollLeft + deltaX
    ));
    const scrollTop = Math.max(0, Math.min(
      facade.scrollHeight - facade.clientHeight,
      facade.scrollTop + deltaY
    ));

    // Only scroll if the major scroll direction would actually result in a scroll change
    const abs = Math.abs;
    if (
      (scrollLeft !== facade.scrollLeft && abs(deltaX) > abs(deltaY)) ||
      (scrollTop !== facade.scrollTop && abs(deltaY) > abs(deltaX))
    ) {
      facade.scrollLeft = scrollLeft;
      facade.scrollTop = scrollTop;
      facade.afterUpdate();
      facade.requestRender();
      e._didScroll = true;
    }
    e.preventDefault();
  }
}

function dragHandler(e) {
  if (!e._didScroll && !e.defaultPrevented) {
    const facade = e.currentTarget;
    const ray = e.ray.clone().applyMatrix4(invertMatrix4$1(facade.threeObject.matrixWorld, tempMat4));
    const localPos = ray.intersectPlane(tempPlane.setComponents(0, 0, 1, 0), new Vector3());
    const prevPos = facade._prevDragPos;
    if (localPos && prevPos && e.type === 'drag') {
      const deltaX = localPos.x - prevPos.x;
      const deltaY = localPos.y - prevPos.y;
      if (deltaX || deltaY) {
        const scrollLeft = Math.max(0, Math.min(
          facade.scrollWidth - facade.clientWidth,
          facade.scrollLeft + deltaX
        ));
        const scrollTop = Math.max(0, Math.min(
          facade.scrollHeight - facade.clientHeight,
          facade.scrollTop + deltaY
        ));
        if (scrollLeft !== facade.scrollLeft || scrollTop !== facade.scrollTop) {
          facade.scrollLeft = scrollLeft;
          facade.scrollTop = scrollTop;
          facade.afterUpdate();
          facade.requestRender();
          e._didScroll = true;
        }
      }
    }
    facade._prevDragPos = localPos;
  }
}


function isTextNodeChild(child) {
  return typeof child === 'string' || typeof child === 'number'
}

function updateMatrices(obj) {
  if (obj.updateMatrices) {
    obj.updateMatrices();
  }
}

const geometry = new PlaneGeometry(1, 1).translate(0.5, -0.5, 0);
const defaultMaterial = new MeshBasicMaterial();
const loader = new TextureLoader();

class UIImage3DFacade extends Object3DFacade {
  constructor(parent, texture) {
    const mesh = new Mesh(geometry, defaultMaterial.clone());
    mesh.visible = false; //hidden until image is ready
    super(parent, mesh);
  }

  afterUpdate() {
    const {offsetLeft, offsetTop, offsetWidth, offsetHeight, src, threeObject:mesh} = this;
    const material = mesh.material;
    const hasLayout = !!(offsetWidth && offsetHeight);
    if (hasLayout) {
      this.x = offsetLeft;
      this.y = -offsetTop;
      this.scaleX = offsetWidth;
      this.scaleY = offsetHeight;

      const depth = this.flexNodeDepth;
      material.polygonOffset = !!depth;
      material.polygonOffsetFactor = material.polygonOffsetUnits = -depth || 0;
      mesh.renderOrder = depth;
    }

    if (src !== this._lastSrc) {
      loader.load(src, texture => {
        if (material.map) {
          material.map.dispose();
        }
        material.map = texture;
        this.aspectRatio = texture.image.width / texture.image.height;
        this.afterUpdate();
        this.requestRender();
      });
      this._lastSrc = src;
    }

    mesh.visible = !!(hasLayout && material.map && material.map.image.complete);

    super.afterUpdate();
  }

  destructor() {
    const texture = this.threeObject.material.map;
    if (texture) {
      texture.dispose();
    }
    super.destructor();
  }
}

var UIImage3DFacade$1 = extendAsFlexNode(UIImage3DFacade);

export { UIBlock3DFacade, UIImage3DFacade$1 as UIImage3DFacade, extendAsFlexNode };
